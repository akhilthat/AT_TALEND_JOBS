
package at_talend_jobs.tteallcl1_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.DataQuality;
import routines.Relational;
import routines.DataQualityDependencies;
import routines.Mathematical;
import routines.SQLike;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.DQTechnical;
import routines.StringHandling;
import routines.DataMasking;
import routines.TalendDate;
import routines.DqStringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: TTEALLCL1 Purpose: TTEALLCL1<br>
 * Description: TTEALLCL1 <br>
 * @author thati, akhil
 * @version 8.0.1.20230418_1502-patch
 * @status 
 */
public class TTEALLCL1 implements TalendJob {
	static {System.setProperty("TalendJob.log", "TTEALLCL1.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(TTEALLCL1.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(jda_host_name != null){
				
					this.setProperty("jda_host_name", jda_host_name.toString());
				
			}
			
			if(jda_mm_lib != null){
				
					this.setProperty("jda_mm_lib", jda_mm_lib.toString());
				
			}
			
			if(jda_user_name != null){
				
					this.setProperty("jda_user_name", jda_user_name.toString());
				
			}
			
			if(jda_password != null){
				
					this.setProperty("jda_password", jda_password.toString());
				
			}
			
			if(SF_account != null){
				
					this.setProperty("SF_account", SF_account.toString());
				
			}
			
			if(SF_prod_database != null){
				
					this.setProperty("SF_prod_database", SF_prod_database.toString());
				
			}
			
			if(SF_password != null){
				
					this.setProperty("SF_password", SF_password.toString());
				
			}
			
			if(SF_fin_schema != null){
				
					this.setProperty("SF_fin_schema", SF_fin_schema.toString());
				
			}
			
			if(SF_user_id != null){
				
					this.setProperty("SF_user_id", SF_user_id.toString());
				
			}
			
			if(SF_warehouse != null){
				
					this.setProperty("SF_warehouse", SF_warehouse.toString());
				
			}
			
			if(sql_server_database != null){
				
					this.setProperty("sql_server_database", sql_server_database.toString());
				
			}
			
			if(sql_server_host != null){
				
					this.setProperty("sql_server_host", sql_server_host.toString());
				
			}
			
			if(sql_server_password != null){
				
					this.setProperty("sql_server_password", sql_server_password.toString());
				
			}
			
			if(sql_server_port != null){
				
					this.setProperty("sql_server_port", sql_server_port.toString());
				
			}
			
			if(sql_server_schema != null){
				
					this.setProperty("sql_server_schema", sql_server_schema.toString());
				
			}
			
			if(sql_server_user_id != null){
				
					this.setProperty("sql_server_user_id", sql_server_user_id.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String jda_host_name;
public String getJda_host_name(){
	return this.jda_host_name;
}
public String jda_mm_lib;
public String getJda_mm_lib(){
	return this.jda_mm_lib;
}
public String jda_user_name;
public String getJda_user_name(){
	return this.jda_user_name;
}
public java.lang.String jda_password;
public java.lang.String getJda_password(){
	return this.jda_password;
}
public String SF_account;
public String getSF_account(){
	return this.SF_account;
}
public String SF_prod_database;
public String getSF_prod_database(){
	return this.SF_prod_database;
}
public java.lang.String SF_password;
public java.lang.String getSF_password(){
	return this.SF_password;
}
public String SF_fin_schema;
public String getSF_fin_schema(){
	return this.SF_fin_schema;
}
public String SF_user_id;
public String getSF_user_id(){
	return this.SF_user_id;
}
public String SF_warehouse;
public String getSF_warehouse(){
	return this.SF_warehouse;
}
public String sql_server_database;
public String getSql_server_database(){
	return this.sql_server_database;
}
public String sql_server_host;
public String getSql_server_host(){
	return this.sql_server_host;
}
public java.lang.String sql_server_password;
public java.lang.String getSql_server_password(){
	return this.sql_server_password;
}
public String sql_server_port;
public String getSql_server_port(){
	return this.sql_server_port;
}
public String sql_server_schema;
public String getSql_server_schema(){
	return this.sql_server_schema;
}
public String sql_server_user_id;
public String getSql_server_user_id(){
	return this.sql_server_user_id;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "TTEALLCL1";
	private final String projectName = "AT_TALEND_JOBS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private final JobStructureCatcherUtils talendJobLog = new JobStructureCatcherUtils(jobName, "_1UEisDbzEeqrH7xApcIqKg", "0.1");
private org.talend.job.audit.JobAuditLogger auditLogger_talendJobLog = null;

private RunStat runStat = new RunStat(talendJobLog, System.getProperty("audit.interval"));

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				TTEALLCL1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(TTEALLCL1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
		if(enableLogStash) {
			talendJobLog.addJobExceptionMessage(currentComponent, cLabel, null, e);
			talendJobLogProcess(globalMap);
		}
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tParallelize_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tParallelize_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendJobLog_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					talendJobLog_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tParallelize_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendJobLog_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tPrejob_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tPrejob_1", "tPrejob_1", "tPrejob");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBConnection_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		
		int tos_count_tDBConnection_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBConnection_1", "INVENTORY", "tSnowflakeConnection");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBConnection_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBConnection_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBConnection_1 = (String)(restRequest_tDBConnection_1 != null ? restRequest_tDBConnection_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBConnection_1 =
        new org.talend.components.snowflake.tsnowflakeconnection.TSnowflakeConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBConnection_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBConnection_1 = null;


org.talend.components.snowflake.SnowflakeConnectionProperties props_tDBConnection_1 =
        (org.talend.components.snowflake.SnowflakeConnectionProperties) def_tDBConnection_1.createRuntimeProperties();
 		                    props_tDBConnection_1.setValue("loginTimeout",
 		                    15);
 		                    
 		                    props_tDBConnection_1.setValue("account",
 		                    "vitaminshoppe");
 		                    
 		                    props_tDBConnection_1.setValue("regionID",
 		                    "us-east-1");
 		                    
 		                    props_tDBConnection_1.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBConnection_1.setValue("authenticationType",
 		                        org.talend.components.snowflake.tsnowflakeconnection.AuthenticationType.BASIC);
 		                    
 		                    props_tDBConnection_1.setValue("warehouse",
 		                    "VSI_WH_XS");
 		                    
 		                    props_tDBConnection_1.setValue("db",
 		                    "PROD_DATA");
 		                    
 		                    props_tDBConnection_1.setValue("schemaName",
 		                    "INVENTORY");
 		                    
 		                    props_tDBConnection_1.setValue("role",
 		                    "sysadmin");
 		                    
 		                    props_tDBConnection_1.setValue("jdbcParameters",
 		                    "");
 		                    
 		                    props_tDBConnection_1.setValue("autoCommit",
 		                    true);
 		                    
 		                    props_tDBConnection_1.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBConnection_1.userPassword.setValue("userId",
 		                    "Talend_user");
 		                    
 		                        props_tDBConnection_1.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:9WgKWTxQlptYoeRHkTRk3+ge/YrOIwfychdvFVNdOhzsB7kA"));
 		                        
 		                    props_tDBConnection_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBConnection_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBConnection_1 = props_tDBConnection_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBConnection_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBConnection_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBConnection_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBConnection_1.referencedComponent.setReference(referencedComponentProperties_tDBConnection_1);
        }
    }
globalMap.put("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBConnection_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBConnection_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBConnection_1_MAPPINGS_URL", mappings_url_tDBConnection_1);

org.talend.components.api.container.RuntimeContainer container_tDBConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBConnection_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBConnection_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBConnection_1 = null;
topology_tDBConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBConnection_1 = def_tDBConnection_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBConnection_1, topology_tDBConnection_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBConnection_1 = def_tDBConnection_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBConnection_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBConnection_1 = componentRuntime_tDBConnection_1.initialize(container_tDBConnection_1, props_tDBConnection_1);

if (initVr_tDBConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBConnection_1.getMessage());
}

if(componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBConnection_1;
	compDriverInitialization_tDBConnection_1.runAtDriver(container_tDBConnection_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBConnection_1 = null;
if(componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBConnection_1;
	if (doesNodeBelongToRequest_tDBConnection_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBConnection_1 = sourceOrSink_tDBConnection_1.validate(container_tDBConnection_1);
        if (vr_tDBConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBConnection_1.getMessage());
        }
	}
}

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		


 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		


 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		


 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		
// end of generic

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		
// finally of generic

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tPostjob_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tPostjob_1", "tPostjob_1", "tPostjob");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBClose_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBClose_1", "tDBClose_1", "tSnowflakeClose");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBClose_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBClose_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBClose_1 = (String)(restRequest_tDBClose_1 != null ? restRequest_tDBClose_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBClose_1 =
        new org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBClose_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBClose_1 = null;


org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseProperties props_tDBClose_1 =
        (org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseProperties) def_tDBClose_1.createRuntimeProperties();
 		                    props_tDBClose_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBClose_1.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBClose_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBClose_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBClose_1 = props_tDBClose_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBClose_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBClose_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBClose_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBClose_1.referencedComponent.setReference(referencedComponentProperties_tDBClose_1);
        }
    }
globalMap.put("tDBClose_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBClose_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBClose_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBClose_1_MAPPINGS_URL", mappings_url_tDBClose_1);

org.talend.components.api.container.RuntimeContainer container_tDBClose_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBClose_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBClose_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBClose_1 = null;
topology_tDBClose_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBClose_1 = def_tDBClose_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBClose_1, topology_tDBClose_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBClose_1 = def_tDBClose_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBClose_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBClose_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBClose_1 = componentRuntime_tDBClose_1.initialize(container_tDBClose_1, props_tDBClose_1);

if (initVr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBClose_1.getMessage());
}

if(componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBClose_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBClose_1;
	compDriverInitialization_tDBClose_1.runAtDriver(container_tDBClose_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBClose_1 = null;
if(componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBClose_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBClose_1;
	if (doesNodeBelongToRequest_tDBClose_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBClose_1 = sourceOrSink_tDBClose_1.validate(container_tDBClose_1);
        if (vr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBClose_1.getMessage());
        }
	}
}

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	


 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	


 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	


 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	
// end of generic

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	
// finally of generic

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tParallelize_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tParallelize_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tParallelize_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tParallelize_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tParallelize_1", false);
		start_Hash.put("tParallelize_1", System.currentTimeMillis());
		
	
	currentComponent="tParallelize_1";
	
	
		int tos_count_tParallelize_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tParallelize_1", "tParallelize_1", "tParallelize");
				talendJobLogProcess(globalMap);
			}
			

// call parallelized subjobs
	java.util.Map<String, Thread> mt_tParallelize_1 = new java.util.HashMap<String, Thread>();

// clear the temporary values in the globalMap
	globalMap.remove("tDBRow_4_SUBPROCESS_STATE");
	globalMap.remove("tDBRow_5_SUBPROCESS_STATE");
	globalMap.remove("tDBRow_2_SUBPROCESS_STATE");
	globalMap.remove("tDBRow_1_SUBPROCESS_STATE");
	globalMap.remove("tDBRow_3_SUBPROCESS_STATE");

				java.util.Map concurrentMap_temp_tParallelize_1;
				if(globalMap instanceof java.util.HashMap){
					concurrentMap_temp_tParallelize_1 = java.util.Collections.synchronizedMap(globalMap);
				}else{
					concurrentMap_temp_tParallelize_1 = globalMap;
				}
				final java.util.Map concurrentMap_tParallelize_1 = concurrentMap_temp_tParallelize_1;
			
		runningThreadCount.add(1);
		String name_tDBRow_4 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_4 = new Thread(new ThreadGroup(name_tDBRow_4), name_tDBRow_4){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_4' starts.");
					
					tDBRow_4Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_4' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_4_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_4_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_4.start();
		mt_tParallelize_1.put("tDBRow_4",thread_tDBRow_4);
		runningThreadCount.add(1);
		String name_tDBRow_5 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_5 = new Thread(new ThreadGroup(name_tDBRow_5), name_tDBRow_5){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_5' starts.");
					
					tDBRow_5Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_5' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_5_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_5_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_5.start();
		mt_tParallelize_1.put("tDBRow_5",thread_tDBRow_5);
		runningThreadCount.add(1);
		String name_tDBRow_2 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_2 = new Thread(new ThreadGroup(name_tDBRow_2), name_tDBRow_2){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_2' starts.");
					
					tDBRow_2Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_2' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_2_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_2_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_2.start();
		mt_tParallelize_1.put("tDBRow_2",thread_tDBRow_2);
		runningThreadCount.add(1);
		String name_tDBRow_1 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_1 = new Thread(new ThreadGroup(name_tDBRow_1), name_tDBRow_1){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_1' starts.");
					
					tDBRow_1Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_1' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_1_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_1_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_1.start();
		mt_tParallelize_1.put("tDBRow_1",thread_tDBRow_1);
		runningThreadCount.add(1);
		String name_tDBRow_3 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_3 = new Thread(new ThreadGroup(name_tDBRow_3), name_tDBRow_3){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_3' starts.");
					
					tDBRow_3Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_3' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_3_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_3_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_3.start();
		mt_tParallelize_1.put("tDBRow_3",thread_tDBRow_3);
	while(
(
		((globalMap.get("tDBRow_4_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_4_SUBPROCESS_STATE")==0))||
		((globalMap.get("tDBRow_5_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_5_SUBPROCESS_STATE")==0))||
		((globalMap.get("tDBRow_2_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_2_SUBPROCESS_STATE")==0))||
		((globalMap.get("tDBRow_1_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_1_SUBPROCESS_STATE")==0))||
		((globalMap.get("tDBRow_3_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_3_SUBPROCESS_STATE")==0))|| false) ) {
	Thread.sleep(100);
}


// call next subprocesses

 



/**
 * [tParallelize_1 begin ] stop
 */
	
	/**
	 * [tParallelize_1 main ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 


	tos_count_tParallelize_1++;

/**
 * [tParallelize_1 main ] stop
 */
	
	/**
	 * [tParallelize_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 



/**
 * [tParallelize_1 process_data_begin ] stop
 */
	
	/**
	 * [tParallelize_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 



/**
 * [tParallelize_1 process_data_end ] stop
 */
	
	/**
	 * [tParallelize_1 end ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 

ok_Hash.put("tParallelize_1", true);
end_Hash.put("tParallelize_1", System.currentTimeMillis());




/**
 * [tParallelize_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tParallelize_1 finally ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 



/**
 * [tParallelize_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tParallelize_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_4", false);
		start_Hash.put("tDBRow_4", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_4";
	
	
		int tos_count_tDBRow_4 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_4", "tDBRow_4", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_4 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_4 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_4 = (String)(restRequest_tDBRow_4 != null ? restRequest_tDBRow_4.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_4 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_4 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_4 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_4 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_4.createRuntimeProperties();
 		                    props_tDBRow_4.setValue("query",
 		                    "\nDELETE from  SKU_DATE_FILE_VSSDTEPF\nWHERE LOAD_DATE = CURRENT_DATE() - 1\n\n");
 		                    
 		                    props_tDBRow_4.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_4.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_4.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_4_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_4_1_fisrt sst_tDBRow_4_1_fisrt = new SchemaSettingTool_tDBRow_4_1_fisrt();
 		                    
 		                    props_tDBRow_4.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_4_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_4_2_fisrt sst_tDBRow_4_2_fisrt = new SchemaSettingTool_tDBRow_4_2_fisrt();
 		                    
 		                    props_tDBRow_4.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_4.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_4.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_4.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_4.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_4.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_4.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_4.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_4.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_4.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_4.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_4.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_4.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_4.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_4_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_4_3_fisrt sst_tDBRow_4_3_fisrt = new SchemaSettingTool_tDBRow_4_3_fisrt();
 		                    
 		                    props_tDBRow_4.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_4.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_4 = props_tDBRow_4.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_4 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_4 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_4 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_4.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_4);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_4.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_4 = props_tDBRow_4.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_4 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_4 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_4 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_4.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_4);
        }
    }
globalMap.put("tDBRow_4_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_4);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_4= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_4_MAPPINGS_URL", mappings_url_tDBRow_4);

org.talend.components.api.container.RuntimeContainer container_tDBRow_4 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_4";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_4 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_4 = null;
topology_tDBRow_4 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_4 = def_tDBRow_4.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_4, topology_tDBRow_4);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_4 = def_tDBRow_4.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_4 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_4.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_4 = componentRuntime_tDBRow_4.initialize(container_tDBRow_4, props_tDBRow_4);

if (initVr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_4.getMessage());
}

if(componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_4;
	compDriverInitialization_tDBRow_4.runAtDriver(container_tDBRow_4);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_4 = null;
if(componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_4 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_4;
	if (doesNodeBelongToRequest_tDBRow_4) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_4 = sourceOrSink_tDBRow_4.validate(container_tDBRow_4);
        if (vr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_4.getMessage());
        }
	}
}

 



/**
 * [tDBRow_4 begin ] stop
 */
	
	/**
	 * [tDBRow_4 main ] start
	 */

	

	
	
	currentComponent="tDBRow_4";
	
	


 


	tos_count_tDBRow_4++;

/**
 * [tDBRow_4 main ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_4";
	
	


 



/**
 * [tDBRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";
	
	


 



/**
 * [tDBRow_4 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_4 end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";
	
	
// end of generic


resourceMap.put("finish_tDBRow_4", Boolean.TRUE);

 

ok_Hash.put("tDBRow_4", true);
end_Hash.put("tDBRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBRow_10Process(globalMap);



/**
 * [tDBRow_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_4 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_4";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_4")==null){
}
 



/**
 * [tDBRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_10");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_10", false);
		start_Hash.put("tDBRow_10", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_10";
	
	
		int tos_count_tDBRow_10 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_10", "tDBRow_6", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_10 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_10 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_10 = (String)(restRequest_tDBRow_10 != null ? restRequest_tDBRow_10.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_10 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_10 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_10 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_10 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_10.createRuntimeProperties();
 		                    props_tDBRow_10.setValue("query",
 		                    "\ncreate or replace TABLE VSSDTEPF (\n	DSKU NUMBER(9,0),\n	DCDTE NUMBER(6,0),\n	DFPDTE NUMBER(6,0),\n	DLPDTE NUMBER(6,0"
+"),\n	DWFPDT NUMBER(6,0),\n	DSFPDT NUMBER(6,0),\n	D1RDTE NUMBER(6,0),\n	D0RDTE NUMBER(6,0),\n	DDSDTE NUMBER(6,0),\n	DIADT"
+"E NUMBER(6,0),\n	DNRDTE NUMBER(6,0),\n	DPGDTE NUMBER(6,0),\n	DDLDTE NUMBER(6,0),\n	DFSDTE NUMBER(6,0),\n	DLSDTE NUMBER(6"
+",0),\n	D1SDTE NUMBER(6,0),\n	D2SDTE NUMBER(6,0),\n	DS1DTE NUMBER(6,0),\n	DS2DTE NUMBER(6,0),\n	DS3DTE NUMBER(6,0),\n	DS4"
+"DTE NUMBER(6,0),\n	LOAD_DATE DATE\n);\n\n");
 		                    
 		                    props_tDBRow_10.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_10.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_10.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_10_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_10_1_fisrt sst_tDBRow_10_1_fisrt = new SchemaSettingTool_tDBRow_10_1_fisrt();
 		                    
 		                    props_tDBRow_10.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_10_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_10_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_10_2_fisrt sst_tDBRow_10_2_fisrt = new SchemaSettingTool_tDBRow_10_2_fisrt();
 		                    
 		                    props_tDBRow_10.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_10_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_10.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_10.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_10.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_10.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_10.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_10.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_10.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_10.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_10.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_10.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_10.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_10.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_10.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_10_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_10_3_fisrt sst_tDBRow_10_3_fisrt = new SchemaSettingTool_tDBRow_10_3_fisrt();
 		                    
 		                    props_tDBRow_10.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_10_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_10.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_10 = props_tDBRow_10.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_10 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_10 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_10 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_10.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_10);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_10.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_10 = props_tDBRow_10.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_10 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_10 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_10 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_10.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_10);
        }
    }
globalMap.put("tDBRow_10_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_10);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_10= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_10_MAPPINGS_URL", mappings_url_tDBRow_10);

org.talend.components.api.container.RuntimeContainer container_tDBRow_10 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_10";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_10 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_10 = null;
topology_tDBRow_10 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_10 = def_tDBRow_10.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_10, topology_tDBRow_10);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_10 = def_tDBRow_10.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_10 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_10.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_10 = componentRuntime_tDBRow_10.initialize(container_tDBRow_10, props_tDBRow_10);

if (initVr_tDBRow_10.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_10.getMessage());
}

if(componentRuntime_tDBRow_10 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_10 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_10;
	compDriverInitialization_tDBRow_10.runAtDriver(container_tDBRow_10);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_10 = null;
if(componentRuntime_tDBRow_10 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_10 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_10;
	if (doesNodeBelongToRequest_tDBRow_10) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_10 = sourceOrSink_tDBRow_10.validate(container_tDBRow_10);
        if (vr_tDBRow_10.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_10.getMessage());
        }
	}
}

 



/**
 * [tDBRow_10 begin ] stop
 */
	
	/**
	 * [tDBRow_10 main ] start
	 */

	

	
	
	currentComponent="tDBRow_10";
	
	


 


	tos_count_tDBRow_10++;

/**
 * [tDBRow_10 main ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_10";
	
	


 



/**
 * [tDBRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";
	
	


 



/**
 * [tDBRow_10 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_10 end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";
	
	
// end of generic


resourceMap.put("finish_tDBRow_10", Boolean.TRUE);

 

ok_Hash.put("tDBRow_10", true);
end_Hash.put("tDBRow_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tDBInput_6Process(globalMap);



/**
 * [tDBRow_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_10 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_10";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_10")==null){
}
 



/**
 * [tDBRow_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public BigDecimal DSKU;

				public BigDecimal getDSKU () {
					return this.DSKU;
				}

				public Boolean DSKUIsNullable(){
				    return true;
				}
				public Boolean DSKUIsKey(){
				    return false;
				}
				public Integer DSKULength(){
				    return null;
				}
				public Integer DSKUPrecision(){
				    return null;
				}
				public String DSKUDefault(){
				
					return "";
				
				}
				public String DSKUComment(){
				
				    return "";
				
				}
				public String DSKUPattern(){
				
					return "";
				
				}
				public String DSKUOriginalDbColumnName(){
				
					return "DSKU";
				
				}

				
			    public BigDecimal DCDTE;

				public BigDecimal getDCDTE () {
					return this.DCDTE;
				}

				public Boolean DCDTEIsNullable(){
				    return true;
				}
				public Boolean DCDTEIsKey(){
				    return false;
				}
				public Integer DCDTELength(){
				    return null;
				}
				public Integer DCDTEPrecision(){
				    return null;
				}
				public String DCDTEDefault(){
				
					return "";
				
				}
				public String DCDTEComment(){
				
				    return "";
				
				}
				public String DCDTEPattern(){
				
					return "";
				
				}
				public String DCDTEOriginalDbColumnName(){
				
					return "DCDTE";
				
				}

				
			    public BigDecimal DFPDTE;

				public BigDecimal getDFPDTE () {
					return this.DFPDTE;
				}

				public Boolean DFPDTEIsNullable(){
				    return true;
				}
				public Boolean DFPDTEIsKey(){
				    return false;
				}
				public Integer DFPDTELength(){
				    return null;
				}
				public Integer DFPDTEPrecision(){
				    return null;
				}
				public String DFPDTEDefault(){
				
					return "";
				
				}
				public String DFPDTEComment(){
				
				    return "";
				
				}
				public String DFPDTEPattern(){
				
					return "";
				
				}
				public String DFPDTEOriginalDbColumnName(){
				
					return "DFPDTE";
				
				}

				
			    public BigDecimal DLPDTE;

				public BigDecimal getDLPDTE () {
					return this.DLPDTE;
				}

				public Boolean DLPDTEIsNullable(){
				    return true;
				}
				public Boolean DLPDTEIsKey(){
				    return false;
				}
				public Integer DLPDTELength(){
				    return null;
				}
				public Integer DLPDTEPrecision(){
				    return null;
				}
				public String DLPDTEDefault(){
				
					return "";
				
				}
				public String DLPDTEComment(){
				
				    return "";
				
				}
				public String DLPDTEPattern(){
				
					return "";
				
				}
				public String DLPDTEOriginalDbColumnName(){
				
					return "DLPDTE";
				
				}

				
			    public BigDecimal DWFPDT;

				public BigDecimal getDWFPDT () {
					return this.DWFPDT;
				}

				public Boolean DWFPDTIsNullable(){
				    return true;
				}
				public Boolean DWFPDTIsKey(){
				    return false;
				}
				public Integer DWFPDTLength(){
				    return null;
				}
				public Integer DWFPDTPrecision(){
				    return null;
				}
				public String DWFPDTDefault(){
				
					return "";
				
				}
				public String DWFPDTComment(){
				
				    return "";
				
				}
				public String DWFPDTPattern(){
				
					return "";
				
				}
				public String DWFPDTOriginalDbColumnName(){
				
					return "DWFPDT";
				
				}

				
			    public BigDecimal DSFPDT;

				public BigDecimal getDSFPDT () {
					return this.DSFPDT;
				}

				public Boolean DSFPDTIsNullable(){
				    return true;
				}
				public Boolean DSFPDTIsKey(){
				    return false;
				}
				public Integer DSFPDTLength(){
				    return null;
				}
				public Integer DSFPDTPrecision(){
				    return null;
				}
				public String DSFPDTDefault(){
				
					return "";
				
				}
				public String DSFPDTComment(){
				
				    return "";
				
				}
				public String DSFPDTPattern(){
				
					return "";
				
				}
				public String DSFPDTOriginalDbColumnName(){
				
					return "DSFPDT";
				
				}

				
			    public BigDecimal D1RDTE;

				public BigDecimal getD1RDTE () {
					return this.D1RDTE;
				}

				public Boolean D1RDTEIsNullable(){
				    return true;
				}
				public Boolean D1RDTEIsKey(){
				    return false;
				}
				public Integer D1RDTELength(){
				    return null;
				}
				public Integer D1RDTEPrecision(){
				    return null;
				}
				public String D1RDTEDefault(){
				
					return "";
				
				}
				public String D1RDTEComment(){
				
				    return "";
				
				}
				public String D1RDTEPattern(){
				
					return "";
				
				}
				public String D1RDTEOriginalDbColumnName(){
				
					return "D1RDTE";
				
				}

				
			    public BigDecimal D0RDTE;

				public BigDecimal getD0RDTE () {
					return this.D0RDTE;
				}

				public Boolean D0RDTEIsNullable(){
				    return true;
				}
				public Boolean D0RDTEIsKey(){
				    return false;
				}
				public Integer D0RDTELength(){
				    return null;
				}
				public Integer D0RDTEPrecision(){
				    return null;
				}
				public String D0RDTEDefault(){
				
					return "";
				
				}
				public String D0RDTEComment(){
				
				    return "";
				
				}
				public String D0RDTEPattern(){
				
					return "";
				
				}
				public String D0RDTEOriginalDbColumnName(){
				
					return "D0RDTE";
				
				}

				
			    public BigDecimal DDSDTE;

				public BigDecimal getDDSDTE () {
					return this.DDSDTE;
				}

				public Boolean DDSDTEIsNullable(){
				    return true;
				}
				public Boolean DDSDTEIsKey(){
				    return false;
				}
				public Integer DDSDTELength(){
				    return null;
				}
				public Integer DDSDTEPrecision(){
				    return null;
				}
				public String DDSDTEDefault(){
				
					return "";
				
				}
				public String DDSDTEComment(){
				
				    return "";
				
				}
				public String DDSDTEPattern(){
				
					return "";
				
				}
				public String DDSDTEOriginalDbColumnName(){
				
					return "DDSDTE";
				
				}

				
			    public BigDecimal DIADTE;

				public BigDecimal getDIADTE () {
					return this.DIADTE;
				}

				public Boolean DIADTEIsNullable(){
				    return true;
				}
				public Boolean DIADTEIsKey(){
				    return false;
				}
				public Integer DIADTELength(){
				    return null;
				}
				public Integer DIADTEPrecision(){
				    return null;
				}
				public String DIADTEDefault(){
				
					return "";
				
				}
				public String DIADTEComment(){
				
				    return "";
				
				}
				public String DIADTEPattern(){
				
					return "";
				
				}
				public String DIADTEOriginalDbColumnName(){
				
					return "DIADTE";
				
				}

				
			    public BigDecimal DNRDTE;

				public BigDecimal getDNRDTE () {
					return this.DNRDTE;
				}

				public Boolean DNRDTEIsNullable(){
				    return true;
				}
				public Boolean DNRDTEIsKey(){
				    return false;
				}
				public Integer DNRDTELength(){
				    return null;
				}
				public Integer DNRDTEPrecision(){
				    return null;
				}
				public String DNRDTEDefault(){
				
					return "";
				
				}
				public String DNRDTEComment(){
				
				    return "";
				
				}
				public String DNRDTEPattern(){
				
					return "";
				
				}
				public String DNRDTEOriginalDbColumnName(){
				
					return "DNRDTE";
				
				}

				
			    public BigDecimal DPGDTE;

				public BigDecimal getDPGDTE () {
					return this.DPGDTE;
				}

				public Boolean DPGDTEIsNullable(){
				    return true;
				}
				public Boolean DPGDTEIsKey(){
				    return false;
				}
				public Integer DPGDTELength(){
				    return null;
				}
				public Integer DPGDTEPrecision(){
				    return null;
				}
				public String DPGDTEDefault(){
				
					return "";
				
				}
				public String DPGDTEComment(){
				
				    return "";
				
				}
				public String DPGDTEPattern(){
				
					return "";
				
				}
				public String DPGDTEOriginalDbColumnName(){
				
					return "DPGDTE";
				
				}

				
			    public BigDecimal DDLDTE;

				public BigDecimal getDDLDTE () {
					return this.DDLDTE;
				}

				public Boolean DDLDTEIsNullable(){
				    return true;
				}
				public Boolean DDLDTEIsKey(){
				    return false;
				}
				public Integer DDLDTELength(){
				    return null;
				}
				public Integer DDLDTEPrecision(){
				    return null;
				}
				public String DDLDTEDefault(){
				
					return "";
				
				}
				public String DDLDTEComment(){
				
				    return "";
				
				}
				public String DDLDTEPattern(){
				
					return "";
				
				}
				public String DDLDTEOriginalDbColumnName(){
				
					return "DDLDTE";
				
				}

				
			    public BigDecimal DFSDTE;

				public BigDecimal getDFSDTE () {
					return this.DFSDTE;
				}

				public Boolean DFSDTEIsNullable(){
				    return true;
				}
				public Boolean DFSDTEIsKey(){
				    return false;
				}
				public Integer DFSDTELength(){
				    return null;
				}
				public Integer DFSDTEPrecision(){
				    return null;
				}
				public String DFSDTEDefault(){
				
					return "";
				
				}
				public String DFSDTEComment(){
				
				    return "";
				
				}
				public String DFSDTEPattern(){
				
					return "";
				
				}
				public String DFSDTEOriginalDbColumnName(){
				
					return "DFSDTE";
				
				}

				
			    public BigDecimal DLSDTE;

				public BigDecimal getDLSDTE () {
					return this.DLSDTE;
				}

				public Boolean DLSDTEIsNullable(){
				    return true;
				}
				public Boolean DLSDTEIsKey(){
				    return false;
				}
				public Integer DLSDTELength(){
				    return null;
				}
				public Integer DLSDTEPrecision(){
				    return null;
				}
				public String DLSDTEDefault(){
				
					return "";
				
				}
				public String DLSDTEComment(){
				
				    return "";
				
				}
				public String DLSDTEPattern(){
				
					return "";
				
				}
				public String DLSDTEOriginalDbColumnName(){
				
					return "DLSDTE";
				
				}

				
			    public BigDecimal D1SDTE;

				public BigDecimal getD1SDTE () {
					return this.D1SDTE;
				}

				public Boolean D1SDTEIsNullable(){
				    return true;
				}
				public Boolean D1SDTEIsKey(){
				    return false;
				}
				public Integer D1SDTELength(){
				    return null;
				}
				public Integer D1SDTEPrecision(){
				    return null;
				}
				public String D1SDTEDefault(){
				
					return "";
				
				}
				public String D1SDTEComment(){
				
				    return "";
				
				}
				public String D1SDTEPattern(){
				
					return "";
				
				}
				public String D1SDTEOriginalDbColumnName(){
				
					return "D1SDTE";
				
				}

				
			    public BigDecimal D2SDTE;

				public BigDecimal getD2SDTE () {
					return this.D2SDTE;
				}

				public Boolean D2SDTEIsNullable(){
				    return true;
				}
				public Boolean D2SDTEIsKey(){
				    return false;
				}
				public Integer D2SDTELength(){
				    return null;
				}
				public Integer D2SDTEPrecision(){
				    return null;
				}
				public String D2SDTEDefault(){
				
					return "";
				
				}
				public String D2SDTEComment(){
				
				    return "";
				
				}
				public String D2SDTEPattern(){
				
					return "";
				
				}
				public String D2SDTEOriginalDbColumnName(){
				
					return "D2SDTE";
				
				}

				
			    public BigDecimal DS1DTE;

				public BigDecimal getDS1DTE () {
					return this.DS1DTE;
				}

				public Boolean DS1DTEIsNullable(){
				    return true;
				}
				public Boolean DS1DTEIsKey(){
				    return false;
				}
				public Integer DS1DTELength(){
				    return null;
				}
				public Integer DS1DTEPrecision(){
				    return null;
				}
				public String DS1DTEDefault(){
				
					return "";
				
				}
				public String DS1DTEComment(){
				
				    return "";
				
				}
				public String DS1DTEPattern(){
				
					return "";
				
				}
				public String DS1DTEOriginalDbColumnName(){
				
					return "DS1DTE";
				
				}

				
			    public BigDecimal DS2DTE;

				public BigDecimal getDS2DTE () {
					return this.DS2DTE;
				}

				public Boolean DS2DTEIsNullable(){
				    return true;
				}
				public Boolean DS2DTEIsKey(){
				    return false;
				}
				public Integer DS2DTELength(){
				    return null;
				}
				public Integer DS2DTEPrecision(){
				    return null;
				}
				public String DS2DTEDefault(){
				
					return "";
				
				}
				public String DS2DTEComment(){
				
				    return "";
				
				}
				public String DS2DTEPattern(){
				
					return "";
				
				}
				public String DS2DTEOriginalDbColumnName(){
				
					return "DS2DTE";
				
				}

				
			    public BigDecimal DS3DTE;

				public BigDecimal getDS3DTE () {
					return this.DS3DTE;
				}

				public Boolean DS3DTEIsNullable(){
				    return true;
				}
				public Boolean DS3DTEIsKey(){
				    return false;
				}
				public Integer DS3DTELength(){
				    return null;
				}
				public Integer DS3DTEPrecision(){
				    return null;
				}
				public String DS3DTEDefault(){
				
					return "";
				
				}
				public String DS3DTEComment(){
				
				    return "";
				
				}
				public String DS3DTEPattern(){
				
					return "";
				
				}
				public String DS3DTEOriginalDbColumnName(){
				
					return "DS3DTE";
				
				}

				
			    public BigDecimal DS4DTE;

				public BigDecimal getDS4DTE () {
					return this.DS4DTE;
				}

				public Boolean DS4DTEIsNullable(){
				    return true;
				}
				public Boolean DS4DTEIsKey(){
				    return false;
				}
				public Integer DS4DTELength(){
				    return null;
				}
				public Integer DS4DTEPrecision(){
				    return null;
				}
				public String DS4DTEDefault(){
				
					return "";
				
				}
				public String DS4DTEComment(){
				
				    return "";
				
				}
				public String DS4DTEPattern(){
				
					return "";
				
				}
				public String DS4DTEOriginalDbColumnName(){
				
					return "DS4DTE";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.DSKU = (BigDecimal) dis.readObject();
					
						this.DCDTE = (BigDecimal) dis.readObject();
					
						this.DFPDTE = (BigDecimal) dis.readObject();
					
						this.DLPDTE = (BigDecimal) dis.readObject();
					
						this.DWFPDT = (BigDecimal) dis.readObject();
					
						this.DSFPDT = (BigDecimal) dis.readObject();
					
						this.D1RDTE = (BigDecimal) dis.readObject();
					
						this.D0RDTE = (BigDecimal) dis.readObject();
					
						this.DDSDTE = (BigDecimal) dis.readObject();
					
						this.DIADTE = (BigDecimal) dis.readObject();
					
						this.DNRDTE = (BigDecimal) dis.readObject();
					
						this.DPGDTE = (BigDecimal) dis.readObject();
					
						this.DDLDTE = (BigDecimal) dis.readObject();
					
						this.DFSDTE = (BigDecimal) dis.readObject();
					
						this.DLSDTE = (BigDecimal) dis.readObject();
					
						this.D1SDTE = (BigDecimal) dis.readObject();
					
						this.D2SDTE = (BigDecimal) dis.readObject();
					
						this.DS1DTE = (BigDecimal) dis.readObject();
					
						this.DS2DTE = (BigDecimal) dis.readObject();
					
						this.DS3DTE = (BigDecimal) dis.readObject();
					
						this.DS4DTE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.DSKU = (BigDecimal) dis.readObject();
					
						this.DCDTE = (BigDecimal) dis.readObject();
					
						this.DFPDTE = (BigDecimal) dis.readObject();
					
						this.DLPDTE = (BigDecimal) dis.readObject();
					
						this.DWFPDT = (BigDecimal) dis.readObject();
					
						this.DSFPDT = (BigDecimal) dis.readObject();
					
						this.D1RDTE = (BigDecimal) dis.readObject();
					
						this.D0RDTE = (BigDecimal) dis.readObject();
					
						this.DDSDTE = (BigDecimal) dis.readObject();
					
						this.DIADTE = (BigDecimal) dis.readObject();
					
						this.DNRDTE = (BigDecimal) dis.readObject();
					
						this.DPGDTE = (BigDecimal) dis.readObject();
					
						this.DDLDTE = (BigDecimal) dis.readObject();
					
						this.DFSDTE = (BigDecimal) dis.readObject();
					
						this.DLSDTE = (BigDecimal) dis.readObject();
					
						this.D1SDTE = (BigDecimal) dis.readObject();
					
						this.D2SDTE = (BigDecimal) dis.readObject();
					
						this.DS1DTE = (BigDecimal) dis.readObject();
					
						this.DS2DTE = (BigDecimal) dis.readObject();
					
						this.DS3DTE = (BigDecimal) dis.readObject();
					
						this.DS4DTE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DSKU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFPDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DLPDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DWFPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DSFPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D1RDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D0RDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DDSDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIADTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DNRDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DPGDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DDLDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFSDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DLSDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D1SDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D2SDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS1DTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS2DTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS3DTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS4DTE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DSKU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFPDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DLPDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DWFPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DSFPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D1RDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D0RDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DDSDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIADTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DNRDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DPGDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DDLDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFSDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DLSDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D1SDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.D2SDTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS1DTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS2DTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS3DTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DS4DTE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DSKU="+String.valueOf(DSKU));
		sb.append(",DCDTE="+String.valueOf(DCDTE));
		sb.append(",DFPDTE="+String.valueOf(DFPDTE));
		sb.append(",DLPDTE="+String.valueOf(DLPDTE));
		sb.append(",DWFPDT="+String.valueOf(DWFPDT));
		sb.append(",DSFPDT="+String.valueOf(DSFPDT));
		sb.append(",D1RDTE="+String.valueOf(D1RDTE));
		sb.append(",D0RDTE="+String.valueOf(D0RDTE));
		sb.append(",DDSDTE="+String.valueOf(DDSDTE));
		sb.append(",DIADTE="+String.valueOf(DIADTE));
		sb.append(",DNRDTE="+String.valueOf(DNRDTE));
		sb.append(",DPGDTE="+String.valueOf(DPGDTE));
		sb.append(",DDLDTE="+String.valueOf(DDLDTE));
		sb.append(",DFSDTE="+String.valueOf(DFSDTE));
		sb.append(",DLSDTE="+String.valueOf(DLSDTE));
		sb.append(",D1SDTE="+String.valueOf(D1SDTE));
		sb.append(",D2SDTE="+String.valueOf(D2SDTE));
		sb.append(",DS1DTE="+String.valueOf(DS1DTE));
		sb.append(",DS2DTE="+String.valueOf(DS2DTE));
		sb.append(",DS3DTE="+String.valueOf(DS3DTE));
		sb.append(",DS4DTE="+String.valueOf(DS4DTE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(DSKU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DSKU);
            			}
            		
        			sb.append("|");
        		
        				if(DCDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DCDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DFPDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DFPDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DLPDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DLPDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DWFPDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DWFPDT);
            			}
            		
        			sb.append("|");
        		
        				if(DSFPDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DSFPDT);
            			}
            		
        			sb.append("|");
        		
        				if(D1RDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(D1RDTE);
            			}
            		
        			sb.append("|");
        		
        				if(D0RDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(D0RDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DDSDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DDSDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DIADTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DIADTE);
            			}
            		
        			sb.append("|");
        		
        				if(DNRDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DNRDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DPGDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DPGDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DDLDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DDLDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DFSDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DFSDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DLSDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DLSDTE);
            			}
            		
        			sb.append("|");
        		
        				if(D1SDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(D1SDTE);
            			}
            		
        			sb.append("|");
        		
        				if(D2SDTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(D2SDTE);
            			}
            		
        			sb.append("|");
        		
        				if(DS1DTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DS1DTE);
            			}
            		
        			sb.append("|");
        		
        				if(DS2DTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DS2DTE);
            			}
            		
        			sb.append("|");
        		
        				if(DS3DTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DS3DTE);
            			}
            		
        			sb.append("|");
        		
        				if(DS4DTE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DS4DTE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_6");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row2");
			
		int tos_count_tDBOutput_6 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_6", "tDBOutput_4", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_6 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_6 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_6 = (String)(restRequest_tDBOutput_6 != null ? restRequest_tDBOutput_6.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_6 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_6 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_6 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_6 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_6.createRuntimeProperties();
 		                    props_tDBOutput_6.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_6.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_6.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_6.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_6.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_6.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_6_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_6_1_fisrt sst_tDBOutput_6_1_fisrt = new SchemaSettingTool_tDBOutput_6_1_fisrt();
 		                    
 		                    props_tDBOutput_6.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_6_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_6.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_6.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_6.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_6.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_6.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_6.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_6.table.setValue("tableName",
 		                    "VSSDTEPF");
 		                    
 		                    props_tDBOutput_6.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_6.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_6.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_6.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_6.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_6.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_6_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tmap_VSSDTEPF\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"DSKU\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DSKU\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DSKU\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DSKU\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DCDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DCDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DCDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DCDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DFPDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DFPDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DFPDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DFPDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DLPDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DLPDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DLPDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DLPDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DWFPDT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DWFPDT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DWFPDT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DWFPDT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DSFPDT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DSFPDT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DSFPDT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DSFPDT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"D1RDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"D1RDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"D1RDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"D1RDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"D0RDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"D0RDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"D0RDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"D0RDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DDSDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DDSDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DDSDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DDSDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DIADTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DIADTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DIADTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DIADTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DNRDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DNRDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DNRDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DNRDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DPGDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DPGDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DPGDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DPGDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DDLDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DDLDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DDLDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DDLDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DFSDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DFSDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DFSDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DFSDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DLSDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DLSDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DLSDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DLSDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"D1SDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"D1SDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"D1SDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"D1SDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"D2SDTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"D2SDTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"D2SDTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"D2SDTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DS1DTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DS1DTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DS1DTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DS1DTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DS2DTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DS2DTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DS2DTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DS2DTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DS3DTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DS3DTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DS3DTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DS3DTE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DS4DTE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DS4DTE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DS4DTE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DS4DTE\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tmap_VSSDTEPF\",\"di.table.label\":\"tmap_VSSDTEPF\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_6_2_fisrt sst_tDBOutput_6_2_fisrt = new SchemaSettingTool_tDBOutput_6_2_fisrt();
 		                    
 		                    props_tDBOutput_6.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_6_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_6.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_6 = props_tDBOutput_6.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_6 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_6 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_6 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_6.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_6);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_6.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_6 = props_tDBOutput_6.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_6 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_6 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_6 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_6.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_6);
        }
    }
globalMap.put("tDBOutput_6_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_6);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_6= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_6_MAPPINGS_URL", mappings_url_tDBOutput_6);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_6 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_6";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_6 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_6 = null;
topology_tDBOutput_6 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_6 = def_tDBOutput_6.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_6, topology_tDBOutput_6);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_6 = def_tDBOutput_6.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_6 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_6.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_6 = componentRuntime_tDBOutput_6.initialize(container_tDBOutput_6, props_tDBOutput_6);

if (initVr_tDBOutput_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_6.getMessage());
}

if(componentRuntime_tDBOutput_6 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_6 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_6;
	compDriverInitialization_tDBOutput_6.runAtDriver(container_tDBOutput_6);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_6 = null;
if(componentRuntime_tDBOutput_6 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_6 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_6;
	if (doesNodeBelongToRequest_tDBOutput_6) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_6 = sourceOrSink_tDBOutput_6.validate(container_tDBOutput_6);
        if (vr_tDBOutput_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_6.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_6 = null;
    if (sourceOrSink_tDBOutput_6 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_6 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_6;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_6 = sink_tDBOutput_6.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_6) {
            writeOperation_tDBOutput_6.initialize(container_tDBOutput_6);
        }
        writer_tDBOutput_6 = writeOperation_tDBOutput_6.createWriter(container_tDBOutput_6);
        if (doesNodeBelongToRequest_tDBOutput_6) {
            writer_tDBOutput_6.open("tDBOutput_6");
        }

        resourceMap.put("writer_tDBOutput_6", writer_tDBOutput_6);
    } // end of "sourceOrSink_tDBOutput_6 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_6 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_6.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_6 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_6 = props_tDBOutput_6.getSchema(c_tDBOutput_6, false);
    incomingEnforcer_tDBOutput_6 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_6);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_6 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_6 = null;


 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";
	
	
		int tos_count_tDBInput_6 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_6 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_6{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_6 = new StringBuilder();
                    log4jParamters_tDBInput_6.append("Parameters:");
                            log4jParamters_tDBInput_6.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("QUERY" + " = " + "\"select * from MM4R5LIB.VSSDTEPF\"");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("DSKU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DCDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DFPDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DLPDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DWFPDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DSFPDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("D1RDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("D0RDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DDSDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DIADTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DNRDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DPGDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DDLDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DFSDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DLSDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("D1SDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("D2SDTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DS1DTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DS2DTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DS3DTE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DS4DTE")+"}]");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_6.append(" | ");
                            log4jParamters_tDBInput_6.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_6.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_6 - "  + (log4jParamters_tDBInput_6) );
                    } 
                } 
            new BytesLimit65535_tDBInput_6().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_6", "tDBInput_4", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_6 = context.jda_password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				  
				String url_tDBInput_6 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_6 - Driver ClassName: "+driverClass_tDBInput_6+".");
			
	    		log.debug("tDBInput_6 - Connection attempt to '" + url_tDBInput_6 + "' with the username '" + dbUser_tDBInput_6 + "'.");
			
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
	    		log.debug("tDBInput_6 - Connection to '" + url_tDBInput_6 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "select * from MM4R5LIB.VSSDTEPF";
		    
	    		log.debug("tDBInput_6 - Executing the query: '" + dbquery_tDBInput_6 + "'.");
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    	log.debug("tDBInput_6 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row2.DSKU = null;
							} else {
		                          
            row2.DSKU = rs_tDBInput_6.getBigDecimal(1);
            if(rs_tDBInput_6.wasNull()){
                    row2.DSKU = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row2.DCDTE = null;
							} else {
		                          
            row2.DCDTE = rs_tDBInput_6.getBigDecimal(2);
            if(rs_tDBInput_6.wasNull()){
                    row2.DCDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row2.DFPDTE = null;
							} else {
		                          
            row2.DFPDTE = rs_tDBInput_6.getBigDecimal(3);
            if(rs_tDBInput_6.wasNull()){
                    row2.DFPDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row2.DLPDTE = null;
							} else {
		                          
            row2.DLPDTE = rs_tDBInput_6.getBigDecimal(4);
            if(rs_tDBInput_6.wasNull()){
                    row2.DLPDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row2.DWFPDT = null;
							} else {
		                          
            row2.DWFPDT = rs_tDBInput_6.getBigDecimal(5);
            if(rs_tDBInput_6.wasNull()){
                    row2.DWFPDT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								row2.DSFPDT = null;
							} else {
		                          
            row2.DSFPDT = rs_tDBInput_6.getBigDecimal(6);
            if(rs_tDBInput_6.wasNull()){
                    row2.DSFPDT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								row2.D1RDTE = null;
							} else {
		                          
            row2.D1RDTE = rs_tDBInput_6.getBigDecimal(7);
            if(rs_tDBInput_6.wasNull()){
                    row2.D1RDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 8) {
								row2.D0RDTE = null;
							} else {
		                          
            row2.D0RDTE = rs_tDBInput_6.getBigDecimal(8);
            if(rs_tDBInput_6.wasNull()){
                    row2.D0RDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 9) {
								row2.DDSDTE = null;
							} else {
		                          
            row2.DDSDTE = rs_tDBInput_6.getBigDecimal(9);
            if(rs_tDBInput_6.wasNull()){
                    row2.DDSDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 10) {
								row2.DIADTE = null;
							} else {
		                          
            row2.DIADTE = rs_tDBInput_6.getBigDecimal(10);
            if(rs_tDBInput_6.wasNull()){
                    row2.DIADTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 11) {
								row2.DNRDTE = null;
							} else {
		                          
            row2.DNRDTE = rs_tDBInput_6.getBigDecimal(11);
            if(rs_tDBInput_6.wasNull()){
                    row2.DNRDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 12) {
								row2.DPGDTE = null;
							} else {
		                          
            row2.DPGDTE = rs_tDBInput_6.getBigDecimal(12);
            if(rs_tDBInput_6.wasNull()){
                    row2.DPGDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 13) {
								row2.DDLDTE = null;
							} else {
		                          
            row2.DDLDTE = rs_tDBInput_6.getBigDecimal(13);
            if(rs_tDBInput_6.wasNull()){
                    row2.DDLDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 14) {
								row2.DFSDTE = null;
							} else {
		                          
            row2.DFSDTE = rs_tDBInput_6.getBigDecimal(14);
            if(rs_tDBInput_6.wasNull()){
                    row2.DFSDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 15) {
								row2.DLSDTE = null;
							} else {
		                          
            row2.DLSDTE = rs_tDBInput_6.getBigDecimal(15);
            if(rs_tDBInput_6.wasNull()){
                    row2.DLSDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 16) {
								row2.D1SDTE = null;
							} else {
		                          
            row2.D1SDTE = rs_tDBInput_6.getBigDecimal(16);
            if(rs_tDBInput_6.wasNull()){
                    row2.D1SDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 17) {
								row2.D2SDTE = null;
							} else {
		                          
            row2.D2SDTE = rs_tDBInput_6.getBigDecimal(17);
            if(rs_tDBInput_6.wasNull()){
                    row2.D2SDTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 18) {
								row2.DS1DTE = null;
							} else {
		                          
            row2.DS1DTE = rs_tDBInput_6.getBigDecimal(18);
            if(rs_tDBInput_6.wasNull()){
                    row2.DS1DTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 19) {
								row2.DS2DTE = null;
							} else {
		                          
            row2.DS2DTE = rs_tDBInput_6.getBigDecimal(19);
            if(rs_tDBInput_6.wasNull()){
                    row2.DS2DTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 20) {
								row2.DS3DTE = null;
							} else {
		                          
            row2.DS3DTE = rs_tDBInput_6.getBigDecimal(20);
            if(rs_tDBInput_6.wasNull()){
                    row2.DS3DTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 21) {
								row2.DS4DTE = null;
							} else {
		                          
            row2.DS4DTE = rs_tDBInput_6.getBigDecimal(21);
            if(rs_tDBInput_6.wasNull()){
                    row2.DS4DTE = null;
            }
		                    }
					
						log.debug("tDBInput_6 - Retrieving the record " + nb_line_tDBInput_6 + ".");
					



 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row2","tDBInput_6","tDBInput_4","tAS400Input","tDBOutput_6","tDBOutput_4","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row2 - " + (row2==null? "": row2.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_6 != null) {
            incomingEnforcer_tDBOutput_6.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DSKU") != null){
                    incomingEnforcer_tDBOutput_6.put("DSKU", row2.DSKU);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DCDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DCDTE", row2.DCDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DFPDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DFPDTE", row2.DFPDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DLPDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DLPDTE", row2.DLPDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DWFPDT") != null){
                    incomingEnforcer_tDBOutput_6.put("DWFPDT", row2.DWFPDT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DSFPDT") != null){
                    incomingEnforcer_tDBOutput_6.put("DSFPDT", row2.DSFPDT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("D1RDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("D1RDTE", row2.D1RDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("D0RDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("D0RDTE", row2.D0RDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DDSDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DDSDTE", row2.DDSDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DIADTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DIADTE", row2.DIADTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DNRDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DNRDTE", row2.DNRDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DPGDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DPGDTE", row2.DPGDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DDLDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DDLDTE", row2.DDLDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DFSDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DFSDTE", row2.DFSDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DLSDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DLSDTE", row2.DLSDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("D1SDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("D1SDTE", row2.D1SDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("D2SDTE") != null){
                    incomingEnforcer_tDBOutput_6.put("D2SDTE", row2.D2SDTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DS1DTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DS1DTE", row2.DS1DTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DS2DTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DS2DTE", row2.DS2DTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DS3DTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DS3DTE", row2.DS3DTE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_6 != null && incomingEnforcer_tDBOutput_6.getRuntimeSchema().getField("DS4DTE") != null){
                    incomingEnforcer_tDBOutput_6.put("DS4DTE", row2.DS4DTE);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_6 = null;
        if (incomingEnforcer_tDBOutput_6 != null) {
            data_tDBOutput_6 = incomingEnforcer_tDBOutput_6.getCurrentRecord();
        }
        
        if (writer_tDBOutput_6 != null && data_tDBOutput_6 != null) {
        	writer_tDBOutput_6.write(data_tDBOutput_6);
        }
        
        nb_line_tDBOutput_6++;

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	


 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	


 



/**
 * [tDBOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
	    		log.debug("tDBInput_6 - Closing the connection to the database.");
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_6 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
	    		log.debug("tDBInput_6 - Retrieved records count: "+nb_line_tDBInput_6 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_6 - "  + ("Done.") );

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_6", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_6 = null;
    if (writer_tDBOutput_6 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_6 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_6.close();
        resultMap_tDBOutput_6 = writer_tDBOutput_6.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_6), container_tDBOutput_6);
    }
if(resultMap_tDBOutput_6!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_6 : resultMap_tDBOutput_6.entrySet()) {
		switch(entry_tDBOutput_6.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_6.setComponentData("tDBOutput_6", "ERROR_MESSAGE", entry_tDBOutput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_6.setComponentData("tDBOutput_6", "NB_LINE", entry_tDBOutput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_6.setComponentData("tDBOutput_6", "NB_SUCCESS", entry_tDBOutput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_6.setComponentData("tDBOutput_6", "NB_REJECT", entry_tDBOutput_6.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_6 = new StringBuilder();
            for (int i_tDBOutput_6 = 0; i_tDBOutput_6 < entry_tDBOutput_6.getKey().length(); i_tDBOutput_6++) {
                char ch_tDBOutput_6 = entry_tDBOutput_6.getKey().charAt(i_tDBOutput_6);
                if(Character.isUpperCase(ch_tDBOutput_6) && i_tDBOutput_6> 0) {
                	studio_key_tDBOutput_6.append('_');
                }
                studio_key_tDBOutput_6.append(ch_tDBOutput_6);
            }
			container_tDBOutput_6.setComponentData("tDBOutput_6", studio_key_tDBOutput_6.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_6.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row2",2,0,
			 			"tDBInput_6","tDBInput_4","tAS400Input","tDBOutput_6","tDBOutput_4","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBRow_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_6")==null){
    if(resourceMap.get("writer_tDBOutput_6")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_6")).close();
		} catch (java.io.IOException e_tDBOutput_6) {
			String errorMessage_tDBOutput_6 = "failed to release the resource in tDBOutput_6 :" + e_tDBOutput_6.getMessage();
			System.err.println(errorMessage_tDBOutput_6);
		}
	}
}
 



/**
 * [tDBOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_7");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_7", false);
		start_Hash.put("tDBRow_7", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_7";
	
	
		int tos_count_tDBRow_7 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_7", "tDBRow_6", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_7 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_7 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_7 = (String)(restRequest_tDBRow_7 != null ? restRequest_tDBRow_7.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_7 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_7 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_7 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_7 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_7.createRuntimeProperties();
 		                    props_tDBRow_7.setValue("query",
 		                    "\n  insert into SKU_DATE_FILE_VSSDTEPF\n  	\nselect \n    DSKU ,\n		case\n        when LENGTH(DCDTE)= 5 and   cast(SUBS"
+"TRING(DCDTE, 2,2) as int) <= 12 and cast(SUBSTRING(DCDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DCDTE"
+")),'yyyymmdd')\n        when LENGTH(DCDTE)= 6 and  (cast(SUBSTRING(DCDTE, 1,2) as int) between 77 and 99) and cast(SUBST"
+"RING(DCDTE, 3,2) as int) <= 12 and cast(SUBSTRING(DCDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DCDTE))"
+",'yyyymmdd')\n        when LENGTH(DCDTE)= 6 and   cast(SUBSTRING(DCDTE, 1,2) as int) < 77 and cast(SUBSTRING(DCDTE,3,2) "
+"as int) <= 12 and cast(SUBSTRING(DCDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DCDTE)),'yyyymmdd')\n   "
+"     else NULL\n    end as DCDTE,\n    \n    		case\n        when LENGTH(DFPDTE)= 5 and   cast(SUBSTRING(DFPDTE, 2,2) as"
+" int) <= 12 and cast(SUBSTRING(DFPDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DFPDTE)),'yyyymmdd')\n  "
+"      when LENGTH(DFPDTE)= 6 and  (cast(SUBSTRING(DFPDTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DFPDTE, 3,2"
+") as int) <= 12 and cast(SUBSTRING(DFPDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DFPDTE)),'yyyymmdd')"
+"\n        when LENGTH(DFPDTE)= 6 and   cast(SUBSTRING(DFPDTE, 1,2) as int) < 77 and cast(SUBSTRING(DFPDTE,3,2) as int) <="
+" 12 and cast(SUBSTRING(DFPDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DFPDTE)),'yyyymmdd')\n        els"
+"e NULL\n    end as DFPDTE,\n    \n    	case\n        when LENGTH(DLPDTE)= 5 and   cast(SUBSTRING(DLPDTE, 2,2) as int) <="
+" 12 and cast(SUBSTRING(DLPDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DLPDTE)),'yyyymmdd')\n        wh"
+"en LENGTH(DLPDTE)= 6 and  (cast(SUBSTRING(DLPDTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DLPDTE, 3,2) as int"
+") <= 12 and cast(SUBSTRING(DLPDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DLPDTE)),'yyyymmdd')\n       "
+" when LENGTH(DLPDTE)= 6 and   cast(SUBSTRING(DLPDTE, 1,2) as int) < 77 and cast(SUBSTRING(DLPDTE,3,2) as int) <= 12 and "
+"cast(SUBSTRING(DLPDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DLPDTE)),'yyyymmdd')\n        else NULL\n"
+"    end as DLPDTE,\n    \n    	case\n        when LENGTH(DWFPDT)= 5 and   cast(SUBSTRING(DWFPDT, 2,2) as int) <= 12 and "
+"cast(SUBSTRING(DWFPDT,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DWFPDT)),'yyyymmdd')\n        when LENGT"
+"H(DWFPDT)= 6 and  (cast(SUBSTRING(DWFPDT, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DWFPDT, 3,2) as int) <= 12 "
+"and cast(SUBSTRING(DWFPDT,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DWFPDT)),'yyyymmdd')\n        when LE"
+"NGTH(DWFPDT)= 6 and   cast(SUBSTRING(DWFPDT, 1,2) as int) < 77 and cast(SUBSTRING(DWFPDT,3,2) as int) <= 12 and cast(SUB"
+"STRING(DWFPDT,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DWFPDT)),'yyyymmdd')\n        else NULL\n    end "
+"as DWFPDT,\n	\n	case\n        when LENGTH(DSFPDT)= 5 and   cast(SUBSTRING(DSFPDT, 2,2) as int) <= 12 and cast(SUBSTRING("
+"DSFPDT,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DSFPDT)),'yyyymmdd')\n        when LENGTH(DSFPDT)= 6 an"
+"d  (cast(SUBSTRING(DSFPDT, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DSFPDT, 3,2) as int) <= 12 and cast(SUBSTR"
+"ING(DSFPDT,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DSFPDT)),'yyyymmdd')\n        when LENGTH(DSFPDT)= 6"
+" and   cast(SUBSTRING(DSFPDT, 1,2) as int) < 77 and cast(SUBSTRING(DSFPDT,3,2) as int) <= 12 and cast(SUBSTRING(DSFPDT,5"
+",2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DSFPDT)),'yyyymmdd')\n        else NULL\n    end as DSFPDT,\n   "
+" \n    	case\n        when LENGTH(D1RDTE)= 5 and   cast(SUBSTRING(D1RDTE, 2,2) as int) <= 12 and cast(SUBSTRING(D1RDTE,4"
+",2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(D1RDTE)),'yyyymmdd')\n        when LENGTH(D1RDTE)= 6 and  (cast"
+"(SUBSTRING(D1RDTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(D1RDTE, 3,2) as int) <= 12 and cast(SUBSTRING(D1RD"
+"TE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(D1RDTE)),'yyyymmdd')\n        when LENGTH(D1RDTE)= 6 and   c"
+"ast(SUBSTRING(D1RDTE, 1,2) as int) < 77 and cast(SUBSTRING(D1RDTE,3,2) as int) <= 12 and cast(SUBSTRING(D1RDTE,5,2) as i"
+"nt) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(D1RDTE)),'yyyymmdd')\n        else NULL\n    end as D1RDTE,\n	\n	case\n "
+"       when LENGTH(D0RDTE)= 5 and   cast(SUBSTRING(D0RDTE, 2,2) as int) <= 12 and cast(SUBSTRING(D0RDTE,4,2) as int) <= "
+"31 then TO_DATE(CONCAT( '200', TO_VARCHAR(D0RDTE)),'yyyymmdd')\n        when LENGTH(D0RDTE)= 6 and  (cast(SUBSTRING(D0RD"
+"TE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(D0RDTE, 3,2) as int) <= 12 and cast(SUBSTRING(D0RDTE,5,2) as int)"
+" <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(D0RDTE)),'yyyymmdd')\n        when LENGTH(D0RDTE)= 6 and   cast(SUBSTRING(D"
+"0RDTE, 1,2) as int) < 77 and cast(SUBSTRING(D0RDTE,3,2) as int) <= 12 and cast(SUBSTRING(D0RDTE,5,2) as int) <= 31 then "
+"TO_DATE(CONCAT( '20', TO_VARCHAR(D0RDTE)),'yyyymmdd')\n        else NULL\n    end as D0RDTE,\n    \n    	case\n        w"
+"hen LENGTH(DDSDTE)= 5 and   cast(SUBSTRING(DDSDTE, 2,2) as int) <= 12 and cast(SUBSTRING(DDSDTE,4,2) as int) <= 31 then "
+"TO_DATE(CONCAT( '200', TO_VARCHAR(DDSDTE)),'yyyymmdd')\n        when LENGTH(DDSDTE)= 6 and  (cast(SUBSTRING(DDSDTE, 1,2)"
+" as int) between 77 and 99) and cast(SUBSTRING(DDSDTE, 3,2) as int) <= 12 and cast(SUBSTRING(DDSDTE,5,2) as int) <= 31 t"
+"hen TO_DATE(CONCAT( '19', TO_VARCHAR(DDSDTE)),'yyyymmdd')\n        when LENGTH(DDSDTE)= 6 and   cast(SUBSTRING(DDSDTE, 1"
+",2) as int) < 77 and cast(SUBSTRING(DDSDTE,3,2) as int) <= 12 and cast(SUBSTRING(DDSDTE,5,2) as int) <= 31 then TO_DATE("
+"CONCAT( '20', TO_VARCHAR(DDSDTE)),'yyyymmdd')\n        else NULL\n    end as DDSDTE,\n	\n	\n	case\n        when LENGTH(D"
+"IADTE)= 5 and   cast(SUBSTRING(DIADTE, 2,2) as int) <= 12 and cast(SUBSTRING(DIADTE,4,2) as int) <= 31 then TO_DATE(CONC"
+"AT( '200', TO_VARCHAR(DIADTE)),'yyyymmdd')\n        when LENGTH(DIADTE)= 6 and  (cast(SUBSTRING(DIADTE, 1,2) as int) bet"
+"ween 77 and 99) and cast(SUBSTRING(DIADTE, 3,2) as int) <= 12 and cast(SUBSTRING(DIADTE,5,2) as int) <= 31 then TO_DATE("
+"CONCAT( '19', TO_VARCHAR(DIADTE)),'yyyymmdd')\n        when LENGTH(DIADTE)= 6 and   cast(SUBSTRING(DIADTE, 1,2) as int) "
+"< 77 and cast(SUBSTRING(DIADTE,3,2) as int) <= 12 and cast(SUBSTRING(DIADTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20'"
+", TO_VARCHAR(DIADTE)),'yyyymmdd')\n        else NULL\n    end as DIADTE,\n	\n	case\n        when LENGTH(DNRDTE)= 5 and  "
+" cast(SUBSTRING(DNRDTE, 2,2) as int) <= 12 and cast(SUBSTRING(DNRDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_V"
+"ARCHAR(DNRDTE)),'yyyymmdd')\n        when LENGTH(DNRDTE)= 6 and  (cast(SUBSTRING(DNRDTE, 1,2) as int) between 77 and 99)"
+" and cast(SUBSTRING(DNRDTE, 3,2) as int) <= 12 and cast(SUBSTRING(DNRDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', T"
+"O_VARCHAR(DNRDTE)),'yyyymmdd')\n        when LENGTH(DNRDTE)= 6 and   cast(SUBSTRING(DNRDTE, 1,2) as int) < 77 and cast(S"
+"UBSTRING(DNRDTE,3,2) as int) <= 12 and cast(SUBSTRING(DNRDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DN"
+"RDTE)),'yyyymmdd')\n        else NULL\n    end as DNRDTE,\n    \n    	case\n        when LENGTH(DPGDTE)= 5 and   cast(SU"
+"BSTRING(DPGDTE, 2,2) as int) <= 12 and cast(SUBSTRING(DPGDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(D"
+"PGDTE)),'yyyymmdd')\n        when LENGTH(DPGDTE)= 6 and  (cast(SUBSTRING(DPGDTE, 1,2) as int) between 77 and 99) and cas"
+"t(SUBSTRING(DPGDTE, 3,2) as int) <= 12 and cast(SUBSTRING(DPGDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHA"
+"R(DPGDTE)),'yyyymmdd')\n        when LENGTH(DPGDTE)= 6 and   cast(SUBSTRING(DPGDTE, 1,2) as int) < 77 and cast(SUBSTRING"
+"(DPGDTE,3,2) as int) <= 12 and cast(SUBSTRING(DPGDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DPGDTE)),'"
+"yyyymmdd')\n        else NULL\n    end as DPGDTE,\n    \n     case\n        when LENGTH(DDLDTE)= 5 and   cast(SUBSTRING("
+"DDLDTE, 2,2) as int) <= 12 and cast(SUBSTRING(DDLDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DDLDTE)),"
+"'yyyymmdd')\n        when LENGTH(DDLDTE)= 6 and  (cast(SUBSTRING(DDLDTE, 1,2) as int) between 77 and 99) and cast(SUBSTR"
+"ING(DDLDTE, 3,2) as int) <= 12 and cast(SUBSTRING(DDLDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DDLDTE"
+")),'yyyymmdd')\n        when LENGTH(DDLDTE)= 6 and   cast(SUBSTRING(DDLDTE, 1,2) as int) < 77 and cast(SUBSTRING(DDLDTE,"
+"3,2) as int) <= 12 and cast(SUBSTRING(DDLDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DDLDTE)),'yyyymmdd"
+"')\n        else NULL\n    end as DDLDTE,\n    \n	\n	case\n        when LENGTH(DFSDTE)= 5 and   cast(SUBSTRING(DFSDTE, 2"
+",2) as int) <= 12 and cast(SUBSTRING(DFSDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DFSDTE)),'yyyymmdd"
+"')\n        when LENGTH(DFSDTE)= 6 and  (cast(SUBSTRING(DFSDTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DFSDT"
+"E, 3,2) as int) <= 12 and cast(SUBSTRING(DFSDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DFSDTE)),'yyyym"
+"mdd')\n        when LENGTH(DFSDTE)= 6 and   cast(SUBSTRING(DFSDTE, 1,2) as int) < 77 and cast(SUBSTRING(DFSDTE,3,2) as i"
+"nt) <= 12 and cast(SUBSTRING(DFSDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DFSDTE)),'yyyymmdd')\n     "
+"   else NULL\n    end as DFSDTE,\n	\n\n    	case\n        when LENGTH(DLSDTE)= 5 and   cast(SUBSTRING(DLSDTE, 2,2) as in"
+"t) <= 12 and cast(SUBSTRING(DLSDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DLSDTE)),'yyyymmdd')\n     "
+"   when LENGTH(DLSDTE)= 6 and  (cast(SUBSTRING(DLSDTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DLSDTE, 3,2) a"
+"s int) <= 12 and cast(SUBSTRING(DLSDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DLSDTE)),'yyyymmdd')\n  "
+"      when LENGTH(DLSDTE)= 6 and   cast(SUBSTRING(DLSDTE, 1,2) as int) < 77 and cast(SUBSTRING(DLSDTE,3,2) as int) <= 12"
+" and cast(SUBSTRING(DLSDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DLSDTE)),'yyyymmdd')\n        else N"
+"ULL\n    end as DLSDTE,\n	\n	\n	case\n        when LENGTH(D1SDTE)= 5 and   cast(SUBSTRING(D1SDTE, 2,2) as int) <= 12 and"
+" cast(SUBSTRING(D1SDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(D1SDTE)),'yyyymmdd')\n        when LENG"
+"TH(D1SDTE)= 6 and  (cast(SUBSTRING(D1SDTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(D1SDTE, 3,2) as int) <= 12"
+" and cast(SUBSTRING(D1SDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(D1SDTE)),'yyyymmdd')\n        when L"
+"ENGTH(D1SDTE)= 6 and   cast(SUBSTRING(D1SDTE, 1,2) as int) < 77 and cast(SUBSTRING(D1SDTE,3,2) as int) <= 12 and cast(SU"
+"BSTRING(D1SDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(D1SDTE)),'yyyymmdd')\n        else NULL\n    end"
+" as D1SDTE,\n    \n    case\n        when LENGTH(D2SDTE)= 5 and   cast(SUBSTRING(D2SDTE, 2,2) as int) <= 12 and cast(SUB"
+"STRING(D2SDTE,4,2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(D2SDTE)),'yyyymmdd')\n        when LENGTH(D2SDTE"
+")= 6 and  (cast(SUBSTRING(D2SDTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(D2SDTE, 3,2) as int) <= 12 and cast"
+"(SUBSTRING(D2SDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(D2SDTE)),'yyyymmdd')\n        when LENGTH(D2S"
+"DTE)= 6 and   cast(SUBSTRING(D2SDTE, 1,2) as int) < 77 and cast(SUBSTRING(D2SDTE,3,2) as int) <= 12 and cast(SUBSTRING(D"
+"2SDTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(D2SDTE)),'yyyymmdd')\n        else NULL\n    end as D2SDT"
+"E,\n	\n	case\n        when LENGTH(DS1DTE)= 5 and   cast(SUBSTRING(DS1DTE, 2,2) as int) <= 12 and cast(SUBSTRING(DS1DTE,4"
+",2) as int) <= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DS1DTE)),'yyyymmdd')\n        when LENGTH(DS1DTE)= 6 and  (cast"
+"(SUBSTRING(DS1DTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DS1DTE, 3,2) as int) <= 12 and cast(SUBSTRING(DS1D"
+"TE,5,2) as int) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DS1DTE)),'yyyymmdd')\n        when LENGTH(DS1DTE)= 6 and   c"
+"ast(SUBSTRING(DS1DTE, 1,2) as int) < 77 and cast(SUBSTRING(DS1DTE,3,2) as int) <= 12 and cast(SUBSTRING(DS1DTE,5,2) as i"
+"nt) <= 31 then TO_DATE(CONCAT( '20', TO_VARCHAR(DS1DTE)),'yyyymmdd')\n        else NULL\n    end as DS1DTE,\n	\n	\n	case"
+"\n        when LENGTH(DS2DTE)= 5 and   cast(SUBSTRING(DS2DTE, 2,2) as int) <= 12 and cast(SUBSTRING(DS2DTE,4,2) as int) "
+"<= 31 then TO_DATE(CONCAT( '200', TO_VARCHAR(DS2DTE)),'yyyymmdd')\n        when LENGTH(DS2DTE)= 6 and  (cast(SUBSTRING(D"
+"S2DTE, 1,2) as int) between 77 and 99) and cast(SUBSTRING(DS2DTE, 3,2) as int) <= 12 and cast(SUBSTRING(DS2DTE,5,2) as i"
+"nt) <= 31 then TO_DATE(CONCAT( '19', TO_VARCHAR(DS2DTE)),'yyyymmdd')\n        when LENGTH(DS2DTE)= 6 and   cast(SUBSTRIN"
+"G(DS2DTE, 1,2) as int) < 77 and cast(SUBSTRING(DS2DTE,3,2) as int) <= 12 and cast(SUBSTRING(DS2DTE,5,2) as int) <= 31 th"
+"en TO_DATE(CONCAT( '20', TO_VARCHAR(DS2DTE)),'yyyymmdd')\n        else NULL\n    end as DS2DTE,\n	\n	case\n        when "
+"LENGTH(DS3DTE)= 5 and   cast(SUBSTRING(DS3DTE, 2,2) as int) <= 12 and cast(SUBSTRING(DS3DTE,4,2) as int) <= 31 then TO_D"
+"ATE(CONCAT( '200', TO_VARCHAR(DS3DTE)),'yyyymmdd')\n        when LENGTH(DS3DTE)= 6 and  (cast(SUBSTRING(DS3DTE, 1,2) as "
+"int) between 77 and 99) and cast(SUBSTRING(DS3DTE, 3,2) as int) <= 12 and cast(SUBSTRING(DS3DTE,5,2) as int) <= 31 then "
+"TO_DATE(CONCAT( '19', TO_VARCHAR(DS3DTE)),'yyyymmdd')\n        when LENGTH(DS3DTE)= 6 and   cast(SUBSTRING(DS3DTE, 1,2) "
+"as int) < 77 and cast(SUBSTRING(DS3DTE,3,2) as int) <= 12 and cast(SUBSTRING(DS3DTE,5,2) as int) <= 31 then TO_DATE(CONC"
+"AT( '20', TO_VARCHAR(DS3DTE)),'yyyymmdd')\n        else NULL\n    end as DS3DTE,\n    \n    	case\n        when LENGTH(D"
+"S4DTE)= 5 and   cast(SUBSTRING(DS4DTE, 2,2) as int) <= 12 and cast(SUBSTRING(DS4DTE,4,2) as int) <= 31 then TO_DATE(CONC"
+"AT( '200', TO_VARCHAR(DS4DTE)),'yyyymmdd')\n        when LENGTH(DS4DTE)= 6 and  (cast(SUBSTRING(DS4DTE, 1,2) as int) bet"
+"ween 77 and 99) and cast(SUBSTRING(DS4DTE, 3,2) as int) <= 12 and cast(SUBSTRING(DS4DTE,5,2) as int) <= 31 then TO_DATE("
+"CONCAT( '19', TO_VARCHAR(DS4DTE)),'yyyymmdd')\n        when LENGTH(DS4DTE)= 6 and   cast(SUBSTRING(DS4DTE, 1,2) as int) "
+"< 77 and cast(SUBSTRING(DS4DTE,3,2) as int) <= 12 and cast(SUBSTRING(DS4DTE,5,2) as int) <= 31 then TO_DATE(CONCAT( '20'"
+", TO_VARCHAR(DS4DTE)),'yyyymmdd')\n        else NULL\n    end as DS4DTE,\n	\n    \n	CURRENT_DATE() - 1 as LOAD_DATE\n   "
+" \n    from VSSDTEPF\n    \n\n");
 		                    
 		                    props_tDBRow_7.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_7.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_7.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_7_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_7_1_fisrt sst_tDBRow_7_1_fisrt = new SchemaSettingTool_tDBRow_7_1_fisrt();
 		                    
 		                    props_tDBRow_7.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_7_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_7_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_7_2_fisrt sst_tDBRow_7_2_fisrt = new SchemaSettingTool_tDBRow_7_2_fisrt();
 		                    
 		                    props_tDBRow_7.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_7_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_7.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_7.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_7.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_7.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_7.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_7.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_7.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_7.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_7.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_7.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_7.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_7.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_7.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_7_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_7_3_fisrt sst_tDBRow_7_3_fisrt = new SchemaSettingTool_tDBRow_7_3_fisrt();
 		                    
 		                    props_tDBRow_7.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_7_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_7.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_7 = props_tDBRow_7.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_7 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_7 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_7 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_7.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_7);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_7.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_7 = props_tDBRow_7.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_7 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_7 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_7 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_7.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_7);
        }
    }
globalMap.put("tDBRow_7_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_7);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_7= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_7_MAPPINGS_URL", mappings_url_tDBRow_7);

org.talend.components.api.container.RuntimeContainer container_tDBRow_7 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_7";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_7 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_7 = null;
topology_tDBRow_7 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_7 = def_tDBRow_7.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_7, topology_tDBRow_7);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_7 = def_tDBRow_7.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_7 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_7.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_7 = componentRuntime_tDBRow_7.initialize(container_tDBRow_7, props_tDBRow_7);

if (initVr_tDBRow_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_7.getMessage());
}

if(componentRuntime_tDBRow_7 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_7 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_7;
	compDriverInitialization_tDBRow_7.runAtDriver(container_tDBRow_7);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_7 = null;
if(componentRuntime_tDBRow_7 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_7 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_7;
	if (doesNodeBelongToRequest_tDBRow_7) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_7 = sourceOrSink_tDBRow_7.validate(container_tDBRow_7);
        if (vr_tDBRow_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_7.getMessage());
        }
	}
}

 



/**
 * [tDBRow_7 begin ] stop
 */
	
	/**
	 * [tDBRow_7 main ] start
	 */

	

	
	
	currentComponent="tDBRow_7";
	
	


 


	tos_count_tDBRow_7++;

/**
 * [tDBRow_7 main ] stop
 */
	
	/**
	 * [tDBRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_7";
	
	


 



/**
 * [tDBRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_7";
	
	


 



/**
 * [tDBRow_7 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_7 end ] start
	 */

	

	
	
	currentComponent="tDBRow_7";
	
	
// end of generic


resourceMap.put("finish_tDBRow_7", Boolean.TRUE);

 

ok_Hash.put("tDBRow_7", true);
end_Hash.put("tDBRow_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBRow_8Process(globalMap);



/**
 * [tDBRow_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_7 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_7";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_7")==null){
}
 



/**
 * [tDBRow_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_8");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_8", false);
		start_Hash.put("tDBRow_8", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_8";
	
	
		int tos_count_tDBRow_8 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_8", "tDBRow_6", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_8 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_8 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_8 = (String)(restRequest_tDBRow_8 != null ? restRequest_tDBRow_8.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_8 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_8 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_8 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_8 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_8.createRuntimeProperties();
 		                    props_tDBRow_8.setValue("query",
 		                    "\nDrop table VSSDTEPF\n\n");
 		                    
 		                    props_tDBRow_8.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_8.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_8.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_8_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_8_1_fisrt sst_tDBRow_8_1_fisrt = new SchemaSettingTool_tDBRow_8_1_fisrt();
 		                    
 		                    props_tDBRow_8.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_8_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_8_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_8_2_fisrt sst_tDBRow_8_2_fisrt = new SchemaSettingTool_tDBRow_8_2_fisrt();
 		                    
 		                    props_tDBRow_8.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_8_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_8.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_8.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_8.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_8.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_8.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_8.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_8.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_8.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_8.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_8.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_8.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_8.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_8.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_8_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_8_3_fisrt sst_tDBRow_8_3_fisrt = new SchemaSettingTool_tDBRow_8_3_fisrt();
 		                    
 		                    props_tDBRow_8.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_8_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_8.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_8 = props_tDBRow_8.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_8 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_8 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_8 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_8.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_8);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_8.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_8 = props_tDBRow_8.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_8 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_8 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_8 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_8.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_8);
        }
    }
globalMap.put("tDBRow_8_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_8);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_8= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_8_MAPPINGS_URL", mappings_url_tDBRow_8);

org.talend.components.api.container.RuntimeContainer container_tDBRow_8 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_8";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_8 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_8 = null;
topology_tDBRow_8 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_8 = def_tDBRow_8.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_8, topology_tDBRow_8);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_8 = def_tDBRow_8.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_8 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_8.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_8 = componentRuntime_tDBRow_8.initialize(container_tDBRow_8, props_tDBRow_8);

if (initVr_tDBRow_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_8.getMessage());
}

if(componentRuntime_tDBRow_8 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_8 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_8;
	compDriverInitialization_tDBRow_8.runAtDriver(container_tDBRow_8);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_8 = null;
if(componentRuntime_tDBRow_8 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_8 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_8;
	if (doesNodeBelongToRequest_tDBRow_8) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_8 = sourceOrSink_tDBRow_8.validate(container_tDBRow_8);
        if (vr_tDBRow_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_8.getMessage());
        }
	}
}

 



/**
 * [tDBRow_8 begin ] stop
 */
	
	/**
	 * [tDBRow_8 main ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	


 


	tos_count_tDBRow_8++;

/**
 * [tDBRow_8 main ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	


 



/**
 * [tDBRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	


 



/**
 * [tDBRow_8 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_8 end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	
// end of generic


resourceMap.put("finish_tDBRow_8", Boolean.TRUE);

 

ok_Hash.put("tDBRow_8", true);
end_Hash.put("tDBRow_8", System.currentTimeMillis());




/**
 * [tDBRow_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_8 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_8")==null){
}
 



/**
 * [tDBRow_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_5");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_5", false);
		start_Hash.put("tDBRow_5", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_5";
	
	
		int tos_count_tDBRow_5 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_5", "tDBRow_5", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_5 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_5 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_5 = (String)(restRequest_tDBRow_5 != null ? restRequest_tDBRow_5.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_5 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_5 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_5 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_5 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_5.createRuntimeProperties();
 		                    props_tDBRow_5.setValue("query",
 		                    "DELETE from  INVENTORY_BALANCE_DATA_INVCBL\nWHERE DATELOADED = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_5.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_5.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_5.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_5_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_5_1_fisrt sst_tDBRow_5_1_fisrt = new SchemaSettingTool_tDBRow_5_1_fisrt();
 		                    
 		                    props_tDBRow_5.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_5_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_5_2_fisrt sst_tDBRow_5_2_fisrt = new SchemaSettingTool_tDBRow_5_2_fisrt();
 		                    
 		                    props_tDBRow_5.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_5.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_5.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_5.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_5.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_5.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_5.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_5.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_5.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_5.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_5.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_5.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_5.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_5.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_5_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_5_3_fisrt sst_tDBRow_5_3_fisrt = new SchemaSettingTool_tDBRow_5_3_fisrt();
 		                    
 		                    props_tDBRow_5.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_5.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_5 = props_tDBRow_5.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_5.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_5);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_5.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_5 = props_tDBRow_5.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_5.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_5);
        }
    }
globalMap.put("tDBRow_5_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_5);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_5_MAPPINGS_URL", mappings_url_tDBRow_5);

org.talend.components.api.container.RuntimeContainer container_tDBRow_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_5 = null;
topology_tDBRow_5 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_5 = def_tDBRow_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_5, topology_tDBRow_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_5 = def_tDBRow_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_5 = componentRuntime_tDBRow_5.initialize(container_tDBRow_5, props_tDBRow_5);

if (initVr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_5.getMessage());
}

if(componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_5;
	compDriverInitialization_tDBRow_5.runAtDriver(container_tDBRow_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_5 = null;
if(componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_5;
	if (doesNodeBelongToRequest_tDBRow_5) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_5 = sourceOrSink_tDBRow_5.validate(container_tDBRow_5);
        if (vr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_5.getMessage());
        }
	}
}

 



/**
 * [tDBRow_5 begin ] stop
 */
	
	/**
	 * [tDBRow_5 main ] start
	 */

	

	
	
	currentComponent="tDBRow_5";
	
	


 


	tos_count_tDBRow_5++;

/**
 * [tDBRow_5 main ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_5";
	
	


 



/**
 * [tDBRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";
	
	


 



/**
 * [tDBRow_5 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_5 end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";
	
	
// end of generic


resourceMap.put("finish_tDBRow_5", Boolean.TRUE);

 

ok_Hash.put("tDBRow_5", true);
end_Hash.put("tDBRow_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBInput_5Process(globalMap);



/**
 * [tDBRow_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_5 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_5";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_5")==null){
}
 



/**
 * [tDBRow_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return false;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return 9;
				}
				public Integer INUMBRPrecision(){
				    return 0;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public BigDecimal CBHBOY;

				public BigDecimal getCBHBOY () {
					return this.CBHBOY;
				}

				public Boolean CBHBOYIsNullable(){
				    return false;
				}
				public Boolean CBHBOYIsKey(){
				    return false;
				}
				public Integer CBHBOYLength(){
				    return 9;
				}
				public Integer CBHBOYPrecision(){
				    return 2;
				}
				public String CBHBOYDefault(){
				
					return "";
				
				}
				public String CBHBOYComment(){
				
				    return "";
				
				}
				public String CBHBOYPattern(){
				
					return "";
				
				}
				public String CBHBOYOriginalDbColumnName(){
				
					return "CBHBOY";
				
				}

				
			    public BigDecimal CBHBOP;

				public BigDecimal getCBHBOP () {
					return this.CBHBOP;
				}

				public Boolean CBHBOPIsNullable(){
				    return false;
				}
				public Boolean CBHBOPIsKey(){
				    return false;
				}
				public Integer CBHBOPLength(){
				    return 9;
				}
				public Integer CBHBOPPrecision(){
				    return 2;
				}
				public String CBHBOPDefault(){
				
					return "";
				
				}
				public String CBHBOPComment(){
				
				    return "";
				
				}
				public String CBHBOPPattern(){
				
					return "";
				
				}
				public String CBHBOPOriginalDbColumnName(){
				
					return "CBHBOP";
				
				}

				
			    public BigDecimal CBHAND;

				public BigDecimal getCBHAND () {
					return this.CBHAND;
				}

				public Boolean CBHANDIsNullable(){
				    return false;
				}
				public Boolean CBHANDIsKey(){
				    return false;
				}
				public Integer CBHANDLength(){
				    return 9;
				}
				public Integer CBHANDPrecision(){
				    return 2;
				}
				public String CBHANDDefault(){
				
					return "";
				
				}
				public String CBHANDComment(){
				
				    return "";
				
				}
				public String CBHANDPattern(){
				
					return "";
				
				}
				public String CBHANDOriginalDbColumnName(){
				
					return "CBHAND";
				
				}

				
			    public BigDecimal CBTRNS;

				public BigDecimal getCBTRNS () {
					return this.CBTRNS;
				}

				public Boolean CBTRNSIsNullable(){
				    return false;
				}
				public Boolean CBTRNSIsKey(){
				    return false;
				}
				public Integer CBTRNSLength(){
				    return 4;
				}
				public Integer CBTRNSPrecision(){
				    return 1;
				}
				public String CBTRNSDefault(){
				
					return "";
				
				}
				public String CBTRNSComment(){
				
				    return "";
				
				}
				public String CBTRNSPattern(){
				
					return "";
				
				}
				public String CBTRNSOriginalDbColumnName(){
				
					return "CBTRNS";
				
				}

				
			    public BigDecimal CBGMRI;

				public BigDecimal getCBGMRI () {
					return this.CBGMRI;
				}

				public Boolean CBGMRIIsNullable(){
				    return false;
				}
				public Boolean CBGMRIIsKey(){
				    return false;
				}
				public Integer CBGMRILength(){
				    return 4;
				}
				public Integer CBGMRIPrecision(){
				    return 1;
				}
				public String CBGMRIDefault(){
				
					return "";
				
				}
				public String CBGMRIComment(){
				
				    return "";
				
				}
				public String CBGMRIPattern(){
				
					return "";
				
				}
				public String CBGMRIOriginalDbColumnName(){
				
					return "CBGMRI";
				
				}

				
			    public BigDecimal CBWKCR;

				public BigDecimal getCBWKCR () {
					return this.CBWKCR;
				}

				public Boolean CBWKCRIsNullable(){
				    return false;
				}
				public Boolean CBWKCRIsKey(){
				    return false;
				}
				public Integer CBWKCRLength(){
				    return 9;
				}
				public Integer CBWKCRPrecision(){
				    return 2;
				}
				public String CBWKCRDefault(){
				
					return "";
				
				}
				public String CBWKCRComment(){
				
				    return "";
				
				}
				public String CBWKCRPattern(){
				
					return "";
				
				}
				public String CBWKCROriginalDbColumnName(){
				
					return "CBWKCR";
				
				}

				
			    public BigDecimal CBWK01;

				public BigDecimal getCBWK01 () {
					return this.CBWK01;
				}

				public Boolean CBWK01IsNullable(){
				    return false;
				}
				public Boolean CBWK01IsKey(){
				    return false;
				}
				public Integer CBWK01Length(){
				    return 9;
				}
				public Integer CBWK01Precision(){
				    return 2;
				}
				public String CBWK01Default(){
				
					return "";
				
				}
				public String CBWK01Comment(){
				
				    return "";
				
				}
				public String CBWK01Pattern(){
				
					return "";
				
				}
				public String CBWK01OriginalDbColumnName(){
				
					return "CBWK01";
				
				}

				
			    public BigDecimal CBWK02;

				public BigDecimal getCBWK02 () {
					return this.CBWK02;
				}

				public Boolean CBWK02IsNullable(){
				    return false;
				}
				public Boolean CBWK02IsKey(){
				    return false;
				}
				public Integer CBWK02Length(){
				    return 9;
				}
				public Integer CBWK02Precision(){
				    return 2;
				}
				public String CBWK02Default(){
				
					return "";
				
				}
				public String CBWK02Comment(){
				
				    return "";
				
				}
				public String CBWK02Pattern(){
				
					return "";
				
				}
				public String CBWK02OriginalDbColumnName(){
				
					return "CBWK02";
				
				}

				
			    public BigDecimal CBWK03;

				public BigDecimal getCBWK03 () {
					return this.CBWK03;
				}

				public Boolean CBWK03IsNullable(){
				    return false;
				}
				public Boolean CBWK03IsKey(){
				    return false;
				}
				public Integer CBWK03Length(){
				    return 9;
				}
				public Integer CBWK03Precision(){
				    return 2;
				}
				public String CBWK03Default(){
				
					return "";
				
				}
				public String CBWK03Comment(){
				
				    return "";
				
				}
				public String CBWK03Pattern(){
				
					return "";
				
				}
				public String CBWK03OriginalDbColumnName(){
				
					return "CBWK03";
				
				}

				
			    public BigDecimal CBWK04;

				public BigDecimal getCBWK04 () {
					return this.CBWK04;
				}

				public Boolean CBWK04IsNullable(){
				    return false;
				}
				public Boolean CBWK04IsKey(){
				    return false;
				}
				public Integer CBWK04Length(){
				    return 9;
				}
				public Integer CBWK04Precision(){
				    return 2;
				}
				public String CBWK04Default(){
				
					return "";
				
				}
				public String CBWK04Comment(){
				
				    return "";
				
				}
				public String CBWK04Pattern(){
				
					return "";
				
				}
				public String CBWK04OriginalDbColumnName(){
				
					return "CBWK04";
				
				}

				
			    public BigDecimal CBWK05;

				public BigDecimal getCBWK05 () {
					return this.CBWK05;
				}

				public Boolean CBWK05IsNullable(){
				    return false;
				}
				public Boolean CBWK05IsKey(){
				    return false;
				}
				public Integer CBWK05Length(){
				    return 9;
				}
				public Integer CBWK05Precision(){
				    return 2;
				}
				public String CBWK05Default(){
				
					return "";
				
				}
				public String CBWK05Comment(){
				
				    return "";
				
				}
				public String CBWK05Pattern(){
				
					return "";
				
				}
				public String CBWK05OriginalDbColumnName(){
				
					return "CBWK05";
				
				}

				
			    public BigDecimal CBWK06;

				public BigDecimal getCBWK06 () {
					return this.CBWK06;
				}

				public Boolean CBWK06IsNullable(){
				    return false;
				}
				public Boolean CBWK06IsKey(){
				    return false;
				}
				public Integer CBWK06Length(){
				    return 9;
				}
				public Integer CBWK06Precision(){
				    return 2;
				}
				public String CBWK06Default(){
				
					return "";
				
				}
				public String CBWK06Comment(){
				
				    return "";
				
				}
				public String CBWK06Pattern(){
				
					return "";
				
				}
				public String CBWK06OriginalDbColumnName(){
				
					return "CBWK06";
				
				}

				
			    public BigDecimal CBWK07;

				public BigDecimal getCBWK07 () {
					return this.CBWK07;
				}

				public Boolean CBWK07IsNullable(){
				    return false;
				}
				public Boolean CBWK07IsKey(){
				    return false;
				}
				public Integer CBWK07Length(){
				    return 9;
				}
				public Integer CBWK07Precision(){
				    return 2;
				}
				public String CBWK07Default(){
				
					return "";
				
				}
				public String CBWK07Comment(){
				
				    return "";
				
				}
				public String CBWK07Pattern(){
				
					return "";
				
				}
				public String CBWK07OriginalDbColumnName(){
				
					return "CBWK07";
				
				}

				
			    public BigDecimal CBWK08;

				public BigDecimal getCBWK08 () {
					return this.CBWK08;
				}

				public Boolean CBWK08IsNullable(){
				    return false;
				}
				public Boolean CBWK08IsKey(){
				    return false;
				}
				public Integer CBWK08Length(){
				    return 9;
				}
				public Integer CBWK08Precision(){
				    return 2;
				}
				public String CBWK08Default(){
				
					return "";
				
				}
				public String CBWK08Comment(){
				
				    return "";
				
				}
				public String CBWK08Pattern(){
				
					return "";
				
				}
				public String CBWK08OriginalDbColumnName(){
				
					return "CBWK08";
				
				}

				
			    public BigDecimal CBRSUP;

				public BigDecimal getCBRSUP () {
					return this.CBRSUP;
				}

				public Boolean CBRSUPIsNullable(){
				    return false;
				}
				public Boolean CBRSUPIsKey(){
				    return false;
				}
				public Integer CBRSUPLength(){
				    return 9;
				}
				public Integer CBRSUPPrecision(){
				    return 2;
				}
				public String CBRSUPDefault(){
				
					return "";
				
				}
				public String CBRSUPComment(){
				
				    return "";
				
				}
				public String CBRSUPPattern(){
				
					return "";
				
				}
				public String CBRSUPOriginalDbColumnName(){
				
					return "CBRSUP";
				
				}

				
			    public BigDecimal CBRSUY;

				public BigDecimal getCBRSUY () {
					return this.CBRSUY;
				}

				public Boolean CBRSUYIsNullable(){
				    return false;
				}
				public Boolean CBRSUYIsKey(){
				    return false;
				}
				public Integer CBRSUYLength(){
				    return 9;
				}
				public Integer CBRSUYPrecision(){
				    return 2;
				}
				public String CBRSUYDefault(){
				
					return "";
				
				}
				public String CBRSUYComment(){
				
				    return "";
				
				}
				public String CBRSUYPattern(){
				
					return "";
				
				}
				public String CBRSUYOriginalDbColumnName(){
				
					return "CBRSUY";
				
				}

				
			    public BigDecimal CBRSDP;

				public BigDecimal getCBRSDP () {
					return this.CBRSDP;
				}

				public Boolean CBRSDPIsNullable(){
				    return false;
				}
				public Boolean CBRSDPIsKey(){
				    return false;
				}
				public Integer CBRSDPLength(){
				    return 11;
				}
				public Integer CBRSDPPrecision(){
				    return 2;
				}
				public String CBRSDPDefault(){
				
					return "";
				
				}
				public String CBRSDPComment(){
				
				    return "";
				
				}
				public String CBRSDPPattern(){
				
					return "";
				
				}
				public String CBRSDPOriginalDbColumnName(){
				
					return "CBRSDP";
				
				}

				
			    public BigDecimal CBRSDY;

				public BigDecimal getCBRSDY () {
					return this.CBRSDY;
				}

				public Boolean CBRSDYIsNullable(){
				    return false;
				}
				public Boolean CBRSDYIsKey(){
				    return false;
				}
				public Integer CBRSDYLength(){
				    return 11;
				}
				public Integer CBRSDYPrecision(){
				    return 2;
				}
				public String CBRSDYDefault(){
				
					return "";
				
				}
				public String CBRSDYComment(){
				
				    return "";
				
				}
				public String CBRSDYPattern(){
				
					return "";
				
				}
				public String CBRSDYOriginalDbColumnName(){
				
					return "CBRSDY";
				
				}

				
			    public BigDecimal CBVRSP;

				public BigDecimal getCBVRSP () {
					return this.CBVRSP;
				}

				public Boolean CBVRSPIsNullable(){
				    return false;
				}
				public Boolean CBVRSPIsKey(){
				    return false;
				}
				public Integer CBVRSPLength(){
				    return 11;
				}
				public Integer CBVRSPPrecision(){
				    return 2;
				}
				public String CBVRSPDefault(){
				
					return "";
				
				}
				public String CBVRSPComment(){
				
				    return "";
				
				}
				public String CBVRSPPattern(){
				
					return "";
				
				}
				public String CBVRSPOriginalDbColumnName(){
				
					return "CBVRSP";
				
				}

				
			    public BigDecimal CBVRSY;

				public BigDecimal getCBVRSY () {
					return this.CBVRSY;
				}

				public Boolean CBVRSYIsNullable(){
				    return false;
				}
				public Boolean CBVRSYIsKey(){
				    return false;
				}
				public Integer CBVRSYLength(){
				    return 11;
				}
				public Integer CBVRSYPrecision(){
				    return 2;
				}
				public String CBVRSYDefault(){
				
					return "";
				
				}
				public String CBVRSYComment(){
				
				    return "";
				
				}
				public String CBVRSYPattern(){
				
					return "";
				
				}
				public String CBVRSYOriginalDbColumnName(){
				
					return "CBVRSY";
				
				}

				
			    public BigDecimal CBRCSP;

				public BigDecimal getCBRCSP () {
					return this.CBRCSP;
				}

				public Boolean CBRCSPIsNullable(){
				    return false;
				}
				public Boolean CBRCSPIsKey(){
				    return false;
				}
				public Integer CBRCSPLength(){
				    return 11;
				}
				public Integer CBRCSPPrecision(){
				    return 2;
				}
				public String CBRCSPDefault(){
				
					return "";
				
				}
				public String CBRCSPComment(){
				
				    return "";
				
				}
				public String CBRCSPPattern(){
				
					return "";
				
				}
				public String CBRCSPOriginalDbColumnName(){
				
					return "CBRCSP";
				
				}

				
			    public BigDecimal CBRCSY;

				public BigDecimal getCBRCSY () {
					return this.CBRCSY;
				}

				public Boolean CBRCSYIsNullable(){
				    return false;
				}
				public Boolean CBRCSYIsKey(){
				    return false;
				}
				public Integer CBRCSYLength(){
				    return 11;
				}
				public Integer CBRCSYPrecision(){
				    return 2;
				}
				public String CBRCSYDefault(){
				
					return "";
				
				}
				public String CBRCSYComment(){
				
				    return "";
				
				}
				public String CBRCSYPattern(){
				
					return "";
				
				}
				public String CBRCSYOriginalDbColumnName(){
				
					return "CBRCSY";
				
				}

				
			    public BigDecimal CBASUP;

				public BigDecimal getCBASUP () {
					return this.CBASUP;
				}

				public Boolean CBASUPIsNullable(){
				    return false;
				}
				public Boolean CBASUPIsKey(){
				    return false;
				}
				public Integer CBASUPLength(){
				    return 9;
				}
				public Integer CBASUPPrecision(){
				    return 2;
				}
				public String CBASUPDefault(){
				
					return "";
				
				}
				public String CBASUPComment(){
				
				    return "";
				
				}
				public String CBASUPPattern(){
				
					return "";
				
				}
				public String CBASUPOriginalDbColumnName(){
				
					return "CBASUP";
				
				}

				
			    public BigDecimal CBASUY;

				public BigDecimal getCBASUY () {
					return this.CBASUY;
				}

				public Boolean CBASUYIsNullable(){
				    return false;
				}
				public Boolean CBASUYIsKey(){
				    return false;
				}
				public Integer CBASUYLength(){
				    return 9;
				}
				public Integer CBASUYPrecision(){
				    return 2;
				}
				public String CBASUYDefault(){
				
					return "";
				
				}
				public String CBASUYComment(){
				
				    return "";
				
				}
				public String CBASUYPattern(){
				
					return "";
				
				}
				public String CBASUYOriginalDbColumnName(){
				
					return "CBASUY";
				
				}

				
			    public BigDecimal CBASDP;

				public BigDecimal getCBASDP () {
					return this.CBASDP;
				}

				public Boolean CBASDPIsNullable(){
				    return false;
				}
				public Boolean CBASDPIsKey(){
				    return false;
				}
				public Integer CBASDPLength(){
				    return 11;
				}
				public Integer CBASDPPrecision(){
				    return 2;
				}
				public String CBASDPDefault(){
				
					return "";
				
				}
				public String CBASDPComment(){
				
				    return "";
				
				}
				public String CBASDPPattern(){
				
					return "";
				
				}
				public String CBASDPOriginalDbColumnName(){
				
					return "CBASDP";
				
				}

				
			    public BigDecimal CBASDY;

				public BigDecimal getCBASDY () {
					return this.CBASDY;
				}

				public Boolean CBASDYIsNullable(){
				    return false;
				}
				public Boolean CBASDYIsKey(){
				    return false;
				}
				public Integer CBASDYLength(){
				    return 11;
				}
				public Integer CBASDYPrecision(){
				    return 2;
				}
				public String CBASDYDefault(){
				
					return "";
				
				}
				public String CBASDYComment(){
				
				    return "";
				
				}
				public String CBASDYPattern(){
				
					return "";
				
				}
				public String CBASDYOriginalDbColumnName(){
				
					return "CBASDY";
				
				}

				
			    public BigDecimal CBVASP;

				public BigDecimal getCBVASP () {
					return this.CBVASP;
				}

				public Boolean CBVASPIsNullable(){
				    return false;
				}
				public Boolean CBVASPIsKey(){
				    return false;
				}
				public Integer CBVASPLength(){
				    return 11;
				}
				public Integer CBVASPPrecision(){
				    return 2;
				}
				public String CBVASPDefault(){
				
					return "";
				
				}
				public String CBVASPComment(){
				
				    return "";
				
				}
				public String CBVASPPattern(){
				
					return "";
				
				}
				public String CBVASPOriginalDbColumnName(){
				
					return "CBVASP";
				
				}

				
			    public BigDecimal CBVASY;

				public BigDecimal getCBVASY () {
					return this.CBVASY;
				}

				public Boolean CBVASYIsNullable(){
				    return false;
				}
				public Boolean CBVASYIsKey(){
				    return false;
				}
				public Integer CBVASYLength(){
				    return 11;
				}
				public Integer CBVASYPrecision(){
				    return 2;
				}
				public String CBVASYDefault(){
				
					return "";
				
				}
				public String CBVASYComment(){
				
				    return "";
				
				}
				public String CBVASYPattern(){
				
					return "";
				
				}
				public String CBVASYOriginalDbColumnName(){
				
					return "CBVASY";
				
				}

				
			    public BigDecimal CBACSP;

				public BigDecimal getCBACSP () {
					return this.CBACSP;
				}

				public Boolean CBACSPIsNullable(){
				    return false;
				}
				public Boolean CBACSPIsKey(){
				    return false;
				}
				public Integer CBACSPLength(){
				    return 11;
				}
				public Integer CBACSPPrecision(){
				    return 2;
				}
				public String CBACSPDefault(){
				
					return "";
				
				}
				public String CBACSPComment(){
				
				    return "";
				
				}
				public String CBACSPPattern(){
				
					return "";
				
				}
				public String CBACSPOriginalDbColumnName(){
				
					return "CBACSP";
				
				}

				
			    public BigDecimal CBACSY;

				public BigDecimal getCBACSY () {
					return this.CBACSY;
				}

				public Boolean CBACSYIsNullable(){
				    return false;
				}
				public Boolean CBACSYIsKey(){
				    return false;
				}
				public Integer CBACSYLength(){
				    return 11;
				}
				public Integer CBACSYPrecision(){
				    return 2;
				}
				public String CBACSYDefault(){
				
					return "";
				
				}
				public String CBACSYComment(){
				
				    return "";
				
				}
				public String CBACSYPattern(){
				
					return "";
				
				}
				public String CBACSYOriginalDbColumnName(){
				
					return "CBACSY";
				
				}

				
			    public BigDecimal CBRETS;

				public BigDecimal getCBRETS () {
					return this.CBRETS;
				}

				public Boolean CBRETSIsNullable(){
				    return false;
				}
				public Boolean CBRETSIsKey(){
				    return false;
				}
				public Integer CBRETSLength(){
				    return 9;
				}
				public Integer CBRETSPrecision(){
				    return 2;
				}
				public String CBRETSDefault(){
				
					return "";
				
				}
				public String CBRETSComment(){
				
				    return "";
				
				}
				public String CBRETSPattern(){
				
					return "";
				
				}
				public String CBRETSOriginalDbColumnName(){
				
					return "CBRETS";
				
				}

				
			    public BigDecimal CBRCUP;

				public BigDecimal getCBRCUP () {
					return this.CBRCUP;
				}

				public Boolean CBRCUPIsNullable(){
				    return false;
				}
				public Boolean CBRCUPIsKey(){
				    return false;
				}
				public Integer CBRCUPLength(){
				    return 9;
				}
				public Integer CBRCUPPrecision(){
				    return 2;
				}
				public String CBRCUPDefault(){
				
					return "";
				
				}
				public String CBRCUPComment(){
				
				    return "";
				
				}
				public String CBRCUPPattern(){
				
					return "";
				
				}
				public String CBRCUPOriginalDbColumnName(){
				
					return "CBRCUP";
				
				}

				
			    public BigDecimal CBRCUY;

				public BigDecimal getCBRCUY () {
					return this.CBRCUY;
				}

				public Boolean CBRCUYIsNullable(){
				    return false;
				}
				public Boolean CBRCUYIsKey(){
				    return false;
				}
				public Integer CBRCUYLength(){
				    return 9;
				}
				public Integer CBRCUYPrecision(){
				    return 2;
				}
				public String CBRCUYDefault(){
				
					return "";
				
				}
				public String CBRCUYComment(){
				
				    return "";
				
				}
				public String CBRCUYPattern(){
				
					return "";
				
				}
				public String CBRCUYOriginalDbColumnName(){
				
					return "CBRCUY";
				
				}

				
			    public BigDecimal CBRCDP;

				public BigDecimal getCBRCDP () {
					return this.CBRCDP;
				}

				public Boolean CBRCDPIsNullable(){
				    return false;
				}
				public Boolean CBRCDPIsKey(){
				    return false;
				}
				public Integer CBRCDPLength(){
				    return 11;
				}
				public Integer CBRCDPPrecision(){
				    return 2;
				}
				public String CBRCDPDefault(){
				
					return "";
				
				}
				public String CBRCDPComment(){
				
				    return "";
				
				}
				public String CBRCDPPattern(){
				
					return "";
				
				}
				public String CBRCDPOriginalDbColumnName(){
				
					return "CBRCDP";
				
				}

				
			    public BigDecimal CBRCDY;

				public BigDecimal getCBRCDY () {
					return this.CBRCDY;
				}

				public Boolean CBRCDYIsNullable(){
				    return false;
				}
				public Boolean CBRCDYIsKey(){
				    return false;
				}
				public Integer CBRCDYLength(){
				    return 11;
				}
				public Integer CBRCDYPrecision(){
				    return 2;
				}
				public String CBRCDYDefault(){
				
					return "";
				
				}
				public String CBRCDYComment(){
				
				    return "";
				
				}
				public String CBRCDYPattern(){
				
					return "";
				
				}
				public String CBRCDYOriginalDbColumnName(){
				
					return "CBRCDY";
				
				}

				
			    public BigDecimal CBTIUP;

				public BigDecimal getCBTIUP () {
					return this.CBTIUP;
				}

				public Boolean CBTIUPIsNullable(){
				    return false;
				}
				public Boolean CBTIUPIsKey(){
				    return false;
				}
				public Integer CBTIUPLength(){
				    return 9;
				}
				public Integer CBTIUPPrecision(){
				    return 2;
				}
				public String CBTIUPDefault(){
				
					return "";
				
				}
				public String CBTIUPComment(){
				
				    return "";
				
				}
				public String CBTIUPPattern(){
				
					return "";
				
				}
				public String CBTIUPOriginalDbColumnName(){
				
					return "CBTIUP";
				
				}

				
			    public BigDecimal CBTIUY;

				public BigDecimal getCBTIUY () {
					return this.CBTIUY;
				}

				public Boolean CBTIUYIsNullable(){
				    return false;
				}
				public Boolean CBTIUYIsKey(){
				    return false;
				}
				public Integer CBTIUYLength(){
				    return 9;
				}
				public Integer CBTIUYPrecision(){
				    return 2;
				}
				public String CBTIUYDefault(){
				
					return "";
				
				}
				public String CBTIUYComment(){
				
				    return "";
				
				}
				public String CBTIUYPattern(){
				
					return "";
				
				}
				public String CBTIUYOriginalDbColumnName(){
				
					return "CBTIUY";
				
				}

				
			    public BigDecimal CBTOUP;

				public BigDecimal getCBTOUP () {
					return this.CBTOUP;
				}

				public Boolean CBTOUPIsNullable(){
				    return false;
				}
				public Boolean CBTOUPIsKey(){
				    return false;
				}
				public Integer CBTOUPLength(){
				    return 9;
				}
				public Integer CBTOUPPrecision(){
				    return 2;
				}
				public String CBTOUPDefault(){
				
					return "";
				
				}
				public String CBTOUPComment(){
				
				    return "";
				
				}
				public String CBTOUPPattern(){
				
					return "";
				
				}
				public String CBTOUPOriginalDbColumnName(){
				
					return "CBTOUP";
				
				}

				
			    public BigDecimal CBTOUY;

				public BigDecimal getCBTOUY () {
					return this.CBTOUY;
				}

				public Boolean CBTOUYIsNullable(){
				    return false;
				}
				public Boolean CBTOUYIsKey(){
				    return false;
				}
				public Integer CBTOUYLength(){
				    return 9;
				}
				public Integer CBTOUYPrecision(){
				    return 2;
				}
				public String CBTOUYDefault(){
				
					return "";
				
				}
				public String CBTOUYComment(){
				
				    return "";
				
				}
				public String CBTOUYPattern(){
				
					return "";
				
				}
				public String CBTOUYOriginalDbColumnName(){
				
					return "CBTOUY";
				
				}

				
			    public BigDecimal CBTFDP;

				public BigDecimal getCBTFDP () {
					return this.CBTFDP;
				}

				public Boolean CBTFDPIsNullable(){
				    return false;
				}
				public Boolean CBTFDPIsKey(){
				    return false;
				}
				public Integer CBTFDPLength(){
				    return 11;
				}
				public Integer CBTFDPPrecision(){
				    return 2;
				}
				public String CBTFDPDefault(){
				
					return "";
				
				}
				public String CBTFDPComment(){
				
				    return "";
				
				}
				public String CBTFDPPattern(){
				
					return "";
				
				}
				public String CBTFDPOriginalDbColumnName(){
				
					return "CBTFDP";
				
				}

				
			    public BigDecimal CBTFDY;

				public BigDecimal getCBTFDY () {
					return this.CBTFDY;
				}

				public Boolean CBTFDYIsNullable(){
				    return false;
				}
				public Boolean CBTFDYIsKey(){
				    return false;
				}
				public Integer CBTFDYLength(){
				    return 11;
				}
				public Integer CBTFDYPrecision(){
				    return 2;
				}
				public String CBTFDYDefault(){
				
					return "";
				
				}
				public String CBTFDYComment(){
				
				    return "";
				
				}
				public String CBTFDYPattern(){
				
					return "";
				
				}
				public String CBTFDYOriginalDbColumnName(){
				
					return "CBTFDY";
				
				}

				
			    public BigDecimal CBRVUP;

				public BigDecimal getCBRVUP () {
					return this.CBRVUP;
				}

				public Boolean CBRVUPIsNullable(){
				    return false;
				}
				public Boolean CBRVUPIsKey(){
				    return false;
				}
				public Integer CBRVUPLength(){
				    return 9;
				}
				public Integer CBRVUPPrecision(){
				    return 2;
				}
				public String CBRVUPDefault(){
				
					return "";
				
				}
				public String CBRVUPComment(){
				
				    return "";
				
				}
				public String CBRVUPPattern(){
				
					return "";
				
				}
				public String CBRVUPOriginalDbColumnName(){
				
					return "CBRVUP";
				
				}

				
			    public BigDecimal CBRVUY;

				public BigDecimal getCBRVUY () {
					return this.CBRVUY;
				}

				public Boolean CBRVUYIsNullable(){
				    return false;
				}
				public Boolean CBRVUYIsKey(){
				    return false;
				}
				public Integer CBRVUYLength(){
				    return 9;
				}
				public Integer CBRVUYPrecision(){
				    return 2;
				}
				public String CBRVUYDefault(){
				
					return "";
				
				}
				public String CBRVUYComment(){
				
				    return "";
				
				}
				public String CBRVUYPattern(){
				
					return "";
				
				}
				public String CBRVUYOriginalDbColumnName(){
				
					return "CBRVUY";
				
				}

				
			    public BigDecimal CBRVDP;

				public BigDecimal getCBRVDP () {
					return this.CBRVDP;
				}

				public Boolean CBRVDPIsNullable(){
				    return false;
				}
				public Boolean CBRVDPIsKey(){
				    return false;
				}
				public Integer CBRVDPLength(){
				    return 11;
				}
				public Integer CBRVDPPrecision(){
				    return 2;
				}
				public String CBRVDPDefault(){
				
					return "";
				
				}
				public String CBRVDPComment(){
				
				    return "";
				
				}
				public String CBRVDPPattern(){
				
					return "";
				
				}
				public String CBRVDPOriginalDbColumnName(){
				
					return "CBRVDP";
				
				}

				
			    public BigDecimal CBRVDY;

				public BigDecimal getCBRVDY () {
					return this.CBRVDY;
				}

				public Boolean CBRVDYIsNullable(){
				    return false;
				}
				public Boolean CBRVDYIsKey(){
				    return false;
				}
				public Integer CBRVDYLength(){
				    return 11;
				}
				public Integer CBRVDYPrecision(){
				    return 2;
				}
				public String CBRVDYDefault(){
				
					return "";
				
				}
				public String CBRVDYComment(){
				
				    return "";
				
				}
				public String CBRVDYPattern(){
				
					return "";
				
				}
				public String CBRVDYOriginalDbColumnName(){
				
					return "CBRVDY";
				
				}

				
			    public BigDecimal CBAJUP;

				public BigDecimal getCBAJUP () {
					return this.CBAJUP;
				}

				public Boolean CBAJUPIsNullable(){
				    return false;
				}
				public Boolean CBAJUPIsKey(){
				    return false;
				}
				public Integer CBAJUPLength(){
				    return 9;
				}
				public Integer CBAJUPPrecision(){
				    return 2;
				}
				public String CBAJUPDefault(){
				
					return "";
				
				}
				public String CBAJUPComment(){
				
				    return "";
				
				}
				public String CBAJUPPattern(){
				
					return "";
				
				}
				public String CBAJUPOriginalDbColumnName(){
				
					return "CBAJUP";
				
				}

				
			    public BigDecimal CBAJUY;

				public BigDecimal getCBAJUY () {
					return this.CBAJUY;
				}

				public Boolean CBAJUYIsNullable(){
				    return false;
				}
				public Boolean CBAJUYIsKey(){
				    return false;
				}
				public Integer CBAJUYLength(){
				    return 9;
				}
				public Integer CBAJUYPrecision(){
				    return 2;
				}
				public String CBAJUYDefault(){
				
					return "";
				
				}
				public String CBAJUYComment(){
				
				    return "";
				
				}
				public String CBAJUYPattern(){
				
					return "";
				
				}
				public String CBAJUYOriginalDbColumnName(){
				
					return "CBAJUY";
				
				}

				
			    public BigDecimal CBAJDP;

				public BigDecimal getCBAJDP () {
					return this.CBAJDP;
				}

				public Boolean CBAJDPIsNullable(){
				    return false;
				}
				public Boolean CBAJDPIsKey(){
				    return false;
				}
				public Integer CBAJDPLength(){
				    return 11;
				}
				public Integer CBAJDPPrecision(){
				    return 2;
				}
				public String CBAJDPDefault(){
				
					return "";
				
				}
				public String CBAJDPComment(){
				
				    return "";
				
				}
				public String CBAJDPPattern(){
				
					return "";
				
				}
				public String CBAJDPOriginalDbColumnName(){
				
					return "CBAJDP";
				
				}

				
			    public BigDecimal CBAJDY;

				public BigDecimal getCBAJDY () {
					return this.CBAJDY;
				}

				public Boolean CBAJDYIsNullable(){
				    return false;
				}
				public Boolean CBAJDYIsKey(){
				    return false;
				}
				public Integer CBAJDYLength(){
				    return 11;
				}
				public Integer CBAJDYPrecision(){
				    return 2;
				}
				public String CBAJDYDefault(){
				
					return "";
				
				}
				public String CBAJDYComment(){
				
				    return "";
				
				}
				public String CBAJDYPattern(){
				
					return "";
				
				}
				public String CBAJDYOriginalDbColumnName(){
				
					return "CBAJDY";
				
				}

				
			    public BigDecimal CBPHUP;

				public BigDecimal getCBPHUP () {
					return this.CBPHUP;
				}

				public Boolean CBPHUPIsNullable(){
				    return false;
				}
				public Boolean CBPHUPIsKey(){
				    return false;
				}
				public Integer CBPHUPLength(){
				    return 9;
				}
				public Integer CBPHUPPrecision(){
				    return 2;
				}
				public String CBPHUPDefault(){
				
					return "";
				
				}
				public String CBPHUPComment(){
				
				    return "";
				
				}
				public String CBPHUPPattern(){
				
					return "";
				
				}
				public String CBPHUPOriginalDbColumnName(){
				
					return "CBPHUP";
				
				}

				
			    public BigDecimal CBPHUY;

				public BigDecimal getCBPHUY () {
					return this.CBPHUY;
				}

				public Boolean CBPHUYIsNullable(){
				    return false;
				}
				public Boolean CBPHUYIsKey(){
				    return false;
				}
				public Integer CBPHUYLength(){
				    return 9;
				}
				public Integer CBPHUYPrecision(){
				    return 2;
				}
				public String CBPHUYDefault(){
				
					return "";
				
				}
				public String CBPHUYComment(){
				
				    return "";
				
				}
				public String CBPHUYPattern(){
				
					return "";
				
				}
				public String CBPHUYOriginalDbColumnName(){
				
					return "CBPHUY";
				
				}

				
			    public BigDecimal CBPHDP;

				public BigDecimal getCBPHDP () {
					return this.CBPHDP;
				}

				public Boolean CBPHDPIsNullable(){
				    return false;
				}
				public Boolean CBPHDPIsKey(){
				    return false;
				}
				public Integer CBPHDPLength(){
				    return 11;
				}
				public Integer CBPHDPPrecision(){
				    return 2;
				}
				public String CBPHDPDefault(){
				
					return "";
				
				}
				public String CBPHDPComment(){
				
				    return "";
				
				}
				public String CBPHDPPattern(){
				
					return "";
				
				}
				public String CBPHDPOriginalDbColumnName(){
				
					return "CBPHDP";
				
				}

				
			    public BigDecimal CBPHDY;

				public BigDecimal getCBPHDY () {
					return this.CBPHDY;
				}

				public Boolean CBPHDYIsNullable(){
				    return false;
				}
				public Boolean CBPHDYIsKey(){
				    return false;
				}
				public Integer CBPHDYLength(){
				    return 11;
				}
				public Integer CBPHDYPrecision(){
				    return 2;
				}
				public String CBPHDYDefault(){
				
					return "";
				
				}
				public String CBPHDYComment(){
				
				    return "";
				
				}
				public String CBPHDYPattern(){
				
					return "";
				
				}
				public String CBPHDYOriginalDbColumnName(){
				
					return "CBPHDY";
				
				}

				
			    public BigDecimal CBAVGC;

				public BigDecimal getCBAVGC () {
					return this.CBAVGC;
				}

				public Boolean CBAVGCIsNullable(){
				    return false;
				}
				public Boolean CBAVGCIsKey(){
				    return false;
				}
				public Integer CBAVGCLength(){
				    return 11;
				}
				public Integer CBAVGCPrecision(){
				    return 4;
				}
				public String CBAVGCDefault(){
				
					return "";
				
				}
				public String CBAVGCComment(){
				
				    return "";
				
				}
				public String CBAVGCPattern(){
				
					return "";
				
				}
				public String CBAVGCOriginalDbColumnName(){
				
					return "CBAVGC";
				
				}

				
			    public BigDecimal CBAVOH;

				public BigDecimal getCBAVOH () {
					return this.CBAVOH;
				}

				public Boolean CBAVOHIsNullable(){
				    return false;
				}
				public Boolean CBAVOHIsKey(){
				    return false;
				}
				public Integer CBAVOHLength(){
				    return 9;
				}
				public Integer CBAVOHPrecision(){
				    return 2;
				}
				public String CBAVOHDefault(){
				
					return "";
				
				}
				public String CBAVOHComment(){
				
				    return "";
				
				}
				public String CBAVOHPattern(){
				
					return "";
				
				}
				public String CBAVOHOriginalDbColumnName(){
				
					return "CBAVOH";
				
				}

				
			    public BigDecimal CBAVRT;

				public BigDecimal getCBAVRT () {
					return this.CBAVRT;
				}

				public Boolean CBAVRTIsNullable(){
				    return false;
				}
				public Boolean CBAVRTIsKey(){
				    return false;
				}
				public Integer CBAVRTLength(){
				    return 11;
				}
				public Integer CBAVRTPrecision(){
				    return 2;
				}
				public String CBAVRTDefault(){
				
					return "";
				
				}
				public String CBAVRTComment(){
				
				    return "";
				
				}
				public String CBAVRTPattern(){
				
					return "";
				
				}
				public String CBAVRTOriginalDbColumnName(){
				
					return "CBAVRT";
				
				}

				
			    public BigDecimal CBAVCS;

				public BigDecimal getCBAVCS () {
					return this.CBAVCS;
				}

				public Boolean CBAVCSIsNullable(){
				    return false;
				}
				public Boolean CBAVCSIsKey(){
				    return false;
				}
				public Integer CBAVCSLength(){
				    return 11;
				}
				public Integer CBAVCSPrecision(){
				    return 3;
				}
				public String CBAVCSDefault(){
				
					return "";
				
				}
				public String CBAVCSComment(){
				
				    return "";
				
				}
				public String CBAVCSPattern(){
				
					return "";
				
				}
				public String CBAVCSOriginalDbColumnName(){
				
					return "CBAVCS";
				
				}

				
			    public BigDecimal CBDEPT;

				public BigDecimal getCBDEPT () {
					return this.CBDEPT;
				}

				public Boolean CBDEPTIsNullable(){
				    return false;
				}
				public Boolean CBDEPTIsKey(){
				    return false;
				}
				public Integer CBDEPTLength(){
				    return 3;
				}
				public Integer CBDEPTPrecision(){
				    return 0;
				}
				public String CBDEPTDefault(){
				
					return "";
				
				}
				public String CBDEPTComment(){
				
				    return "";
				
				}
				public String CBDEPTPattern(){
				
					return "";
				
				}
				public String CBDEPTOriginalDbColumnName(){
				
					return "CBDEPT";
				
				}

				
			    public BigDecimal CBSDPT;

				public BigDecimal getCBSDPT () {
					return this.CBSDPT;
				}

				public Boolean CBSDPTIsNullable(){
				    return false;
				}
				public Boolean CBSDPTIsKey(){
				    return false;
				}
				public Integer CBSDPTLength(){
				    return 3;
				}
				public Integer CBSDPTPrecision(){
				    return 0;
				}
				public String CBSDPTDefault(){
				
					return "";
				
				}
				public String CBSDPTComment(){
				
				    return "";
				
				}
				public String CBSDPTPattern(){
				
					return "";
				
				}
				public String CBSDPTOriginalDbColumnName(){
				
					return "CBSDPT";
				
				}

				
			    public BigDecimal CBCLAS;

				public BigDecimal getCBCLAS () {
					return this.CBCLAS;
				}

				public Boolean CBCLASIsNullable(){
				    return false;
				}
				public Boolean CBCLASIsKey(){
				    return false;
				}
				public Integer CBCLASLength(){
				    return 3;
				}
				public Integer CBCLASPrecision(){
				    return 0;
				}
				public String CBCLASDefault(){
				
					return "";
				
				}
				public String CBCLASComment(){
				
				    return "";
				
				}
				public String CBCLASPattern(){
				
					return "";
				
				}
				public String CBCLASOriginalDbColumnName(){
				
					return "CBCLAS";
				
				}

				
			    public BigDecimal CBSCLS;

				public BigDecimal getCBSCLS () {
					return this.CBSCLS;
				}

				public Boolean CBSCLSIsNullable(){
				    return false;
				}
				public Boolean CBSCLSIsKey(){
				    return false;
				}
				public Integer CBSCLSLength(){
				    return 3;
				}
				public Integer CBSCLSPrecision(){
				    return 0;
				}
				public String CBSCLSDefault(){
				
					return "";
				
				}
				public String CBSCLSComment(){
				
				    return "";
				
				}
				public String CBSCLSPattern(){
				
					return "";
				
				}
				public String CBSCLSOriginalDbColumnName(){
				
					return "CBSCLS";
				
				}

				
			    public BigDecimal CBVNDR;

				public BigDecimal getCBVNDR () {
					return this.CBVNDR;
				}

				public Boolean CBVNDRIsNullable(){
				    return false;
				}
				public Boolean CBVNDRIsKey(){
				    return false;
				}
				public Integer CBVNDRLength(){
				    return 6;
				}
				public Integer CBVNDRPrecision(){
				    return 0;
				}
				public String CBVNDRDefault(){
				
					return "";
				
				}
				public String CBVNDRComment(){
				
				    return "";
				
				}
				public String CBVNDRPattern(){
				
					return "";
				
				}
				public String CBVNDROriginalDbColumnName(){
				
					return "CBVNDR";
				
				}

				
			    public String CBSTYL;

				public String getCBSTYL () {
					return this.CBSTYL;
				}

				public Boolean CBSTYLIsNullable(){
				    return false;
				}
				public Boolean CBSTYLIsKey(){
				    return false;
				}
				public Integer CBSTYLLength(){
				    return 15;
				}
				public Integer CBSTYLPrecision(){
				    return 0;
				}
				public String CBSTYLDefault(){
				
					return "";
				
				}
				public String CBSTYLComment(){
				
				    return "";
				
				}
				public String CBSTYLPattern(){
				
					return "";
				
				}
				public String CBSTYLOriginalDbColumnName(){
				
					return "CBSTYL";
				
				}

				
			    public BigDecimal CBPOOQ;

				public BigDecimal getCBPOOQ () {
					return this.CBPOOQ;
				}

				public Boolean CBPOOQIsNullable(){
				    return false;
				}
				public Boolean CBPOOQIsKey(){
				    return false;
				}
				public Integer CBPOOQLength(){
				    return 9;
				}
				public Integer CBPOOQPrecision(){
				    return 2;
				}
				public String CBPOOQDefault(){
				
					return "";
				
				}
				public String CBPOOQComment(){
				
				    return "";
				
				}
				public String CBPOOQPattern(){
				
					return "";
				
				}
				public String CBPOOQOriginalDbColumnName(){
				
					return "CBPOOQ";
				
				}

				
			    public BigDecimal CBTOOQ;

				public BigDecimal getCBTOOQ () {
					return this.CBTOOQ;
				}

				public Boolean CBTOOQIsNullable(){
				    return false;
				}
				public Boolean CBTOOQIsKey(){
				    return false;
				}
				public Integer CBTOOQLength(){
				    return 9;
				}
				public Integer CBTOOQPrecision(){
				    return 2;
				}
				public String CBTOOQDefault(){
				
					return "";
				
				}
				public String CBTOOQComment(){
				
				    return "";
				
				}
				public String CBTOOQPattern(){
				
					return "";
				
				}
				public String CBTOOQOriginalDbColumnName(){
				
					return "CBTOOQ";
				
				}

				
			    public BigDecimal CBINTQ;

				public BigDecimal getCBINTQ () {
					return this.CBINTQ;
				}

				public Boolean CBINTQIsNullable(){
				    return false;
				}
				public Boolean CBINTQIsKey(){
				    return false;
				}
				public Integer CBINTQLength(){
				    return 9;
				}
				public Integer CBINTQPrecision(){
				    return 2;
				}
				public String CBINTQDefault(){
				
					return "";
				
				}
				public String CBINTQComment(){
				
				    return "";
				
				}
				public String CBINTQPattern(){
				
					return "";
				
				}
				public String CBINTQOriginalDbColumnName(){
				
					return "CBINTQ";
				
				}

				
			    public BigDecimal CBMASU;

				public BigDecimal getCBMASU () {
					return this.CBMASU;
				}

				public Boolean CBMASUIsNullable(){
				    return false;
				}
				public Boolean CBMASUIsKey(){
				    return false;
				}
				public Integer CBMASULength(){
				    return 9;
				}
				public Integer CBMASUPrecision(){
				    return 2;
				}
				public String CBMASUDefault(){
				
					return "";
				
				}
				public String CBMASUComment(){
				
				    return "";
				
				}
				public String CBMASUPattern(){
				
					return "";
				
				}
				public String CBMASUOriginalDbColumnName(){
				
					return "CBMASU";
				
				}

				
			    public BigDecimal CBMASD;

				public BigDecimal getCBMASD () {
					return this.CBMASD;
				}

				public Boolean CBMASDIsNullable(){
				    return false;
				}
				public Boolean CBMASDIsKey(){
				    return false;
				}
				public Integer CBMASDLength(){
				    return 11;
				}
				public Integer CBMASDPrecision(){
				    return 2;
				}
				public String CBMASDDefault(){
				
					return "";
				
				}
				public String CBMASDComment(){
				
				    return "";
				
				}
				public String CBMASDPattern(){
				
					return "";
				
				}
				public String CBMASDOriginalDbColumnName(){
				
					return "CBMASD";
				
				}

				
			    public BigDecimal CBMASV;

				public BigDecimal getCBMASV () {
					return this.CBMASV;
				}

				public Boolean CBMASVIsNullable(){
				    return false;
				}
				public Boolean CBMASVIsKey(){
				    return false;
				}
				public Integer CBMASVLength(){
				    return 11;
				}
				public Integer CBMASVPrecision(){
				    return 2;
				}
				public String CBMASVDefault(){
				
					return "";
				
				}
				public String CBMASVComment(){
				
				    return "";
				
				}
				public String CBMASVPattern(){
				
					return "";
				
				}
				public String CBMASVOriginalDbColumnName(){
				
					return "CBMASV";
				
				}

				
			    public BigDecimal CBMASC;

				public BigDecimal getCBMASC () {
					return this.CBMASC;
				}

				public Boolean CBMASCIsNullable(){
				    return false;
				}
				public Boolean CBMASCIsKey(){
				    return false;
				}
				public Integer CBMASCLength(){
				    return 11;
				}
				public Integer CBMASCPrecision(){
				    return 2;
				}
				public String CBMASCDefault(){
				
					return "";
				
				}
				public String CBMASCComment(){
				
				    return "";
				
				}
				public String CBMASCPattern(){
				
					return "";
				
				}
				public String CBMASCOriginalDbColumnName(){
				
					return "CBMASC";
				
				}

				
			    public BigDecimal CBLAVC;

				public BigDecimal getCBLAVC () {
					return this.CBLAVC;
				}

				public Boolean CBLAVCIsNullable(){
				    return false;
				}
				public Boolean CBLAVCIsKey(){
				    return false;
				}
				public Integer CBLAVCLength(){
				    return 11;
				}
				public Integer CBLAVCPrecision(){
				    return 4;
				}
				public String CBLAVCDefault(){
				
					return "";
				
				}
				public String CBLAVCComment(){
				
				    return "";
				
				}
				public String CBLAVCPattern(){
				
					return "";
				
				}
				public String CBLAVCOriginalDbColumnName(){
				
					return "CBLAVC";
				
				}

				
			    public BigDecimal CBARQT;

				public BigDecimal getCBARQT () {
					return this.CBARQT;
				}

				public Boolean CBARQTIsNullable(){
				    return false;
				}
				public Boolean CBARQTIsKey(){
				    return false;
				}
				public Integer CBARQTLength(){
				    return 9;
				}
				public Integer CBARQTPrecision(){
				    return 2;
				}
				public String CBARQTDefault(){
				
					return "";
				
				}
				public String CBARQTComment(){
				
				    return "";
				
				}
				public String CBARQTPattern(){
				
					return "";
				
				}
				public String CBARQTOriginalDbColumnName(){
				
					return "CBARQT";
				
				}

				
			    public BigDecimal CBNSQT;

				public BigDecimal getCBNSQT () {
					return this.CBNSQT;
				}

				public Boolean CBNSQTIsNullable(){
				    return false;
				}
				public Boolean CBNSQTIsKey(){
				    return false;
				}
				public Integer CBNSQTLength(){
				    return 9;
				}
				public Integer CBNSQTPrecision(){
				    return 2;
				}
				public String CBNSQTDefault(){
				
					return "";
				
				}
				public String CBNSQTComment(){
				
				    return "";
				
				}
				public String CBNSQTPattern(){
				
					return "";
				
				}
				public String CBNSQTOriginalDbColumnName(){
				
					return "CBNSQT";
				
				}

				
			    public BigDecimal CBHLDQ;

				public BigDecimal getCBHLDQ () {
					return this.CBHLDQ;
				}

				public Boolean CBHLDQIsNullable(){
				    return false;
				}
				public Boolean CBHLDQIsKey(){
				    return false;
				}
				public Integer CBHLDQLength(){
				    return 9;
				}
				public Integer CBHLDQPrecision(){
				    return 2;
				}
				public String CBHLDQDefault(){
				
					return "";
				
				}
				public String CBHLDQComment(){
				
				    return "";
				
				}
				public String CBHLDQPattern(){
				
					return "";
				
				}
				public String CBHLDQOriginalDbColumnName(){
				
					return "CBHLDQ";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.CBHBOY = (BigDecimal) dis.readObject();
					
						this.CBHBOP = (BigDecimal) dis.readObject();
					
						this.CBHAND = (BigDecimal) dis.readObject();
					
						this.CBTRNS = (BigDecimal) dis.readObject();
					
						this.CBGMRI = (BigDecimal) dis.readObject();
					
						this.CBWKCR = (BigDecimal) dis.readObject();
					
						this.CBWK01 = (BigDecimal) dis.readObject();
					
						this.CBWK02 = (BigDecimal) dis.readObject();
					
						this.CBWK03 = (BigDecimal) dis.readObject();
					
						this.CBWK04 = (BigDecimal) dis.readObject();
					
						this.CBWK05 = (BigDecimal) dis.readObject();
					
						this.CBWK06 = (BigDecimal) dis.readObject();
					
						this.CBWK07 = (BigDecimal) dis.readObject();
					
						this.CBWK08 = (BigDecimal) dis.readObject();
					
						this.CBRSUP = (BigDecimal) dis.readObject();
					
						this.CBRSUY = (BigDecimal) dis.readObject();
					
						this.CBRSDP = (BigDecimal) dis.readObject();
					
						this.CBRSDY = (BigDecimal) dis.readObject();
					
						this.CBVRSP = (BigDecimal) dis.readObject();
					
						this.CBVRSY = (BigDecimal) dis.readObject();
					
						this.CBRCSP = (BigDecimal) dis.readObject();
					
						this.CBRCSY = (BigDecimal) dis.readObject();
					
						this.CBASUP = (BigDecimal) dis.readObject();
					
						this.CBASUY = (BigDecimal) dis.readObject();
					
						this.CBASDP = (BigDecimal) dis.readObject();
					
						this.CBASDY = (BigDecimal) dis.readObject();
					
						this.CBVASP = (BigDecimal) dis.readObject();
					
						this.CBVASY = (BigDecimal) dis.readObject();
					
						this.CBACSP = (BigDecimal) dis.readObject();
					
						this.CBACSY = (BigDecimal) dis.readObject();
					
						this.CBRETS = (BigDecimal) dis.readObject();
					
						this.CBRCUP = (BigDecimal) dis.readObject();
					
						this.CBRCUY = (BigDecimal) dis.readObject();
					
						this.CBRCDP = (BigDecimal) dis.readObject();
					
						this.CBRCDY = (BigDecimal) dis.readObject();
					
						this.CBTIUP = (BigDecimal) dis.readObject();
					
						this.CBTIUY = (BigDecimal) dis.readObject();
					
						this.CBTOUP = (BigDecimal) dis.readObject();
					
						this.CBTOUY = (BigDecimal) dis.readObject();
					
						this.CBTFDP = (BigDecimal) dis.readObject();
					
						this.CBTFDY = (BigDecimal) dis.readObject();
					
						this.CBRVUP = (BigDecimal) dis.readObject();
					
						this.CBRVUY = (BigDecimal) dis.readObject();
					
						this.CBRVDP = (BigDecimal) dis.readObject();
					
						this.CBRVDY = (BigDecimal) dis.readObject();
					
						this.CBAJUP = (BigDecimal) dis.readObject();
					
						this.CBAJUY = (BigDecimal) dis.readObject();
					
						this.CBAJDP = (BigDecimal) dis.readObject();
					
						this.CBAJDY = (BigDecimal) dis.readObject();
					
						this.CBPHUP = (BigDecimal) dis.readObject();
					
						this.CBPHUY = (BigDecimal) dis.readObject();
					
						this.CBPHDP = (BigDecimal) dis.readObject();
					
						this.CBPHDY = (BigDecimal) dis.readObject();
					
						this.CBAVGC = (BigDecimal) dis.readObject();
					
						this.CBAVOH = (BigDecimal) dis.readObject();
					
						this.CBAVRT = (BigDecimal) dis.readObject();
					
						this.CBAVCS = (BigDecimal) dis.readObject();
					
						this.CBDEPT = (BigDecimal) dis.readObject();
					
						this.CBSDPT = (BigDecimal) dis.readObject();
					
						this.CBCLAS = (BigDecimal) dis.readObject();
					
						this.CBSCLS = (BigDecimal) dis.readObject();
					
						this.CBVNDR = (BigDecimal) dis.readObject();
					
					this.CBSTYL = readString(dis);
					
						this.CBPOOQ = (BigDecimal) dis.readObject();
					
						this.CBTOOQ = (BigDecimal) dis.readObject();
					
						this.CBINTQ = (BigDecimal) dis.readObject();
					
						this.CBMASU = (BigDecimal) dis.readObject();
					
						this.CBMASD = (BigDecimal) dis.readObject();
					
						this.CBMASV = (BigDecimal) dis.readObject();
					
						this.CBMASC = (BigDecimal) dis.readObject();
					
						this.CBLAVC = (BigDecimal) dis.readObject();
					
						this.CBARQT = (BigDecimal) dis.readObject();
					
						this.CBNSQT = (BigDecimal) dis.readObject();
					
						this.CBHLDQ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.CBHBOY = (BigDecimal) dis.readObject();
					
						this.CBHBOP = (BigDecimal) dis.readObject();
					
						this.CBHAND = (BigDecimal) dis.readObject();
					
						this.CBTRNS = (BigDecimal) dis.readObject();
					
						this.CBGMRI = (BigDecimal) dis.readObject();
					
						this.CBWKCR = (BigDecimal) dis.readObject();
					
						this.CBWK01 = (BigDecimal) dis.readObject();
					
						this.CBWK02 = (BigDecimal) dis.readObject();
					
						this.CBWK03 = (BigDecimal) dis.readObject();
					
						this.CBWK04 = (BigDecimal) dis.readObject();
					
						this.CBWK05 = (BigDecimal) dis.readObject();
					
						this.CBWK06 = (BigDecimal) dis.readObject();
					
						this.CBWK07 = (BigDecimal) dis.readObject();
					
						this.CBWK08 = (BigDecimal) dis.readObject();
					
						this.CBRSUP = (BigDecimal) dis.readObject();
					
						this.CBRSUY = (BigDecimal) dis.readObject();
					
						this.CBRSDP = (BigDecimal) dis.readObject();
					
						this.CBRSDY = (BigDecimal) dis.readObject();
					
						this.CBVRSP = (BigDecimal) dis.readObject();
					
						this.CBVRSY = (BigDecimal) dis.readObject();
					
						this.CBRCSP = (BigDecimal) dis.readObject();
					
						this.CBRCSY = (BigDecimal) dis.readObject();
					
						this.CBASUP = (BigDecimal) dis.readObject();
					
						this.CBASUY = (BigDecimal) dis.readObject();
					
						this.CBASDP = (BigDecimal) dis.readObject();
					
						this.CBASDY = (BigDecimal) dis.readObject();
					
						this.CBVASP = (BigDecimal) dis.readObject();
					
						this.CBVASY = (BigDecimal) dis.readObject();
					
						this.CBACSP = (BigDecimal) dis.readObject();
					
						this.CBACSY = (BigDecimal) dis.readObject();
					
						this.CBRETS = (BigDecimal) dis.readObject();
					
						this.CBRCUP = (BigDecimal) dis.readObject();
					
						this.CBRCUY = (BigDecimal) dis.readObject();
					
						this.CBRCDP = (BigDecimal) dis.readObject();
					
						this.CBRCDY = (BigDecimal) dis.readObject();
					
						this.CBTIUP = (BigDecimal) dis.readObject();
					
						this.CBTIUY = (BigDecimal) dis.readObject();
					
						this.CBTOUP = (BigDecimal) dis.readObject();
					
						this.CBTOUY = (BigDecimal) dis.readObject();
					
						this.CBTFDP = (BigDecimal) dis.readObject();
					
						this.CBTFDY = (BigDecimal) dis.readObject();
					
						this.CBRVUP = (BigDecimal) dis.readObject();
					
						this.CBRVUY = (BigDecimal) dis.readObject();
					
						this.CBRVDP = (BigDecimal) dis.readObject();
					
						this.CBRVDY = (BigDecimal) dis.readObject();
					
						this.CBAJUP = (BigDecimal) dis.readObject();
					
						this.CBAJUY = (BigDecimal) dis.readObject();
					
						this.CBAJDP = (BigDecimal) dis.readObject();
					
						this.CBAJDY = (BigDecimal) dis.readObject();
					
						this.CBPHUP = (BigDecimal) dis.readObject();
					
						this.CBPHUY = (BigDecimal) dis.readObject();
					
						this.CBPHDP = (BigDecimal) dis.readObject();
					
						this.CBPHDY = (BigDecimal) dis.readObject();
					
						this.CBAVGC = (BigDecimal) dis.readObject();
					
						this.CBAVOH = (BigDecimal) dis.readObject();
					
						this.CBAVRT = (BigDecimal) dis.readObject();
					
						this.CBAVCS = (BigDecimal) dis.readObject();
					
						this.CBDEPT = (BigDecimal) dis.readObject();
					
						this.CBSDPT = (BigDecimal) dis.readObject();
					
						this.CBCLAS = (BigDecimal) dis.readObject();
					
						this.CBSCLS = (BigDecimal) dis.readObject();
					
						this.CBVNDR = (BigDecimal) dis.readObject();
					
					this.CBSTYL = readString(dis);
					
						this.CBPOOQ = (BigDecimal) dis.readObject();
					
						this.CBTOOQ = (BigDecimal) dis.readObject();
					
						this.CBINTQ = (BigDecimal) dis.readObject();
					
						this.CBMASU = (BigDecimal) dis.readObject();
					
						this.CBMASD = (BigDecimal) dis.readObject();
					
						this.CBMASV = (BigDecimal) dis.readObject();
					
						this.CBMASC = (BigDecimal) dis.readObject();
					
						this.CBLAVC = (BigDecimal) dis.readObject();
					
						this.CBARQT = (BigDecimal) dis.readObject();
					
						this.CBNSQT = (BigDecimal) dis.readObject();
					
						this.CBHLDQ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBGMRI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWKCR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVGC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVCS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBDEPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSDPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBCLAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVNDR);
					
					// String
				
						writeString(this.CBSTYL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBINTQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBLAVC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBARQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBNSQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHLDQ);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBGMRI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWKCR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVGC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVCS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBDEPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSDPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBCLAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVNDR);
					
					// String
				
						writeString(this.CBSTYL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBINTQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBLAVC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBARQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBNSQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHLDQ);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INUMBR="+String.valueOf(INUMBR));
		sb.append(",CBHBOY="+String.valueOf(CBHBOY));
		sb.append(",CBHBOP="+String.valueOf(CBHBOP));
		sb.append(",CBHAND="+String.valueOf(CBHAND));
		sb.append(",CBTRNS="+String.valueOf(CBTRNS));
		sb.append(",CBGMRI="+String.valueOf(CBGMRI));
		sb.append(",CBWKCR="+String.valueOf(CBWKCR));
		sb.append(",CBWK01="+String.valueOf(CBWK01));
		sb.append(",CBWK02="+String.valueOf(CBWK02));
		sb.append(",CBWK03="+String.valueOf(CBWK03));
		sb.append(",CBWK04="+String.valueOf(CBWK04));
		sb.append(",CBWK05="+String.valueOf(CBWK05));
		sb.append(",CBWK06="+String.valueOf(CBWK06));
		sb.append(",CBWK07="+String.valueOf(CBWK07));
		sb.append(",CBWK08="+String.valueOf(CBWK08));
		sb.append(",CBRSUP="+String.valueOf(CBRSUP));
		sb.append(",CBRSUY="+String.valueOf(CBRSUY));
		sb.append(",CBRSDP="+String.valueOf(CBRSDP));
		sb.append(",CBRSDY="+String.valueOf(CBRSDY));
		sb.append(",CBVRSP="+String.valueOf(CBVRSP));
		sb.append(",CBVRSY="+String.valueOf(CBVRSY));
		sb.append(",CBRCSP="+String.valueOf(CBRCSP));
		sb.append(",CBRCSY="+String.valueOf(CBRCSY));
		sb.append(",CBASUP="+String.valueOf(CBASUP));
		sb.append(",CBASUY="+String.valueOf(CBASUY));
		sb.append(",CBASDP="+String.valueOf(CBASDP));
		sb.append(",CBASDY="+String.valueOf(CBASDY));
		sb.append(",CBVASP="+String.valueOf(CBVASP));
		sb.append(",CBVASY="+String.valueOf(CBVASY));
		sb.append(",CBACSP="+String.valueOf(CBACSP));
		sb.append(",CBACSY="+String.valueOf(CBACSY));
		sb.append(",CBRETS="+String.valueOf(CBRETS));
		sb.append(",CBRCUP="+String.valueOf(CBRCUP));
		sb.append(",CBRCUY="+String.valueOf(CBRCUY));
		sb.append(",CBRCDP="+String.valueOf(CBRCDP));
		sb.append(",CBRCDY="+String.valueOf(CBRCDY));
		sb.append(",CBTIUP="+String.valueOf(CBTIUP));
		sb.append(",CBTIUY="+String.valueOf(CBTIUY));
		sb.append(",CBTOUP="+String.valueOf(CBTOUP));
		sb.append(",CBTOUY="+String.valueOf(CBTOUY));
		sb.append(",CBTFDP="+String.valueOf(CBTFDP));
		sb.append(",CBTFDY="+String.valueOf(CBTFDY));
		sb.append(",CBRVUP="+String.valueOf(CBRVUP));
		sb.append(",CBRVUY="+String.valueOf(CBRVUY));
		sb.append(",CBRVDP="+String.valueOf(CBRVDP));
		sb.append(",CBRVDY="+String.valueOf(CBRVDY));
		sb.append(",CBAJUP="+String.valueOf(CBAJUP));
		sb.append(",CBAJUY="+String.valueOf(CBAJUY));
		sb.append(",CBAJDP="+String.valueOf(CBAJDP));
		sb.append(",CBAJDY="+String.valueOf(CBAJDY));
		sb.append(",CBPHUP="+String.valueOf(CBPHUP));
		sb.append(",CBPHUY="+String.valueOf(CBPHUY));
		sb.append(",CBPHDP="+String.valueOf(CBPHDP));
		sb.append(",CBPHDY="+String.valueOf(CBPHDY));
		sb.append(",CBAVGC="+String.valueOf(CBAVGC));
		sb.append(",CBAVOH="+String.valueOf(CBAVOH));
		sb.append(",CBAVRT="+String.valueOf(CBAVRT));
		sb.append(",CBAVCS="+String.valueOf(CBAVCS));
		sb.append(",CBDEPT="+String.valueOf(CBDEPT));
		sb.append(",CBSDPT="+String.valueOf(CBSDPT));
		sb.append(",CBCLAS="+String.valueOf(CBCLAS));
		sb.append(",CBSCLS="+String.valueOf(CBSCLS));
		sb.append(",CBVNDR="+String.valueOf(CBVNDR));
		sb.append(",CBSTYL="+CBSTYL);
		sb.append(",CBPOOQ="+String.valueOf(CBPOOQ));
		sb.append(",CBTOOQ="+String.valueOf(CBTOOQ));
		sb.append(",CBINTQ="+String.valueOf(CBINTQ));
		sb.append(",CBMASU="+String.valueOf(CBMASU));
		sb.append(",CBMASD="+String.valueOf(CBMASD));
		sb.append(",CBMASV="+String.valueOf(CBMASV));
		sb.append(",CBMASC="+String.valueOf(CBMASC));
		sb.append(",CBLAVC="+String.valueOf(CBLAVC));
		sb.append(",CBARQT="+String.valueOf(CBARQT));
		sb.append(",CBNSQT="+String.valueOf(CBNSQT));
		sb.append(",CBHLDQ="+String.valueOf(CBHLDQ));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(CBHBOY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHBOY);
            			}
            		
        			sb.append("|");
        		
        				if(CBHBOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHBOP);
            			}
            		
        			sb.append("|");
        		
        				if(CBHAND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHAND);
            			}
            		
        			sb.append("|");
        		
        				if(CBTRNS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTRNS);
            			}
            		
        			sb.append("|");
        		
        				if(CBGMRI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBGMRI);
            			}
            		
        			sb.append("|");
        		
        				if(CBWKCR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWKCR);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK01);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK02);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK03);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK04);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK05 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK05);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK06 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK06);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK07 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK07);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK08 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK08);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBVRSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVRSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBVRSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVRSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBASUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBASUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBASDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBASDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBVASP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVASP);
            			}
            		
        			sb.append("|");
        		
        				if(CBVASY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVASY);
            			}
            		
        			sb.append("|");
        		
        				if(CBACSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBACSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBACSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBACSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRETS);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTIUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTIUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTIUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTIUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTFDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTFDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTFDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTFDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVGC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVGC);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVOH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVOH);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVRT);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVCS);
            			}
            		
        			sb.append("|");
        		
        				if(CBDEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBDEPT);
            			}
            		
        			sb.append("|");
        		
        				if(CBSDPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSDPT);
            			}
            		
        			sb.append("|");
        		
        				if(CBCLAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBCLAS);
            			}
            		
        			sb.append("|");
        		
        				if(CBSCLS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSCLS);
            			}
            		
        			sb.append("|");
        		
        				if(CBVNDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVNDR);
            			}
            		
        			sb.append("|");
        		
        				if(CBSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(CBPOOQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPOOQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOOQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOOQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBINTQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBINTQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASU);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASD);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASV);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASC);
            			}
            		
        			sb.append("|");
        		
        				if(CBLAVC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBLAVC);
            			}
            		
        			sb.append("|");
        		
        				if(CBARQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBARQT);
            			}
            		
        			sb.append("|");
        		
        				if(CBNSQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBNSQT);
            			}
            		
        			sb.append("|");
        		
        				if(CBHLDQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHLDQ);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_5");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row14");
			
		int tos_count_tFileOutputDelimited_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_5 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_5.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_5.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVCBL.csv\"");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                            log4jParamters_tFileOutputDelimited_5.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_5 - "  + (log4jParamters_tFileOutputDelimited_5) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_5().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_5", "tFileOutputDelimited_4", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File("/data/talend/data_repository/INVCBL.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 = 0;
            int currentRow_tFileOutputDelimited_5 = 0;

            final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */","/** End field tFileOutputDelimited_5:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                                log.info("tFileOutputDelimited_5 - Creating directory '" + dir_tFileOutputDelimited_5.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_5.mkdirs();
                                log.info("tFileOutputDelimited_5 - The directory '"+ dir_tFileOutputDelimited_5.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                        String zipName_tFileOutputDelimited_5 = fullName_tFileOutputDelimited_5 + ".zip";
                        java.io.File file_tFileOutputDelimited_5 = new java.io.File(zipName_tFileOutputDelimited_5);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_5= null;
                        java.io.Writer outtFileOutputDelimited_5 = null;

                        if(file_tFileOutputDelimited_5.exists()) {
                            file_tFileOutputDelimited_5.delete();
                        }
                        zipOut_tFileOutputDelimited_5= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_5)));
                        zipOut_tFileOutputDelimited_5.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_5.getName()));
                        outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_5,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_5.length()==0){
                                        outtFileOutputDelimited_5.write("INUMBR");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBHBOY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBHBOP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBHAND");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTRNS");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBGMRI");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWKCR");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK01");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK02");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK03");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK04");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK05");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK06");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK07");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBWK08");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRSUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRSUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRSDP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRSDY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBVRSP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBVRSY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRCSP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRCSY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBASUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBASUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBASDP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBASDY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBVASP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBVASY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBACSP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBACSY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRETS");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRCUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRCUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRCDP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRCDY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTIUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTIUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTOUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTOUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTFDP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTFDY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRVUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRVUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRVDP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBRVDY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAJUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAJUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAJDP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAJDY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBPHUP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBPHUY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBPHDP");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBPHDY");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAVGC");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAVOH");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAVRT");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBAVCS");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBDEPT");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBSDPT");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBCLAS");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBSCLS");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBVNDR");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBSTYL");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBPOOQ");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBTOOQ");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBINTQ");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBMASU");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBMASD");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBMASV");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBMASC");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBLAVC");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBARQT");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBNSQT");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("CBHLDQ");
                                        outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";
	
	
		int tos_count_tDBInput_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_5 = new StringBuilder();
                    log4jParamters_tDBInput_5.append("Parameters:");
                            log4jParamters_tDBInput_5.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("QUERY" + " = " + "\"select * from MM4R5LIB.INVCBL\"");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHBOY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHBOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHAND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTRNS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBGMRI")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWKCR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK05")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK06")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK07")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK08")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVRSP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVRSY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCSP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCSY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVASP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVASY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBACSP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBACSY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRETS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTIUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTIUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTOUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTOUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTFDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTFDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVGC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVOH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVRT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVCS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBDEPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBSDPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBCLAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBSCLS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVNDR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBSTYL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPOOQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTOOQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBINTQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASV")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBLAVC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBARQT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBNSQT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHLDQ")+"}]");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_5 - "  + (log4jParamters_tDBInput_5) );
                    } 
                } 
            new BytesLimit65535_tDBInput_5().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_5", "tDBInput_4", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_5 = context.jda_password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				  
				String url_tDBInput_5 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_5 - Driver ClassName: "+driverClass_tDBInput_5+".");
			
	    		log.debug("tDBInput_5 - Connection attempt to '" + url_tDBInput_5 + "' with the username '" + dbUser_tDBInput_5 + "'.");
			
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
	    		log.debug("tDBInput_5 - Connection to '" + url_tDBInput_5 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select * from MM4R5LIB.INVCBL";
		    
	    		log.debug("tDBInput_5 - Executing the query: '" + dbquery_tDBInput_5 + "'.");
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    	log.debug("tDBInput_5 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row14.INUMBR = null;
							} else {
		                          
            row14.INUMBR = rs_tDBInput_5.getBigDecimal(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row14.CBHBOY = null;
							} else {
		                          
            row14.CBHBOY = rs_tDBInput_5.getBigDecimal(2);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row14.CBHBOP = null;
							} else {
		                          
            row14.CBHBOP = rs_tDBInput_5.getBigDecimal(3);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row14.CBHAND = null;
							} else {
		                          
            row14.CBHAND = rs_tDBInput_5.getBigDecimal(4);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row14.CBTRNS = null;
							} else {
		                          
            row14.CBTRNS = rs_tDBInput_5.getBigDecimal(5);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row14.CBGMRI = null;
							} else {
		                          
            row14.CBGMRI = rs_tDBInput_5.getBigDecimal(6);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row14.CBWKCR = null;
							} else {
		                          
            row14.CBWKCR = rs_tDBInput_5.getBigDecimal(7);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row14.CBWK01 = null;
							} else {
		                          
            row14.CBWK01 = rs_tDBInput_5.getBigDecimal(8);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row14.CBWK02 = null;
							} else {
		                          
            row14.CBWK02 = rs_tDBInput_5.getBigDecimal(9);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row14.CBWK03 = null;
							} else {
		                          
            row14.CBWK03 = rs_tDBInput_5.getBigDecimal(10);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row14.CBWK04 = null;
							} else {
		                          
            row14.CBWK04 = rs_tDBInput_5.getBigDecimal(11);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row14.CBWK05 = null;
							} else {
		                          
            row14.CBWK05 = rs_tDBInput_5.getBigDecimal(12);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row14.CBWK06 = null;
							} else {
		                          
            row14.CBWK06 = rs_tDBInput_5.getBigDecimal(13);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row14.CBWK07 = null;
							} else {
		                          
            row14.CBWK07 = rs_tDBInput_5.getBigDecimal(14);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row14.CBWK08 = null;
							} else {
		                          
            row14.CBWK08 = rs_tDBInput_5.getBigDecimal(15);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row14.CBRSUP = null;
							} else {
		                          
            row14.CBRSUP = rs_tDBInput_5.getBigDecimal(16);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row14.CBRSUY = null;
							} else {
		                          
            row14.CBRSUY = rs_tDBInput_5.getBigDecimal(17);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row14.CBRSDP = null;
							} else {
		                          
            row14.CBRSDP = rs_tDBInput_5.getBigDecimal(18);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row14.CBRSDY = null;
							} else {
		                          
            row14.CBRSDY = rs_tDBInput_5.getBigDecimal(19);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row14.CBVRSP = null;
							} else {
		                          
            row14.CBVRSP = rs_tDBInput_5.getBigDecimal(20);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row14.CBVRSY = null;
							} else {
		                          
            row14.CBVRSY = rs_tDBInput_5.getBigDecimal(21);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row14.CBRCSP = null;
							} else {
		                          
            row14.CBRCSP = rs_tDBInput_5.getBigDecimal(22);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row14.CBRCSY = null;
							} else {
		                          
            row14.CBRCSY = rs_tDBInput_5.getBigDecimal(23);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row14.CBASUP = null;
							} else {
		                          
            row14.CBASUP = rs_tDBInput_5.getBigDecimal(24);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row14.CBASUY = null;
							} else {
		                          
            row14.CBASUY = rs_tDBInput_5.getBigDecimal(25);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 26) {
								row14.CBASDP = null;
							} else {
		                          
            row14.CBASDP = rs_tDBInput_5.getBigDecimal(26);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 27) {
								row14.CBASDY = null;
							} else {
		                          
            row14.CBASDY = rs_tDBInput_5.getBigDecimal(27);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 28) {
								row14.CBVASP = null;
							} else {
		                          
            row14.CBVASP = rs_tDBInput_5.getBigDecimal(28);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 29) {
								row14.CBVASY = null;
							} else {
		                          
            row14.CBVASY = rs_tDBInput_5.getBigDecimal(29);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 30) {
								row14.CBACSP = null;
							} else {
		                          
            row14.CBACSP = rs_tDBInput_5.getBigDecimal(30);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 31) {
								row14.CBACSY = null;
							} else {
		                          
            row14.CBACSY = rs_tDBInput_5.getBigDecimal(31);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 32) {
								row14.CBRETS = null;
							} else {
		                          
            row14.CBRETS = rs_tDBInput_5.getBigDecimal(32);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 33) {
								row14.CBRCUP = null;
							} else {
		                          
            row14.CBRCUP = rs_tDBInput_5.getBigDecimal(33);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 34) {
								row14.CBRCUY = null;
							} else {
		                          
            row14.CBRCUY = rs_tDBInput_5.getBigDecimal(34);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 35) {
								row14.CBRCDP = null;
							} else {
		                          
            row14.CBRCDP = rs_tDBInput_5.getBigDecimal(35);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 36) {
								row14.CBRCDY = null;
							} else {
		                          
            row14.CBRCDY = rs_tDBInput_5.getBigDecimal(36);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 37) {
								row14.CBTIUP = null;
							} else {
		                          
            row14.CBTIUP = rs_tDBInput_5.getBigDecimal(37);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 38) {
								row14.CBTIUY = null;
							} else {
		                          
            row14.CBTIUY = rs_tDBInput_5.getBigDecimal(38);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 39) {
								row14.CBTOUP = null;
							} else {
		                          
            row14.CBTOUP = rs_tDBInput_5.getBigDecimal(39);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 40) {
								row14.CBTOUY = null;
							} else {
		                          
            row14.CBTOUY = rs_tDBInput_5.getBigDecimal(40);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 41) {
								row14.CBTFDP = null;
							} else {
		                          
            row14.CBTFDP = rs_tDBInput_5.getBigDecimal(41);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 42) {
								row14.CBTFDY = null;
							} else {
		                          
            row14.CBTFDY = rs_tDBInput_5.getBigDecimal(42);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 43) {
								row14.CBRVUP = null;
							} else {
		                          
            row14.CBRVUP = rs_tDBInput_5.getBigDecimal(43);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 44) {
								row14.CBRVUY = null;
							} else {
		                          
            row14.CBRVUY = rs_tDBInput_5.getBigDecimal(44);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 45) {
								row14.CBRVDP = null;
							} else {
		                          
            row14.CBRVDP = rs_tDBInput_5.getBigDecimal(45);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 46) {
								row14.CBRVDY = null;
							} else {
		                          
            row14.CBRVDY = rs_tDBInput_5.getBigDecimal(46);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 47) {
								row14.CBAJUP = null;
							} else {
		                          
            row14.CBAJUP = rs_tDBInput_5.getBigDecimal(47);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 48) {
								row14.CBAJUY = null;
							} else {
		                          
            row14.CBAJUY = rs_tDBInput_5.getBigDecimal(48);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 49) {
								row14.CBAJDP = null;
							} else {
		                          
            row14.CBAJDP = rs_tDBInput_5.getBigDecimal(49);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 50) {
								row14.CBAJDY = null;
							} else {
		                          
            row14.CBAJDY = rs_tDBInput_5.getBigDecimal(50);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 51) {
								row14.CBPHUP = null;
							} else {
		                          
            row14.CBPHUP = rs_tDBInput_5.getBigDecimal(51);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 52) {
								row14.CBPHUY = null;
							} else {
		                          
            row14.CBPHUY = rs_tDBInput_5.getBigDecimal(52);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 53) {
								row14.CBPHDP = null;
							} else {
		                          
            row14.CBPHDP = rs_tDBInput_5.getBigDecimal(53);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 54) {
								row14.CBPHDY = null;
							} else {
		                          
            row14.CBPHDY = rs_tDBInput_5.getBigDecimal(54);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 55) {
								row14.CBAVGC = null;
							} else {
		                          
            row14.CBAVGC = rs_tDBInput_5.getBigDecimal(55);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 56) {
								row14.CBAVOH = null;
							} else {
		                          
            row14.CBAVOH = rs_tDBInput_5.getBigDecimal(56);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 57) {
								row14.CBAVRT = null;
							} else {
		                          
            row14.CBAVRT = rs_tDBInput_5.getBigDecimal(57);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 58) {
								row14.CBAVCS = null;
							} else {
		                          
            row14.CBAVCS = rs_tDBInput_5.getBigDecimal(58);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 59) {
								row14.CBDEPT = null;
							} else {
		                          
            row14.CBDEPT = rs_tDBInput_5.getBigDecimal(59);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 60) {
								row14.CBSDPT = null;
							} else {
		                          
            row14.CBSDPT = rs_tDBInput_5.getBigDecimal(60);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 61) {
								row14.CBCLAS = null;
							} else {
		                          
            row14.CBCLAS = rs_tDBInput_5.getBigDecimal(61);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 62) {
								row14.CBSCLS = null;
							} else {
		                          
            row14.CBSCLS = rs_tDBInput_5.getBigDecimal(62);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 63) {
								row14.CBVNDR = null;
							} else {
		                          
            row14.CBVNDR = rs_tDBInput_5.getBigDecimal(63);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 64) {
								row14.CBSTYL = null;
							} else {
	                         		
        	row14.CBSTYL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 64, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 65) {
								row14.CBPOOQ = null;
							} else {
		                          
            row14.CBPOOQ = rs_tDBInput_5.getBigDecimal(65);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 66) {
								row14.CBTOOQ = null;
							} else {
		                          
            row14.CBTOOQ = rs_tDBInput_5.getBigDecimal(66);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 67) {
								row14.CBINTQ = null;
							} else {
		                          
            row14.CBINTQ = rs_tDBInput_5.getBigDecimal(67);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 68) {
								row14.CBMASU = null;
							} else {
		                          
            row14.CBMASU = rs_tDBInput_5.getBigDecimal(68);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 69) {
								row14.CBMASD = null;
							} else {
		                          
            row14.CBMASD = rs_tDBInput_5.getBigDecimal(69);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 70) {
								row14.CBMASV = null;
							} else {
		                          
            row14.CBMASV = rs_tDBInput_5.getBigDecimal(70);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 71) {
								row14.CBMASC = null;
							} else {
		                          
            row14.CBMASC = rs_tDBInput_5.getBigDecimal(71);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 72) {
								row14.CBLAVC = null;
							} else {
		                          
            row14.CBLAVC = rs_tDBInput_5.getBigDecimal(72);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 73) {
								row14.CBARQT = null;
							} else {
		                          
            row14.CBARQT = rs_tDBInput_5.getBigDecimal(73);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 74) {
								row14.CBNSQT = null;
							} else {
		                          
            row14.CBNSQT = rs_tDBInput_5.getBigDecimal(74);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 75) {
								row14.CBHLDQ = null;
							} else {
		                          
            row14.CBHLDQ = rs_tDBInput_5.getBigDecimal(75);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					
						log.debug("tDBInput_5 - Retrieving the record " + nb_line_tDBInput_5 + ".");
					



 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row14","tDBInput_5","tDBInput_4","tAS400Input","tFileOutputDelimited_5","tFileOutputDelimited_4","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row14 - " + (row14==null? "": row14.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
                            if(row14.INUMBR != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.INUMBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBHBOY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBHBOY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBHBOP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBHBOP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBHAND != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBHAND.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTRNS != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTRNS.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBGMRI != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBGMRI.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWKCR != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWKCR.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK01 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK01.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK02 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK02.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK03 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK03.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK04 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK04.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK05 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK05.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK06 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK06.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK07 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK07.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBWK08 != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBWK08.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRSUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRSUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRSUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRSUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRSDP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRSDP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRSDY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRSDY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBVRSP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBVRSP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBVRSY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBVRSY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRCSP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRCSP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRCSY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRCSY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBASUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBASUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBASUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBASUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBASDP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBASDP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBASDY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBASDY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBVASP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBVASP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBVASY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBVASY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBACSP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBACSP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBACSY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBACSY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRETS != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRETS.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRCUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRCUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRCUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRCUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRCDP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRCDP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRCDY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRCDY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTIUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTIUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTIUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTIUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTOUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTOUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTOUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTOUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTFDP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTFDP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTFDY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTFDY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRVUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRVUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRVUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRVUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRVDP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRVDP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBRVDY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBRVDY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAJUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAJUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAJUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAJUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAJDP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAJDP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAJDY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAJDY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBPHUP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBPHUP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBPHUY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBPHUY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBPHDP != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBPHDP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBPHDY != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBPHDY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAVGC != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAVGC.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAVOH != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAVOH.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAVRT != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAVRT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBAVCS != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBAVCS.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBDEPT != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBDEPT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBSDPT != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBSDPT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBCLAS != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBCLAS.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBSCLS != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBSCLS.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBVNDR != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBVNDR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBSTYL != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBSTYL
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBPOOQ != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBPOOQ.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBTOOQ != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBTOOQ.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBINTQ != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBINTQ.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBMASU != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBMASU.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBMASD != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBMASD.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBMASV != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBMASV.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBMASC != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBMASC.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBLAVC != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBLAVC.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBARQT != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBARQT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBNSQT != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBNSQT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row14.CBHLDQ != null) {
                        sb_tFileOutputDelimited_5.append(
                            row14.CBHLDQ.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                    sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_5++;
                    resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

                        outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());
                        log.debug("tFileOutputDelimited_5 - Writing the record " + nb_line_tFileOutputDelimited_5 + ".");

                    }



 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
	    		log.debug("tDBInput_5 - Closing the connection to the database.");
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_5 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
	    		log.debug("tDBInput_5 - Retrieved records count: "+nb_line_tDBInput_5 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_5 - "  + ("Done.") );

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_5!=null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
				
				globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	
				log.debug("tFileOutputDelimited_5 - Written records count: " + nb_line_tFileOutputDelimited_5 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row14",2,0,
			 			"tDBInput_5","tDBInput_4","tAS400Input","tFileOutputDelimited_5","tFileOutputDelimited_4","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_5 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileInputDelimited_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_5");
						if(outtFileOutputDelimited_5!=null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class tmap_INVCBLStruct implements routines.system.IPersistableRow<tmap_INVCBLStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public BigDecimal CBHBOY;

				public BigDecimal getCBHBOY () {
					return this.CBHBOY;
				}

				public Boolean CBHBOYIsNullable(){
				    return true;
				}
				public Boolean CBHBOYIsKey(){
				    return false;
				}
				public Integer CBHBOYLength(){
				    return null;
				}
				public Integer CBHBOYPrecision(){
				    return null;
				}
				public String CBHBOYDefault(){
				
					return "";
				
				}
				public String CBHBOYComment(){
				
				    return "";
				
				}
				public String CBHBOYPattern(){
				
					return "";
				
				}
				public String CBHBOYOriginalDbColumnName(){
				
					return "CBHBOY";
				
				}

				
			    public BigDecimal CBHBOP;

				public BigDecimal getCBHBOP () {
					return this.CBHBOP;
				}

				public Boolean CBHBOPIsNullable(){
				    return true;
				}
				public Boolean CBHBOPIsKey(){
				    return false;
				}
				public Integer CBHBOPLength(){
				    return null;
				}
				public Integer CBHBOPPrecision(){
				    return null;
				}
				public String CBHBOPDefault(){
				
					return "";
				
				}
				public String CBHBOPComment(){
				
				    return "";
				
				}
				public String CBHBOPPattern(){
				
					return "";
				
				}
				public String CBHBOPOriginalDbColumnName(){
				
					return "CBHBOP";
				
				}

				
			    public BigDecimal CBHAND;

				public BigDecimal getCBHAND () {
					return this.CBHAND;
				}

				public Boolean CBHANDIsNullable(){
				    return true;
				}
				public Boolean CBHANDIsKey(){
				    return false;
				}
				public Integer CBHANDLength(){
				    return null;
				}
				public Integer CBHANDPrecision(){
				    return null;
				}
				public String CBHANDDefault(){
				
					return "";
				
				}
				public String CBHANDComment(){
				
				    return "";
				
				}
				public String CBHANDPattern(){
				
					return "";
				
				}
				public String CBHANDOriginalDbColumnName(){
				
					return "CBHAND";
				
				}

				
			    public BigDecimal CBTRNS;

				public BigDecimal getCBTRNS () {
					return this.CBTRNS;
				}

				public Boolean CBTRNSIsNullable(){
				    return true;
				}
				public Boolean CBTRNSIsKey(){
				    return false;
				}
				public Integer CBTRNSLength(){
				    return null;
				}
				public Integer CBTRNSPrecision(){
				    return null;
				}
				public String CBTRNSDefault(){
				
					return "";
				
				}
				public String CBTRNSComment(){
				
				    return "";
				
				}
				public String CBTRNSPattern(){
				
					return "";
				
				}
				public String CBTRNSOriginalDbColumnName(){
				
					return "CBTRNS";
				
				}

				
			    public BigDecimal CBGMRI;

				public BigDecimal getCBGMRI () {
					return this.CBGMRI;
				}

				public Boolean CBGMRIIsNullable(){
				    return true;
				}
				public Boolean CBGMRIIsKey(){
				    return false;
				}
				public Integer CBGMRILength(){
				    return null;
				}
				public Integer CBGMRIPrecision(){
				    return null;
				}
				public String CBGMRIDefault(){
				
					return "";
				
				}
				public String CBGMRIComment(){
				
				    return "";
				
				}
				public String CBGMRIPattern(){
				
					return "";
				
				}
				public String CBGMRIOriginalDbColumnName(){
				
					return "CBGMRI";
				
				}

				
			    public BigDecimal CBWKCR;

				public BigDecimal getCBWKCR () {
					return this.CBWKCR;
				}

				public Boolean CBWKCRIsNullable(){
				    return true;
				}
				public Boolean CBWKCRIsKey(){
				    return false;
				}
				public Integer CBWKCRLength(){
				    return null;
				}
				public Integer CBWKCRPrecision(){
				    return null;
				}
				public String CBWKCRDefault(){
				
					return "";
				
				}
				public String CBWKCRComment(){
				
				    return "";
				
				}
				public String CBWKCRPattern(){
				
					return "";
				
				}
				public String CBWKCROriginalDbColumnName(){
				
					return "CBWKCR";
				
				}

				
			    public BigDecimal CBWK01;

				public BigDecimal getCBWK01 () {
					return this.CBWK01;
				}

				public Boolean CBWK01IsNullable(){
				    return true;
				}
				public Boolean CBWK01IsKey(){
				    return false;
				}
				public Integer CBWK01Length(){
				    return null;
				}
				public Integer CBWK01Precision(){
				    return null;
				}
				public String CBWK01Default(){
				
					return "";
				
				}
				public String CBWK01Comment(){
				
				    return "";
				
				}
				public String CBWK01Pattern(){
				
					return "";
				
				}
				public String CBWK01OriginalDbColumnName(){
				
					return "CBWK01";
				
				}

				
			    public BigDecimal CBWK02;

				public BigDecimal getCBWK02 () {
					return this.CBWK02;
				}

				public Boolean CBWK02IsNullable(){
				    return true;
				}
				public Boolean CBWK02IsKey(){
				    return false;
				}
				public Integer CBWK02Length(){
				    return null;
				}
				public Integer CBWK02Precision(){
				    return null;
				}
				public String CBWK02Default(){
				
					return "";
				
				}
				public String CBWK02Comment(){
				
				    return "";
				
				}
				public String CBWK02Pattern(){
				
					return "";
				
				}
				public String CBWK02OriginalDbColumnName(){
				
					return "CBWK02";
				
				}

				
			    public BigDecimal CBWK03;

				public BigDecimal getCBWK03 () {
					return this.CBWK03;
				}

				public Boolean CBWK03IsNullable(){
				    return true;
				}
				public Boolean CBWK03IsKey(){
				    return false;
				}
				public Integer CBWK03Length(){
				    return null;
				}
				public Integer CBWK03Precision(){
				    return null;
				}
				public String CBWK03Default(){
				
					return "";
				
				}
				public String CBWK03Comment(){
				
				    return "";
				
				}
				public String CBWK03Pattern(){
				
					return "";
				
				}
				public String CBWK03OriginalDbColumnName(){
				
					return "CBWK03";
				
				}

				
			    public BigDecimal CBWK04;

				public BigDecimal getCBWK04 () {
					return this.CBWK04;
				}

				public Boolean CBWK04IsNullable(){
				    return true;
				}
				public Boolean CBWK04IsKey(){
				    return false;
				}
				public Integer CBWK04Length(){
				    return null;
				}
				public Integer CBWK04Precision(){
				    return null;
				}
				public String CBWK04Default(){
				
					return "";
				
				}
				public String CBWK04Comment(){
				
				    return "";
				
				}
				public String CBWK04Pattern(){
				
					return "";
				
				}
				public String CBWK04OriginalDbColumnName(){
				
					return "CBWK04";
				
				}

				
			    public BigDecimal CBWK05;

				public BigDecimal getCBWK05 () {
					return this.CBWK05;
				}

				public Boolean CBWK05IsNullable(){
				    return true;
				}
				public Boolean CBWK05IsKey(){
				    return false;
				}
				public Integer CBWK05Length(){
				    return null;
				}
				public Integer CBWK05Precision(){
				    return null;
				}
				public String CBWK05Default(){
				
					return "";
				
				}
				public String CBWK05Comment(){
				
				    return "";
				
				}
				public String CBWK05Pattern(){
				
					return "";
				
				}
				public String CBWK05OriginalDbColumnName(){
				
					return "CBWK05";
				
				}

				
			    public BigDecimal CBWK06;

				public BigDecimal getCBWK06 () {
					return this.CBWK06;
				}

				public Boolean CBWK06IsNullable(){
				    return true;
				}
				public Boolean CBWK06IsKey(){
				    return false;
				}
				public Integer CBWK06Length(){
				    return null;
				}
				public Integer CBWK06Precision(){
				    return null;
				}
				public String CBWK06Default(){
				
					return "";
				
				}
				public String CBWK06Comment(){
				
				    return "";
				
				}
				public String CBWK06Pattern(){
				
					return "";
				
				}
				public String CBWK06OriginalDbColumnName(){
				
					return "CBWK06";
				
				}

				
			    public BigDecimal CBWK07;

				public BigDecimal getCBWK07 () {
					return this.CBWK07;
				}

				public Boolean CBWK07IsNullable(){
				    return true;
				}
				public Boolean CBWK07IsKey(){
				    return false;
				}
				public Integer CBWK07Length(){
				    return null;
				}
				public Integer CBWK07Precision(){
				    return null;
				}
				public String CBWK07Default(){
				
					return "";
				
				}
				public String CBWK07Comment(){
				
				    return "";
				
				}
				public String CBWK07Pattern(){
				
					return "";
				
				}
				public String CBWK07OriginalDbColumnName(){
				
					return "CBWK07";
				
				}

				
			    public BigDecimal CBWK08;

				public BigDecimal getCBWK08 () {
					return this.CBWK08;
				}

				public Boolean CBWK08IsNullable(){
				    return true;
				}
				public Boolean CBWK08IsKey(){
				    return false;
				}
				public Integer CBWK08Length(){
				    return null;
				}
				public Integer CBWK08Precision(){
				    return null;
				}
				public String CBWK08Default(){
				
					return "";
				
				}
				public String CBWK08Comment(){
				
				    return "";
				
				}
				public String CBWK08Pattern(){
				
					return "";
				
				}
				public String CBWK08OriginalDbColumnName(){
				
					return "CBWK08";
				
				}

				
			    public BigDecimal CBRSUP;

				public BigDecimal getCBRSUP () {
					return this.CBRSUP;
				}

				public Boolean CBRSUPIsNullable(){
				    return true;
				}
				public Boolean CBRSUPIsKey(){
				    return false;
				}
				public Integer CBRSUPLength(){
				    return null;
				}
				public Integer CBRSUPPrecision(){
				    return null;
				}
				public String CBRSUPDefault(){
				
					return "";
				
				}
				public String CBRSUPComment(){
				
				    return "";
				
				}
				public String CBRSUPPattern(){
				
					return "";
				
				}
				public String CBRSUPOriginalDbColumnName(){
				
					return "CBRSUP";
				
				}

				
			    public BigDecimal CBRSUY;

				public BigDecimal getCBRSUY () {
					return this.CBRSUY;
				}

				public Boolean CBRSUYIsNullable(){
				    return true;
				}
				public Boolean CBRSUYIsKey(){
				    return false;
				}
				public Integer CBRSUYLength(){
				    return null;
				}
				public Integer CBRSUYPrecision(){
				    return null;
				}
				public String CBRSUYDefault(){
				
					return "";
				
				}
				public String CBRSUYComment(){
				
				    return "";
				
				}
				public String CBRSUYPattern(){
				
					return "";
				
				}
				public String CBRSUYOriginalDbColumnName(){
				
					return "CBRSUY";
				
				}

				
			    public BigDecimal CBRSDP;

				public BigDecimal getCBRSDP () {
					return this.CBRSDP;
				}

				public Boolean CBRSDPIsNullable(){
				    return true;
				}
				public Boolean CBRSDPIsKey(){
				    return false;
				}
				public Integer CBRSDPLength(){
				    return null;
				}
				public Integer CBRSDPPrecision(){
				    return null;
				}
				public String CBRSDPDefault(){
				
					return "";
				
				}
				public String CBRSDPComment(){
				
				    return "";
				
				}
				public String CBRSDPPattern(){
				
					return "";
				
				}
				public String CBRSDPOriginalDbColumnName(){
				
					return "CBRSDP";
				
				}

				
			    public BigDecimal CBRSDY;

				public BigDecimal getCBRSDY () {
					return this.CBRSDY;
				}

				public Boolean CBRSDYIsNullable(){
				    return true;
				}
				public Boolean CBRSDYIsKey(){
				    return false;
				}
				public Integer CBRSDYLength(){
				    return null;
				}
				public Integer CBRSDYPrecision(){
				    return null;
				}
				public String CBRSDYDefault(){
				
					return "";
				
				}
				public String CBRSDYComment(){
				
				    return "";
				
				}
				public String CBRSDYPattern(){
				
					return "";
				
				}
				public String CBRSDYOriginalDbColumnName(){
				
					return "CBRSDY";
				
				}

				
			    public BigDecimal CBVRSP;

				public BigDecimal getCBVRSP () {
					return this.CBVRSP;
				}

				public Boolean CBVRSPIsNullable(){
				    return true;
				}
				public Boolean CBVRSPIsKey(){
				    return false;
				}
				public Integer CBVRSPLength(){
				    return null;
				}
				public Integer CBVRSPPrecision(){
				    return null;
				}
				public String CBVRSPDefault(){
				
					return "";
				
				}
				public String CBVRSPComment(){
				
				    return "";
				
				}
				public String CBVRSPPattern(){
				
					return "";
				
				}
				public String CBVRSPOriginalDbColumnName(){
				
					return "CBVRSP";
				
				}

				
			    public BigDecimal CBVRSY;

				public BigDecimal getCBVRSY () {
					return this.CBVRSY;
				}

				public Boolean CBVRSYIsNullable(){
				    return true;
				}
				public Boolean CBVRSYIsKey(){
				    return false;
				}
				public Integer CBVRSYLength(){
				    return null;
				}
				public Integer CBVRSYPrecision(){
				    return null;
				}
				public String CBVRSYDefault(){
				
					return "";
				
				}
				public String CBVRSYComment(){
				
				    return "";
				
				}
				public String CBVRSYPattern(){
				
					return "";
				
				}
				public String CBVRSYOriginalDbColumnName(){
				
					return "CBVRSY";
				
				}

				
			    public BigDecimal CBRCSP;

				public BigDecimal getCBRCSP () {
					return this.CBRCSP;
				}

				public Boolean CBRCSPIsNullable(){
				    return true;
				}
				public Boolean CBRCSPIsKey(){
				    return false;
				}
				public Integer CBRCSPLength(){
				    return null;
				}
				public Integer CBRCSPPrecision(){
				    return null;
				}
				public String CBRCSPDefault(){
				
					return "";
				
				}
				public String CBRCSPComment(){
				
				    return "";
				
				}
				public String CBRCSPPattern(){
				
					return "";
				
				}
				public String CBRCSPOriginalDbColumnName(){
				
					return "CBRCSP";
				
				}

				
			    public BigDecimal CBRCSY;

				public BigDecimal getCBRCSY () {
					return this.CBRCSY;
				}

				public Boolean CBRCSYIsNullable(){
				    return true;
				}
				public Boolean CBRCSYIsKey(){
				    return false;
				}
				public Integer CBRCSYLength(){
				    return null;
				}
				public Integer CBRCSYPrecision(){
				    return null;
				}
				public String CBRCSYDefault(){
				
					return "";
				
				}
				public String CBRCSYComment(){
				
				    return "";
				
				}
				public String CBRCSYPattern(){
				
					return "";
				
				}
				public String CBRCSYOriginalDbColumnName(){
				
					return "CBRCSY";
				
				}

				
			    public BigDecimal CBASUP;

				public BigDecimal getCBASUP () {
					return this.CBASUP;
				}

				public Boolean CBASUPIsNullable(){
				    return true;
				}
				public Boolean CBASUPIsKey(){
				    return false;
				}
				public Integer CBASUPLength(){
				    return null;
				}
				public Integer CBASUPPrecision(){
				    return null;
				}
				public String CBASUPDefault(){
				
					return "";
				
				}
				public String CBASUPComment(){
				
				    return "";
				
				}
				public String CBASUPPattern(){
				
					return "";
				
				}
				public String CBASUPOriginalDbColumnName(){
				
					return "CBASUP";
				
				}

				
			    public BigDecimal CBASUY;

				public BigDecimal getCBASUY () {
					return this.CBASUY;
				}

				public Boolean CBASUYIsNullable(){
				    return true;
				}
				public Boolean CBASUYIsKey(){
				    return false;
				}
				public Integer CBASUYLength(){
				    return null;
				}
				public Integer CBASUYPrecision(){
				    return null;
				}
				public String CBASUYDefault(){
				
					return "";
				
				}
				public String CBASUYComment(){
				
				    return "";
				
				}
				public String CBASUYPattern(){
				
					return "";
				
				}
				public String CBASUYOriginalDbColumnName(){
				
					return "CBASUY";
				
				}

				
			    public BigDecimal CBASDP;

				public BigDecimal getCBASDP () {
					return this.CBASDP;
				}

				public Boolean CBASDPIsNullable(){
				    return true;
				}
				public Boolean CBASDPIsKey(){
				    return false;
				}
				public Integer CBASDPLength(){
				    return null;
				}
				public Integer CBASDPPrecision(){
				    return null;
				}
				public String CBASDPDefault(){
				
					return "";
				
				}
				public String CBASDPComment(){
				
				    return "";
				
				}
				public String CBASDPPattern(){
				
					return "";
				
				}
				public String CBASDPOriginalDbColumnName(){
				
					return "CBASDP";
				
				}

				
			    public BigDecimal CBASDY;

				public BigDecimal getCBASDY () {
					return this.CBASDY;
				}

				public Boolean CBASDYIsNullable(){
				    return true;
				}
				public Boolean CBASDYIsKey(){
				    return false;
				}
				public Integer CBASDYLength(){
				    return null;
				}
				public Integer CBASDYPrecision(){
				    return null;
				}
				public String CBASDYDefault(){
				
					return "";
				
				}
				public String CBASDYComment(){
				
				    return "";
				
				}
				public String CBASDYPattern(){
				
					return "";
				
				}
				public String CBASDYOriginalDbColumnName(){
				
					return "CBASDY";
				
				}

				
			    public BigDecimal CBVASP;

				public BigDecimal getCBVASP () {
					return this.CBVASP;
				}

				public Boolean CBVASPIsNullable(){
				    return true;
				}
				public Boolean CBVASPIsKey(){
				    return false;
				}
				public Integer CBVASPLength(){
				    return null;
				}
				public Integer CBVASPPrecision(){
				    return null;
				}
				public String CBVASPDefault(){
				
					return "";
				
				}
				public String CBVASPComment(){
				
				    return "";
				
				}
				public String CBVASPPattern(){
				
					return "";
				
				}
				public String CBVASPOriginalDbColumnName(){
				
					return "CBVASP";
				
				}

				
			    public BigDecimal CBVASY;

				public BigDecimal getCBVASY () {
					return this.CBVASY;
				}

				public Boolean CBVASYIsNullable(){
				    return true;
				}
				public Boolean CBVASYIsKey(){
				    return false;
				}
				public Integer CBVASYLength(){
				    return null;
				}
				public Integer CBVASYPrecision(){
				    return null;
				}
				public String CBVASYDefault(){
				
					return "";
				
				}
				public String CBVASYComment(){
				
				    return "";
				
				}
				public String CBVASYPattern(){
				
					return "";
				
				}
				public String CBVASYOriginalDbColumnName(){
				
					return "CBVASY";
				
				}

				
			    public BigDecimal CBACSP;

				public BigDecimal getCBACSP () {
					return this.CBACSP;
				}

				public Boolean CBACSPIsNullable(){
				    return true;
				}
				public Boolean CBACSPIsKey(){
				    return false;
				}
				public Integer CBACSPLength(){
				    return null;
				}
				public Integer CBACSPPrecision(){
				    return null;
				}
				public String CBACSPDefault(){
				
					return "";
				
				}
				public String CBACSPComment(){
				
				    return "";
				
				}
				public String CBACSPPattern(){
				
					return "";
				
				}
				public String CBACSPOriginalDbColumnName(){
				
					return "CBACSP";
				
				}

				
			    public BigDecimal CBACSY;

				public BigDecimal getCBACSY () {
					return this.CBACSY;
				}

				public Boolean CBACSYIsNullable(){
				    return true;
				}
				public Boolean CBACSYIsKey(){
				    return false;
				}
				public Integer CBACSYLength(){
				    return null;
				}
				public Integer CBACSYPrecision(){
				    return null;
				}
				public String CBACSYDefault(){
				
					return "";
				
				}
				public String CBACSYComment(){
				
				    return "";
				
				}
				public String CBACSYPattern(){
				
					return "";
				
				}
				public String CBACSYOriginalDbColumnName(){
				
					return "CBACSY";
				
				}

				
			    public BigDecimal CBRETS;

				public BigDecimal getCBRETS () {
					return this.CBRETS;
				}

				public Boolean CBRETSIsNullable(){
				    return true;
				}
				public Boolean CBRETSIsKey(){
				    return false;
				}
				public Integer CBRETSLength(){
				    return null;
				}
				public Integer CBRETSPrecision(){
				    return null;
				}
				public String CBRETSDefault(){
				
					return "";
				
				}
				public String CBRETSComment(){
				
				    return "";
				
				}
				public String CBRETSPattern(){
				
					return "";
				
				}
				public String CBRETSOriginalDbColumnName(){
				
					return "CBRETS";
				
				}

				
			    public BigDecimal CBRCUP;

				public BigDecimal getCBRCUP () {
					return this.CBRCUP;
				}

				public Boolean CBRCUPIsNullable(){
				    return true;
				}
				public Boolean CBRCUPIsKey(){
				    return false;
				}
				public Integer CBRCUPLength(){
				    return null;
				}
				public Integer CBRCUPPrecision(){
				    return null;
				}
				public String CBRCUPDefault(){
				
					return "";
				
				}
				public String CBRCUPComment(){
				
				    return "";
				
				}
				public String CBRCUPPattern(){
				
					return "";
				
				}
				public String CBRCUPOriginalDbColumnName(){
				
					return "CBRCUP";
				
				}

				
			    public BigDecimal CBRCUY;

				public BigDecimal getCBRCUY () {
					return this.CBRCUY;
				}

				public Boolean CBRCUYIsNullable(){
				    return true;
				}
				public Boolean CBRCUYIsKey(){
				    return false;
				}
				public Integer CBRCUYLength(){
				    return null;
				}
				public Integer CBRCUYPrecision(){
				    return null;
				}
				public String CBRCUYDefault(){
				
					return "";
				
				}
				public String CBRCUYComment(){
				
				    return "";
				
				}
				public String CBRCUYPattern(){
				
					return "";
				
				}
				public String CBRCUYOriginalDbColumnName(){
				
					return "CBRCUY";
				
				}

				
			    public BigDecimal CBRCDP;

				public BigDecimal getCBRCDP () {
					return this.CBRCDP;
				}

				public Boolean CBRCDPIsNullable(){
				    return true;
				}
				public Boolean CBRCDPIsKey(){
				    return false;
				}
				public Integer CBRCDPLength(){
				    return null;
				}
				public Integer CBRCDPPrecision(){
				    return null;
				}
				public String CBRCDPDefault(){
				
					return "";
				
				}
				public String CBRCDPComment(){
				
				    return "";
				
				}
				public String CBRCDPPattern(){
				
					return "";
				
				}
				public String CBRCDPOriginalDbColumnName(){
				
					return "CBRCDP";
				
				}

				
			    public BigDecimal CBRCDY;

				public BigDecimal getCBRCDY () {
					return this.CBRCDY;
				}

				public Boolean CBRCDYIsNullable(){
				    return true;
				}
				public Boolean CBRCDYIsKey(){
				    return false;
				}
				public Integer CBRCDYLength(){
				    return null;
				}
				public Integer CBRCDYPrecision(){
				    return null;
				}
				public String CBRCDYDefault(){
				
					return "";
				
				}
				public String CBRCDYComment(){
				
				    return "";
				
				}
				public String CBRCDYPattern(){
				
					return "";
				
				}
				public String CBRCDYOriginalDbColumnName(){
				
					return "CBRCDY";
				
				}

				
			    public BigDecimal CBTIUP;

				public BigDecimal getCBTIUP () {
					return this.CBTIUP;
				}

				public Boolean CBTIUPIsNullable(){
				    return true;
				}
				public Boolean CBTIUPIsKey(){
				    return false;
				}
				public Integer CBTIUPLength(){
				    return null;
				}
				public Integer CBTIUPPrecision(){
				    return null;
				}
				public String CBTIUPDefault(){
				
					return "";
				
				}
				public String CBTIUPComment(){
				
				    return "";
				
				}
				public String CBTIUPPattern(){
				
					return "";
				
				}
				public String CBTIUPOriginalDbColumnName(){
				
					return "CBTIUP";
				
				}

				
			    public BigDecimal CBTIUY;

				public BigDecimal getCBTIUY () {
					return this.CBTIUY;
				}

				public Boolean CBTIUYIsNullable(){
				    return true;
				}
				public Boolean CBTIUYIsKey(){
				    return false;
				}
				public Integer CBTIUYLength(){
				    return null;
				}
				public Integer CBTIUYPrecision(){
				    return null;
				}
				public String CBTIUYDefault(){
				
					return "";
				
				}
				public String CBTIUYComment(){
				
				    return "";
				
				}
				public String CBTIUYPattern(){
				
					return "";
				
				}
				public String CBTIUYOriginalDbColumnName(){
				
					return "CBTIUY";
				
				}

				
			    public BigDecimal CBTOUP;

				public BigDecimal getCBTOUP () {
					return this.CBTOUP;
				}

				public Boolean CBTOUPIsNullable(){
				    return true;
				}
				public Boolean CBTOUPIsKey(){
				    return false;
				}
				public Integer CBTOUPLength(){
				    return null;
				}
				public Integer CBTOUPPrecision(){
				    return null;
				}
				public String CBTOUPDefault(){
				
					return "";
				
				}
				public String CBTOUPComment(){
				
				    return "";
				
				}
				public String CBTOUPPattern(){
				
					return "";
				
				}
				public String CBTOUPOriginalDbColumnName(){
				
					return "CBTOUP";
				
				}

				
			    public BigDecimal CBTOUY;

				public BigDecimal getCBTOUY () {
					return this.CBTOUY;
				}

				public Boolean CBTOUYIsNullable(){
				    return true;
				}
				public Boolean CBTOUYIsKey(){
				    return false;
				}
				public Integer CBTOUYLength(){
				    return null;
				}
				public Integer CBTOUYPrecision(){
				    return null;
				}
				public String CBTOUYDefault(){
				
					return "";
				
				}
				public String CBTOUYComment(){
				
				    return "";
				
				}
				public String CBTOUYPattern(){
				
					return "";
				
				}
				public String CBTOUYOriginalDbColumnName(){
				
					return "CBTOUY";
				
				}

				
			    public BigDecimal CBTFDP;

				public BigDecimal getCBTFDP () {
					return this.CBTFDP;
				}

				public Boolean CBTFDPIsNullable(){
				    return true;
				}
				public Boolean CBTFDPIsKey(){
				    return false;
				}
				public Integer CBTFDPLength(){
				    return null;
				}
				public Integer CBTFDPPrecision(){
				    return null;
				}
				public String CBTFDPDefault(){
				
					return "";
				
				}
				public String CBTFDPComment(){
				
				    return "";
				
				}
				public String CBTFDPPattern(){
				
					return "";
				
				}
				public String CBTFDPOriginalDbColumnName(){
				
					return "CBTFDP";
				
				}

				
			    public BigDecimal CBTFDY;

				public BigDecimal getCBTFDY () {
					return this.CBTFDY;
				}

				public Boolean CBTFDYIsNullable(){
				    return true;
				}
				public Boolean CBTFDYIsKey(){
				    return false;
				}
				public Integer CBTFDYLength(){
				    return null;
				}
				public Integer CBTFDYPrecision(){
				    return null;
				}
				public String CBTFDYDefault(){
				
					return "";
				
				}
				public String CBTFDYComment(){
				
				    return "";
				
				}
				public String CBTFDYPattern(){
				
					return "";
				
				}
				public String CBTFDYOriginalDbColumnName(){
				
					return "CBTFDY";
				
				}

				
			    public BigDecimal CBRVUP;

				public BigDecimal getCBRVUP () {
					return this.CBRVUP;
				}

				public Boolean CBRVUPIsNullable(){
				    return true;
				}
				public Boolean CBRVUPIsKey(){
				    return false;
				}
				public Integer CBRVUPLength(){
				    return null;
				}
				public Integer CBRVUPPrecision(){
				    return null;
				}
				public String CBRVUPDefault(){
				
					return "";
				
				}
				public String CBRVUPComment(){
				
				    return "";
				
				}
				public String CBRVUPPattern(){
				
					return "";
				
				}
				public String CBRVUPOriginalDbColumnName(){
				
					return "CBRVUP";
				
				}

				
			    public BigDecimal CBRVUY;

				public BigDecimal getCBRVUY () {
					return this.CBRVUY;
				}

				public Boolean CBRVUYIsNullable(){
				    return true;
				}
				public Boolean CBRVUYIsKey(){
				    return false;
				}
				public Integer CBRVUYLength(){
				    return null;
				}
				public Integer CBRVUYPrecision(){
				    return null;
				}
				public String CBRVUYDefault(){
				
					return "";
				
				}
				public String CBRVUYComment(){
				
				    return "";
				
				}
				public String CBRVUYPattern(){
				
					return "";
				
				}
				public String CBRVUYOriginalDbColumnName(){
				
					return "CBRVUY";
				
				}

				
			    public BigDecimal CBRVDP;

				public BigDecimal getCBRVDP () {
					return this.CBRVDP;
				}

				public Boolean CBRVDPIsNullable(){
				    return true;
				}
				public Boolean CBRVDPIsKey(){
				    return false;
				}
				public Integer CBRVDPLength(){
				    return null;
				}
				public Integer CBRVDPPrecision(){
				    return null;
				}
				public String CBRVDPDefault(){
				
					return "";
				
				}
				public String CBRVDPComment(){
				
				    return "";
				
				}
				public String CBRVDPPattern(){
				
					return "";
				
				}
				public String CBRVDPOriginalDbColumnName(){
				
					return "CBRVDP";
				
				}

				
			    public BigDecimal CBRVDY;

				public BigDecimal getCBRVDY () {
					return this.CBRVDY;
				}

				public Boolean CBRVDYIsNullable(){
				    return true;
				}
				public Boolean CBRVDYIsKey(){
				    return false;
				}
				public Integer CBRVDYLength(){
				    return null;
				}
				public Integer CBRVDYPrecision(){
				    return null;
				}
				public String CBRVDYDefault(){
				
					return "";
				
				}
				public String CBRVDYComment(){
				
				    return "";
				
				}
				public String CBRVDYPattern(){
				
					return "";
				
				}
				public String CBRVDYOriginalDbColumnName(){
				
					return "CBRVDY";
				
				}

				
			    public BigDecimal CBAJUP;

				public BigDecimal getCBAJUP () {
					return this.CBAJUP;
				}

				public Boolean CBAJUPIsNullable(){
				    return true;
				}
				public Boolean CBAJUPIsKey(){
				    return false;
				}
				public Integer CBAJUPLength(){
				    return null;
				}
				public Integer CBAJUPPrecision(){
				    return null;
				}
				public String CBAJUPDefault(){
				
					return "";
				
				}
				public String CBAJUPComment(){
				
				    return "";
				
				}
				public String CBAJUPPattern(){
				
					return "";
				
				}
				public String CBAJUPOriginalDbColumnName(){
				
					return "CBAJUP";
				
				}

				
			    public BigDecimal CBAJUY;

				public BigDecimal getCBAJUY () {
					return this.CBAJUY;
				}

				public Boolean CBAJUYIsNullable(){
				    return true;
				}
				public Boolean CBAJUYIsKey(){
				    return false;
				}
				public Integer CBAJUYLength(){
				    return null;
				}
				public Integer CBAJUYPrecision(){
				    return null;
				}
				public String CBAJUYDefault(){
				
					return "";
				
				}
				public String CBAJUYComment(){
				
				    return "";
				
				}
				public String CBAJUYPattern(){
				
					return "";
				
				}
				public String CBAJUYOriginalDbColumnName(){
				
					return "CBAJUY";
				
				}

				
			    public BigDecimal CBAJDP;

				public BigDecimal getCBAJDP () {
					return this.CBAJDP;
				}

				public Boolean CBAJDPIsNullable(){
				    return true;
				}
				public Boolean CBAJDPIsKey(){
				    return false;
				}
				public Integer CBAJDPLength(){
				    return null;
				}
				public Integer CBAJDPPrecision(){
				    return null;
				}
				public String CBAJDPDefault(){
				
					return "";
				
				}
				public String CBAJDPComment(){
				
				    return "";
				
				}
				public String CBAJDPPattern(){
				
					return "";
				
				}
				public String CBAJDPOriginalDbColumnName(){
				
					return "CBAJDP";
				
				}

				
			    public BigDecimal CBAJDY;

				public BigDecimal getCBAJDY () {
					return this.CBAJDY;
				}

				public Boolean CBAJDYIsNullable(){
				    return true;
				}
				public Boolean CBAJDYIsKey(){
				    return false;
				}
				public Integer CBAJDYLength(){
				    return null;
				}
				public Integer CBAJDYPrecision(){
				    return null;
				}
				public String CBAJDYDefault(){
				
					return "";
				
				}
				public String CBAJDYComment(){
				
				    return "";
				
				}
				public String CBAJDYPattern(){
				
					return "";
				
				}
				public String CBAJDYOriginalDbColumnName(){
				
					return "CBAJDY";
				
				}

				
			    public BigDecimal CBPHUP;

				public BigDecimal getCBPHUP () {
					return this.CBPHUP;
				}

				public Boolean CBPHUPIsNullable(){
				    return true;
				}
				public Boolean CBPHUPIsKey(){
				    return false;
				}
				public Integer CBPHUPLength(){
				    return null;
				}
				public Integer CBPHUPPrecision(){
				    return null;
				}
				public String CBPHUPDefault(){
				
					return "";
				
				}
				public String CBPHUPComment(){
				
				    return "";
				
				}
				public String CBPHUPPattern(){
				
					return "";
				
				}
				public String CBPHUPOriginalDbColumnName(){
				
					return "CBPHUP";
				
				}

				
			    public BigDecimal CBPHUY;

				public BigDecimal getCBPHUY () {
					return this.CBPHUY;
				}

				public Boolean CBPHUYIsNullable(){
				    return true;
				}
				public Boolean CBPHUYIsKey(){
				    return false;
				}
				public Integer CBPHUYLength(){
				    return null;
				}
				public Integer CBPHUYPrecision(){
				    return null;
				}
				public String CBPHUYDefault(){
				
					return "";
				
				}
				public String CBPHUYComment(){
				
				    return "";
				
				}
				public String CBPHUYPattern(){
				
					return "";
				
				}
				public String CBPHUYOriginalDbColumnName(){
				
					return "CBPHUY";
				
				}

				
			    public BigDecimal CBPHDP;

				public BigDecimal getCBPHDP () {
					return this.CBPHDP;
				}

				public Boolean CBPHDPIsNullable(){
				    return true;
				}
				public Boolean CBPHDPIsKey(){
				    return false;
				}
				public Integer CBPHDPLength(){
				    return null;
				}
				public Integer CBPHDPPrecision(){
				    return null;
				}
				public String CBPHDPDefault(){
				
					return "";
				
				}
				public String CBPHDPComment(){
				
				    return "";
				
				}
				public String CBPHDPPattern(){
				
					return "";
				
				}
				public String CBPHDPOriginalDbColumnName(){
				
					return "CBPHDP";
				
				}

				
			    public BigDecimal CBPHDY;

				public BigDecimal getCBPHDY () {
					return this.CBPHDY;
				}

				public Boolean CBPHDYIsNullable(){
				    return true;
				}
				public Boolean CBPHDYIsKey(){
				    return false;
				}
				public Integer CBPHDYLength(){
				    return null;
				}
				public Integer CBPHDYPrecision(){
				    return null;
				}
				public String CBPHDYDefault(){
				
					return "";
				
				}
				public String CBPHDYComment(){
				
				    return "";
				
				}
				public String CBPHDYPattern(){
				
					return "";
				
				}
				public String CBPHDYOriginalDbColumnName(){
				
					return "CBPHDY";
				
				}

				
			    public BigDecimal CBAVGC;

				public BigDecimal getCBAVGC () {
					return this.CBAVGC;
				}

				public Boolean CBAVGCIsNullable(){
				    return true;
				}
				public Boolean CBAVGCIsKey(){
				    return false;
				}
				public Integer CBAVGCLength(){
				    return null;
				}
				public Integer CBAVGCPrecision(){
				    return null;
				}
				public String CBAVGCDefault(){
				
					return "";
				
				}
				public String CBAVGCComment(){
				
				    return "";
				
				}
				public String CBAVGCPattern(){
				
					return "";
				
				}
				public String CBAVGCOriginalDbColumnName(){
				
					return "CBAVGC";
				
				}

				
			    public BigDecimal CBAVOH;

				public BigDecimal getCBAVOH () {
					return this.CBAVOH;
				}

				public Boolean CBAVOHIsNullable(){
				    return true;
				}
				public Boolean CBAVOHIsKey(){
				    return false;
				}
				public Integer CBAVOHLength(){
				    return null;
				}
				public Integer CBAVOHPrecision(){
				    return null;
				}
				public String CBAVOHDefault(){
				
					return "";
				
				}
				public String CBAVOHComment(){
				
				    return "";
				
				}
				public String CBAVOHPattern(){
				
					return "";
				
				}
				public String CBAVOHOriginalDbColumnName(){
				
					return "CBAVOH";
				
				}

				
			    public BigDecimal CBAVRT;

				public BigDecimal getCBAVRT () {
					return this.CBAVRT;
				}

				public Boolean CBAVRTIsNullable(){
				    return true;
				}
				public Boolean CBAVRTIsKey(){
				    return false;
				}
				public Integer CBAVRTLength(){
				    return null;
				}
				public Integer CBAVRTPrecision(){
				    return null;
				}
				public String CBAVRTDefault(){
				
					return "";
				
				}
				public String CBAVRTComment(){
				
				    return "";
				
				}
				public String CBAVRTPattern(){
				
					return "";
				
				}
				public String CBAVRTOriginalDbColumnName(){
				
					return "CBAVRT";
				
				}

				
			    public BigDecimal CBAVCS;

				public BigDecimal getCBAVCS () {
					return this.CBAVCS;
				}

				public Boolean CBAVCSIsNullable(){
				    return true;
				}
				public Boolean CBAVCSIsKey(){
				    return false;
				}
				public Integer CBAVCSLength(){
				    return null;
				}
				public Integer CBAVCSPrecision(){
				    return null;
				}
				public String CBAVCSDefault(){
				
					return "";
				
				}
				public String CBAVCSComment(){
				
				    return "";
				
				}
				public String CBAVCSPattern(){
				
					return "";
				
				}
				public String CBAVCSOriginalDbColumnName(){
				
					return "CBAVCS";
				
				}

				
			    public BigDecimal CBDEPT;

				public BigDecimal getCBDEPT () {
					return this.CBDEPT;
				}

				public Boolean CBDEPTIsNullable(){
				    return true;
				}
				public Boolean CBDEPTIsKey(){
				    return false;
				}
				public Integer CBDEPTLength(){
				    return null;
				}
				public Integer CBDEPTPrecision(){
				    return null;
				}
				public String CBDEPTDefault(){
				
					return "";
				
				}
				public String CBDEPTComment(){
				
				    return "";
				
				}
				public String CBDEPTPattern(){
				
					return "";
				
				}
				public String CBDEPTOriginalDbColumnName(){
				
					return "CBDEPT";
				
				}

				
			    public BigDecimal CBSDPT;

				public BigDecimal getCBSDPT () {
					return this.CBSDPT;
				}

				public Boolean CBSDPTIsNullable(){
				    return true;
				}
				public Boolean CBSDPTIsKey(){
				    return false;
				}
				public Integer CBSDPTLength(){
				    return null;
				}
				public Integer CBSDPTPrecision(){
				    return null;
				}
				public String CBSDPTDefault(){
				
					return "";
				
				}
				public String CBSDPTComment(){
				
				    return "";
				
				}
				public String CBSDPTPattern(){
				
					return "";
				
				}
				public String CBSDPTOriginalDbColumnName(){
				
					return "CBSDPT";
				
				}

				
			    public BigDecimal CBCLAS;

				public BigDecimal getCBCLAS () {
					return this.CBCLAS;
				}

				public Boolean CBCLASIsNullable(){
				    return true;
				}
				public Boolean CBCLASIsKey(){
				    return false;
				}
				public Integer CBCLASLength(){
				    return null;
				}
				public Integer CBCLASPrecision(){
				    return null;
				}
				public String CBCLASDefault(){
				
					return "";
				
				}
				public String CBCLASComment(){
				
				    return "";
				
				}
				public String CBCLASPattern(){
				
					return "";
				
				}
				public String CBCLASOriginalDbColumnName(){
				
					return "CBCLAS";
				
				}

				
			    public BigDecimal CBSCLS;

				public BigDecimal getCBSCLS () {
					return this.CBSCLS;
				}

				public Boolean CBSCLSIsNullable(){
				    return true;
				}
				public Boolean CBSCLSIsKey(){
				    return false;
				}
				public Integer CBSCLSLength(){
				    return null;
				}
				public Integer CBSCLSPrecision(){
				    return null;
				}
				public String CBSCLSDefault(){
				
					return "";
				
				}
				public String CBSCLSComment(){
				
				    return "";
				
				}
				public String CBSCLSPattern(){
				
					return "";
				
				}
				public String CBSCLSOriginalDbColumnName(){
				
					return "CBSCLS";
				
				}

				
			    public BigDecimal CBVNDR;

				public BigDecimal getCBVNDR () {
					return this.CBVNDR;
				}

				public Boolean CBVNDRIsNullable(){
				    return true;
				}
				public Boolean CBVNDRIsKey(){
				    return false;
				}
				public Integer CBVNDRLength(){
				    return null;
				}
				public Integer CBVNDRPrecision(){
				    return null;
				}
				public String CBVNDRDefault(){
				
					return "";
				
				}
				public String CBVNDRComment(){
				
				    return "";
				
				}
				public String CBVNDRPattern(){
				
					return "";
				
				}
				public String CBVNDROriginalDbColumnName(){
				
					return "CBVNDR";
				
				}

				
			    public String CBSTYL;

				public String getCBSTYL () {
					return this.CBSTYL;
				}

				public Boolean CBSTYLIsNullable(){
				    return true;
				}
				public Boolean CBSTYLIsKey(){
				    return false;
				}
				public Integer CBSTYLLength(){
				    return null;
				}
				public Integer CBSTYLPrecision(){
				    return null;
				}
				public String CBSTYLDefault(){
				
					return null;
				
				}
				public String CBSTYLComment(){
				
				    return "";
				
				}
				public String CBSTYLPattern(){
				
					return "";
				
				}
				public String CBSTYLOriginalDbColumnName(){
				
					return "CBSTYL";
				
				}

				
			    public BigDecimal CBPOOQ;

				public BigDecimal getCBPOOQ () {
					return this.CBPOOQ;
				}

				public Boolean CBPOOQIsNullable(){
				    return true;
				}
				public Boolean CBPOOQIsKey(){
				    return false;
				}
				public Integer CBPOOQLength(){
				    return null;
				}
				public Integer CBPOOQPrecision(){
				    return null;
				}
				public String CBPOOQDefault(){
				
					return "";
				
				}
				public String CBPOOQComment(){
				
				    return "";
				
				}
				public String CBPOOQPattern(){
				
					return "";
				
				}
				public String CBPOOQOriginalDbColumnName(){
				
					return "CBPOOQ";
				
				}

				
			    public BigDecimal CBTOOQ;

				public BigDecimal getCBTOOQ () {
					return this.CBTOOQ;
				}

				public Boolean CBTOOQIsNullable(){
				    return true;
				}
				public Boolean CBTOOQIsKey(){
				    return false;
				}
				public Integer CBTOOQLength(){
				    return null;
				}
				public Integer CBTOOQPrecision(){
				    return null;
				}
				public String CBTOOQDefault(){
				
					return "";
				
				}
				public String CBTOOQComment(){
				
				    return "";
				
				}
				public String CBTOOQPattern(){
				
					return "";
				
				}
				public String CBTOOQOriginalDbColumnName(){
				
					return "CBTOOQ";
				
				}

				
			    public BigDecimal CBINTQ;

				public BigDecimal getCBINTQ () {
					return this.CBINTQ;
				}

				public Boolean CBINTQIsNullable(){
				    return true;
				}
				public Boolean CBINTQIsKey(){
				    return false;
				}
				public Integer CBINTQLength(){
				    return null;
				}
				public Integer CBINTQPrecision(){
				    return null;
				}
				public String CBINTQDefault(){
				
					return "";
				
				}
				public String CBINTQComment(){
				
				    return "";
				
				}
				public String CBINTQPattern(){
				
					return "";
				
				}
				public String CBINTQOriginalDbColumnName(){
				
					return "CBINTQ";
				
				}

				
			    public BigDecimal CBMASU;

				public BigDecimal getCBMASU () {
					return this.CBMASU;
				}

				public Boolean CBMASUIsNullable(){
				    return true;
				}
				public Boolean CBMASUIsKey(){
				    return false;
				}
				public Integer CBMASULength(){
				    return null;
				}
				public Integer CBMASUPrecision(){
				    return null;
				}
				public String CBMASUDefault(){
				
					return "";
				
				}
				public String CBMASUComment(){
				
				    return "";
				
				}
				public String CBMASUPattern(){
				
					return "";
				
				}
				public String CBMASUOriginalDbColumnName(){
				
					return "CBMASU";
				
				}

				
			    public BigDecimal CBMASD;

				public BigDecimal getCBMASD () {
					return this.CBMASD;
				}

				public Boolean CBMASDIsNullable(){
				    return true;
				}
				public Boolean CBMASDIsKey(){
				    return false;
				}
				public Integer CBMASDLength(){
				    return null;
				}
				public Integer CBMASDPrecision(){
				    return null;
				}
				public String CBMASDDefault(){
				
					return "";
				
				}
				public String CBMASDComment(){
				
				    return "";
				
				}
				public String CBMASDPattern(){
				
					return "";
				
				}
				public String CBMASDOriginalDbColumnName(){
				
					return "CBMASD";
				
				}

				
			    public BigDecimal CBMASV;

				public BigDecimal getCBMASV () {
					return this.CBMASV;
				}

				public Boolean CBMASVIsNullable(){
				    return true;
				}
				public Boolean CBMASVIsKey(){
				    return false;
				}
				public Integer CBMASVLength(){
				    return null;
				}
				public Integer CBMASVPrecision(){
				    return null;
				}
				public String CBMASVDefault(){
				
					return "";
				
				}
				public String CBMASVComment(){
				
				    return "";
				
				}
				public String CBMASVPattern(){
				
					return "";
				
				}
				public String CBMASVOriginalDbColumnName(){
				
					return "CBMASV";
				
				}

				
			    public BigDecimal CBMASC;

				public BigDecimal getCBMASC () {
					return this.CBMASC;
				}

				public Boolean CBMASCIsNullable(){
				    return true;
				}
				public Boolean CBMASCIsKey(){
				    return false;
				}
				public Integer CBMASCLength(){
				    return null;
				}
				public Integer CBMASCPrecision(){
				    return null;
				}
				public String CBMASCDefault(){
				
					return "";
				
				}
				public String CBMASCComment(){
				
				    return "";
				
				}
				public String CBMASCPattern(){
				
					return "";
				
				}
				public String CBMASCOriginalDbColumnName(){
				
					return "CBMASC";
				
				}

				
			    public BigDecimal CBLAVC;

				public BigDecimal getCBLAVC () {
					return this.CBLAVC;
				}

				public Boolean CBLAVCIsNullable(){
				    return true;
				}
				public Boolean CBLAVCIsKey(){
				    return false;
				}
				public Integer CBLAVCLength(){
				    return null;
				}
				public Integer CBLAVCPrecision(){
				    return null;
				}
				public String CBLAVCDefault(){
				
					return "";
				
				}
				public String CBLAVCComment(){
				
				    return "";
				
				}
				public String CBLAVCPattern(){
				
					return "";
				
				}
				public String CBLAVCOriginalDbColumnName(){
				
					return "CBLAVC";
				
				}

				
			    public BigDecimal CBARQT;

				public BigDecimal getCBARQT () {
					return this.CBARQT;
				}

				public Boolean CBARQTIsNullable(){
				    return true;
				}
				public Boolean CBARQTIsKey(){
				    return false;
				}
				public Integer CBARQTLength(){
				    return null;
				}
				public Integer CBARQTPrecision(){
				    return null;
				}
				public String CBARQTDefault(){
				
					return "";
				
				}
				public String CBARQTComment(){
				
				    return "";
				
				}
				public String CBARQTPattern(){
				
					return "";
				
				}
				public String CBARQTOriginalDbColumnName(){
				
					return "CBARQT";
				
				}

				
			    public BigDecimal CBNSQT;

				public BigDecimal getCBNSQT () {
					return this.CBNSQT;
				}

				public Boolean CBNSQTIsNullable(){
				    return true;
				}
				public Boolean CBNSQTIsKey(){
				    return false;
				}
				public Integer CBNSQTLength(){
				    return null;
				}
				public Integer CBNSQTPrecision(){
				    return null;
				}
				public String CBNSQTDefault(){
				
					return "";
				
				}
				public String CBNSQTComment(){
				
				    return "";
				
				}
				public String CBNSQTPattern(){
				
					return "";
				
				}
				public String CBNSQTOriginalDbColumnName(){
				
					return "CBNSQT";
				
				}

				
			    public BigDecimal CBHLDQ;

				public BigDecimal getCBHLDQ () {
					return this.CBHLDQ;
				}

				public Boolean CBHLDQIsNullable(){
				    return true;
				}
				public Boolean CBHLDQIsKey(){
				    return false;
				}
				public Integer CBHLDQLength(){
				    return null;
				}
				public Integer CBHLDQPrecision(){
				    return null;
				}
				public String CBHLDQDefault(){
				
					return "";
				
				}
				public String CBHLDQComment(){
				
				    return "";
				
				}
				public String CBHLDQPattern(){
				
					return "";
				
				}
				public String CBHLDQOriginalDbColumnName(){
				
					return "CBHLDQ";
				
				}

				
			    public java.util.Date DATELOADED;

				public java.util.Date getDATELOADED () {
					return this.DATELOADED;
				}

				public Boolean DATELOADEDIsNullable(){
				    return true;
				}
				public Boolean DATELOADEDIsKey(){
				    return false;
				}
				public Integer DATELOADEDLength(){
				    return null;
				}
				public Integer DATELOADEDPrecision(){
				    return null;
				}
				public String DATELOADEDDefault(){
				
					return null;
				
				}
				public String DATELOADEDComment(){
				
				    return "";
				
				}
				public String DATELOADEDPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DATELOADEDOriginalDbColumnName(){
				
					return "DATELOADED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.CBHBOY = (BigDecimal) dis.readObject();
					
						this.CBHBOP = (BigDecimal) dis.readObject();
					
						this.CBHAND = (BigDecimal) dis.readObject();
					
						this.CBTRNS = (BigDecimal) dis.readObject();
					
						this.CBGMRI = (BigDecimal) dis.readObject();
					
						this.CBWKCR = (BigDecimal) dis.readObject();
					
						this.CBWK01 = (BigDecimal) dis.readObject();
					
						this.CBWK02 = (BigDecimal) dis.readObject();
					
						this.CBWK03 = (BigDecimal) dis.readObject();
					
						this.CBWK04 = (BigDecimal) dis.readObject();
					
						this.CBWK05 = (BigDecimal) dis.readObject();
					
						this.CBWK06 = (BigDecimal) dis.readObject();
					
						this.CBWK07 = (BigDecimal) dis.readObject();
					
						this.CBWK08 = (BigDecimal) dis.readObject();
					
						this.CBRSUP = (BigDecimal) dis.readObject();
					
						this.CBRSUY = (BigDecimal) dis.readObject();
					
						this.CBRSDP = (BigDecimal) dis.readObject();
					
						this.CBRSDY = (BigDecimal) dis.readObject();
					
						this.CBVRSP = (BigDecimal) dis.readObject();
					
						this.CBVRSY = (BigDecimal) dis.readObject();
					
						this.CBRCSP = (BigDecimal) dis.readObject();
					
						this.CBRCSY = (BigDecimal) dis.readObject();
					
						this.CBASUP = (BigDecimal) dis.readObject();
					
						this.CBASUY = (BigDecimal) dis.readObject();
					
						this.CBASDP = (BigDecimal) dis.readObject();
					
						this.CBASDY = (BigDecimal) dis.readObject();
					
						this.CBVASP = (BigDecimal) dis.readObject();
					
						this.CBVASY = (BigDecimal) dis.readObject();
					
						this.CBACSP = (BigDecimal) dis.readObject();
					
						this.CBACSY = (BigDecimal) dis.readObject();
					
						this.CBRETS = (BigDecimal) dis.readObject();
					
						this.CBRCUP = (BigDecimal) dis.readObject();
					
						this.CBRCUY = (BigDecimal) dis.readObject();
					
						this.CBRCDP = (BigDecimal) dis.readObject();
					
						this.CBRCDY = (BigDecimal) dis.readObject();
					
						this.CBTIUP = (BigDecimal) dis.readObject();
					
						this.CBTIUY = (BigDecimal) dis.readObject();
					
						this.CBTOUP = (BigDecimal) dis.readObject();
					
						this.CBTOUY = (BigDecimal) dis.readObject();
					
						this.CBTFDP = (BigDecimal) dis.readObject();
					
						this.CBTFDY = (BigDecimal) dis.readObject();
					
						this.CBRVUP = (BigDecimal) dis.readObject();
					
						this.CBRVUY = (BigDecimal) dis.readObject();
					
						this.CBRVDP = (BigDecimal) dis.readObject();
					
						this.CBRVDY = (BigDecimal) dis.readObject();
					
						this.CBAJUP = (BigDecimal) dis.readObject();
					
						this.CBAJUY = (BigDecimal) dis.readObject();
					
						this.CBAJDP = (BigDecimal) dis.readObject();
					
						this.CBAJDY = (BigDecimal) dis.readObject();
					
						this.CBPHUP = (BigDecimal) dis.readObject();
					
						this.CBPHUY = (BigDecimal) dis.readObject();
					
						this.CBPHDP = (BigDecimal) dis.readObject();
					
						this.CBPHDY = (BigDecimal) dis.readObject();
					
						this.CBAVGC = (BigDecimal) dis.readObject();
					
						this.CBAVOH = (BigDecimal) dis.readObject();
					
						this.CBAVRT = (BigDecimal) dis.readObject();
					
						this.CBAVCS = (BigDecimal) dis.readObject();
					
						this.CBDEPT = (BigDecimal) dis.readObject();
					
						this.CBSDPT = (BigDecimal) dis.readObject();
					
						this.CBCLAS = (BigDecimal) dis.readObject();
					
						this.CBSCLS = (BigDecimal) dis.readObject();
					
						this.CBVNDR = (BigDecimal) dis.readObject();
					
					this.CBSTYL = readString(dis);
					
						this.CBPOOQ = (BigDecimal) dis.readObject();
					
						this.CBTOOQ = (BigDecimal) dis.readObject();
					
						this.CBINTQ = (BigDecimal) dis.readObject();
					
						this.CBMASU = (BigDecimal) dis.readObject();
					
						this.CBMASD = (BigDecimal) dis.readObject();
					
						this.CBMASV = (BigDecimal) dis.readObject();
					
						this.CBMASC = (BigDecimal) dis.readObject();
					
						this.CBLAVC = (BigDecimal) dis.readObject();
					
						this.CBARQT = (BigDecimal) dis.readObject();
					
						this.CBNSQT = (BigDecimal) dis.readObject();
					
						this.CBHLDQ = (BigDecimal) dis.readObject();
					
					this.DATELOADED = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.CBHBOY = (BigDecimal) dis.readObject();
					
						this.CBHBOP = (BigDecimal) dis.readObject();
					
						this.CBHAND = (BigDecimal) dis.readObject();
					
						this.CBTRNS = (BigDecimal) dis.readObject();
					
						this.CBGMRI = (BigDecimal) dis.readObject();
					
						this.CBWKCR = (BigDecimal) dis.readObject();
					
						this.CBWK01 = (BigDecimal) dis.readObject();
					
						this.CBWK02 = (BigDecimal) dis.readObject();
					
						this.CBWK03 = (BigDecimal) dis.readObject();
					
						this.CBWK04 = (BigDecimal) dis.readObject();
					
						this.CBWK05 = (BigDecimal) dis.readObject();
					
						this.CBWK06 = (BigDecimal) dis.readObject();
					
						this.CBWK07 = (BigDecimal) dis.readObject();
					
						this.CBWK08 = (BigDecimal) dis.readObject();
					
						this.CBRSUP = (BigDecimal) dis.readObject();
					
						this.CBRSUY = (BigDecimal) dis.readObject();
					
						this.CBRSDP = (BigDecimal) dis.readObject();
					
						this.CBRSDY = (BigDecimal) dis.readObject();
					
						this.CBVRSP = (BigDecimal) dis.readObject();
					
						this.CBVRSY = (BigDecimal) dis.readObject();
					
						this.CBRCSP = (BigDecimal) dis.readObject();
					
						this.CBRCSY = (BigDecimal) dis.readObject();
					
						this.CBASUP = (BigDecimal) dis.readObject();
					
						this.CBASUY = (BigDecimal) dis.readObject();
					
						this.CBASDP = (BigDecimal) dis.readObject();
					
						this.CBASDY = (BigDecimal) dis.readObject();
					
						this.CBVASP = (BigDecimal) dis.readObject();
					
						this.CBVASY = (BigDecimal) dis.readObject();
					
						this.CBACSP = (BigDecimal) dis.readObject();
					
						this.CBACSY = (BigDecimal) dis.readObject();
					
						this.CBRETS = (BigDecimal) dis.readObject();
					
						this.CBRCUP = (BigDecimal) dis.readObject();
					
						this.CBRCUY = (BigDecimal) dis.readObject();
					
						this.CBRCDP = (BigDecimal) dis.readObject();
					
						this.CBRCDY = (BigDecimal) dis.readObject();
					
						this.CBTIUP = (BigDecimal) dis.readObject();
					
						this.CBTIUY = (BigDecimal) dis.readObject();
					
						this.CBTOUP = (BigDecimal) dis.readObject();
					
						this.CBTOUY = (BigDecimal) dis.readObject();
					
						this.CBTFDP = (BigDecimal) dis.readObject();
					
						this.CBTFDY = (BigDecimal) dis.readObject();
					
						this.CBRVUP = (BigDecimal) dis.readObject();
					
						this.CBRVUY = (BigDecimal) dis.readObject();
					
						this.CBRVDP = (BigDecimal) dis.readObject();
					
						this.CBRVDY = (BigDecimal) dis.readObject();
					
						this.CBAJUP = (BigDecimal) dis.readObject();
					
						this.CBAJUY = (BigDecimal) dis.readObject();
					
						this.CBAJDP = (BigDecimal) dis.readObject();
					
						this.CBAJDY = (BigDecimal) dis.readObject();
					
						this.CBPHUP = (BigDecimal) dis.readObject();
					
						this.CBPHUY = (BigDecimal) dis.readObject();
					
						this.CBPHDP = (BigDecimal) dis.readObject();
					
						this.CBPHDY = (BigDecimal) dis.readObject();
					
						this.CBAVGC = (BigDecimal) dis.readObject();
					
						this.CBAVOH = (BigDecimal) dis.readObject();
					
						this.CBAVRT = (BigDecimal) dis.readObject();
					
						this.CBAVCS = (BigDecimal) dis.readObject();
					
						this.CBDEPT = (BigDecimal) dis.readObject();
					
						this.CBSDPT = (BigDecimal) dis.readObject();
					
						this.CBCLAS = (BigDecimal) dis.readObject();
					
						this.CBSCLS = (BigDecimal) dis.readObject();
					
						this.CBVNDR = (BigDecimal) dis.readObject();
					
					this.CBSTYL = readString(dis);
					
						this.CBPOOQ = (BigDecimal) dis.readObject();
					
						this.CBTOOQ = (BigDecimal) dis.readObject();
					
						this.CBINTQ = (BigDecimal) dis.readObject();
					
						this.CBMASU = (BigDecimal) dis.readObject();
					
						this.CBMASD = (BigDecimal) dis.readObject();
					
						this.CBMASV = (BigDecimal) dis.readObject();
					
						this.CBMASC = (BigDecimal) dis.readObject();
					
						this.CBLAVC = (BigDecimal) dis.readObject();
					
						this.CBARQT = (BigDecimal) dis.readObject();
					
						this.CBNSQT = (BigDecimal) dis.readObject();
					
						this.CBHLDQ = (BigDecimal) dis.readObject();
					
					this.DATELOADED = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBGMRI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWKCR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVGC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVCS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBDEPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSDPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBCLAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVNDR);
					
					// String
				
						writeString(this.CBSTYL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBINTQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBLAVC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBARQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBNSQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHLDQ);
					
					// java.util.Date
				
						writeDate(this.DATELOADED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBGMRI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWKCR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVGC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVCS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBDEPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSDPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBCLAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVNDR);
					
					// String
				
						writeString(this.CBSTYL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBINTQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBLAVC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBARQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBNSQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHLDQ);
					
					// java.util.Date
				
						writeDate(this.DATELOADED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INUMBR="+String.valueOf(INUMBR));
		sb.append(",CBHBOY="+String.valueOf(CBHBOY));
		sb.append(",CBHBOP="+String.valueOf(CBHBOP));
		sb.append(",CBHAND="+String.valueOf(CBHAND));
		sb.append(",CBTRNS="+String.valueOf(CBTRNS));
		sb.append(",CBGMRI="+String.valueOf(CBGMRI));
		sb.append(",CBWKCR="+String.valueOf(CBWKCR));
		sb.append(",CBWK01="+String.valueOf(CBWK01));
		sb.append(",CBWK02="+String.valueOf(CBWK02));
		sb.append(",CBWK03="+String.valueOf(CBWK03));
		sb.append(",CBWK04="+String.valueOf(CBWK04));
		sb.append(",CBWK05="+String.valueOf(CBWK05));
		sb.append(",CBWK06="+String.valueOf(CBWK06));
		sb.append(",CBWK07="+String.valueOf(CBWK07));
		sb.append(",CBWK08="+String.valueOf(CBWK08));
		sb.append(",CBRSUP="+String.valueOf(CBRSUP));
		sb.append(",CBRSUY="+String.valueOf(CBRSUY));
		sb.append(",CBRSDP="+String.valueOf(CBRSDP));
		sb.append(",CBRSDY="+String.valueOf(CBRSDY));
		sb.append(",CBVRSP="+String.valueOf(CBVRSP));
		sb.append(",CBVRSY="+String.valueOf(CBVRSY));
		sb.append(",CBRCSP="+String.valueOf(CBRCSP));
		sb.append(",CBRCSY="+String.valueOf(CBRCSY));
		sb.append(",CBASUP="+String.valueOf(CBASUP));
		sb.append(",CBASUY="+String.valueOf(CBASUY));
		sb.append(",CBASDP="+String.valueOf(CBASDP));
		sb.append(",CBASDY="+String.valueOf(CBASDY));
		sb.append(",CBVASP="+String.valueOf(CBVASP));
		sb.append(",CBVASY="+String.valueOf(CBVASY));
		sb.append(",CBACSP="+String.valueOf(CBACSP));
		sb.append(",CBACSY="+String.valueOf(CBACSY));
		sb.append(",CBRETS="+String.valueOf(CBRETS));
		sb.append(",CBRCUP="+String.valueOf(CBRCUP));
		sb.append(",CBRCUY="+String.valueOf(CBRCUY));
		sb.append(",CBRCDP="+String.valueOf(CBRCDP));
		sb.append(",CBRCDY="+String.valueOf(CBRCDY));
		sb.append(",CBTIUP="+String.valueOf(CBTIUP));
		sb.append(",CBTIUY="+String.valueOf(CBTIUY));
		sb.append(",CBTOUP="+String.valueOf(CBTOUP));
		sb.append(",CBTOUY="+String.valueOf(CBTOUY));
		sb.append(",CBTFDP="+String.valueOf(CBTFDP));
		sb.append(",CBTFDY="+String.valueOf(CBTFDY));
		sb.append(",CBRVUP="+String.valueOf(CBRVUP));
		sb.append(",CBRVUY="+String.valueOf(CBRVUY));
		sb.append(",CBRVDP="+String.valueOf(CBRVDP));
		sb.append(",CBRVDY="+String.valueOf(CBRVDY));
		sb.append(",CBAJUP="+String.valueOf(CBAJUP));
		sb.append(",CBAJUY="+String.valueOf(CBAJUY));
		sb.append(",CBAJDP="+String.valueOf(CBAJDP));
		sb.append(",CBAJDY="+String.valueOf(CBAJDY));
		sb.append(",CBPHUP="+String.valueOf(CBPHUP));
		sb.append(",CBPHUY="+String.valueOf(CBPHUY));
		sb.append(",CBPHDP="+String.valueOf(CBPHDP));
		sb.append(",CBPHDY="+String.valueOf(CBPHDY));
		sb.append(",CBAVGC="+String.valueOf(CBAVGC));
		sb.append(",CBAVOH="+String.valueOf(CBAVOH));
		sb.append(",CBAVRT="+String.valueOf(CBAVRT));
		sb.append(",CBAVCS="+String.valueOf(CBAVCS));
		sb.append(",CBDEPT="+String.valueOf(CBDEPT));
		sb.append(",CBSDPT="+String.valueOf(CBSDPT));
		sb.append(",CBCLAS="+String.valueOf(CBCLAS));
		sb.append(",CBSCLS="+String.valueOf(CBSCLS));
		sb.append(",CBVNDR="+String.valueOf(CBVNDR));
		sb.append(",CBSTYL="+CBSTYL);
		sb.append(",CBPOOQ="+String.valueOf(CBPOOQ));
		sb.append(",CBTOOQ="+String.valueOf(CBTOOQ));
		sb.append(",CBINTQ="+String.valueOf(CBINTQ));
		sb.append(",CBMASU="+String.valueOf(CBMASU));
		sb.append(",CBMASD="+String.valueOf(CBMASD));
		sb.append(",CBMASV="+String.valueOf(CBMASV));
		sb.append(",CBMASC="+String.valueOf(CBMASC));
		sb.append(",CBLAVC="+String.valueOf(CBLAVC));
		sb.append(",CBARQT="+String.valueOf(CBARQT));
		sb.append(",CBNSQT="+String.valueOf(CBNSQT));
		sb.append(",CBHLDQ="+String.valueOf(CBHLDQ));
		sb.append(",DATELOADED="+String.valueOf(DATELOADED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(CBHBOY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHBOY);
            			}
            		
        			sb.append("|");
        		
        				if(CBHBOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHBOP);
            			}
            		
        			sb.append("|");
        		
        				if(CBHAND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHAND);
            			}
            		
        			sb.append("|");
        		
        				if(CBTRNS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTRNS);
            			}
            		
        			sb.append("|");
        		
        				if(CBGMRI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBGMRI);
            			}
            		
        			sb.append("|");
        		
        				if(CBWKCR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWKCR);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK01);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK02);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK03);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK04);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK05 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK05);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK06 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK06);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK07 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK07);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK08 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK08);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBVRSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVRSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBVRSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVRSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBASUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBASUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBASDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBASDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBVASP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVASP);
            			}
            		
        			sb.append("|");
        		
        				if(CBVASY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVASY);
            			}
            		
        			sb.append("|");
        		
        				if(CBACSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBACSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBACSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBACSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRETS);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTIUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTIUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTIUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTIUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTFDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTFDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTFDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTFDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVGC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVGC);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVOH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVOH);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVRT);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVCS);
            			}
            		
        			sb.append("|");
        		
        				if(CBDEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBDEPT);
            			}
            		
        			sb.append("|");
        		
        				if(CBSDPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSDPT);
            			}
            		
        			sb.append("|");
        		
        				if(CBCLAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBCLAS);
            			}
            		
        			sb.append("|");
        		
        				if(CBSCLS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSCLS);
            			}
            		
        			sb.append("|");
        		
        				if(CBVNDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVNDR);
            			}
            		
        			sb.append("|");
        		
        				if(CBSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(CBPOOQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPOOQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOOQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOOQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBINTQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBINTQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASU);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASD);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASV);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASC);
            			}
            		
        			sb.append("|");
        		
        				if(CBLAVC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBLAVC);
            			}
            		
        			sb.append("|");
        		
        				if(CBARQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBARQT);
            			}
            		
        			sb.append("|");
        		
        				if(CBNSQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBNSQT);
            			}
            		
        			sb.append("|");
        		
        				if(CBHLDQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHLDQ);
            			}
            		
        			sb.append("|");
        		
        				if(DATELOADED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DATELOADED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(tmap_INVCBLStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public BigDecimal CBHBOY;

				public BigDecimal getCBHBOY () {
					return this.CBHBOY;
				}

				public Boolean CBHBOYIsNullable(){
				    return true;
				}
				public Boolean CBHBOYIsKey(){
				    return false;
				}
				public Integer CBHBOYLength(){
				    return null;
				}
				public Integer CBHBOYPrecision(){
				    return null;
				}
				public String CBHBOYDefault(){
				
					return "";
				
				}
				public String CBHBOYComment(){
				
				    return "";
				
				}
				public String CBHBOYPattern(){
				
					return "";
				
				}
				public String CBHBOYOriginalDbColumnName(){
				
					return "CBHBOY";
				
				}

				
			    public BigDecimal CBHBOP;

				public BigDecimal getCBHBOP () {
					return this.CBHBOP;
				}

				public Boolean CBHBOPIsNullable(){
				    return true;
				}
				public Boolean CBHBOPIsKey(){
				    return false;
				}
				public Integer CBHBOPLength(){
				    return null;
				}
				public Integer CBHBOPPrecision(){
				    return null;
				}
				public String CBHBOPDefault(){
				
					return "";
				
				}
				public String CBHBOPComment(){
				
				    return "";
				
				}
				public String CBHBOPPattern(){
				
					return "";
				
				}
				public String CBHBOPOriginalDbColumnName(){
				
					return "CBHBOP";
				
				}

				
			    public BigDecimal CBHAND;

				public BigDecimal getCBHAND () {
					return this.CBHAND;
				}

				public Boolean CBHANDIsNullable(){
				    return true;
				}
				public Boolean CBHANDIsKey(){
				    return false;
				}
				public Integer CBHANDLength(){
				    return null;
				}
				public Integer CBHANDPrecision(){
				    return null;
				}
				public String CBHANDDefault(){
				
					return "";
				
				}
				public String CBHANDComment(){
				
				    return "";
				
				}
				public String CBHANDPattern(){
				
					return "";
				
				}
				public String CBHANDOriginalDbColumnName(){
				
					return "CBHAND";
				
				}

				
			    public BigDecimal CBTRNS;

				public BigDecimal getCBTRNS () {
					return this.CBTRNS;
				}

				public Boolean CBTRNSIsNullable(){
				    return true;
				}
				public Boolean CBTRNSIsKey(){
				    return false;
				}
				public Integer CBTRNSLength(){
				    return null;
				}
				public Integer CBTRNSPrecision(){
				    return null;
				}
				public String CBTRNSDefault(){
				
					return "";
				
				}
				public String CBTRNSComment(){
				
				    return "";
				
				}
				public String CBTRNSPattern(){
				
					return "";
				
				}
				public String CBTRNSOriginalDbColumnName(){
				
					return "CBTRNS";
				
				}

				
			    public BigDecimal CBGMRI;

				public BigDecimal getCBGMRI () {
					return this.CBGMRI;
				}

				public Boolean CBGMRIIsNullable(){
				    return true;
				}
				public Boolean CBGMRIIsKey(){
				    return false;
				}
				public Integer CBGMRILength(){
				    return null;
				}
				public Integer CBGMRIPrecision(){
				    return null;
				}
				public String CBGMRIDefault(){
				
					return "";
				
				}
				public String CBGMRIComment(){
				
				    return "";
				
				}
				public String CBGMRIPattern(){
				
					return "";
				
				}
				public String CBGMRIOriginalDbColumnName(){
				
					return "CBGMRI";
				
				}

				
			    public BigDecimal CBWKCR;

				public BigDecimal getCBWKCR () {
					return this.CBWKCR;
				}

				public Boolean CBWKCRIsNullable(){
				    return true;
				}
				public Boolean CBWKCRIsKey(){
				    return false;
				}
				public Integer CBWKCRLength(){
				    return null;
				}
				public Integer CBWKCRPrecision(){
				    return null;
				}
				public String CBWKCRDefault(){
				
					return "";
				
				}
				public String CBWKCRComment(){
				
				    return "";
				
				}
				public String CBWKCRPattern(){
				
					return "";
				
				}
				public String CBWKCROriginalDbColumnName(){
				
					return "CBWKCR";
				
				}

				
			    public BigDecimal CBWK01;

				public BigDecimal getCBWK01 () {
					return this.CBWK01;
				}

				public Boolean CBWK01IsNullable(){
				    return true;
				}
				public Boolean CBWK01IsKey(){
				    return false;
				}
				public Integer CBWK01Length(){
				    return null;
				}
				public Integer CBWK01Precision(){
				    return null;
				}
				public String CBWK01Default(){
				
					return "";
				
				}
				public String CBWK01Comment(){
				
				    return "";
				
				}
				public String CBWK01Pattern(){
				
					return "";
				
				}
				public String CBWK01OriginalDbColumnName(){
				
					return "CBWK01";
				
				}

				
			    public BigDecimal CBWK02;

				public BigDecimal getCBWK02 () {
					return this.CBWK02;
				}

				public Boolean CBWK02IsNullable(){
				    return true;
				}
				public Boolean CBWK02IsKey(){
				    return false;
				}
				public Integer CBWK02Length(){
				    return null;
				}
				public Integer CBWK02Precision(){
				    return null;
				}
				public String CBWK02Default(){
				
					return "";
				
				}
				public String CBWK02Comment(){
				
				    return "";
				
				}
				public String CBWK02Pattern(){
				
					return "";
				
				}
				public String CBWK02OriginalDbColumnName(){
				
					return "CBWK02";
				
				}

				
			    public BigDecimal CBWK03;

				public BigDecimal getCBWK03 () {
					return this.CBWK03;
				}

				public Boolean CBWK03IsNullable(){
				    return true;
				}
				public Boolean CBWK03IsKey(){
				    return false;
				}
				public Integer CBWK03Length(){
				    return null;
				}
				public Integer CBWK03Precision(){
				    return null;
				}
				public String CBWK03Default(){
				
					return "";
				
				}
				public String CBWK03Comment(){
				
				    return "";
				
				}
				public String CBWK03Pattern(){
				
					return "";
				
				}
				public String CBWK03OriginalDbColumnName(){
				
					return "CBWK03";
				
				}

				
			    public BigDecimal CBWK04;

				public BigDecimal getCBWK04 () {
					return this.CBWK04;
				}

				public Boolean CBWK04IsNullable(){
				    return true;
				}
				public Boolean CBWK04IsKey(){
				    return false;
				}
				public Integer CBWK04Length(){
				    return null;
				}
				public Integer CBWK04Precision(){
				    return null;
				}
				public String CBWK04Default(){
				
					return "";
				
				}
				public String CBWK04Comment(){
				
				    return "";
				
				}
				public String CBWK04Pattern(){
				
					return "";
				
				}
				public String CBWK04OriginalDbColumnName(){
				
					return "CBWK04";
				
				}

				
			    public BigDecimal CBWK05;

				public BigDecimal getCBWK05 () {
					return this.CBWK05;
				}

				public Boolean CBWK05IsNullable(){
				    return true;
				}
				public Boolean CBWK05IsKey(){
				    return false;
				}
				public Integer CBWK05Length(){
				    return null;
				}
				public Integer CBWK05Precision(){
				    return null;
				}
				public String CBWK05Default(){
				
					return "";
				
				}
				public String CBWK05Comment(){
				
				    return "";
				
				}
				public String CBWK05Pattern(){
				
					return "";
				
				}
				public String CBWK05OriginalDbColumnName(){
				
					return "CBWK05";
				
				}

				
			    public BigDecimal CBWK06;

				public BigDecimal getCBWK06 () {
					return this.CBWK06;
				}

				public Boolean CBWK06IsNullable(){
				    return true;
				}
				public Boolean CBWK06IsKey(){
				    return false;
				}
				public Integer CBWK06Length(){
				    return null;
				}
				public Integer CBWK06Precision(){
				    return null;
				}
				public String CBWK06Default(){
				
					return "";
				
				}
				public String CBWK06Comment(){
				
				    return "";
				
				}
				public String CBWK06Pattern(){
				
					return "";
				
				}
				public String CBWK06OriginalDbColumnName(){
				
					return "CBWK06";
				
				}

				
			    public BigDecimal CBWK07;

				public BigDecimal getCBWK07 () {
					return this.CBWK07;
				}

				public Boolean CBWK07IsNullable(){
				    return true;
				}
				public Boolean CBWK07IsKey(){
				    return false;
				}
				public Integer CBWK07Length(){
				    return null;
				}
				public Integer CBWK07Precision(){
				    return null;
				}
				public String CBWK07Default(){
				
					return "";
				
				}
				public String CBWK07Comment(){
				
				    return "";
				
				}
				public String CBWK07Pattern(){
				
					return "";
				
				}
				public String CBWK07OriginalDbColumnName(){
				
					return "CBWK07";
				
				}

				
			    public BigDecimal CBWK08;

				public BigDecimal getCBWK08 () {
					return this.CBWK08;
				}

				public Boolean CBWK08IsNullable(){
				    return true;
				}
				public Boolean CBWK08IsKey(){
				    return false;
				}
				public Integer CBWK08Length(){
				    return null;
				}
				public Integer CBWK08Precision(){
				    return null;
				}
				public String CBWK08Default(){
				
					return "";
				
				}
				public String CBWK08Comment(){
				
				    return "";
				
				}
				public String CBWK08Pattern(){
				
					return "";
				
				}
				public String CBWK08OriginalDbColumnName(){
				
					return "CBWK08";
				
				}

				
			    public BigDecimal CBRSUP;

				public BigDecimal getCBRSUP () {
					return this.CBRSUP;
				}

				public Boolean CBRSUPIsNullable(){
				    return true;
				}
				public Boolean CBRSUPIsKey(){
				    return false;
				}
				public Integer CBRSUPLength(){
				    return null;
				}
				public Integer CBRSUPPrecision(){
				    return null;
				}
				public String CBRSUPDefault(){
				
					return "";
				
				}
				public String CBRSUPComment(){
				
				    return "";
				
				}
				public String CBRSUPPattern(){
				
					return "";
				
				}
				public String CBRSUPOriginalDbColumnName(){
				
					return "CBRSUP";
				
				}

				
			    public BigDecimal CBRSUY;

				public BigDecimal getCBRSUY () {
					return this.CBRSUY;
				}

				public Boolean CBRSUYIsNullable(){
				    return true;
				}
				public Boolean CBRSUYIsKey(){
				    return false;
				}
				public Integer CBRSUYLength(){
				    return null;
				}
				public Integer CBRSUYPrecision(){
				    return null;
				}
				public String CBRSUYDefault(){
				
					return "";
				
				}
				public String CBRSUYComment(){
				
				    return "";
				
				}
				public String CBRSUYPattern(){
				
					return "";
				
				}
				public String CBRSUYOriginalDbColumnName(){
				
					return "CBRSUY";
				
				}

				
			    public BigDecimal CBRSDP;

				public BigDecimal getCBRSDP () {
					return this.CBRSDP;
				}

				public Boolean CBRSDPIsNullable(){
				    return true;
				}
				public Boolean CBRSDPIsKey(){
				    return false;
				}
				public Integer CBRSDPLength(){
				    return null;
				}
				public Integer CBRSDPPrecision(){
				    return null;
				}
				public String CBRSDPDefault(){
				
					return "";
				
				}
				public String CBRSDPComment(){
				
				    return "";
				
				}
				public String CBRSDPPattern(){
				
					return "";
				
				}
				public String CBRSDPOriginalDbColumnName(){
				
					return "CBRSDP";
				
				}

				
			    public BigDecimal CBRSDY;

				public BigDecimal getCBRSDY () {
					return this.CBRSDY;
				}

				public Boolean CBRSDYIsNullable(){
				    return true;
				}
				public Boolean CBRSDYIsKey(){
				    return false;
				}
				public Integer CBRSDYLength(){
				    return null;
				}
				public Integer CBRSDYPrecision(){
				    return null;
				}
				public String CBRSDYDefault(){
				
					return "";
				
				}
				public String CBRSDYComment(){
				
				    return "";
				
				}
				public String CBRSDYPattern(){
				
					return "";
				
				}
				public String CBRSDYOriginalDbColumnName(){
				
					return "CBRSDY";
				
				}

				
			    public BigDecimal CBVRSP;

				public BigDecimal getCBVRSP () {
					return this.CBVRSP;
				}

				public Boolean CBVRSPIsNullable(){
				    return true;
				}
				public Boolean CBVRSPIsKey(){
				    return false;
				}
				public Integer CBVRSPLength(){
				    return null;
				}
				public Integer CBVRSPPrecision(){
				    return null;
				}
				public String CBVRSPDefault(){
				
					return "";
				
				}
				public String CBVRSPComment(){
				
				    return "";
				
				}
				public String CBVRSPPattern(){
				
					return "";
				
				}
				public String CBVRSPOriginalDbColumnName(){
				
					return "CBVRSP";
				
				}

				
			    public BigDecimal CBVRSY;

				public BigDecimal getCBVRSY () {
					return this.CBVRSY;
				}

				public Boolean CBVRSYIsNullable(){
				    return true;
				}
				public Boolean CBVRSYIsKey(){
				    return false;
				}
				public Integer CBVRSYLength(){
				    return null;
				}
				public Integer CBVRSYPrecision(){
				    return null;
				}
				public String CBVRSYDefault(){
				
					return "";
				
				}
				public String CBVRSYComment(){
				
				    return "";
				
				}
				public String CBVRSYPattern(){
				
					return "";
				
				}
				public String CBVRSYOriginalDbColumnName(){
				
					return "CBVRSY";
				
				}

				
			    public BigDecimal CBRCSP;

				public BigDecimal getCBRCSP () {
					return this.CBRCSP;
				}

				public Boolean CBRCSPIsNullable(){
				    return true;
				}
				public Boolean CBRCSPIsKey(){
				    return false;
				}
				public Integer CBRCSPLength(){
				    return null;
				}
				public Integer CBRCSPPrecision(){
				    return null;
				}
				public String CBRCSPDefault(){
				
					return "";
				
				}
				public String CBRCSPComment(){
				
				    return "";
				
				}
				public String CBRCSPPattern(){
				
					return "";
				
				}
				public String CBRCSPOriginalDbColumnName(){
				
					return "CBRCSP";
				
				}

				
			    public BigDecimal CBRCSY;

				public BigDecimal getCBRCSY () {
					return this.CBRCSY;
				}

				public Boolean CBRCSYIsNullable(){
				    return true;
				}
				public Boolean CBRCSYIsKey(){
				    return false;
				}
				public Integer CBRCSYLength(){
				    return null;
				}
				public Integer CBRCSYPrecision(){
				    return null;
				}
				public String CBRCSYDefault(){
				
					return "";
				
				}
				public String CBRCSYComment(){
				
				    return "";
				
				}
				public String CBRCSYPattern(){
				
					return "";
				
				}
				public String CBRCSYOriginalDbColumnName(){
				
					return "CBRCSY";
				
				}

				
			    public BigDecimal CBASUP;

				public BigDecimal getCBASUP () {
					return this.CBASUP;
				}

				public Boolean CBASUPIsNullable(){
				    return true;
				}
				public Boolean CBASUPIsKey(){
				    return false;
				}
				public Integer CBASUPLength(){
				    return null;
				}
				public Integer CBASUPPrecision(){
				    return null;
				}
				public String CBASUPDefault(){
				
					return "";
				
				}
				public String CBASUPComment(){
				
				    return "";
				
				}
				public String CBASUPPattern(){
				
					return "";
				
				}
				public String CBASUPOriginalDbColumnName(){
				
					return "CBASUP";
				
				}

				
			    public BigDecimal CBASUY;

				public BigDecimal getCBASUY () {
					return this.CBASUY;
				}

				public Boolean CBASUYIsNullable(){
				    return true;
				}
				public Boolean CBASUYIsKey(){
				    return false;
				}
				public Integer CBASUYLength(){
				    return null;
				}
				public Integer CBASUYPrecision(){
				    return null;
				}
				public String CBASUYDefault(){
				
					return "";
				
				}
				public String CBASUYComment(){
				
				    return "";
				
				}
				public String CBASUYPattern(){
				
					return "";
				
				}
				public String CBASUYOriginalDbColumnName(){
				
					return "CBASUY";
				
				}

				
			    public BigDecimal CBASDP;

				public BigDecimal getCBASDP () {
					return this.CBASDP;
				}

				public Boolean CBASDPIsNullable(){
				    return true;
				}
				public Boolean CBASDPIsKey(){
				    return false;
				}
				public Integer CBASDPLength(){
				    return null;
				}
				public Integer CBASDPPrecision(){
				    return null;
				}
				public String CBASDPDefault(){
				
					return "";
				
				}
				public String CBASDPComment(){
				
				    return "";
				
				}
				public String CBASDPPattern(){
				
					return "";
				
				}
				public String CBASDPOriginalDbColumnName(){
				
					return "CBASDP";
				
				}

				
			    public BigDecimal CBASDY;

				public BigDecimal getCBASDY () {
					return this.CBASDY;
				}

				public Boolean CBASDYIsNullable(){
				    return true;
				}
				public Boolean CBASDYIsKey(){
				    return false;
				}
				public Integer CBASDYLength(){
				    return null;
				}
				public Integer CBASDYPrecision(){
				    return null;
				}
				public String CBASDYDefault(){
				
					return "";
				
				}
				public String CBASDYComment(){
				
				    return "";
				
				}
				public String CBASDYPattern(){
				
					return "";
				
				}
				public String CBASDYOriginalDbColumnName(){
				
					return "CBASDY";
				
				}

				
			    public BigDecimal CBVASP;

				public BigDecimal getCBVASP () {
					return this.CBVASP;
				}

				public Boolean CBVASPIsNullable(){
				    return true;
				}
				public Boolean CBVASPIsKey(){
				    return false;
				}
				public Integer CBVASPLength(){
				    return null;
				}
				public Integer CBVASPPrecision(){
				    return null;
				}
				public String CBVASPDefault(){
				
					return "";
				
				}
				public String CBVASPComment(){
				
				    return "";
				
				}
				public String CBVASPPattern(){
				
					return "";
				
				}
				public String CBVASPOriginalDbColumnName(){
				
					return "CBVASP";
				
				}

				
			    public BigDecimal CBVASY;

				public BigDecimal getCBVASY () {
					return this.CBVASY;
				}

				public Boolean CBVASYIsNullable(){
				    return true;
				}
				public Boolean CBVASYIsKey(){
				    return false;
				}
				public Integer CBVASYLength(){
				    return null;
				}
				public Integer CBVASYPrecision(){
				    return null;
				}
				public String CBVASYDefault(){
				
					return "";
				
				}
				public String CBVASYComment(){
				
				    return "";
				
				}
				public String CBVASYPattern(){
				
					return "";
				
				}
				public String CBVASYOriginalDbColumnName(){
				
					return "CBVASY";
				
				}

				
			    public BigDecimal CBACSP;

				public BigDecimal getCBACSP () {
					return this.CBACSP;
				}

				public Boolean CBACSPIsNullable(){
				    return true;
				}
				public Boolean CBACSPIsKey(){
				    return false;
				}
				public Integer CBACSPLength(){
				    return null;
				}
				public Integer CBACSPPrecision(){
				    return null;
				}
				public String CBACSPDefault(){
				
					return "";
				
				}
				public String CBACSPComment(){
				
				    return "";
				
				}
				public String CBACSPPattern(){
				
					return "";
				
				}
				public String CBACSPOriginalDbColumnName(){
				
					return "CBACSP";
				
				}

				
			    public BigDecimal CBACSY;

				public BigDecimal getCBACSY () {
					return this.CBACSY;
				}

				public Boolean CBACSYIsNullable(){
				    return true;
				}
				public Boolean CBACSYIsKey(){
				    return false;
				}
				public Integer CBACSYLength(){
				    return null;
				}
				public Integer CBACSYPrecision(){
				    return null;
				}
				public String CBACSYDefault(){
				
					return "";
				
				}
				public String CBACSYComment(){
				
				    return "";
				
				}
				public String CBACSYPattern(){
				
					return "";
				
				}
				public String CBACSYOriginalDbColumnName(){
				
					return "CBACSY";
				
				}

				
			    public BigDecimal CBRETS;

				public BigDecimal getCBRETS () {
					return this.CBRETS;
				}

				public Boolean CBRETSIsNullable(){
				    return true;
				}
				public Boolean CBRETSIsKey(){
				    return false;
				}
				public Integer CBRETSLength(){
				    return null;
				}
				public Integer CBRETSPrecision(){
				    return null;
				}
				public String CBRETSDefault(){
				
					return "";
				
				}
				public String CBRETSComment(){
				
				    return "";
				
				}
				public String CBRETSPattern(){
				
					return "";
				
				}
				public String CBRETSOriginalDbColumnName(){
				
					return "CBRETS";
				
				}

				
			    public BigDecimal CBRCUP;

				public BigDecimal getCBRCUP () {
					return this.CBRCUP;
				}

				public Boolean CBRCUPIsNullable(){
				    return true;
				}
				public Boolean CBRCUPIsKey(){
				    return false;
				}
				public Integer CBRCUPLength(){
				    return null;
				}
				public Integer CBRCUPPrecision(){
				    return null;
				}
				public String CBRCUPDefault(){
				
					return "";
				
				}
				public String CBRCUPComment(){
				
				    return "";
				
				}
				public String CBRCUPPattern(){
				
					return "";
				
				}
				public String CBRCUPOriginalDbColumnName(){
				
					return "CBRCUP";
				
				}

				
			    public BigDecimal CBRCUY;

				public BigDecimal getCBRCUY () {
					return this.CBRCUY;
				}

				public Boolean CBRCUYIsNullable(){
				    return true;
				}
				public Boolean CBRCUYIsKey(){
				    return false;
				}
				public Integer CBRCUYLength(){
				    return null;
				}
				public Integer CBRCUYPrecision(){
				    return null;
				}
				public String CBRCUYDefault(){
				
					return "";
				
				}
				public String CBRCUYComment(){
				
				    return "";
				
				}
				public String CBRCUYPattern(){
				
					return "";
				
				}
				public String CBRCUYOriginalDbColumnName(){
				
					return "CBRCUY";
				
				}

				
			    public BigDecimal CBRCDP;

				public BigDecimal getCBRCDP () {
					return this.CBRCDP;
				}

				public Boolean CBRCDPIsNullable(){
				    return true;
				}
				public Boolean CBRCDPIsKey(){
				    return false;
				}
				public Integer CBRCDPLength(){
				    return null;
				}
				public Integer CBRCDPPrecision(){
				    return null;
				}
				public String CBRCDPDefault(){
				
					return "";
				
				}
				public String CBRCDPComment(){
				
				    return "";
				
				}
				public String CBRCDPPattern(){
				
					return "";
				
				}
				public String CBRCDPOriginalDbColumnName(){
				
					return "CBRCDP";
				
				}

				
			    public BigDecimal CBRCDY;

				public BigDecimal getCBRCDY () {
					return this.CBRCDY;
				}

				public Boolean CBRCDYIsNullable(){
				    return true;
				}
				public Boolean CBRCDYIsKey(){
				    return false;
				}
				public Integer CBRCDYLength(){
				    return null;
				}
				public Integer CBRCDYPrecision(){
				    return null;
				}
				public String CBRCDYDefault(){
				
					return "";
				
				}
				public String CBRCDYComment(){
				
				    return "";
				
				}
				public String CBRCDYPattern(){
				
					return "";
				
				}
				public String CBRCDYOriginalDbColumnName(){
				
					return "CBRCDY";
				
				}

				
			    public BigDecimal CBTIUP;

				public BigDecimal getCBTIUP () {
					return this.CBTIUP;
				}

				public Boolean CBTIUPIsNullable(){
				    return true;
				}
				public Boolean CBTIUPIsKey(){
				    return false;
				}
				public Integer CBTIUPLength(){
				    return null;
				}
				public Integer CBTIUPPrecision(){
				    return null;
				}
				public String CBTIUPDefault(){
				
					return "";
				
				}
				public String CBTIUPComment(){
				
				    return "";
				
				}
				public String CBTIUPPattern(){
				
					return "";
				
				}
				public String CBTIUPOriginalDbColumnName(){
				
					return "CBTIUP";
				
				}

				
			    public BigDecimal CBTIUY;

				public BigDecimal getCBTIUY () {
					return this.CBTIUY;
				}

				public Boolean CBTIUYIsNullable(){
				    return true;
				}
				public Boolean CBTIUYIsKey(){
				    return false;
				}
				public Integer CBTIUYLength(){
				    return null;
				}
				public Integer CBTIUYPrecision(){
				    return null;
				}
				public String CBTIUYDefault(){
				
					return "";
				
				}
				public String CBTIUYComment(){
				
				    return "";
				
				}
				public String CBTIUYPattern(){
				
					return "";
				
				}
				public String CBTIUYOriginalDbColumnName(){
				
					return "CBTIUY";
				
				}

				
			    public BigDecimal CBTOUP;

				public BigDecimal getCBTOUP () {
					return this.CBTOUP;
				}

				public Boolean CBTOUPIsNullable(){
				    return true;
				}
				public Boolean CBTOUPIsKey(){
				    return false;
				}
				public Integer CBTOUPLength(){
				    return null;
				}
				public Integer CBTOUPPrecision(){
				    return null;
				}
				public String CBTOUPDefault(){
				
					return "";
				
				}
				public String CBTOUPComment(){
				
				    return "";
				
				}
				public String CBTOUPPattern(){
				
					return "";
				
				}
				public String CBTOUPOriginalDbColumnName(){
				
					return "CBTOUP";
				
				}

				
			    public BigDecimal CBTOUY;

				public BigDecimal getCBTOUY () {
					return this.CBTOUY;
				}

				public Boolean CBTOUYIsNullable(){
				    return true;
				}
				public Boolean CBTOUYIsKey(){
				    return false;
				}
				public Integer CBTOUYLength(){
				    return null;
				}
				public Integer CBTOUYPrecision(){
				    return null;
				}
				public String CBTOUYDefault(){
				
					return "";
				
				}
				public String CBTOUYComment(){
				
				    return "";
				
				}
				public String CBTOUYPattern(){
				
					return "";
				
				}
				public String CBTOUYOriginalDbColumnName(){
				
					return "CBTOUY";
				
				}

				
			    public BigDecimal CBTFDP;

				public BigDecimal getCBTFDP () {
					return this.CBTFDP;
				}

				public Boolean CBTFDPIsNullable(){
				    return true;
				}
				public Boolean CBTFDPIsKey(){
				    return false;
				}
				public Integer CBTFDPLength(){
				    return null;
				}
				public Integer CBTFDPPrecision(){
				    return null;
				}
				public String CBTFDPDefault(){
				
					return "";
				
				}
				public String CBTFDPComment(){
				
				    return "";
				
				}
				public String CBTFDPPattern(){
				
					return "";
				
				}
				public String CBTFDPOriginalDbColumnName(){
				
					return "CBTFDP";
				
				}

				
			    public BigDecimal CBTFDY;

				public BigDecimal getCBTFDY () {
					return this.CBTFDY;
				}

				public Boolean CBTFDYIsNullable(){
				    return true;
				}
				public Boolean CBTFDYIsKey(){
				    return false;
				}
				public Integer CBTFDYLength(){
				    return null;
				}
				public Integer CBTFDYPrecision(){
				    return null;
				}
				public String CBTFDYDefault(){
				
					return "";
				
				}
				public String CBTFDYComment(){
				
				    return "";
				
				}
				public String CBTFDYPattern(){
				
					return "";
				
				}
				public String CBTFDYOriginalDbColumnName(){
				
					return "CBTFDY";
				
				}

				
			    public BigDecimal CBRVUP;

				public BigDecimal getCBRVUP () {
					return this.CBRVUP;
				}

				public Boolean CBRVUPIsNullable(){
				    return true;
				}
				public Boolean CBRVUPIsKey(){
				    return false;
				}
				public Integer CBRVUPLength(){
				    return null;
				}
				public Integer CBRVUPPrecision(){
				    return null;
				}
				public String CBRVUPDefault(){
				
					return "";
				
				}
				public String CBRVUPComment(){
				
				    return "";
				
				}
				public String CBRVUPPattern(){
				
					return "";
				
				}
				public String CBRVUPOriginalDbColumnName(){
				
					return "CBRVUP";
				
				}

				
			    public BigDecimal CBRVUY;

				public BigDecimal getCBRVUY () {
					return this.CBRVUY;
				}

				public Boolean CBRVUYIsNullable(){
				    return true;
				}
				public Boolean CBRVUYIsKey(){
				    return false;
				}
				public Integer CBRVUYLength(){
				    return null;
				}
				public Integer CBRVUYPrecision(){
				    return null;
				}
				public String CBRVUYDefault(){
				
					return "";
				
				}
				public String CBRVUYComment(){
				
				    return "";
				
				}
				public String CBRVUYPattern(){
				
					return "";
				
				}
				public String CBRVUYOriginalDbColumnName(){
				
					return "CBRVUY";
				
				}

				
			    public BigDecimal CBRVDP;

				public BigDecimal getCBRVDP () {
					return this.CBRVDP;
				}

				public Boolean CBRVDPIsNullable(){
				    return true;
				}
				public Boolean CBRVDPIsKey(){
				    return false;
				}
				public Integer CBRVDPLength(){
				    return null;
				}
				public Integer CBRVDPPrecision(){
				    return null;
				}
				public String CBRVDPDefault(){
				
					return "";
				
				}
				public String CBRVDPComment(){
				
				    return "";
				
				}
				public String CBRVDPPattern(){
				
					return "";
				
				}
				public String CBRVDPOriginalDbColumnName(){
				
					return "CBRVDP";
				
				}

				
			    public BigDecimal CBRVDY;

				public BigDecimal getCBRVDY () {
					return this.CBRVDY;
				}

				public Boolean CBRVDYIsNullable(){
				    return true;
				}
				public Boolean CBRVDYIsKey(){
				    return false;
				}
				public Integer CBRVDYLength(){
				    return null;
				}
				public Integer CBRVDYPrecision(){
				    return null;
				}
				public String CBRVDYDefault(){
				
					return "";
				
				}
				public String CBRVDYComment(){
				
				    return "";
				
				}
				public String CBRVDYPattern(){
				
					return "";
				
				}
				public String CBRVDYOriginalDbColumnName(){
				
					return "CBRVDY";
				
				}

				
			    public BigDecimal CBAJUP;

				public BigDecimal getCBAJUP () {
					return this.CBAJUP;
				}

				public Boolean CBAJUPIsNullable(){
				    return true;
				}
				public Boolean CBAJUPIsKey(){
				    return false;
				}
				public Integer CBAJUPLength(){
				    return null;
				}
				public Integer CBAJUPPrecision(){
				    return null;
				}
				public String CBAJUPDefault(){
				
					return "";
				
				}
				public String CBAJUPComment(){
				
				    return "";
				
				}
				public String CBAJUPPattern(){
				
					return "";
				
				}
				public String CBAJUPOriginalDbColumnName(){
				
					return "CBAJUP";
				
				}

				
			    public BigDecimal CBAJUY;

				public BigDecimal getCBAJUY () {
					return this.CBAJUY;
				}

				public Boolean CBAJUYIsNullable(){
				    return true;
				}
				public Boolean CBAJUYIsKey(){
				    return false;
				}
				public Integer CBAJUYLength(){
				    return null;
				}
				public Integer CBAJUYPrecision(){
				    return null;
				}
				public String CBAJUYDefault(){
				
					return "";
				
				}
				public String CBAJUYComment(){
				
				    return "";
				
				}
				public String CBAJUYPattern(){
				
					return "";
				
				}
				public String CBAJUYOriginalDbColumnName(){
				
					return "CBAJUY";
				
				}

				
			    public BigDecimal CBAJDP;

				public BigDecimal getCBAJDP () {
					return this.CBAJDP;
				}

				public Boolean CBAJDPIsNullable(){
				    return true;
				}
				public Boolean CBAJDPIsKey(){
				    return false;
				}
				public Integer CBAJDPLength(){
				    return null;
				}
				public Integer CBAJDPPrecision(){
				    return null;
				}
				public String CBAJDPDefault(){
				
					return "";
				
				}
				public String CBAJDPComment(){
				
				    return "";
				
				}
				public String CBAJDPPattern(){
				
					return "";
				
				}
				public String CBAJDPOriginalDbColumnName(){
				
					return "CBAJDP";
				
				}

				
			    public BigDecimal CBAJDY;

				public BigDecimal getCBAJDY () {
					return this.CBAJDY;
				}

				public Boolean CBAJDYIsNullable(){
				    return true;
				}
				public Boolean CBAJDYIsKey(){
				    return false;
				}
				public Integer CBAJDYLength(){
				    return null;
				}
				public Integer CBAJDYPrecision(){
				    return null;
				}
				public String CBAJDYDefault(){
				
					return "";
				
				}
				public String CBAJDYComment(){
				
				    return "";
				
				}
				public String CBAJDYPattern(){
				
					return "";
				
				}
				public String CBAJDYOriginalDbColumnName(){
				
					return "CBAJDY";
				
				}

				
			    public BigDecimal CBPHUP;

				public BigDecimal getCBPHUP () {
					return this.CBPHUP;
				}

				public Boolean CBPHUPIsNullable(){
				    return true;
				}
				public Boolean CBPHUPIsKey(){
				    return false;
				}
				public Integer CBPHUPLength(){
				    return null;
				}
				public Integer CBPHUPPrecision(){
				    return null;
				}
				public String CBPHUPDefault(){
				
					return "";
				
				}
				public String CBPHUPComment(){
				
				    return "";
				
				}
				public String CBPHUPPattern(){
				
					return "";
				
				}
				public String CBPHUPOriginalDbColumnName(){
				
					return "CBPHUP";
				
				}

				
			    public BigDecimal CBPHUY;

				public BigDecimal getCBPHUY () {
					return this.CBPHUY;
				}

				public Boolean CBPHUYIsNullable(){
				    return true;
				}
				public Boolean CBPHUYIsKey(){
				    return false;
				}
				public Integer CBPHUYLength(){
				    return null;
				}
				public Integer CBPHUYPrecision(){
				    return null;
				}
				public String CBPHUYDefault(){
				
					return "";
				
				}
				public String CBPHUYComment(){
				
				    return "";
				
				}
				public String CBPHUYPattern(){
				
					return "";
				
				}
				public String CBPHUYOriginalDbColumnName(){
				
					return "CBPHUY";
				
				}

				
			    public BigDecimal CBPHDP;

				public BigDecimal getCBPHDP () {
					return this.CBPHDP;
				}

				public Boolean CBPHDPIsNullable(){
				    return true;
				}
				public Boolean CBPHDPIsKey(){
				    return false;
				}
				public Integer CBPHDPLength(){
				    return null;
				}
				public Integer CBPHDPPrecision(){
				    return null;
				}
				public String CBPHDPDefault(){
				
					return "";
				
				}
				public String CBPHDPComment(){
				
				    return "";
				
				}
				public String CBPHDPPattern(){
				
					return "";
				
				}
				public String CBPHDPOriginalDbColumnName(){
				
					return "CBPHDP";
				
				}

				
			    public BigDecimal CBPHDY;

				public BigDecimal getCBPHDY () {
					return this.CBPHDY;
				}

				public Boolean CBPHDYIsNullable(){
				    return true;
				}
				public Boolean CBPHDYIsKey(){
				    return false;
				}
				public Integer CBPHDYLength(){
				    return null;
				}
				public Integer CBPHDYPrecision(){
				    return null;
				}
				public String CBPHDYDefault(){
				
					return "";
				
				}
				public String CBPHDYComment(){
				
				    return "";
				
				}
				public String CBPHDYPattern(){
				
					return "";
				
				}
				public String CBPHDYOriginalDbColumnName(){
				
					return "CBPHDY";
				
				}

				
			    public BigDecimal CBAVGC;

				public BigDecimal getCBAVGC () {
					return this.CBAVGC;
				}

				public Boolean CBAVGCIsNullable(){
				    return true;
				}
				public Boolean CBAVGCIsKey(){
				    return false;
				}
				public Integer CBAVGCLength(){
				    return null;
				}
				public Integer CBAVGCPrecision(){
				    return null;
				}
				public String CBAVGCDefault(){
				
					return "";
				
				}
				public String CBAVGCComment(){
				
				    return "";
				
				}
				public String CBAVGCPattern(){
				
					return "";
				
				}
				public String CBAVGCOriginalDbColumnName(){
				
					return "CBAVGC";
				
				}

				
			    public BigDecimal CBAVOH;

				public BigDecimal getCBAVOH () {
					return this.CBAVOH;
				}

				public Boolean CBAVOHIsNullable(){
				    return true;
				}
				public Boolean CBAVOHIsKey(){
				    return false;
				}
				public Integer CBAVOHLength(){
				    return null;
				}
				public Integer CBAVOHPrecision(){
				    return null;
				}
				public String CBAVOHDefault(){
				
					return "";
				
				}
				public String CBAVOHComment(){
				
				    return "";
				
				}
				public String CBAVOHPattern(){
				
					return "";
				
				}
				public String CBAVOHOriginalDbColumnName(){
				
					return "CBAVOH";
				
				}

				
			    public BigDecimal CBAVRT;

				public BigDecimal getCBAVRT () {
					return this.CBAVRT;
				}

				public Boolean CBAVRTIsNullable(){
				    return true;
				}
				public Boolean CBAVRTIsKey(){
				    return false;
				}
				public Integer CBAVRTLength(){
				    return null;
				}
				public Integer CBAVRTPrecision(){
				    return null;
				}
				public String CBAVRTDefault(){
				
					return "";
				
				}
				public String CBAVRTComment(){
				
				    return "";
				
				}
				public String CBAVRTPattern(){
				
					return "";
				
				}
				public String CBAVRTOriginalDbColumnName(){
				
					return "CBAVRT";
				
				}

				
			    public BigDecimal CBAVCS;

				public BigDecimal getCBAVCS () {
					return this.CBAVCS;
				}

				public Boolean CBAVCSIsNullable(){
				    return true;
				}
				public Boolean CBAVCSIsKey(){
				    return false;
				}
				public Integer CBAVCSLength(){
				    return null;
				}
				public Integer CBAVCSPrecision(){
				    return null;
				}
				public String CBAVCSDefault(){
				
					return "";
				
				}
				public String CBAVCSComment(){
				
				    return "";
				
				}
				public String CBAVCSPattern(){
				
					return "";
				
				}
				public String CBAVCSOriginalDbColumnName(){
				
					return "CBAVCS";
				
				}

				
			    public BigDecimal CBDEPT;

				public BigDecimal getCBDEPT () {
					return this.CBDEPT;
				}

				public Boolean CBDEPTIsNullable(){
				    return true;
				}
				public Boolean CBDEPTIsKey(){
				    return false;
				}
				public Integer CBDEPTLength(){
				    return null;
				}
				public Integer CBDEPTPrecision(){
				    return null;
				}
				public String CBDEPTDefault(){
				
					return "";
				
				}
				public String CBDEPTComment(){
				
				    return "";
				
				}
				public String CBDEPTPattern(){
				
					return "";
				
				}
				public String CBDEPTOriginalDbColumnName(){
				
					return "CBDEPT";
				
				}

				
			    public BigDecimal CBSDPT;

				public BigDecimal getCBSDPT () {
					return this.CBSDPT;
				}

				public Boolean CBSDPTIsNullable(){
				    return true;
				}
				public Boolean CBSDPTIsKey(){
				    return false;
				}
				public Integer CBSDPTLength(){
				    return null;
				}
				public Integer CBSDPTPrecision(){
				    return null;
				}
				public String CBSDPTDefault(){
				
					return "";
				
				}
				public String CBSDPTComment(){
				
				    return "";
				
				}
				public String CBSDPTPattern(){
				
					return "";
				
				}
				public String CBSDPTOriginalDbColumnName(){
				
					return "CBSDPT";
				
				}

				
			    public BigDecimal CBCLAS;

				public BigDecimal getCBCLAS () {
					return this.CBCLAS;
				}

				public Boolean CBCLASIsNullable(){
				    return true;
				}
				public Boolean CBCLASIsKey(){
				    return false;
				}
				public Integer CBCLASLength(){
				    return null;
				}
				public Integer CBCLASPrecision(){
				    return null;
				}
				public String CBCLASDefault(){
				
					return "";
				
				}
				public String CBCLASComment(){
				
				    return "";
				
				}
				public String CBCLASPattern(){
				
					return "";
				
				}
				public String CBCLASOriginalDbColumnName(){
				
					return "CBCLAS";
				
				}

				
			    public BigDecimal CBSCLS;

				public BigDecimal getCBSCLS () {
					return this.CBSCLS;
				}

				public Boolean CBSCLSIsNullable(){
				    return true;
				}
				public Boolean CBSCLSIsKey(){
				    return false;
				}
				public Integer CBSCLSLength(){
				    return null;
				}
				public Integer CBSCLSPrecision(){
				    return null;
				}
				public String CBSCLSDefault(){
				
					return "";
				
				}
				public String CBSCLSComment(){
				
				    return "";
				
				}
				public String CBSCLSPattern(){
				
					return "";
				
				}
				public String CBSCLSOriginalDbColumnName(){
				
					return "CBSCLS";
				
				}

				
			    public BigDecimal CBVNDR;

				public BigDecimal getCBVNDR () {
					return this.CBVNDR;
				}

				public Boolean CBVNDRIsNullable(){
				    return true;
				}
				public Boolean CBVNDRIsKey(){
				    return false;
				}
				public Integer CBVNDRLength(){
				    return null;
				}
				public Integer CBVNDRPrecision(){
				    return null;
				}
				public String CBVNDRDefault(){
				
					return "";
				
				}
				public String CBVNDRComment(){
				
				    return "";
				
				}
				public String CBVNDRPattern(){
				
					return "";
				
				}
				public String CBVNDROriginalDbColumnName(){
				
					return "CBVNDR";
				
				}

				
			    public String CBSTYL;

				public String getCBSTYL () {
					return this.CBSTYL;
				}

				public Boolean CBSTYLIsNullable(){
				    return true;
				}
				public Boolean CBSTYLIsKey(){
				    return false;
				}
				public Integer CBSTYLLength(){
				    return null;
				}
				public Integer CBSTYLPrecision(){
				    return null;
				}
				public String CBSTYLDefault(){
				
					return "";
				
				}
				public String CBSTYLComment(){
				
				    return "";
				
				}
				public String CBSTYLPattern(){
				
					return "";
				
				}
				public String CBSTYLOriginalDbColumnName(){
				
					return "CBSTYL";
				
				}

				
			    public BigDecimal CBPOOQ;

				public BigDecimal getCBPOOQ () {
					return this.CBPOOQ;
				}

				public Boolean CBPOOQIsNullable(){
				    return true;
				}
				public Boolean CBPOOQIsKey(){
				    return false;
				}
				public Integer CBPOOQLength(){
				    return null;
				}
				public Integer CBPOOQPrecision(){
				    return null;
				}
				public String CBPOOQDefault(){
				
					return "";
				
				}
				public String CBPOOQComment(){
				
				    return "";
				
				}
				public String CBPOOQPattern(){
				
					return "";
				
				}
				public String CBPOOQOriginalDbColumnName(){
				
					return "CBPOOQ";
				
				}

				
			    public BigDecimal CBTOOQ;

				public BigDecimal getCBTOOQ () {
					return this.CBTOOQ;
				}

				public Boolean CBTOOQIsNullable(){
				    return true;
				}
				public Boolean CBTOOQIsKey(){
				    return false;
				}
				public Integer CBTOOQLength(){
				    return null;
				}
				public Integer CBTOOQPrecision(){
				    return null;
				}
				public String CBTOOQDefault(){
				
					return "";
				
				}
				public String CBTOOQComment(){
				
				    return "";
				
				}
				public String CBTOOQPattern(){
				
					return "";
				
				}
				public String CBTOOQOriginalDbColumnName(){
				
					return "CBTOOQ";
				
				}

				
			    public BigDecimal CBINTQ;

				public BigDecimal getCBINTQ () {
					return this.CBINTQ;
				}

				public Boolean CBINTQIsNullable(){
				    return true;
				}
				public Boolean CBINTQIsKey(){
				    return false;
				}
				public Integer CBINTQLength(){
				    return null;
				}
				public Integer CBINTQPrecision(){
				    return null;
				}
				public String CBINTQDefault(){
				
					return "";
				
				}
				public String CBINTQComment(){
				
				    return "";
				
				}
				public String CBINTQPattern(){
				
					return "";
				
				}
				public String CBINTQOriginalDbColumnName(){
				
					return "CBINTQ";
				
				}

				
			    public BigDecimal CBMASU;

				public BigDecimal getCBMASU () {
					return this.CBMASU;
				}

				public Boolean CBMASUIsNullable(){
				    return true;
				}
				public Boolean CBMASUIsKey(){
				    return false;
				}
				public Integer CBMASULength(){
				    return null;
				}
				public Integer CBMASUPrecision(){
				    return null;
				}
				public String CBMASUDefault(){
				
					return "";
				
				}
				public String CBMASUComment(){
				
				    return "";
				
				}
				public String CBMASUPattern(){
				
					return "";
				
				}
				public String CBMASUOriginalDbColumnName(){
				
					return "CBMASU";
				
				}

				
			    public BigDecimal CBMASD;

				public BigDecimal getCBMASD () {
					return this.CBMASD;
				}

				public Boolean CBMASDIsNullable(){
				    return true;
				}
				public Boolean CBMASDIsKey(){
				    return false;
				}
				public Integer CBMASDLength(){
				    return null;
				}
				public Integer CBMASDPrecision(){
				    return null;
				}
				public String CBMASDDefault(){
				
					return "";
				
				}
				public String CBMASDComment(){
				
				    return "";
				
				}
				public String CBMASDPattern(){
				
					return "";
				
				}
				public String CBMASDOriginalDbColumnName(){
				
					return "CBMASD";
				
				}

				
			    public BigDecimal CBMASV;

				public BigDecimal getCBMASV () {
					return this.CBMASV;
				}

				public Boolean CBMASVIsNullable(){
				    return true;
				}
				public Boolean CBMASVIsKey(){
				    return false;
				}
				public Integer CBMASVLength(){
				    return null;
				}
				public Integer CBMASVPrecision(){
				    return null;
				}
				public String CBMASVDefault(){
				
					return "";
				
				}
				public String CBMASVComment(){
				
				    return "";
				
				}
				public String CBMASVPattern(){
				
					return "";
				
				}
				public String CBMASVOriginalDbColumnName(){
				
					return "CBMASV";
				
				}

				
			    public BigDecimal CBMASC;

				public BigDecimal getCBMASC () {
					return this.CBMASC;
				}

				public Boolean CBMASCIsNullable(){
				    return true;
				}
				public Boolean CBMASCIsKey(){
				    return false;
				}
				public Integer CBMASCLength(){
				    return null;
				}
				public Integer CBMASCPrecision(){
				    return null;
				}
				public String CBMASCDefault(){
				
					return "";
				
				}
				public String CBMASCComment(){
				
				    return "";
				
				}
				public String CBMASCPattern(){
				
					return "";
				
				}
				public String CBMASCOriginalDbColumnName(){
				
					return "CBMASC";
				
				}

				
			    public BigDecimal CBLAVC;

				public BigDecimal getCBLAVC () {
					return this.CBLAVC;
				}

				public Boolean CBLAVCIsNullable(){
				    return true;
				}
				public Boolean CBLAVCIsKey(){
				    return false;
				}
				public Integer CBLAVCLength(){
				    return null;
				}
				public Integer CBLAVCPrecision(){
				    return null;
				}
				public String CBLAVCDefault(){
				
					return "";
				
				}
				public String CBLAVCComment(){
				
				    return "";
				
				}
				public String CBLAVCPattern(){
				
					return "";
				
				}
				public String CBLAVCOriginalDbColumnName(){
				
					return "CBLAVC";
				
				}

				
			    public BigDecimal CBARQT;

				public BigDecimal getCBARQT () {
					return this.CBARQT;
				}

				public Boolean CBARQTIsNullable(){
				    return true;
				}
				public Boolean CBARQTIsKey(){
				    return false;
				}
				public Integer CBARQTLength(){
				    return null;
				}
				public Integer CBARQTPrecision(){
				    return null;
				}
				public String CBARQTDefault(){
				
					return "";
				
				}
				public String CBARQTComment(){
				
				    return "";
				
				}
				public String CBARQTPattern(){
				
					return "";
				
				}
				public String CBARQTOriginalDbColumnName(){
				
					return "CBARQT";
				
				}

				
			    public BigDecimal CBNSQT;

				public BigDecimal getCBNSQT () {
					return this.CBNSQT;
				}

				public Boolean CBNSQTIsNullable(){
				    return true;
				}
				public Boolean CBNSQTIsKey(){
				    return false;
				}
				public Integer CBNSQTLength(){
				    return null;
				}
				public Integer CBNSQTPrecision(){
				    return null;
				}
				public String CBNSQTDefault(){
				
					return "";
				
				}
				public String CBNSQTComment(){
				
				    return "";
				
				}
				public String CBNSQTPattern(){
				
					return "";
				
				}
				public String CBNSQTOriginalDbColumnName(){
				
					return "CBNSQT";
				
				}

				
			    public BigDecimal CBHLDQ;

				public BigDecimal getCBHLDQ () {
					return this.CBHLDQ;
				}

				public Boolean CBHLDQIsNullable(){
				    return true;
				}
				public Boolean CBHLDQIsKey(){
				    return false;
				}
				public Integer CBHLDQLength(){
				    return null;
				}
				public Integer CBHLDQPrecision(){
				    return null;
				}
				public String CBHLDQDefault(){
				
					return "";
				
				}
				public String CBHLDQComment(){
				
				    return "";
				
				}
				public String CBHLDQPattern(){
				
					return "";
				
				}
				public String CBHLDQOriginalDbColumnName(){
				
					return "CBHLDQ";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.CBHBOY = (BigDecimal) dis.readObject();
					
						this.CBHBOP = (BigDecimal) dis.readObject();
					
						this.CBHAND = (BigDecimal) dis.readObject();
					
						this.CBTRNS = (BigDecimal) dis.readObject();
					
						this.CBGMRI = (BigDecimal) dis.readObject();
					
						this.CBWKCR = (BigDecimal) dis.readObject();
					
						this.CBWK01 = (BigDecimal) dis.readObject();
					
						this.CBWK02 = (BigDecimal) dis.readObject();
					
						this.CBWK03 = (BigDecimal) dis.readObject();
					
						this.CBWK04 = (BigDecimal) dis.readObject();
					
						this.CBWK05 = (BigDecimal) dis.readObject();
					
						this.CBWK06 = (BigDecimal) dis.readObject();
					
						this.CBWK07 = (BigDecimal) dis.readObject();
					
						this.CBWK08 = (BigDecimal) dis.readObject();
					
						this.CBRSUP = (BigDecimal) dis.readObject();
					
						this.CBRSUY = (BigDecimal) dis.readObject();
					
						this.CBRSDP = (BigDecimal) dis.readObject();
					
						this.CBRSDY = (BigDecimal) dis.readObject();
					
						this.CBVRSP = (BigDecimal) dis.readObject();
					
						this.CBVRSY = (BigDecimal) dis.readObject();
					
						this.CBRCSP = (BigDecimal) dis.readObject();
					
						this.CBRCSY = (BigDecimal) dis.readObject();
					
						this.CBASUP = (BigDecimal) dis.readObject();
					
						this.CBASUY = (BigDecimal) dis.readObject();
					
						this.CBASDP = (BigDecimal) dis.readObject();
					
						this.CBASDY = (BigDecimal) dis.readObject();
					
						this.CBVASP = (BigDecimal) dis.readObject();
					
						this.CBVASY = (BigDecimal) dis.readObject();
					
						this.CBACSP = (BigDecimal) dis.readObject();
					
						this.CBACSY = (BigDecimal) dis.readObject();
					
						this.CBRETS = (BigDecimal) dis.readObject();
					
						this.CBRCUP = (BigDecimal) dis.readObject();
					
						this.CBRCUY = (BigDecimal) dis.readObject();
					
						this.CBRCDP = (BigDecimal) dis.readObject();
					
						this.CBRCDY = (BigDecimal) dis.readObject();
					
						this.CBTIUP = (BigDecimal) dis.readObject();
					
						this.CBTIUY = (BigDecimal) dis.readObject();
					
						this.CBTOUP = (BigDecimal) dis.readObject();
					
						this.CBTOUY = (BigDecimal) dis.readObject();
					
						this.CBTFDP = (BigDecimal) dis.readObject();
					
						this.CBTFDY = (BigDecimal) dis.readObject();
					
						this.CBRVUP = (BigDecimal) dis.readObject();
					
						this.CBRVUY = (BigDecimal) dis.readObject();
					
						this.CBRVDP = (BigDecimal) dis.readObject();
					
						this.CBRVDY = (BigDecimal) dis.readObject();
					
						this.CBAJUP = (BigDecimal) dis.readObject();
					
						this.CBAJUY = (BigDecimal) dis.readObject();
					
						this.CBAJDP = (BigDecimal) dis.readObject();
					
						this.CBAJDY = (BigDecimal) dis.readObject();
					
						this.CBPHUP = (BigDecimal) dis.readObject();
					
						this.CBPHUY = (BigDecimal) dis.readObject();
					
						this.CBPHDP = (BigDecimal) dis.readObject();
					
						this.CBPHDY = (BigDecimal) dis.readObject();
					
						this.CBAVGC = (BigDecimal) dis.readObject();
					
						this.CBAVOH = (BigDecimal) dis.readObject();
					
						this.CBAVRT = (BigDecimal) dis.readObject();
					
						this.CBAVCS = (BigDecimal) dis.readObject();
					
						this.CBDEPT = (BigDecimal) dis.readObject();
					
						this.CBSDPT = (BigDecimal) dis.readObject();
					
						this.CBCLAS = (BigDecimal) dis.readObject();
					
						this.CBSCLS = (BigDecimal) dis.readObject();
					
						this.CBVNDR = (BigDecimal) dis.readObject();
					
					this.CBSTYL = readString(dis);
					
						this.CBPOOQ = (BigDecimal) dis.readObject();
					
						this.CBTOOQ = (BigDecimal) dis.readObject();
					
						this.CBINTQ = (BigDecimal) dis.readObject();
					
						this.CBMASU = (BigDecimal) dis.readObject();
					
						this.CBMASD = (BigDecimal) dis.readObject();
					
						this.CBMASV = (BigDecimal) dis.readObject();
					
						this.CBMASC = (BigDecimal) dis.readObject();
					
						this.CBLAVC = (BigDecimal) dis.readObject();
					
						this.CBARQT = (BigDecimal) dis.readObject();
					
						this.CBNSQT = (BigDecimal) dis.readObject();
					
						this.CBHLDQ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.CBHBOY = (BigDecimal) dis.readObject();
					
						this.CBHBOP = (BigDecimal) dis.readObject();
					
						this.CBHAND = (BigDecimal) dis.readObject();
					
						this.CBTRNS = (BigDecimal) dis.readObject();
					
						this.CBGMRI = (BigDecimal) dis.readObject();
					
						this.CBWKCR = (BigDecimal) dis.readObject();
					
						this.CBWK01 = (BigDecimal) dis.readObject();
					
						this.CBWK02 = (BigDecimal) dis.readObject();
					
						this.CBWK03 = (BigDecimal) dis.readObject();
					
						this.CBWK04 = (BigDecimal) dis.readObject();
					
						this.CBWK05 = (BigDecimal) dis.readObject();
					
						this.CBWK06 = (BigDecimal) dis.readObject();
					
						this.CBWK07 = (BigDecimal) dis.readObject();
					
						this.CBWK08 = (BigDecimal) dis.readObject();
					
						this.CBRSUP = (BigDecimal) dis.readObject();
					
						this.CBRSUY = (BigDecimal) dis.readObject();
					
						this.CBRSDP = (BigDecimal) dis.readObject();
					
						this.CBRSDY = (BigDecimal) dis.readObject();
					
						this.CBVRSP = (BigDecimal) dis.readObject();
					
						this.CBVRSY = (BigDecimal) dis.readObject();
					
						this.CBRCSP = (BigDecimal) dis.readObject();
					
						this.CBRCSY = (BigDecimal) dis.readObject();
					
						this.CBASUP = (BigDecimal) dis.readObject();
					
						this.CBASUY = (BigDecimal) dis.readObject();
					
						this.CBASDP = (BigDecimal) dis.readObject();
					
						this.CBASDY = (BigDecimal) dis.readObject();
					
						this.CBVASP = (BigDecimal) dis.readObject();
					
						this.CBVASY = (BigDecimal) dis.readObject();
					
						this.CBACSP = (BigDecimal) dis.readObject();
					
						this.CBACSY = (BigDecimal) dis.readObject();
					
						this.CBRETS = (BigDecimal) dis.readObject();
					
						this.CBRCUP = (BigDecimal) dis.readObject();
					
						this.CBRCUY = (BigDecimal) dis.readObject();
					
						this.CBRCDP = (BigDecimal) dis.readObject();
					
						this.CBRCDY = (BigDecimal) dis.readObject();
					
						this.CBTIUP = (BigDecimal) dis.readObject();
					
						this.CBTIUY = (BigDecimal) dis.readObject();
					
						this.CBTOUP = (BigDecimal) dis.readObject();
					
						this.CBTOUY = (BigDecimal) dis.readObject();
					
						this.CBTFDP = (BigDecimal) dis.readObject();
					
						this.CBTFDY = (BigDecimal) dis.readObject();
					
						this.CBRVUP = (BigDecimal) dis.readObject();
					
						this.CBRVUY = (BigDecimal) dis.readObject();
					
						this.CBRVDP = (BigDecimal) dis.readObject();
					
						this.CBRVDY = (BigDecimal) dis.readObject();
					
						this.CBAJUP = (BigDecimal) dis.readObject();
					
						this.CBAJUY = (BigDecimal) dis.readObject();
					
						this.CBAJDP = (BigDecimal) dis.readObject();
					
						this.CBAJDY = (BigDecimal) dis.readObject();
					
						this.CBPHUP = (BigDecimal) dis.readObject();
					
						this.CBPHUY = (BigDecimal) dis.readObject();
					
						this.CBPHDP = (BigDecimal) dis.readObject();
					
						this.CBPHDY = (BigDecimal) dis.readObject();
					
						this.CBAVGC = (BigDecimal) dis.readObject();
					
						this.CBAVOH = (BigDecimal) dis.readObject();
					
						this.CBAVRT = (BigDecimal) dis.readObject();
					
						this.CBAVCS = (BigDecimal) dis.readObject();
					
						this.CBDEPT = (BigDecimal) dis.readObject();
					
						this.CBSDPT = (BigDecimal) dis.readObject();
					
						this.CBCLAS = (BigDecimal) dis.readObject();
					
						this.CBSCLS = (BigDecimal) dis.readObject();
					
						this.CBVNDR = (BigDecimal) dis.readObject();
					
					this.CBSTYL = readString(dis);
					
						this.CBPOOQ = (BigDecimal) dis.readObject();
					
						this.CBTOOQ = (BigDecimal) dis.readObject();
					
						this.CBINTQ = (BigDecimal) dis.readObject();
					
						this.CBMASU = (BigDecimal) dis.readObject();
					
						this.CBMASD = (BigDecimal) dis.readObject();
					
						this.CBMASV = (BigDecimal) dis.readObject();
					
						this.CBMASC = (BigDecimal) dis.readObject();
					
						this.CBLAVC = (BigDecimal) dis.readObject();
					
						this.CBARQT = (BigDecimal) dis.readObject();
					
						this.CBNSQT = (BigDecimal) dis.readObject();
					
						this.CBHLDQ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBGMRI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWKCR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVGC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVCS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBDEPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSDPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBCLAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVNDR);
					
					// String
				
						writeString(this.CBSTYL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBINTQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBLAVC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBARQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBNSQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHLDQ);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHBOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBGMRI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWKCR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBWK08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRSDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVRSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBASDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVASY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBACSY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRCDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTIUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTFDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBRVDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAJDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHUY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPHDY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVGC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBAVCS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBDEPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSDPT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBCLAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBSCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBVNDR);
					
					// String
				
						writeString(this.CBSTYL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBPOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBTOOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBINTQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBMASC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBLAVC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBARQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBNSQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CBHLDQ);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INUMBR="+String.valueOf(INUMBR));
		sb.append(",CBHBOY="+String.valueOf(CBHBOY));
		sb.append(",CBHBOP="+String.valueOf(CBHBOP));
		sb.append(",CBHAND="+String.valueOf(CBHAND));
		sb.append(",CBTRNS="+String.valueOf(CBTRNS));
		sb.append(",CBGMRI="+String.valueOf(CBGMRI));
		sb.append(",CBWKCR="+String.valueOf(CBWKCR));
		sb.append(",CBWK01="+String.valueOf(CBWK01));
		sb.append(",CBWK02="+String.valueOf(CBWK02));
		sb.append(",CBWK03="+String.valueOf(CBWK03));
		sb.append(",CBWK04="+String.valueOf(CBWK04));
		sb.append(",CBWK05="+String.valueOf(CBWK05));
		sb.append(",CBWK06="+String.valueOf(CBWK06));
		sb.append(",CBWK07="+String.valueOf(CBWK07));
		sb.append(",CBWK08="+String.valueOf(CBWK08));
		sb.append(",CBRSUP="+String.valueOf(CBRSUP));
		sb.append(",CBRSUY="+String.valueOf(CBRSUY));
		sb.append(",CBRSDP="+String.valueOf(CBRSDP));
		sb.append(",CBRSDY="+String.valueOf(CBRSDY));
		sb.append(",CBVRSP="+String.valueOf(CBVRSP));
		sb.append(",CBVRSY="+String.valueOf(CBVRSY));
		sb.append(",CBRCSP="+String.valueOf(CBRCSP));
		sb.append(",CBRCSY="+String.valueOf(CBRCSY));
		sb.append(",CBASUP="+String.valueOf(CBASUP));
		sb.append(",CBASUY="+String.valueOf(CBASUY));
		sb.append(",CBASDP="+String.valueOf(CBASDP));
		sb.append(",CBASDY="+String.valueOf(CBASDY));
		sb.append(",CBVASP="+String.valueOf(CBVASP));
		sb.append(",CBVASY="+String.valueOf(CBVASY));
		sb.append(",CBACSP="+String.valueOf(CBACSP));
		sb.append(",CBACSY="+String.valueOf(CBACSY));
		sb.append(",CBRETS="+String.valueOf(CBRETS));
		sb.append(",CBRCUP="+String.valueOf(CBRCUP));
		sb.append(",CBRCUY="+String.valueOf(CBRCUY));
		sb.append(",CBRCDP="+String.valueOf(CBRCDP));
		sb.append(",CBRCDY="+String.valueOf(CBRCDY));
		sb.append(",CBTIUP="+String.valueOf(CBTIUP));
		sb.append(",CBTIUY="+String.valueOf(CBTIUY));
		sb.append(",CBTOUP="+String.valueOf(CBTOUP));
		sb.append(",CBTOUY="+String.valueOf(CBTOUY));
		sb.append(",CBTFDP="+String.valueOf(CBTFDP));
		sb.append(",CBTFDY="+String.valueOf(CBTFDY));
		sb.append(",CBRVUP="+String.valueOf(CBRVUP));
		sb.append(",CBRVUY="+String.valueOf(CBRVUY));
		sb.append(",CBRVDP="+String.valueOf(CBRVDP));
		sb.append(",CBRVDY="+String.valueOf(CBRVDY));
		sb.append(",CBAJUP="+String.valueOf(CBAJUP));
		sb.append(",CBAJUY="+String.valueOf(CBAJUY));
		sb.append(",CBAJDP="+String.valueOf(CBAJDP));
		sb.append(",CBAJDY="+String.valueOf(CBAJDY));
		sb.append(",CBPHUP="+String.valueOf(CBPHUP));
		sb.append(",CBPHUY="+String.valueOf(CBPHUY));
		sb.append(",CBPHDP="+String.valueOf(CBPHDP));
		sb.append(",CBPHDY="+String.valueOf(CBPHDY));
		sb.append(",CBAVGC="+String.valueOf(CBAVGC));
		sb.append(",CBAVOH="+String.valueOf(CBAVOH));
		sb.append(",CBAVRT="+String.valueOf(CBAVRT));
		sb.append(",CBAVCS="+String.valueOf(CBAVCS));
		sb.append(",CBDEPT="+String.valueOf(CBDEPT));
		sb.append(",CBSDPT="+String.valueOf(CBSDPT));
		sb.append(",CBCLAS="+String.valueOf(CBCLAS));
		sb.append(",CBSCLS="+String.valueOf(CBSCLS));
		sb.append(",CBVNDR="+String.valueOf(CBVNDR));
		sb.append(",CBSTYL="+CBSTYL);
		sb.append(",CBPOOQ="+String.valueOf(CBPOOQ));
		sb.append(",CBTOOQ="+String.valueOf(CBTOOQ));
		sb.append(",CBINTQ="+String.valueOf(CBINTQ));
		sb.append(",CBMASU="+String.valueOf(CBMASU));
		sb.append(",CBMASD="+String.valueOf(CBMASD));
		sb.append(",CBMASV="+String.valueOf(CBMASV));
		sb.append(",CBMASC="+String.valueOf(CBMASC));
		sb.append(",CBLAVC="+String.valueOf(CBLAVC));
		sb.append(",CBARQT="+String.valueOf(CBARQT));
		sb.append(",CBNSQT="+String.valueOf(CBNSQT));
		sb.append(",CBHLDQ="+String.valueOf(CBHLDQ));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(CBHBOY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHBOY);
            			}
            		
        			sb.append("|");
        		
        				if(CBHBOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHBOP);
            			}
            		
        			sb.append("|");
        		
        				if(CBHAND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHAND);
            			}
            		
        			sb.append("|");
        		
        				if(CBTRNS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTRNS);
            			}
            		
        			sb.append("|");
        		
        				if(CBGMRI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBGMRI);
            			}
            		
        			sb.append("|");
        		
        				if(CBWKCR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWKCR);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK01);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK02);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK03);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK04);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK05 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK05);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK06 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK06);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK07 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK07);
            			}
            		
        			sb.append("|");
        		
        				if(CBWK08 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBWK08);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRSDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRSDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBVRSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVRSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBVRSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVRSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBASUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBASUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBASDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBASDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBASDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBVASP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVASP);
            			}
            		
        			sb.append("|");
        		
        				if(CBVASY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVASY);
            			}
            		
        			sb.append("|");
        		
        				if(CBACSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBACSP);
            			}
            		
        			sb.append("|");
        		
        				if(CBACSY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBACSY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRETS);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRCDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRCDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTIUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTIUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTIUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTIUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBTFDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTFDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBTFDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTFDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBRVDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBRVDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBAJDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAJDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHUP);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHUY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHUY);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHDP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHDP);
            			}
            		
        			sb.append("|");
        		
        				if(CBPHDY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPHDY);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVGC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVGC);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVOH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVOH);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVRT);
            			}
            		
        			sb.append("|");
        		
        				if(CBAVCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBAVCS);
            			}
            		
        			sb.append("|");
        		
        				if(CBDEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBDEPT);
            			}
            		
        			sb.append("|");
        		
        				if(CBSDPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSDPT);
            			}
            		
        			sb.append("|");
        		
        				if(CBCLAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBCLAS);
            			}
            		
        			sb.append("|");
        		
        				if(CBSCLS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSCLS);
            			}
            		
        			sb.append("|");
        		
        				if(CBVNDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBVNDR);
            			}
            		
        			sb.append("|");
        		
        				if(CBSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(CBPOOQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBPOOQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBTOOQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBTOOQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBINTQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBINTQ);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASU);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASD);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASV);
            			}
            		
        			sb.append("|");
        		
        				if(CBMASC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBMASC);
            			}
            		
        			sb.append("|");
        		
        				if(CBLAVC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBLAVC);
            			}
            		
        			sb.append("|");
        		
        				if(CBARQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBARQT);
            			}
            		
        			sb.append("|");
        		
        				if(CBNSQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBNSQT);
            			}
            		
        			sb.append("|");
        		
        				if(CBHLDQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CBHLDQ);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_5");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
tmap_INVCBLStruct tmap_INVCBL = new tmap_INVCBLStruct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"tmap_INVCBL");
			
		int tos_count_tDBOutput_5 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_5", "tDBOutput_4", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_5 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_5 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_5 = (String)(restRequest_tDBOutput_5 != null ? restRequest_tDBOutput_5.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_5 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_5 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_5 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_5 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_5.createRuntimeProperties();
 		                    props_tDBOutput_5.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_5.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_5.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_5.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_5.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_5.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_5_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_5_1_fisrt sst_tDBOutput_5_1_fisrt = new SchemaSettingTool_tDBOutput_5_1_fisrt();
 		                    
 		                    props_tDBOutput_5.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_5_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_5.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_5.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_5.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_5.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_5.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_5.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_5.table.setValue("tableName",
 		                    "INVENTORY_BALANCE_DATA_INVCBL");
 		                    
 		                    props_tDBOutput_5.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_5.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_5.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_5.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_5.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_5.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_5_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tmap_INVCBL\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"INUMBR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"INUMBR\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"INUMBR\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"INUMBR\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBHBOY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBHBOY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBHBOY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBHBOY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBHBOP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBHBOP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBHBOP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBHBOP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBHAND\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBHAND\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBHAND\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBHAND\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTRNS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTRNS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTRNS\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTRNS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBGMRI\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBGMRI\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBGMRI\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBGMRI\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWKCR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWKCR\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWKCR\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWKCR\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK01\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK01\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK01\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK01\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK02\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK02\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK02\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK02\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK03\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK03\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK03\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK03\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK04\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK04\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK04\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK04\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK05\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK05\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK05\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK05\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK06\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK06\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK06\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK06\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK07\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK07\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK07\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK07\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBWK08\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBWK08\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBWK08\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBWK08\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRSUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRSUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRSUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRSUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRSUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRSUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRSUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRSUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRSDP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRSDP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRSDP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRSDP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRSDY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRSDY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRSDY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRSDY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBVRSP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBVRSP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBVRSP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBVRSP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBVRSY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBVRSY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBVRSY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBVRSY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRCSP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRCSP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRCSP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRCSP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRCSY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRCSY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRCSY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRCSY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBASUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBASUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBASUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBASUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBASUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBASUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBASUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBASUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBASDP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBASDP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBASDP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBASDP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBASDY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBASDY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBASDY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBASDY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBVASP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBVASP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBVASP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBVASP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBVASY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBVASY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBVASY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBVASY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBACSP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBACSP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBACSP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBACSP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBACSY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBACSY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBACSY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBACSY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRETS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRETS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRETS\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRETS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRCUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRCUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRCUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRCUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRCUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRCUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRCUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRCUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRCDP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRCDP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRCDP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRCDP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRCDY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRCDY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRCDY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRCDY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTIUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTIUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTIUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTIUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTIUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTIUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTIUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTIUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTOUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTOUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTOUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTOUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTOUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTOUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTOUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTOUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTFDP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTFDP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTFDP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTFDP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTFDY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTFDY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTFDY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTFDY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRVUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRVUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRVUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRVUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRVUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRVUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRVUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRVUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRVDP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRVDP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRVDP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRVDP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBRVDY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBRVDY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBRVDY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBRVDY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAJUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAJUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAJUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAJUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAJUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAJUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAJUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAJUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAJDP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAJDP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAJDP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAJDP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAJDY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAJDY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAJDY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAJDY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBPHUP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBPHUP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBPHUP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBPHUP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBPHUY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBPHUY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBPHUY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBPHUY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBPHDP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBPHDP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBPHDP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBPHDP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBPHDY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBPHDY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBPHDY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBPHDY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAVGC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAVGC\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAVGC\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAVGC\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAVOH\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAVOH\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAVOH\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAVOH\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAVRT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAVRT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAVRT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAVRT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBAVCS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBAVCS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBAVCS\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBAVCS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBDEPT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBDEPT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBDEPT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBDEPT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBSDPT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBSDPT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBSDPT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBSDPT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBCLAS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBCLAS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBCLAS\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBCLAS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBSCLS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBSCLS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBSCLS\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBSCLS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBVNDR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBVNDR\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBVNDR\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBVNDR\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBSTYL\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBSTYL\",\"talend.field.dbColumnName\":\"CBSTYL\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBSTYL\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBPOOQ\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBPOOQ\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBPOOQ\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBPOOQ\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBTOOQ\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBTOOQ\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBTOOQ\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBTOOQ\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBINTQ\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBINTQ\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBINTQ\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBINTQ\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBMASU\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBMASU\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBMASU\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBMASU\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBMASD\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBMASD\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBMASD\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBMASD\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBMASV\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBMASV\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBMASV\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBMASV\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBMASC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBMASC\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBMASC\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBMASC\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBLAVC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBLAVC\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBLAVC\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBLAVC\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBARQT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBARQT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBARQT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBARQT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBNSQT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBNSQT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBNSQT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBNSQT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CBHLDQ\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CBHLDQ\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CBHLDQ\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CBHLDQ\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DATELOADED\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LOAD_DATE\",\"talend.field.dbColumnName\":\"DATELOADED\",\"di.prop.di.date.date\":\"true\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"di.column.relationshipType\":\"\",\"di.prop.di.column.logicalType\":\"date\",\"di.table.label\":\"DATELOADED\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tmap_INVCBL\",\"di.table.label\":\"tmap_INVCBL\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_5_2_fisrt sst_tDBOutput_5_2_fisrt = new SchemaSettingTool_tDBOutput_5_2_fisrt();
 		                    
 		                    props_tDBOutput_5.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_5_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_5.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_5 = props_tDBOutput_5.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_5.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_5);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_5.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_5 = props_tDBOutput_5.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_5.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_5);
        }
    }
globalMap.put("tDBOutput_5_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_5);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_5_MAPPINGS_URL", mappings_url_tDBOutput_5);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_5 = null;
topology_tDBOutput_5 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_5 = def_tDBOutput_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_5, topology_tDBOutput_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_5 = def_tDBOutput_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_5 = componentRuntime_tDBOutput_5.initialize(container_tDBOutput_5, props_tDBOutput_5);

if (initVr_tDBOutput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_5.getMessage());
}

if(componentRuntime_tDBOutput_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_5;
	compDriverInitialization_tDBOutput_5.runAtDriver(container_tDBOutput_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_5 = null;
if(componentRuntime_tDBOutput_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_5;
	if (doesNodeBelongToRequest_tDBOutput_5) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_5 = sourceOrSink_tDBOutput_5.validate(container_tDBOutput_5);
        if (vr_tDBOutput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_5.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_5 = null;
    if (sourceOrSink_tDBOutput_5 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_5 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_5;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_5 = sink_tDBOutput_5.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_5) {
            writeOperation_tDBOutput_5.initialize(container_tDBOutput_5);
        }
        writer_tDBOutput_5 = writeOperation_tDBOutput_5.createWriter(container_tDBOutput_5);
        if (doesNodeBelongToRequest_tDBOutput_5) {
            writer_tDBOutput_5.open("tDBOutput_5");
        }

        resourceMap.put("writer_tDBOutput_5", writer_tDBOutput_5);
    } // end of "sourceOrSink_tDBOutput_5 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_5 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_5.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_5 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_5 = props_tDBOutput_5.getSchema(c_tDBOutput_5, false);
    incomingEnforcer_tDBOutput_5 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_5);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_5 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_5 = null;


 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row9");
			
		int tos_count_tMap_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_5 = new StringBuilder();
                    log4jParamters_tMap_5.append("Parameters:");
                            log4jParamters_tMap_5.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + (log4jParamters_tMap_5) );
                    } 
                } 
            new BytesLimit65535_tMap_5().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_5", "tMap_4", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row9_tMap_5 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	java.util.Date var1;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_tmap_INVCBL_tMap_5 = 0;
				
tmap_INVCBLStruct tmap_INVCBL_tmp = new tmap_INVCBLStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";
	
	
		int tos_count_tFileInputDelimited_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_5 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_5.append("Parameters:");
                            log4jParamters_tFileInputDelimited_5.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVCBL.zip\"");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHBOY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHBOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHAND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTRNS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBGMRI")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWKCR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK05")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK06")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK07")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBWK08")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRSDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVRSP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVRSY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCSP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCSY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBASDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVASP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVASY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBACSP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBACSY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRETS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRCDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTIUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTIUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTOUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTOUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTFDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTFDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBRVDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAJDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHUP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHUY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHDP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPHDY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVGC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVOH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVRT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBAVCS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBDEPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBSDPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBCLAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBSCLS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBVNDR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBSTYL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBPOOQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBTOOQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBINTQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASV")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBMASC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBLAVC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBARQT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBNSQT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CBHLDQ")+"}]");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                            log4jParamters_tFileInputDelimited_5.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_5 - "  + (log4jParamters_tFileInputDelimited_5) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_5().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_5", "tFileInputDelimited_4", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = "/data/talend/data_repository/INVCBL.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_5 = null;
						try {
							if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
								zis_tFileInputDelimited_5 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_5));
							}else{
								zis_tFileInputDelimited_5 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_5))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
							
								
									log.error("tFileInputDelimited_5 - " +e.getMessage());
								
								System.err.println(e.getMessage());
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_5 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_5 = zis_tFileInputDelimited_5.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_5 - " +e.getMessage());
									
									System.err.println(e.getMessage());
									break;
								
							}
							if(entry_tFileInputDelimited_5 == null) {
								break;
							}
							if(entry_tFileInputDelimited_5.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_5, "ISO-8859-15",",","\n",false,1,0,
								
									limit_tFileInputDelimited_5
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_5 - " +e.getMessage());
									
									System.err.println(e.getMessage());
								
							}
					
				    
				    	log.info("tFileInputDelimited_5 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						row9 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									row9 = new row9Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.INUMBR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"INUMBR", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.INUMBR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBHBOY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBHBOY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBHBOY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBHBOP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBHBOP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBHBOP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBHAND = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBHAND", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBHAND = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 4;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTRNS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTRNS", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTRNS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 5;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBGMRI = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBGMRI", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBGMRI = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 6;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWKCR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWKCR", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWKCR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 7;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK01 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK01", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK01 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 8;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK02 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK02", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK02 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 9;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK03 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK03", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK03 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 10;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK04 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK04", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK04 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 11;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK05 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK05", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK05 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 12;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK06 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK06", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK06 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 13;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK07 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK07", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK07 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 14;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBWK08 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBWK08", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBWK08 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 15;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRSUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRSUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRSUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 16;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRSUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRSUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRSUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 17;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRSDP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRSDP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRSDP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 18;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRSDY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRSDY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRSDY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 19;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBVRSP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBVRSP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBVRSP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 20;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBVRSY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBVRSY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBVRSY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 21;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRCSP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRCSP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRCSP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 22;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRCSY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRCSY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRCSY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 23;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBASUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBASUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBASUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 24;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBASUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBASUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBASUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 25;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBASDP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBASDP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBASDP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 26;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBASDY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBASDY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBASDY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 27;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBVASP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBVASP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBVASP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 28;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBVASY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBVASY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBVASY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 29;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBACSP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBACSP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBACSP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 30;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBACSY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBACSY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBACSY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 31;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRETS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRETS", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRETS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 32;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRCUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRCUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRCUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 33;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRCUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRCUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRCUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 34;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRCDP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRCDP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRCDP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 35;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRCDY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRCDY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRCDY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 36;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTIUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTIUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTIUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 37;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTIUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTIUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTIUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 38;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTOUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTOUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTOUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 39;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTOUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTOUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTOUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 40;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTFDP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTFDP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTFDP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 41;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTFDY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTFDY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTFDY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 42;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRVUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRVUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRVUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 43;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRVUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRVUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRVUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 44;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRVDP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRVDP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRVDP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 45;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBRVDY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBRVDY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBRVDY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 46;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAJUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAJUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAJUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 47;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAJUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAJUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAJUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 48;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAJDP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAJDP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAJDP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 49;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAJDY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAJDY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAJDY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 50;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBPHUP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBPHUP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBPHUP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 51;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBPHUY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBPHUY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBPHUY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 52;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBPHDP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBPHDP", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBPHDP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 53;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBPHDY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBPHDY", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBPHDY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 54;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAVGC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAVGC", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAVGC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 55;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAVOH = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAVOH", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAVOH = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 56;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAVRT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAVRT", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAVRT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 57;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBAVCS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBAVCS", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBAVCS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 58;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBDEPT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBDEPT", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBDEPT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 59;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBSDPT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBSDPT", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBSDPT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 60;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBCLAS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBCLAS", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBCLAS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 61;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBSCLS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBSCLS", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBSCLS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 62;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBVNDR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBVNDR", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBVNDR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 63;
					
							row9.CBSTYL = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 64;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBPOOQ = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBPOOQ", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBPOOQ = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 65;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBTOOQ = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBTOOQ", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBTOOQ = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 66;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBINTQ = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBINTQ", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBINTQ = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 67;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBMASU = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBMASU", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBMASU = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 68;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBMASD = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBMASD", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBMASD = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 69;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBMASV = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBMASV", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBMASV = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 70;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBMASC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBMASC", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBMASC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 71;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBLAVC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBLAVC", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBLAVC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 72;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBARQT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBARQT", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBARQT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 73;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBNSQT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBNSQT", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBNSQT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 74;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row9.CBHLDQ = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CBHLDQ", "row9", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row9.CBHLDQ = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
												log.error("tFileInputDelimited_5 - " +e.getMessage());
											
			                					System.err.println(e.getMessage());
			                					row9 = null;
			                				
										
			    					}
								
			log.debug("tFileInputDelimited_5 - Retrieving the record " + fid_tFileInputDelimited_5.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";
	
	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";
	
	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row9","tFileInputDelimited_5","tFileInputDelimited_4","tFileInputDelimited","tMap_5","tMap_4","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row9 - " + (row9==null? "": row9.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.var1 = TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")),-1,"DD") ;// ###############################
        // ###############################
        // # Output tables

tmap_INVCBL = null;


// # Output table : 'tmap_INVCBL'
count_tmap_INVCBL_tMap_5++;

tmap_INVCBL_tmp.INUMBR = row9.INUMBR;
tmap_INVCBL_tmp.CBHBOY = row9.CBHBOY;
tmap_INVCBL_tmp.CBHBOP = row9.CBHBOP;
tmap_INVCBL_tmp.CBHAND = row9.CBHAND;
tmap_INVCBL_tmp.CBTRNS = row9.CBTRNS;
tmap_INVCBL_tmp.CBGMRI = row9.CBGMRI;
tmap_INVCBL_tmp.CBWKCR = row9.CBWKCR;
tmap_INVCBL_tmp.CBWK01 = row9.CBWK01;
tmap_INVCBL_tmp.CBWK02 = row9.CBWK02;
tmap_INVCBL_tmp.CBWK03 = row9.CBWK03;
tmap_INVCBL_tmp.CBWK04 = row9.CBWK04;
tmap_INVCBL_tmp.CBWK05 = row9.CBWK05;
tmap_INVCBL_tmp.CBWK06 = row9.CBWK06;
tmap_INVCBL_tmp.CBWK07 = row9.CBWK07;
tmap_INVCBL_tmp.CBWK08 = row9.CBWK08;
tmap_INVCBL_tmp.CBRSUP = row9.CBRSUP;
tmap_INVCBL_tmp.CBRSUY = row9.CBRSUY;
tmap_INVCBL_tmp.CBRSDP = row9.CBRSDP;
tmap_INVCBL_tmp.CBRSDY = row9.CBRSDY;
tmap_INVCBL_tmp.CBVRSP = row9.CBVRSP;
tmap_INVCBL_tmp.CBVRSY = row9.CBVRSY;
tmap_INVCBL_tmp.CBRCSP = row9.CBRCSP;
tmap_INVCBL_tmp.CBRCSY = row9.CBRCSY;
tmap_INVCBL_tmp.CBASUP = row9.CBASUP;
tmap_INVCBL_tmp.CBASUY = row9.CBASUY;
tmap_INVCBL_tmp.CBASDP = row9.CBASDP;
tmap_INVCBL_tmp.CBASDY = row9.CBASDY;
tmap_INVCBL_tmp.CBVASP = row9.CBVASP;
tmap_INVCBL_tmp.CBVASY = row9.CBVASY;
tmap_INVCBL_tmp.CBACSP = row9.CBACSP;
tmap_INVCBL_tmp.CBACSY = row9.CBACSY;
tmap_INVCBL_tmp.CBRETS = row9.CBRETS;
tmap_INVCBL_tmp.CBRCUP = row9.CBRCUP;
tmap_INVCBL_tmp.CBRCUY = row9.CBRCUY;
tmap_INVCBL_tmp.CBRCDP = row9.CBRCDP;
tmap_INVCBL_tmp.CBRCDY = row9.CBRCDY;
tmap_INVCBL_tmp.CBTIUP = row9.CBTIUP;
tmap_INVCBL_tmp.CBTIUY = row9.CBTIUY;
tmap_INVCBL_tmp.CBTOUP = row9.CBTOUP;
tmap_INVCBL_tmp.CBTOUY = row9.CBTOUY;
tmap_INVCBL_tmp.CBTFDP = row9.CBTFDP;
tmap_INVCBL_tmp.CBTFDY = row9.CBTFDY;
tmap_INVCBL_tmp.CBRVUP = row9.CBRVUP;
tmap_INVCBL_tmp.CBRVUY = row9.CBRVUY;
tmap_INVCBL_tmp.CBRVDP = row9.CBRVDP;
tmap_INVCBL_tmp.CBRVDY = row9.CBRVDY;
tmap_INVCBL_tmp.CBAJUP = row9.CBAJUP;
tmap_INVCBL_tmp.CBAJUY = row9.CBAJUY;
tmap_INVCBL_tmp.CBAJDP = row9.CBAJDP;
tmap_INVCBL_tmp.CBAJDY = row9.CBAJDY;
tmap_INVCBL_tmp.CBPHUP = row9.CBPHUP;
tmap_INVCBL_tmp.CBPHUY = row9.CBPHUY;
tmap_INVCBL_tmp.CBPHDP = row9.CBPHDP;
tmap_INVCBL_tmp.CBPHDY = row9.CBPHDY;
tmap_INVCBL_tmp.CBAVGC = row9.CBAVGC;
tmap_INVCBL_tmp.CBAVOH = row9.CBAVOH;
tmap_INVCBL_tmp.CBAVRT = row9.CBAVRT;
tmap_INVCBL_tmp.CBAVCS = row9.CBAVCS;
tmap_INVCBL_tmp.CBDEPT = row9.CBDEPT;
tmap_INVCBL_tmp.CBSDPT = row9.CBSDPT;
tmap_INVCBL_tmp.CBCLAS = row9.CBCLAS;
tmap_INVCBL_tmp.CBSCLS = row9.CBSCLS;
tmap_INVCBL_tmp.CBVNDR = row9.CBVNDR;
tmap_INVCBL_tmp.CBSTYL = row9.CBSTYL;
tmap_INVCBL_tmp.CBPOOQ = row9.CBPOOQ;
tmap_INVCBL_tmp.CBTOOQ = row9.CBTOOQ;
tmap_INVCBL_tmp.CBINTQ = row9.CBINTQ;
tmap_INVCBL_tmp.CBMASU = row9.CBMASU;
tmap_INVCBL_tmp.CBMASD = row9.CBMASD;
tmap_INVCBL_tmp.CBMASV = row9.CBMASV;
tmap_INVCBL_tmp.CBMASC = row9.CBMASC;
tmap_INVCBL_tmp.CBLAVC = row9.CBLAVC;
tmap_INVCBL_tmp.CBARQT = row9.CBARQT;
tmap_INVCBL_tmp.CBNSQT = row9.CBNSQT;
tmap_INVCBL_tmp.CBHLDQ = row9.CBHLDQ;
tmap_INVCBL_tmp.DATELOADED = Var.var1 ;
tmap_INVCBL = tmap_INVCBL_tmp;
log.debug("tMap_5 - Outputting the record " + count_tmap_INVCBL_tMap_5 + " of the output table 'tmap_INVCBL'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "tmap_INVCBL"
if(tmap_INVCBL != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"tmap_INVCBL","tMap_5","tMap_4","tMap","tDBOutput_5","tDBOutput_4","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("tmap_INVCBL - " + (tmap_INVCBL==null? "": tmap_INVCBL.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_5 != null) {
            incomingEnforcer_tDBOutput_5.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("INUMBR") != null){
                    incomingEnforcer_tDBOutput_5.put("INUMBR", tmap_INVCBL.INUMBR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBHBOY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBHBOY", tmap_INVCBL.CBHBOY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBHBOP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBHBOP", tmap_INVCBL.CBHBOP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBHAND") != null){
                    incomingEnforcer_tDBOutput_5.put("CBHAND", tmap_INVCBL.CBHAND);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTRNS") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTRNS", tmap_INVCBL.CBTRNS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBGMRI") != null){
                    incomingEnforcer_tDBOutput_5.put("CBGMRI", tmap_INVCBL.CBGMRI);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWKCR") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWKCR", tmap_INVCBL.CBWKCR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK01") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK01", tmap_INVCBL.CBWK01);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK02") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK02", tmap_INVCBL.CBWK02);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK03") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK03", tmap_INVCBL.CBWK03);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK04") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK04", tmap_INVCBL.CBWK04);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK05") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK05", tmap_INVCBL.CBWK05);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK06") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK06", tmap_INVCBL.CBWK06);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK07") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK07", tmap_INVCBL.CBWK07);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBWK08") != null){
                    incomingEnforcer_tDBOutput_5.put("CBWK08", tmap_INVCBL.CBWK08);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRSUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRSUP", tmap_INVCBL.CBRSUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRSUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRSUY", tmap_INVCBL.CBRSUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRSDP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRSDP", tmap_INVCBL.CBRSDP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRSDY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRSDY", tmap_INVCBL.CBRSDY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBVRSP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBVRSP", tmap_INVCBL.CBVRSP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBVRSY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBVRSY", tmap_INVCBL.CBVRSY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRCSP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRCSP", tmap_INVCBL.CBRCSP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRCSY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRCSY", tmap_INVCBL.CBRCSY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBASUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBASUP", tmap_INVCBL.CBASUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBASUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBASUY", tmap_INVCBL.CBASUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBASDP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBASDP", tmap_INVCBL.CBASDP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBASDY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBASDY", tmap_INVCBL.CBASDY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBVASP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBVASP", tmap_INVCBL.CBVASP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBVASY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBVASY", tmap_INVCBL.CBVASY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBACSP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBACSP", tmap_INVCBL.CBACSP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBACSY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBACSY", tmap_INVCBL.CBACSY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRETS") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRETS", tmap_INVCBL.CBRETS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRCUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRCUP", tmap_INVCBL.CBRCUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRCUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRCUY", tmap_INVCBL.CBRCUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRCDP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRCDP", tmap_INVCBL.CBRCDP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRCDY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRCDY", tmap_INVCBL.CBRCDY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTIUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTIUP", tmap_INVCBL.CBTIUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTIUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTIUY", tmap_INVCBL.CBTIUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTOUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTOUP", tmap_INVCBL.CBTOUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTOUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTOUY", tmap_INVCBL.CBTOUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTFDP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTFDP", tmap_INVCBL.CBTFDP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTFDY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTFDY", tmap_INVCBL.CBTFDY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRVUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRVUP", tmap_INVCBL.CBRVUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRVUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRVUY", tmap_INVCBL.CBRVUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRVDP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRVDP", tmap_INVCBL.CBRVDP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBRVDY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBRVDY", tmap_INVCBL.CBRVDY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAJUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAJUP", tmap_INVCBL.CBAJUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAJUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAJUY", tmap_INVCBL.CBAJUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAJDP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAJDP", tmap_INVCBL.CBAJDP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAJDY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAJDY", tmap_INVCBL.CBAJDY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBPHUP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBPHUP", tmap_INVCBL.CBPHUP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBPHUY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBPHUY", tmap_INVCBL.CBPHUY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBPHDP") != null){
                    incomingEnforcer_tDBOutput_5.put("CBPHDP", tmap_INVCBL.CBPHDP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBPHDY") != null){
                    incomingEnforcer_tDBOutput_5.put("CBPHDY", tmap_INVCBL.CBPHDY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAVGC") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAVGC", tmap_INVCBL.CBAVGC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAVOH") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAVOH", tmap_INVCBL.CBAVOH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAVRT") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAVRT", tmap_INVCBL.CBAVRT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBAVCS") != null){
                    incomingEnforcer_tDBOutput_5.put("CBAVCS", tmap_INVCBL.CBAVCS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBDEPT") != null){
                    incomingEnforcer_tDBOutput_5.put("CBDEPT", tmap_INVCBL.CBDEPT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBSDPT") != null){
                    incomingEnforcer_tDBOutput_5.put("CBSDPT", tmap_INVCBL.CBSDPT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBCLAS") != null){
                    incomingEnforcer_tDBOutput_5.put("CBCLAS", tmap_INVCBL.CBCLAS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBSCLS") != null){
                    incomingEnforcer_tDBOutput_5.put("CBSCLS", tmap_INVCBL.CBSCLS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBVNDR") != null){
                    incomingEnforcer_tDBOutput_5.put("CBVNDR", tmap_INVCBL.CBVNDR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBSTYL") != null){
                    incomingEnforcer_tDBOutput_5.put("CBSTYL", tmap_INVCBL.CBSTYL);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBPOOQ") != null){
                    incomingEnforcer_tDBOutput_5.put("CBPOOQ", tmap_INVCBL.CBPOOQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBTOOQ") != null){
                    incomingEnforcer_tDBOutput_5.put("CBTOOQ", tmap_INVCBL.CBTOOQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBINTQ") != null){
                    incomingEnforcer_tDBOutput_5.put("CBINTQ", tmap_INVCBL.CBINTQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBMASU") != null){
                    incomingEnforcer_tDBOutput_5.put("CBMASU", tmap_INVCBL.CBMASU);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBMASD") != null){
                    incomingEnforcer_tDBOutput_5.put("CBMASD", tmap_INVCBL.CBMASD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBMASV") != null){
                    incomingEnforcer_tDBOutput_5.put("CBMASV", tmap_INVCBL.CBMASV);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBMASC") != null){
                    incomingEnforcer_tDBOutput_5.put("CBMASC", tmap_INVCBL.CBMASC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBLAVC") != null){
                    incomingEnforcer_tDBOutput_5.put("CBLAVC", tmap_INVCBL.CBLAVC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBARQT") != null){
                    incomingEnforcer_tDBOutput_5.put("CBARQT", tmap_INVCBL.CBARQT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBNSQT") != null){
                    incomingEnforcer_tDBOutput_5.put("CBNSQT", tmap_INVCBL.CBNSQT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("CBHLDQ") != null){
                    incomingEnforcer_tDBOutput_5.put("CBHLDQ", tmap_INVCBL.CBHLDQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_5 != null && incomingEnforcer_tDBOutput_5.getRuntimeSchema().getField("DATELOADED") != null){
                    incomingEnforcer_tDBOutput_5.put("DATELOADED", tmap_INVCBL.DATELOADED);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_5 = null;
        if (incomingEnforcer_tDBOutput_5 != null) {
            data_tDBOutput_5 = incomingEnforcer_tDBOutput_5.getCurrentRecord();
        }
        
        if (writer_tDBOutput_5 != null && data_tDBOutput_5 != null) {
        	writer_tDBOutput_5.write(data_tDBOutput_5);
        }
        
        nb_line_tDBOutput_5++;

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	


 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	


 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "tmap_INVCBL"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";
	
	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";
	
	


				
            }
            nb_line_tFileInputDelimited_5+=fid_tFileInputDelimited_5.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/INVCBL.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_5!=null){
            		fid_tFileInputDelimited_5.close();
            	}
            }
            if(fid_tFileInputDelimited_5!=null){
            	globalMap.put("tFileInputDelimited_5_NB_LINE", nb_line_tFileInputDelimited_5);
            }
					
						log.info("tFileInputDelimited_5- Retrieved records count: "+ nb_line_tFileInputDelimited_5 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_5 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_5 - Written records count in the table 'tmap_INVCBL': " + count_tmap_INVCBL_tMap_5 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row9",2,0,
			 			"tFileInputDelimited_5","tFileInputDelimited_4","tFileInputDelimited","tMap_5","tMap_4","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + ("Done.") );

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_5", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_5 = null;
    if (writer_tDBOutput_5 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_5 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_5.close();
        resultMap_tDBOutput_5 = writer_tDBOutput_5.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_5), container_tDBOutput_5);
    }
if(resultMap_tDBOutput_5!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_5 : resultMap_tDBOutput_5.entrySet()) {
		switch(entry_tDBOutput_5.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_5.setComponentData("tDBOutput_5", "ERROR_MESSAGE", entry_tDBOutput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_5.setComponentData("tDBOutput_5", "NB_LINE", entry_tDBOutput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_5.setComponentData("tDBOutput_5", "NB_SUCCESS", entry_tDBOutput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_5.setComponentData("tDBOutput_5", "NB_REJECT", entry_tDBOutput_5.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_5 = new StringBuilder();
            for (int i_tDBOutput_5 = 0; i_tDBOutput_5 < entry_tDBOutput_5.getKey().length(); i_tDBOutput_5++) {
                char ch_tDBOutput_5 = entry_tDBOutput_5.getKey().charAt(i_tDBOutput_5);
                if(Character.isUpperCase(ch_tDBOutput_5) && i_tDBOutput_5> 0) {
                	studio_key_tDBOutput_5.append('_');
                }
                studio_key_tDBOutput_5.append(ch_tDBOutput_5);
            }
			container_tDBOutput_5.setComponentData("tDBOutput_5", studio_key_tDBOutput_5.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_5.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"tmap_INVCBL",2,0,
			 			"tMap_5","tMap_4","tMap","tDBOutput_5","tDBOutput_4","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFileDelete_5Process(globalMap);



/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";
	
	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_5")==null){
    if(resourceMap.get("writer_tDBOutput_5")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_5")).close();
		} catch (java.io.IOException e_tDBOutput_5) {
			String errorMessage_tDBOutput_5 = "failed to release the resource in tDBOutput_5 :" + e_tDBOutput_5.getMessage();
			System.err.println(errorMessage_tDBOutput_5);
		}
	}
}
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_5");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_5", false);
		start_Hash.put("tFileDelete_5", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_5";
	
	
		int tos_count_tFileDelete_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_5 = new StringBuilder();
                    log4jParamters_tFileDelete_5.append("Parameters:");
                            log4jParamters_tFileDelete_5.append("PATH" + " = " + "\"/data/talend/data_repository/INVCBL.zip\"");
                        log4jParamters_tFileDelete_5.append(" | ");
                            log4jParamters_tFileDelete_5.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_5.append(" | ");
                            log4jParamters_tFileDelete_5.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_5 - "  + (log4jParamters_tFileDelete_5) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_5().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_5", "tFileDelete_3", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_5 begin ] stop
 */
	
	/**
	 * [tFileDelete_5 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_5";
	
	

 

				final StringBuffer log4jSb_tFileDelete_5 = new StringBuffer();
			
class DeleteFoldertFileDelete_5{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_5=new java.io.File("/data/talend/data_repository/INVCBL.zip");
	if(path_tFileDelete_5.exists()){
		if(path_tFileDelete_5.isFile()){
	    	if(path_tFileDelete_5.delete()){
	    		globalMap.put("tFileDelete_5_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_5 - File : "+ path_tFileDelete_5.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_5_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_5.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_5.isDirectory()){ 
	    	DeleteFoldertFileDelete_5 dftFileDelete_5 = new DeleteFoldertFileDelete_5();
	    	if(dftFileDelete_5.delete(path_tFileDelete_5)){
	    		globalMap.put("tFileDelete_5_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_5 - Directory : "+ path_tFileDelete_5.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_5_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_5.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_5_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_5_DELETE_PATH","/data/talend/data_repository/INVCBL.zip");
 


	tos_count_tFileDelete_5++;

/**
 * [tFileDelete_5 main ] stop
 */
	
	/**
	 * [tFileDelete_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_5";
	
	

 



/**
 * [tFileDelete_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_5";
	
	

 



/**
 * [tFileDelete_5 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_5 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_5";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_5 - "  + ("Done.") );

ok_Hash.put("tFileDelete_5", true);
end_Hash.put("tFileDelete_5", System.currentTimeMillis());




/**
 * [tFileDelete_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_5 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_5";
	
	

 



/**
 * [tFileDelete_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_5_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";
	
	
		int tos_count_tDBRow_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_2", "tDBRow_2", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_2 = (String)(restRequest_tDBRow_2 != null ? restRequest_tDBRow_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_2 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_2 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_2 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_2 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_2.createRuntimeProperties();
 		                    props_tDBRow_2.setValue("query",
 		                    "DELETE from  VSI_INVENTORY_SET_FILE_VSISET\nWHERE DATELOADED = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_2.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_2.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_2.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_2_1_fisrt sst_tDBRow_2_1_fisrt = new SchemaSettingTool_tDBRow_2_1_fisrt();
 		                    
 		                    props_tDBRow_2.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_2_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_2_2_fisrt sst_tDBRow_2_2_fisrt = new SchemaSettingTool_tDBRow_2_2_fisrt();
 		                    
 		                    props_tDBRow_2.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_2.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_2.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_2.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_2.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_2.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_2.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_2.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_2.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_2.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_2.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_2.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_2.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_2_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_2_3_fisrt sst_tDBRow_2_3_fisrt = new SchemaSettingTool_tDBRow_2_3_fisrt();
 		                    
 		                    props_tDBRow_2.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_2.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_2);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_2.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_2);
        }
    }
globalMap.put("tDBRow_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_2_MAPPINGS_URL", mappings_url_tDBRow_2);

org.talend.components.api.container.RuntimeContainer container_tDBRow_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_2 = null;
topology_tDBRow_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_2 = def_tDBRow_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_2, topology_tDBRow_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_2 = def_tDBRow_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_2 = componentRuntime_tDBRow_2.initialize(container_tDBRow_2, props_tDBRow_2);

if (initVr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_2.getMessage());
}

if(componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_2;
	compDriverInitialization_tDBRow_2.runAtDriver(container_tDBRow_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_2 = null;
if(componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_2;
	if (doesNodeBelongToRequest_tDBRow_2) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_2 = sourceOrSink_tDBRow_2.validate(container_tDBRow_2);
        if (vr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_2.getMessage());
        }
	}
}

 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	


 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	


 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	


 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	
// end of generic


resourceMap.put("finish_tDBRow_2", Boolean.TRUE);

 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_2")==null){
}
 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return false;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return 9;
				}
				public Integer INUMBRPrecision(){
				    return 0;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public BigDecimal ISETNO;

				public BigDecimal getISETNO () {
					return this.ISETNO;
				}

				public Boolean ISETNOIsNullable(){
				    return false;
				}
				public Boolean ISETNOIsKey(){
				    return false;
				}
				public Integer ISETNOLength(){
				    return 9;
				}
				public Integer ISETNOPrecision(){
				    return 0;
				}
				public String ISETNODefault(){
				
					return "";
				
				}
				public String ISETNOComment(){
				
				    return "";
				
				}
				public String ISETNOPattern(){
				
					return "";
				
				}
				public String ISETNOOriginalDbColumnName(){
				
					return "ISETNO";
				
				}

				
			    public BigDecimal ISETQT;

				public BigDecimal getISETQT () {
					return this.ISETQT;
				}

				public Boolean ISETQTIsNullable(){
				    return false;
				}
				public Boolean ISETQTIsKey(){
				    return false;
				}
				public Integer ISETQTLength(){
				    return 9;
				}
				public Integer ISETQTPrecision(){
				    return 2;
				}
				public String ISETQTDefault(){
				
					return "";
				
				}
				public String ISETQTComment(){
				
				    return "";
				
				}
				public String ISETQTPattern(){
				
					return "";
				
				}
				public String ISETQTOriginalDbColumnName(){
				
					return "ISETQT";
				
				}

				
			    public String CSPICK;

				public String getCSPICK () {
					return this.CSPICK;
				}

				public Boolean CSPICKIsNullable(){
				    return false;
				}
				public Boolean CSPICKIsKey(){
				    return false;
				}
				public Integer CSPICKLength(){
				    return 1;
				}
				public Integer CSPICKPrecision(){
				    return 0;
				}
				public String CSPICKDefault(){
				
					return null;
				
				}
				public String CSPICKComment(){
				
				    return "";
				
				}
				public String CSPICKPattern(){
				
					return "";
				
				}
				public String CSPICKOriginalDbColumnName(){
				
					return "CSPICK";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.ISETNO = (BigDecimal) dis.readObject();
					
						this.ISETQT = (BigDecimal) dis.readObject();
					
					this.CSPICK = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.ISETNO = (BigDecimal) dis.readObject();
					
						this.ISETQT = (BigDecimal) dis.readObject();
					
					this.CSPICK = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETQT);
					
					// String
				
						writeString(this.CSPICK,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETQT);
					
					// String
				
						writeString(this.CSPICK,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INUMBR="+String.valueOf(INUMBR));
		sb.append(",ISETNO="+String.valueOf(ISETNO));
		sb.append(",ISETQT="+String.valueOf(ISETQT));
		sb.append(",CSPICK="+CSPICK);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(ISETNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISETNO);
            			}
            		
        			sb.append("|");
        		
        				if(ISETQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISETQT);
            			}
            		
        			sb.append("|");
        		
        				if(CSPICK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CSPICK);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row20");
			
		int tos_count_tFileOutputDelimited_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_2 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_2.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_2.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FILENAME" + " = " + "\"/data/talend/data_repository/VSISET.csv\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_2 - "  + (log4jParamters_tFileOutputDelimited_2) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_2", "tFileOutputDelimited_2", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("/data/talend/data_repository/VSISET.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                                log.info("tFileOutputDelimited_2 - Creating directory '" + dir_tFileOutputDelimited_2.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_2.mkdirs();
                                log.info("tFileOutputDelimited_2 - The directory '"+ dir_tFileOutputDelimited_2.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        String zipName_tFileOutputDelimited_2 = fullName_tFileOutputDelimited_2 + ".zip";
                        java.io.File file_tFileOutputDelimited_2 = new java.io.File(zipName_tFileOutputDelimited_2);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_2= null;
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        if(file_tFileOutputDelimited_2.exists()) {
                            file_tFileOutputDelimited_2.delete();
                        }
                        zipOut_tFileOutputDelimited_2= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_2)));
                        zipOut_tFileOutputDelimited_2.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_2.getName()));
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_2,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("INUMBR");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ISETNO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ISETQT");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CSPICK");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_2 = new StringBuilder();
                    log4jParamters_tDBInput_2.append("Parameters:");
                            log4jParamters_tDBInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERY" + " = " + "\"select * from MM4R5LIB.VSISET\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISETNO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISETQT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CSPICK")+"}]");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + (log4jParamters_tDBInput_2) );
                    } 
                } 
            new BytesLimit65535_tDBInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_2", "tDBInput_2", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_2 = context.jda_password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				  
				String url_tDBInput_2 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_2 - Driver ClassName: "+driverClass_tDBInput_2+".");
			
	    		log.debug("tDBInput_2 - Connection attempt to '" + url_tDBInput_2 + "' with the username '" + dbUser_tDBInput_2 + "'.");
			
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
	    		log.debug("tDBInput_2 - Connection to '" + url_tDBInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select * from MM4R5LIB.VSISET";
		    
	    		log.debug("tDBInput_2 - Executing the query: '" + dbquery_tDBInput_2 + "'.");
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    	log.debug("tDBInput_2 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row20.INUMBR = null;
							} else {
		                          
            row20.INUMBR = rs_tDBInput_2.getBigDecimal(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row20.ISETNO = null;
							} else {
		                          
            row20.ISETNO = rs_tDBInput_2.getBigDecimal(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row20.ISETQT = null;
							} else {
		                          
            row20.ISETQT = rs_tDBInput_2.getBigDecimal(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row20.CSPICK = null;
							} else {
	                         		
        	row20.CSPICK = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
					
						log.debug("tDBInput_2 - Retrieving the record " + nb_line_tDBInput_2 + ".");
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row20","tDBInput_2","tDBInput_2","tAS400Input","tFileOutputDelimited_2","tFileOutputDelimited_2","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row20 - " + (row20==null? "": row20.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row20.INUMBR != null) {
                        sb_tFileOutputDelimited_2.append(
                            row20.INUMBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row20.ISETNO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row20.ISETNO.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row20.ISETQT != null) {
                        sb_tFileOutputDelimited_2.append(
                            row20.ISETQT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row20.CSPICK != null) {
                        sb_tFileOutputDelimited_2.append(
                            row20.CSPICK
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());
                        log.debug("tFileOutputDelimited_2 - Writing the record " + nb_line_tFileOutputDelimited_2 + ".");

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
	    		log.debug("tDBInput_2 - Closing the connection to the database.");
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
	    		log.debug("tDBInput_2 - Retrieved records count: "+nb_line_tDBInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Done.") );

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	
				log.debug("tFileOutputDelimited_2 - Written records count: " + nb_line_tFileOutputDelimited_2 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row20",2,0,
			 			"tDBInput_2","tDBInput_2","tAS400Input","tFileOutputDelimited_2","tFileOutputDelimited_2","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_2 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileInputDelimited_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class tmap_VSISETStruct implements routines.system.IPersistableRow<tmap_VSISETStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public BigDecimal ISETNO;

				public BigDecimal getISETNO () {
					return this.ISETNO;
				}

				public Boolean ISETNOIsNullable(){
				    return true;
				}
				public Boolean ISETNOIsKey(){
				    return false;
				}
				public Integer ISETNOLength(){
				    return null;
				}
				public Integer ISETNOPrecision(){
				    return null;
				}
				public String ISETNODefault(){
				
					return "";
				
				}
				public String ISETNOComment(){
				
				    return "";
				
				}
				public String ISETNOPattern(){
				
					return "";
				
				}
				public String ISETNOOriginalDbColumnName(){
				
					return "ISETNO";
				
				}

				
			    public BigDecimal ISETQT;

				public BigDecimal getISETQT () {
					return this.ISETQT;
				}

				public Boolean ISETQTIsNullable(){
				    return true;
				}
				public Boolean ISETQTIsKey(){
				    return false;
				}
				public Integer ISETQTLength(){
				    return null;
				}
				public Integer ISETQTPrecision(){
				    return null;
				}
				public String ISETQTDefault(){
				
					return "";
				
				}
				public String ISETQTComment(){
				
				    return "";
				
				}
				public String ISETQTPattern(){
				
					return "";
				
				}
				public String ISETQTOriginalDbColumnName(){
				
					return "ISETQT";
				
				}

				
			    public String CSPICK;

				public String getCSPICK () {
					return this.CSPICK;
				}

				public Boolean CSPICKIsNullable(){
				    return true;
				}
				public Boolean CSPICKIsKey(){
				    return false;
				}
				public Integer CSPICKLength(){
				    return null;
				}
				public Integer CSPICKPrecision(){
				    return null;
				}
				public String CSPICKDefault(){
				
					return null;
				
				}
				public String CSPICKComment(){
				
				    return "";
				
				}
				public String CSPICKPattern(){
				
					return "";
				
				}
				public String CSPICKOriginalDbColumnName(){
				
					return "CSPICK";
				
				}

				
			    public java.util.Date DATELOADED;

				public java.util.Date getDATELOADED () {
					return this.DATELOADED;
				}

				public Boolean DATELOADEDIsNullable(){
				    return true;
				}
				public Boolean DATELOADEDIsKey(){
				    return false;
				}
				public Integer DATELOADEDLength(){
				    return null;
				}
				public Integer DATELOADEDPrecision(){
				    return null;
				}
				public String DATELOADEDDefault(){
				
					return null;
				
				}
				public String DATELOADEDComment(){
				
				    return "";
				
				}
				public String DATELOADEDPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DATELOADEDOriginalDbColumnName(){
				
					return "DATELOADED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.ISETNO = (BigDecimal) dis.readObject();
					
						this.ISETQT = (BigDecimal) dis.readObject();
					
					this.CSPICK = readString(dis);
					
					this.DATELOADED = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.ISETNO = (BigDecimal) dis.readObject();
					
						this.ISETQT = (BigDecimal) dis.readObject();
					
					this.CSPICK = readString(dis);
					
					this.DATELOADED = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETQT);
					
					// String
				
						writeString(this.CSPICK,dos);
					
					// java.util.Date
				
						writeDate(this.DATELOADED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETQT);
					
					// String
				
						writeString(this.CSPICK,dos);
					
					// java.util.Date
				
						writeDate(this.DATELOADED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INUMBR="+String.valueOf(INUMBR));
		sb.append(",ISETNO="+String.valueOf(ISETNO));
		sb.append(",ISETQT="+String.valueOf(ISETQT));
		sb.append(",CSPICK="+CSPICK);
		sb.append(",DATELOADED="+String.valueOf(DATELOADED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(ISETNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISETNO);
            			}
            		
        			sb.append("|");
        		
        				if(ISETQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISETQT);
            			}
            		
        			sb.append("|");
        		
        				if(CSPICK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CSPICK);
            			}
            		
        			sb.append("|");
        		
        				if(DATELOADED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DATELOADED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(tmap_VSISETStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public BigDecimal ISETNO;

				public BigDecimal getISETNO () {
					return this.ISETNO;
				}

				public Boolean ISETNOIsNullable(){
				    return true;
				}
				public Boolean ISETNOIsKey(){
				    return false;
				}
				public Integer ISETNOLength(){
				    return null;
				}
				public Integer ISETNOPrecision(){
				    return null;
				}
				public String ISETNODefault(){
				
					return "";
				
				}
				public String ISETNOComment(){
				
				    return "";
				
				}
				public String ISETNOPattern(){
				
					return "";
				
				}
				public String ISETNOOriginalDbColumnName(){
				
					return "ISETNO";
				
				}

				
			    public BigDecimal ISETQT;

				public BigDecimal getISETQT () {
					return this.ISETQT;
				}

				public Boolean ISETQTIsNullable(){
				    return true;
				}
				public Boolean ISETQTIsKey(){
				    return false;
				}
				public Integer ISETQTLength(){
				    return null;
				}
				public Integer ISETQTPrecision(){
				    return null;
				}
				public String ISETQTDefault(){
				
					return "";
				
				}
				public String ISETQTComment(){
				
				    return "";
				
				}
				public String ISETQTPattern(){
				
					return "";
				
				}
				public String ISETQTOriginalDbColumnName(){
				
					return "ISETQT";
				
				}

				
			    public String CSPICK;

				public String getCSPICK () {
					return this.CSPICK;
				}

				public Boolean CSPICKIsNullable(){
				    return true;
				}
				public Boolean CSPICKIsKey(){
				    return false;
				}
				public Integer CSPICKLength(){
				    return null;
				}
				public Integer CSPICKPrecision(){
				    return null;
				}
				public String CSPICKDefault(){
				
					return "";
				
				}
				public String CSPICKComment(){
				
				    return "";
				
				}
				public String CSPICKPattern(){
				
					return "";
				
				}
				public String CSPICKOriginalDbColumnName(){
				
					return "CSPICK";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.ISETNO = (BigDecimal) dis.readObject();
					
						this.ISETQT = (BigDecimal) dis.readObject();
					
					this.CSPICK = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
						this.INUMBR = (BigDecimal) dis.readObject();
					
						this.ISETNO = (BigDecimal) dis.readObject();
					
						this.ISETQT = (BigDecimal) dis.readObject();
					
					this.CSPICK = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETQT);
					
					// String
				
						writeString(this.CSPICK,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISETQT);
					
					// String
				
						writeString(this.CSPICK,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INUMBR="+String.valueOf(INUMBR));
		sb.append(",ISETNO="+String.valueOf(ISETNO));
		sb.append(",ISETQT="+String.valueOf(ISETQT));
		sb.append(",CSPICK="+CSPICK);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(ISETNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISETNO);
            			}
            		
        			sb.append("|");
        		
        				if(ISETQT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISETQT);
            			}
            		
        			sb.append("|");
        		
        				if(CSPICK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CSPICK);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
tmap_VSISETStruct tmap_VSISET = new tmap_VSISETStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"tmap_VSISET");
			
		int tos_count_tDBOutput_3 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_3", "tDBOutput_3", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_3 = (String)(restRequest_tDBOutput_3 != null ? restRequest_tDBOutput_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_3 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_3 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_3 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_3 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_3.createRuntimeProperties();
 		                    props_tDBOutput_3.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_3.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_3.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_3.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_3_1_fisrt sst_tDBOutput_3_1_fisrt = new SchemaSettingTool_tDBOutput_3_1_fisrt();
 		                    
 		                    props_tDBOutput_3.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_3_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_3.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_3.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_3.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_3.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_3.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_3.table.setValue("tableName",
 		                    "VSI_INVENTORY_SET_FILE_VSISET");
 		                    
 		                    props_tDBOutput_3.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_3.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_3.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_3.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_3.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_3.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_3_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tmap_VSISET\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"INUMBR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"INUMBR\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"INUMBR\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"INUMBR\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ISETNO\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ISETNO\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ISETNO\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ISETNO\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ISETQT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ISETQT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ISETQT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ISETQT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CSPICK\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CSPICK\",\"talend.field.dbColumnName\":\"CSPICK\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CSPICK\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DATELOADED\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LOAD_DATE\",\"talend.field.dbColumnName\":\"DATELOADED\",\"di.prop.di.date.date\":\"true\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"di.column.relationshipType\":\"\",\"di.prop.di.column.logicalType\":\"date\",\"di.table.label\":\"DATELOADED\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tmap_VSISET\",\"di.table.label\":\"tmap_VSISET\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_3_2_fisrt sst_tDBOutput_3_2_fisrt = new SchemaSettingTool_tDBOutput_3_2_fisrt();
 		                    
 		                    props_tDBOutput_3.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_3_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_3.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_3 = props_tDBOutput_3.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_3.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_3);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_3.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_3 = props_tDBOutput_3.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_3.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_3);
        }
    }
globalMap.put("tDBOutput_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_3_MAPPINGS_URL", mappings_url_tDBOutput_3);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_3 = null;
topology_tDBOutput_3 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_3 = def_tDBOutput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_3, topology_tDBOutput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_3 = def_tDBOutput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_3 = componentRuntime_tDBOutput_3.initialize(container_tDBOutput_3, props_tDBOutput_3);

if (initVr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_3.getMessage());
}

if(componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_3;
	compDriverInitialization_tDBOutput_3.runAtDriver(container_tDBOutput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_3 = null;
if(componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_3;
	if (doesNodeBelongToRequest_tDBOutput_3) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_3 = sourceOrSink_tDBOutput_3.validate(container_tDBOutput_3);
        if (vr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_3.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_3 = null;
    if (sourceOrSink_tDBOutput_3 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_3 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_3;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_3 = sink_tDBOutput_3.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_3) {
            writeOperation_tDBOutput_3.initialize(container_tDBOutput_3);
        }
        writer_tDBOutput_3 = writeOperation_tDBOutput_3.createWriter(container_tDBOutput_3);
        if (doesNodeBelongToRequest_tDBOutput_3) {
            writer_tDBOutput_3.open("tDBOutput_3");
        }

        resourceMap.put("writer_tDBOutput_3", writer_tDBOutput_3);
    } // end of "sourceOrSink_tDBOutput_3 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_3 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_3.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_3 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_3 = props_tDBOutput_3.getSchema(c_tDBOutput_3, false);
    incomingEnforcer_tDBOutput_3 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_3);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_3 = null;


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row6");
			
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_3", "tMap_3", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row6_tMap_3 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	java.util.Date var1;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_tmap_VSISET_tMap_3 = 0;
				
tmap_VSISETStruct tmap_VSISET_tmp = new tmap_VSISETStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";
	
	
		int tos_count_tFileInputDelimited_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_3 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_3.append("Parameters:");
                            log4jParamters_tFileInputDelimited_3.append("FILENAME" + " = " + "\"/data/talend/data_repository/VSISET.zip\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISETNO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISETQT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CSPICK")+"}]");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_3 - "  + (log4jParamters_tFileInputDelimited_3) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_3", "tFileInputDelimited_3", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = "/data/talend/data_repository/VSISET.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_3 = null;
						try {
							if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
								zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_3));
							}else{
								zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								
									log.error("tFileInputDelimited_3 - " +e.getMessage());
								
								System.err.println(e.getMessage());
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_3 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_3 = zis_tFileInputDelimited_3.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_3 - " +e.getMessage());
									
									System.err.println(e.getMessage());
									break;
								
							}
							if(entry_tFileInputDelimited_3 == null) {
								break;
							}
							if(entry_tFileInputDelimited_3.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_3, "ISO-8859-15",",","\n",false,1,0,
								
									limit_tFileInputDelimited_3
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_3 - " +e.getMessage());
									
									System.err.println(e.getMessage());
								
							}
					
				    
				    	log.info("tFileInputDelimited_3 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row6 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row6 = new row6Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row6.INUMBR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"INUMBR", "row6", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row6.INUMBR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row6.ISETNO = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ISETNO", "row6", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row6.ISETNO = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row6.ISETQT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ISETQT", "row6", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row6.ISETQT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							row6.CSPICK = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
												log.error("tFileInputDelimited_3 - " +e.getMessage());
											
			                					System.err.println(e.getMessage());
			                					row6 = null;
			                				
										
			    					}
								
			log.debug("tFileInputDelimited_3 - Retrieving the record " + fid_tFileInputDelimited_3.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row6","tFileInputDelimited_3","tFileInputDelimited_3","tFileInputDelimited","tMap_3","tMap_3","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row6 - " + (row6==null? "": row6.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var1 = TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")) ;// ###############################
        // ###############################
        // # Output tables

tmap_VSISET = null;


// # Output table : 'tmap_VSISET'
count_tmap_VSISET_tMap_3++;

tmap_VSISET_tmp.INUMBR = row6.INUMBR;
tmap_VSISET_tmp.ISETNO = row6.ISETNO;
tmap_VSISET_tmp.ISETQT = row6.ISETQT;
tmap_VSISET_tmp.CSPICK = row6.CSPICK;
tmap_VSISET_tmp.DATELOADED = Var.var1 ;
tmap_VSISET = tmap_VSISET_tmp;
log.debug("tMap_3 - Outputting the record " + count_tmap_VSISET_tMap_3 + " of the output table 'tmap_VSISET'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "tmap_VSISET"
if(tmap_VSISET != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"tmap_VSISET","tMap_3","tMap_3","tMap","tDBOutput_3","tDBOutput_3","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("tmap_VSISET - " + (tmap_VSISET==null? "": tmap_VSISET.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_3 != null) {
            incomingEnforcer_tDBOutput_3.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("INUMBR") != null){
                    incomingEnforcer_tDBOutput_3.put("INUMBR", tmap_VSISET.INUMBR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("ISETNO") != null){
                    incomingEnforcer_tDBOutput_3.put("ISETNO", tmap_VSISET.ISETNO);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("ISETQT") != null){
                    incomingEnforcer_tDBOutput_3.put("ISETQT", tmap_VSISET.ISETQT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("CSPICK") != null){
                    incomingEnforcer_tDBOutput_3.put("CSPICK", tmap_VSISET.CSPICK);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("DATELOADED") != null){
                    incomingEnforcer_tDBOutput_3.put("DATELOADED", tmap_VSISET.DATELOADED);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_3 = null;
        if (incomingEnforcer_tDBOutput_3 != null) {
            data_tDBOutput_3 = incomingEnforcer_tDBOutput_3.getCurrentRecord();
        }
        
        if (writer_tDBOutput_3 != null && data_tDBOutput_3 != null) {
        	writer_tDBOutput_3.write(data_tDBOutput_3);
        }
        
        nb_line_tDBOutput_3++;

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	


 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	


 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "tmap_VSISET"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	


				
            }
            nb_line_tFileInputDelimited_3+=fid_tFileInputDelimited_3.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/VSISET.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_3!=null){
            		fid_tFileInputDelimited_3.close();
            	}
            }
            if(fid_tFileInputDelimited_3!=null){
            	globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
            }
					
						log.info("tFileInputDelimited_3- Retrieved records count: "+ nb_line_tFileInputDelimited_3 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_3 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'tmap_VSISET': " + count_tmap_VSISET_tMap_3 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row6",2,0,
			 			"tFileInputDelimited_3","tFileInputDelimited_3","tFileInputDelimited","tMap_3","tMap_3","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_3", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_3 = null;
    if (writer_tDBOutput_3 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_3 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_3.close();
        resultMap_tDBOutput_3 = writer_tDBOutput_3.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_3), container_tDBOutput_3);
    }
if(resultMap_tDBOutput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_3 : resultMap_tDBOutput_3.entrySet()) {
		switch(entry_tDBOutput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "ERROR_MESSAGE", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_LINE", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_SUCCESS", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_REJECT", entry_tDBOutput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_3 = new StringBuilder();
            for (int i_tDBOutput_3 = 0; i_tDBOutput_3 < entry_tDBOutput_3.getKey().length(); i_tDBOutput_3++) {
                char ch_tDBOutput_3 = entry_tDBOutput_3.getKey().charAt(i_tDBOutput_3);
                if(Character.isUpperCase(ch_tDBOutput_3) && i_tDBOutput_3> 0) {
                	studio_key_tDBOutput_3.append('_');
                }
                studio_key_tDBOutput_3.append(ch_tDBOutput_3);
            }
			container_tDBOutput_3.setComponentData("tDBOutput_3", studio_key_tDBOutput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_3.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"tmap_VSISET",2,0,
			 			"tMap_3","tMap_3","tMap","tDBOutput_3","tDBOutput_3","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tFileDelete_4Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_3")==null){
    if(resourceMap.get("writer_tDBOutput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_3")).close();
		} catch (java.io.IOException e_tDBOutput_3) {
			String errorMessage_tDBOutput_3 = "failed to release the resource in tDBOutput_3 :" + e_tDBOutput_3.getMessage();
			System.err.println(errorMessage_tDBOutput_3);
		}
	}
}
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_4", false);
		start_Hash.put("tFileDelete_4", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_4";
	
	
		int tos_count_tFileDelete_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_4 = new StringBuilder();
                    log4jParamters_tFileDelete_4.append("Parameters:");
                            log4jParamters_tFileDelete_4.append("PATH" + " = " + "\"/data/talend/data_repository/VSISET.zip\"");
                        log4jParamters_tFileDelete_4.append(" | ");
                            log4jParamters_tFileDelete_4.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_4.append(" | ");
                            log4jParamters_tFileDelete_4.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_4 - "  + (log4jParamters_tFileDelete_4) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_4().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_4", "tFileDelete_3", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_4 begin ] stop
 */
	
	/**
	 * [tFileDelete_4 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 

				final StringBuffer log4jSb_tFileDelete_4 = new StringBuffer();
			
class DeleteFoldertFileDelete_4{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_4=new java.io.File("/data/talend/data_repository/VSISET.zip");
	if(path_tFileDelete_4.exists()){
		if(path_tFileDelete_4.isFile()){
	    	if(path_tFileDelete_4.delete()){
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_4 - File : "+ path_tFileDelete_4.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_4.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_4.isDirectory()){ 
	    	DeleteFoldertFileDelete_4 dftFileDelete_4 = new DeleteFoldertFileDelete_4();
	    	if(dftFileDelete_4.delete(path_tFileDelete_4)){
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_4 - Directory : "+ path_tFileDelete_4.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_4.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_4_DELETE_PATH","/data/talend/data_repository/VSISET.zip");
 


	tos_count_tFileDelete_4++;

/**
 * [tFileDelete_4 main ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 



/**
 * [tFileDelete_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 



/**
 * [tFileDelete_4 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_4 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_4 - "  + ("Done.") );

ok_Hash.put("tFileDelete_4", true);
end_Hash.put("tFileDelete_4", System.currentTimeMillis());




/**
 * [tFileDelete_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_4 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 



/**
 * [tFileDelete_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";
	
	
		int tos_count_tDBRow_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_1", "tDBRow_1", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_1 = (String)(restRequest_tDBRow_1 != null ? restRequest_tDBRow_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_1 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_1 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_1 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_1.createRuntimeProperties();
 		                    props_tDBRow_1.setValue("query",
 		                    "DELETE from  PO_HEADER_POMHDR \nWHERE LOAD_DATE = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_1.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_1.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_1.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_1_1_fisrt sst_tDBRow_1_1_fisrt = new SchemaSettingTool_tDBRow_1_1_fisrt();
 		                    
 		                    props_tDBRow_1.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_1_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_1_2_fisrt sst_tDBRow_1_2_fisrt = new SchemaSettingTool_tDBRow_1_2_fisrt();
 		                    
 		                    props_tDBRow_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_1.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_1.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_1.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_1.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_1.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_1.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_1.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_1.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_1.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_1.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_1_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_1_3_fisrt sst_tDBRow_1_3_fisrt = new SchemaSettingTool_tDBRow_1_3_fisrt();
 		                    
 		                    props_tDBRow_1.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_1.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_1.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_1);
        }
    }
globalMap.put("tDBRow_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_1_MAPPINGS_URL", mappings_url_tDBRow_1);

org.talend.components.api.container.RuntimeContainer container_tDBRow_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_1 = null;
topology_tDBRow_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_1 = def_tDBRow_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_1, topology_tDBRow_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_1 = def_tDBRow_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_1 = componentRuntime_tDBRow_1.initialize(container_tDBRow_1, props_tDBRow_1);

if (initVr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_1.getMessage());
}

if(componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_1;
	compDriverInitialization_tDBRow_1.runAtDriver(container_tDBRow_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_1 = null;
if(componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_1;
	if (doesNodeBelongToRequest_tDBRow_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_1 = sourceOrSink_tDBRow_1.validate(container_tDBRow_1);
        if (vr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_1.getMessage());
        }
	}
}

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	


 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	


 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	


 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	
// end of generic


resourceMap.put("finish_tDBRow_1", Boolean.TRUE);

 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_1")==null){
}
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public float PONUMB;

				public float getPONUMB () {
					return this.PONUMB;
				}

				public Boolean PONUMBIsNullable(){
				    return false;
				}
				public Boolean PONUMBIsKey(){
				    return false;
				}
				public Integer PONUMBLength(){
				    return 6;
				}
				public Integer PONUMBPrecision(){
				    return 0;
				}
				public String PONUMBDefault(){
				
					return "";
				
				}
				public String PONUMBComment(){
				
				    return "";
				
				}
				public String PONUMBPattern(){
				
					return "";
				
				}
				public String PONUMBOriginalDbColumnName(){
				
					return "PONUMB";
				
				}

				
			    public float POBON;

				public float getPOBON () {
					return this.POBON;
				}

				public Boolean POBONIsNullable(){
				    return false;
				}
				public Boolean POBONIsKey(){
				    return false;
				}
				public Integer POBONLength(){
				    return 2;
				}
				public Integer POBONPrecision(){
				    return 0;
				}
				public String POBONDefault(){
				
					return "";
				
				}
				public String POBONComment(){
				
				    return "";
				
				}
				public String POBONPattern(){
				
					return "";
				
				}
				public String POBONOriginalDbColumnName(){
				
					return "POBON";
				
				}

				
			    public float POVNUM;

				public float getPOVNUM () {
					return this.POVNUM;
				}

				public Boolean POVNUMIsNullable(){
				    return false;
				}
				public Boolean POVNUMIsKey(){
				    return false;
				}
				public Integer POVNUMLength(){
				    return 6;
				}
				public Integer POVNUMPrecision(){
				    return 0;
				}
				public String POVNUMDefault(){
				
					return "";
				
				}
				public String POVNUMComment(){
				
				    return "";
				
				}
				public String POVNUMPattern(){
				
					return "";
				
				}
				public String POVNUMOriginalDbColumnName(){
				
					return "POVNUM";
				
				}

				
			    public float POTRMS;

				public float getPOTRMS () {
					return this.POTRMS;
				}

				public Boolean POTRMSIsNullable(){
				    return false;
				}
				public Boolean POTRMSIsKey(){
				    return false;
				}
				public Integer POTRMSLength(){
				    return 3;
				}
				public Integer POTRMSPrecision(){
				    return 0;
				}
				public String POTRMSDefault(){
				
					return "";
				
				}
				public String POTRMSComment(){
				
				    return "";
				
				}
				public String POTRMSPattern(){
				
					return "";
				
				}
				public String POTRMSOriginalDbColumnName(){
				
					return "POTRMS";
				
				}

				
			    public String POTIND;

				public String getPOTIND () {
					return this.POTIND;
				}

				public Boolean POTINDIsNullable(){
				    return false;
				}
				public Boolean POTINDIsKey(){
				    return false;
				}
				public Integer POTINDLength(){
				    return 1;
				}
				public Integer POTINDPrecision(){
				    return 0;
				}
				public String POTINDDefault(){
				
					return null;
				
				}
				public String POTINDComment(){
				
				    return "";
				
				}
				public String POTINDPattern(){
				
					return "";
				
				}
				public String POTINDOriginalDbColumnName(){
				
					return "POTIND";
				
				}

				
			    public String POSTAT;

				public String getPOSTAT () {
					return this.POSTAT;
				}

				public Boolean POSTATIsNullable(){
				    return false;
				}
				public Boolean POSTATIsKey(){
				    return false;
				}
				public Integer POSTATLength(){
				    return 1;
				}
				public Integer POSTATPrecision(){
				    return 0;
				}
				public String POSTATDefault(){
				
					return null;
				
				}
				public String POSTATComment(){
				
				    return "";
				
				}
				public String POSTATPattern(){
				
					return "";
				
				}
				public String POSTATOriginalDbColumnName(){
				
					return "POSTAT";
				
				}

				
			    public String POTYPE;

				public String getPOTYPE () {
					return this.POTYPE;
				}

				public Boolean POTYPEIsNullable(){
				    return false;
				}
				public Boolean POTYPEIsKey(){
				    return false;
				}
				public Integer POTYPELength(){
				    return 1;
				}
				public Integer POTYPEPrecision(){
				    return 0;
				}
				public String POTYPEDefault(){
				
					return null;
				
				}
				public String POTYPEComment(){
				
				    return "";
				
				}
				public String POTYPEPattern(){
				
					return "";
				
				}
				public String POTYPEOriginalDbColumnName(){
				
					return "POTYPE";
				
				}

				
			    public String PODEST;

				public String getPODEST () {
					return this.PODEST;
				}

				public Boolean PODESTIsNullable(){
				    return false;
				}
				public Boolean PODESTIsKey(){
				    return false;
				}
				public Integer PODESTLength(){
				    return 1;
				}
				public Integer PODESTPrecision(){
				    return 0;
				}
				public String PODESTDefault(){
				
					return null;
				
				}
				public String PODESTComment(){
				
				    return "";
				
				}
				public String PODESTPattern(){
				
					return "";
				
				}
				public String PODESTOriginalDbColumnName(){
				
					return "PODEST";
				
				}

				
			    public BigDecimal POSTOR;

				public BigDecimal getPOSTOR () {
					return this.POSTOR;
				}

				public Boolean POSTORIsNullable(){
				    return false;
				}
				public Boolean POSTORIsKey(){
				    return false;
				}
				public Integer POSTORLength(){
				    return 5;
				}
				public Integer POSTORPrecision(){
				    return 0;
				}
				public String POSTORDefault(){
				
					return "";
				
				}
				public String POSTORComment(){
				
				    return "";
				
				}
				public String POSTORPattern(){
				
					return "";
				
				}
				public String POSTOROriginalDbColumnName(){
				
					return "POSTOR";
				
				}

				
			    public String POADYN;

				public String getPOADYN () {
					return this.POADYN;
				}

				public Boolean POADYNIsNullable(){
				    return false;
				}
				public Boolean POADYNIsKey(){
				    return false;
				}
				public Integer POADYNLength(){
				    return 1;
				}
				public Integer POADYNPrecision(){
				    return 0;
				}
				public String POADYNDefault(){
				
					return null;
				
				}
				public String POADYNComment(){
				
				    return "";
				
				}
				public String POADYNPattern(){
				
					return "";
				
				}
				public String POADYNOriginalDbColumnName(){
				
					return "POADYN";
				
				}

				
			    public String PODMTH;

				public String getPODMTH () {
					return this.PODMTH;
				}

				public Boolean PODMTHIsNullable(){
				    return false;
				}
				public Boolean PODMTHIsKey(){
				    return false;
				}
				public Integer PODMTHLength(){
				    return 1;
				}
				public Integer PODMTHPrecision(){
				    return 0;
				}
				public String PODMTHDefault(){
				
					return null;
				
				}
				public String PODMTHComment(){
				
				    return "";
				
				}
				public String PODMTHPattern(){
				
					return "";
				
				}
				public String PODMTHOriginalDbColumnName(){
				
					return "PODMTH";
				
				}

				
			    public String POALBO;

				public String getPOALBO () {
					return this.POALBO;
				}

				public Boolean POALBOIsNullable(){
				    return false;
				}
				public Boolean POALBOIsKey(){
				    return false;
				}
				public Integer POALBOLength(){
				    return 1;
				}
				public Integer POALBOPrecision(){
				    return 0;
				}
				public String POALBODefault(){
				
					return null;
				
				}
				public String POALBOComment(){
				
				    return "";
				
				}
				public String POALBOPattern(){
				
					return "";
				
				}
				public String POALBOOriginalDbColumnName(){
				
					return "POALBO";
				
				}

				
			    public String POCONF;

				public String getPOCONF () {
					return this.POCONF;
				}

				public Boolean POCONFIsNullable(){
				    return false;
				}
				public Boolean POCONFIsKey(){
				    return false;
				}
				public Integer POCONFLength(){
				    return 1;
				}
				public Integer POCONFPrecision(){
				    return 0;
				}
				public String POCONFDefault(){
				
					return null;
				
				}
				public String POCONFComment(){
				
				    return "";
				
				}
				public String POCONFPattern(){
				
					return "";
				
				}
				public String POCONFOriginalDbColumnName(){
				
					return "POCONF";
				
				}

				
			    public String POPHON;

				public String getPOPHON () {
					return this.POPHON;
				}

				public Boolean POPHONIsNullable(){
				    return false;
				}
				public Boolean POPHONIsKey(){
				    return false;
				}
				public Integer POPHONLength(){
				    return 1;
				}
				public Integer POPHONPrecision(){
				    return 0;
				}
				public String POPHONDefault(){
				
					return null;
				
				}
				public String POPHONComment(){
				
				    return "";
				
				}
				public String POPHONPattern(){
				
					return "";
				
				}
				public String POPHONOriginalDbColumnName(){
				
					return "POPHON";
				
				}

				
			    public String POBUYR;

				public String getPOBUYR () {
					return this.POBUYR;
				}

				public Boolean POBUYRIsNullable(){
				    return false;
				}
				public Boolean POBUYRIsKey(){
				    return false;
				}
				public Integer POBUYRLength(){
				    return 3;
				}
				public Integer POBUYRPrecision(){
				    return 0;
				}
				public String POBUYRDefault(){
				
					return null;
				
				}
				public String POBUYRComment(){
				
				    return "";
				
				}
				public String POBUYRPattern(){
				
					return "";
				
				}
				public String POBUYROriginalDbColumnName(){
				
					return "POBUYR";
				
				}

				
			    public float PODPT;

				public float getPODPT () {
					return this.PODPT;
				}

				public Boolean PODPTIsNullable(){
				    return false;
				}
				public Boolean PODPTIsKey(){
				    return false;
				}
				public Integer PODPTLength(){
				    return 3;
				}
				public Integer PODPTPrecision(){
				    return 0;
				}
				public String PODPTDefault(){
				
					return "";
				
				}
				public String PODPTComment(){
				
				    return "";
				
				}
				public String PODPTPattern(){
				
					return "";
				
				}
				public String PODPTOriginalDbColumnName(){
				
					return "PODPT";
				
				}

				
			    public float POSDPT;

				public float getPOSDPT () {
					return this.POSDPT;
				}

				public Boolean POSDPTIsNullable(){
				    return false;
				}
				public Boolean POSDPTIsKey(){
				    return false;
				}
				public Integer POSDPTLength(){
				    return 3;
				}
				public Integer POSDPTPrecision(){
				    return 0;
				}
				public String POSDPTDefault(){
				
					return "";
				
				}
				public String POSDPTComment(){
				
				    return "";
				
				}
				public String POSDPTPattern(){
				
					return "";
				
				}
				public String POSDPTOriginalDbColumnName(){
				
					return "POSDPT";
				
				}

				
			    public float POTHER;

				public float getPOTHER () {
					return this.POTHER;
				}

				public Boolean POTHERIsNullable(){
				    return false;
				}
				public Boolean POTHERIsKey(){
				    return false;
				}
				public Integer POTHERLength(){
				    return 6;
				}
				public Integer POTHERPrecision(){
				    return 0;
				}
				public String POTHERDefault(){
				
					return "";
				
				}
				public String POTHERComment(){
				
				    return "";
				
				}
				public String POTHERPattern(){
				
					return "";
				
				}
				public String POTHEROriginalDbColumnName(){
				
					return "POTHER";
				
				}

				
			    public String POFPCD;

				public String getPOFPCD () {
					return this.POFPCD;
				}

				public Boolean POFPCDIsNullable(){
				    return false;
				}
				public Boolean POFPCDIsKey(){
				    return false;
				}
				public Integer POFPCDLength(){
				    return 1;
				}
				public Integer POFPCDPrecision(){
				    return 0;
				}
				public String POFPCDDefault(){
				
					return "";
				
				}
				public String POFPCDComment(){
				
				    return "";
				
				}
				public String POFPCDPattern(){
				
					return "";
				
				}
				public String POFPCDOriginalDbColumnName(){
				
					return "POFPCD";
				
				}

				
			    public String POFOB;

				public String getPOFOB () {
					return this.POFOB;
				}

				public Boolean POFOBIsNullable(){
				    return false;
				}
				public Boolean POFOBIsKey(){
				    return false;
				}
				public Integer POFOBLength(){
				    return 20;
				}
				public Integer POFOBPrecision(){
				    return 0;
				}
				public String POFOBDefault(){
				
					return "";
				
				}
				public String POFOBComment(){
				
				    return "";
				
				}
				public String POFOBPattern(){
				
					return "";
				
				}
				public String POFOBOriginalDbColumnName(){
				
					return "POFOB";
				
				}

				
			    public String POSHP1;

				public String getPOSHP1 () {
					return this.POSHP1;
				}

				public Boolean POSHP1IsNullable(){
				    return false;
				}
				public Boolean POSHP1IsKey(){
				    return false;
				}
				public Integer POSHP1Length(){
				    return 20;
				}
				public Integer POSHP1Precision(){
				    return 0;
				}
				public String POSHP1Default(){
				
					return "";
				
				}
				public String POSHP1Comment(){
				
				    return "";
				
				}
				public String POSHP1Pattern(){
				
					return "";
				
				}
				public String POSHP1OriginalDbColumnName(){
				
					return "POSHP1";
				
				}

				
			    public String POSHP2;

				public String getPOSHP2 () {
					return this.POSHP2;
				}

				public Boolean POSHP2IsNullable(){
				    return false;
				}
				public Boolean POSHP2IsKey(){
				    return false;
				}
				public Integer POSHP2Length(){
				    return 20;
				}
				public Integer POSHP2Precision(){
				    return 0;
				}
				public String POSHP2Default(){
				
					return "";
				
				}
				public String POSHP2Comment(){
				
				    return "";
				
				}
				public String POSHP2Pattern(){
				
					return "";
				
				}
				public String POSHP2OriginalDbColumnName(){
				
					return "POSHP2";
				
				}

				
			    public String POSHPP;

				public String getPOSHPP () {
					return this.POSHPP;
				}

				public Boolean POSHPPIsNullable(){
				    return false;
				}
				public Boolean POSHPPIsKey(){
				    return false;
				}
				public Integer POSHPPLength(){
				    return 20;
				}
				public Integer POSHPPPrecision(){
				    return 0;
				}
				public String POSHPPDefault(){
				
					return "";
				
				}
				public String POSHPPComment(){
				
				    return "";
				
				}
				public String POSHPPPattern(){
				
					return "";
				
				}
				public String POSHPPOriginalDbColumnName(){
				
					return "POSHPP";
				
				}

				
			    public String POSHPC;

				public String getPOSHPC () {
					return this.POSHPC;
				}

				public Boolean POSHPCIsNullable(){
				    return false;
				}
				public Boolean POSHPCIsKey(){
				    return false;
				}
				public Integer POSHPCLength(){
				    return 20;
				}
				public Integer POSHPCPrecision(){
				    return 0;
				}
				public String POSHPCDefault(){
				
					return "";
				
				}
				public String POSHPCComment(){
				
				    return "";
				
				}
				public String POSHPCPattern(){
				
					return "";
				
				}
				public String POSHPCOriginalDbColumnName(){
				
					return "POSHPC";
				
				}

				
			    public BigDecimal POECEN;

				public BigDecimal getPOECEN () {
					return this.POECEN;
				}

				public Boolean POECENIsNullable(){
				    return false;
				}
				public Boolean POECENIsKey(){
				    return false;
				}
				public Integer POECENLength(){
				    return 1;
				}
				public Integer POECENPrecision(){
				    return 0;
				}
				public String POECENDefault(){
				
					return "";
				
				}
				public String POECENComment(){
				
				    return "";
				
				}
				public String POECENPattern(){
				
					return "";
				
				}
				public String POECENOriginalDbColumnName(){
				
					return "POECEN";
				
				}

				
			    public float POEDAT;

				public float getPOEDAT () {
					return this.POEDAT;
				}

				public Boolean POEDATIsNullable(){
				    return false;
				}
				public Boolean POEDATIsKey(){
				    return false;
				}
				public Integer POEDATLength(){
				    return 6;
				}
				public Integer POEDATPrecision(){
				    return 0;
				}
				public String POEDATDefault(){
				
					return "";
				
				}
				public String POEDATComment(){
				
				    return "";
				
				}
				public String POEDATPattern(){
				
					return "";
				
				}
				public String POEDATOriginalDbColumnName(){
				
					return "POEDAT";
				
				}

				
			    public BigDecimal POSCEN;

				public BigDecimal getPOSCEN () {
					return this.POSCEN;
				}

				public Boolean POSCENIsNullable(){
				    return false;
				}
				public Boolean POSCENIsKey(){
				    return false;
				}
				public Integer POSCENLength(){
				    return 1;
				}
				public Integer POSCENPrecision(){
				    return 0;
				}
				public String POSCENDefault(){
				
					return "";
				
				}
				public String POSCENComment(){
				
				    return "";
				
				}
				public String POSCENPattern(){
				
					return "";
				
				}
				public String POSCENOriginalDbColumnName(){
				
					return "POSCEN";
				
				}

				
			    public float POSDAT;

				public float getPOSDAT () {
					return this.POSDAT;
				}

				public Boolean POSDATIsNullable(){
				    return false;
				}
				public Boolean POSDATIsKey(){
				    return false;
				}
				public Integer POSDATLength(){
				    return 6;
				}
				public Integer POSDATPrecision(){
				    return 0;
				}
				public String POSDATDefault(){
				
					return "";
				
				}
				public String POSDATComment(){
				
				    return "";
				
				}
				public String POSDATPattern(){
				
					return "";
				
				}
				public String POSDATOriginalDbColumnName(){
				
					return "POSDAT";
				
				}

				
			    public BigDecimal POCCEN;

				public BigDecimal getPOCCEN () {
					return this.POCCEN;
				}

				public Boolean POCCENIsNullable(){
				    return false;
				}
				public Boolean POCCENIsKey(){
				    return false;
				}
				public Integer POCCENLength(){
				    return 1;
				}
				public Integer POCCENPrecision(){
				    return 0;
				}
				public String POCCENDefault(){
				
					return "";
				
				}
				public String POCCENComment(){
				
				    return "";
				
				}
				public String POCCENPattern(){
				
					return "";
				
				}
				public String POCCENOriginalDbColumnName(){
				
					return "POCCEN";
				
				}

				
			    public float POCDAT;

				public float getPOCDAT () {
					return this.POCDAT;
				}

				public Boolean POCDATIsNullable(){
				    return false;
				}
				public Boolean POCDATIsKey(){
				    return false;
				}
				public Integer POCDATLength(){
				    return 6;
				}
				public Integer POCDATPrecision(){
				    return 0;
				}
				public String POCDATDefault(){
				
					return "";
				
				}
				public String POCDATComment(){
				
				    return "";
				
				}
				public String POCDATPattern(){
				
					return "";
				
				}
				public String POCDATOriginalDbColumnName(){
				
					return "POCDAT";
				
				}

				
			    public BigDecimal PORCEN;

				public BigDecimal getPORCEN () {
					return this.PORCEN;
				}

				public Boolean PORCENIsNullable(){
				    return false;
				}
				public Boolean PORCENIsKey(){
				    return false;
				}
				public Integer PORCENLength(){
				    return 1;
				}
				public Integer PORCENPrecision(){
				    return 0;
				}
				public String PORCENDefault(){
				
					return "";
				
				}
				public String PORCENComment(){
				
				    return "";
				
				}
				public String PORCENPattern(){
				
					return "";
				
				}
				public String PORCENOriginalDbColumnName(){
				
					return "PORCEN";
				
				}

				
			    public float PORDAT;

				public float getPORDAT () {
					return this.PORDAT;
				}

				public Boolean PORDATIsNullable(){
				    return false;
				}
				public Boolean PORDATIsKey(){
				    return false;
				}
				public Integer PORDATLength(){
				    return 6;
				}
				public Integer PORDATPrecision(){
				    return 0;
				}
				public String PORDATDefault(){
				
					return "";
				
				}
				public String PORDATComment(){
				
				    return "";
				
				}
				public String PORDATPattern(){
				
					return "";
				
				}
				public String PORDATOriginalDbColumnName(){
				
					return "PORDAT";
				
				}

				
			    public BigDecimal POLCCN;

				public BigDecimal getPOLCCN () {
					return this.POLCCN;
				}

				public Boolean POLCCNIsNullable(){
				    return false;
				}
				public Boolean POLCCNIsKey(){
				    return false;
				}
				public Integer POLCCNLength(){
				    return 1;
				}
				public Integer POLCCNPrecision(){
				    return 0;
				}
				public String POLCCNDefault(){
				
					return "";
				
				}
				public String POLCCNComment(){
				
				    return "";
				
				}
				public String POLCCNPattern(){
				
					return "";
				
				}
				public String POLCCNOriginalDbColumnName(){
				
					return "POLCCN";
				
				}

				
			    public float POLCHG;

				public float getPOLCHG () {
					return this.POLCHG;
				}

				public Boolean POLCHGIsNullable(){
				    return false;
				}
				public Boolean POLCHGIsKey(){
				    return false;
				}
				public Integer POLCHGLength(){
				    return 6;
				}
				public Integer POLCHGPrecision(){
				    return 0;
				}
				public String POLCHGDefault(){
				
					return "";
				
				}
				public String POLCHGComment(){
				
				    return "";
				
				}
				public String POLCHGPattern(){
				
					return "";
				
				}
				public String POLCHGOriginalDbColumnName(){
				
					return "POLCHG";
				
				}

				
			    public float PORFRQ;

				public float getPORFRQ () {
					return this.PORFRQ;
				}

				public Boolean PORFRQIsNullable(){
				    return false;
				}
				public Boolean PORFRQIsKey(){
				    return false;
				}
				public Integer PORFRQLength(){
				    return 3;
				}
				public Integer PORFRQPrecision(){
				    return 0;
				}
				public String PORFRQDefault(){
				
					return "";
				
				}
				public String PORFRQComment(){
				
				    return "";
				
				}
				public String PORFRQPattern(){
				
					return "";
				
				}
				public String PORFRQOriginalDbColumnName(){
				
					return "PORFRQ";
				
				}

				
			    public float POLEAD;

				public float getPOLEAD () {
					return this.POLEAD;
				}

				public Boolean POLEADIsNullable(){
				    return false;
				}
				public Boolean POLEADIsKey(){
				    return false;
				}
				public Integer POLEADLength(){
				    return 3;
				}
				public Integer POLEADPrecision(){
				    return 0;
				}
				public String POLEADDefault(){
				
					return "";
				
				}
				public String POLEADComment(){
				
				    return "";
				
				}
				public String POLEADPattern(){
				
					return "";
				
				}
				public String POLEADOriginalDbColumnName(){
				
					return "POLEAD";
				
				}

				
			    public String POORIG;

				public String getPOORIG () {
					return this.POORIG;
				}

				public Boolean POORIGIsNullable(){
				    return false;
				}
				public Boolean POORIGIsKey(){
				    return false;
				}
				public Integer POORIGLength(){
				    return 20;
				}
				public Integer POORIGPrecision(){
				    return 0;
				}
				public String POORIGDefault(){
				
					return "";
				
				}
				public String POORIGComment(){
				
				    return "";
				
				}
				public String POORIGPattern(){
				
					return "";
				
				}
				public String POORIGOriginalDbColumnName(){
				
					return "POORIG";
				
				}

				
			    public String PONOT1;

				public String getPONOT1 () {
					return this.PONOT1;
				}

				public Boolean PONOT1IsNullable(){
				    return false;
				}
				public Boolean PONOT1IsKey(){
				    return false;
				}
				public Integer PONOT1Length(){
				    return 50;
				}
				public Integer PONOT1Precision(){
				    return 0;
				}
				public String PONOT1Default(){
				
					return "";
				
				}
				public String PONOT1Comment(){
				
				    return "";
				
				}
				public String PONOT1Pattern(){
				
					return "";
				
				}
				public String PONOT1OriginalDbColumnName(){
				
					return "PONOT1";
				
				}

				
			    public String PONOT2;

				public String getPONOT2 () {
					return this.PONOT2;
				}

				public Boolean PONOT2IsNullable(){
				    return false;
				}
				public Boolean PONOT2IsKey(){
				    return false;
				}
				public Integer PONOT2Length(){
				    return 50;
				}
				public Integer PONOT2Precision(){
				    return 0;
				}
				public String PONOT2Default(){
				
					return "";
				
				}
				public String PONOT2Comment(){
				
				    return "";
				
				}
				public String PONOT2Pattern(){
				
					return "";
				
				}
				public String PONOT2OriginalDbColumnName(){
				
					return "PONOT2";
				
				}

				
			    public String PONOT3;

				public String getPONOT3 () {
					return this.PONOT3;
				}

				public Boolean PONOT3IsNullable(){
				    return false;
				}
				public Boolean PONOT3IsKey(){
				    return false;
				}
				public Integer PONOT3Length(){
				    return 50;
				}
				public Integer PONOT3Precision(){
				    return 0;
				}
				public String PONOT3Default(){
				
					return "";
				
				}
				public String PONOT3Comment(){
				
				    return "";
				
				}
				public String PONOT3Pattern(){
				
					return "";
				
				}
				public String PONOT3OriginalDbColumnName(){
				
					return "PONOT3";
				
				}

				
			    public BigDecimal POCOST;

				public BigDecimal getPOCOST () {
					return this.POCOST;
				}

				public Boolean POCOSTIsNullable(){
				    return false;
				}
				public Boolean POCOSTIsKey(){
				    return false;
				}
				public Integer POCOSTLength(){
				    return 9;
				}
				public Integer POCOSTPrecision(){
				    return 2;
				}
				public String POCOSTDefault(){
				
					return "";
				
				}
				public String POCOSTComment(){
				
				    return "";
				
				}
				public String POCOSTPattern(){
				
					return "";
				
				}
				public String POCOSTOriginalDbColumnName(){
				
					return "POCOST";
				
				}

				
			    public BigDecimal POVAT;

				public BigDecimal getPOVAT () {
					return this.POVAT;
				}

				public Boolean POVATIsNullable(){
				    return false;
				}
				public Boolean POVATIsKey(){
				    return false;
				}
				public Integer POVATLength(){
				    return 9;
				}
				public Integer POVATPrecision(){
				    return 2;
				}
				public String POVATDefault(){
				
					return "";
				
				}
				public String POVATComment(){
				
				    return "";
				
				}
				public String POVATPattern(){
				
					return "";
				
				}
				public String POVATOriginalDbColumnName(){
				
					return "POVAT";
				
				}

				
			    public BigDecimal PORETL;

				public BigDecimal getPORETL () {
					return this.PORETL;
				}

				public Boolean PORETLIsNullable(){
				    return false;
				}
				public Boolean PORETLIsKey(){
				    return false;
				}
				public Integer PORETLLength(){
				    return 9;
				}
				public Integer PORETLPrecision(){
				    return 2;
				}
				public String PORETLDefault(){
				
					return "";
				
				}
				public String PORETLComment(){
				
				    return "";
				
				}
				public String PORETLPattern(){
				
					return "";
				
				}
				public String PORETLOriginalDbColumnName(){
				
					return "PORETL";
				
				}

				
			    public BigDecimal POCASE;

				public BigDecimal getPOCASE () {
					return this.POCASE;
				}

				public Boolean POCASEIsNullable(){
				    return false;
				}
				public Boolean POCASEIsKey(){
				    return false;
				}
				public Integer POCASELength(){
				    return 8;
				}
				public Integer POCASEPrecision(){
				    return 2;
				}
				public String POCASEDefault(){
				
					return "";
				
				}
				public String POCASEComment(){
				
				    return "";
				
				}
				public String POCASEPattern(){
				
					return "";
				
				}
				public String POCASEOriginalDbColumnName(){
				
					return "POCASE";
				
				}

				
			    public BigDecimal POUNTS;

				public BigDecimal getPOUNTS () {
					return this.POUNTS;
				}

				public Boolean POUNTSIsNullable(){
				    return false;
				}
				public Boolean POUNTSIsKey(){
				    return false;
				}
				public Integer POUNTSLength(){
				    return 9;
				}
				public Integer POUNTSPrecision(){
				    return 2;
				}
				public String POUNTSDefault(){
				
					return "";
				
				}
				public String POUNTSComment(){
				
				    return "";
				
				}
				public String POUNTSPattern(){
				
					return "";
				
				}
				public String POUNTSOriginalDbColumnName(){
				
					return "POUNTS";
				
				}

				
			    public BigDecimal POWGHT;

				public BigDecimal getPOWGHT () {
					return this.POWGHT;
				}

				public Boolean POWGHTIsNullable(){
				    return false;
				}
				public Boolean POWGHTIsKey(){
				    return false;
				}
				public Integer POWGHTLength(){
				    return 9;
				}
				public Integer POWGHTPrecision(){
				    return 2;
				}
				public String POWGHTDefault(){
				
					return "";
				
				}
				public String POWGHTComment(){
				
				    return "";
				
				}
				public String POWGHTPattern(){
				
					return "";
				
				}
				public String POWGHTOriginalDbColumnName(){
				
					return "POWGHT";
				
				}

				
			    public BigDecimal POTARP;

				public BigDecimal getPOTARP () {
					return this.POTARP;
				}

				public Boolean POTARPIsNullable(){
				    return false;
				}
				public Boolean POTARPIsKey(){
				    return false;
				}
				public Integer POTARPLength(){
				    return 5;
				}
				public Integer POTARPPrecision(){
				    return 2;
				}
				public String POTARPDefault(){
				
					return "";
				
				}
				public String POTARPComment(){
				
				    return "";
				
				}
				public String POTARPPattern(){
				
					return "";
				
				}
				public String POTARPOriginalDbColumnName(){
				
					return "POTARP";
				
				}

				
			    public BigDecimal POSTOP;

				public BigDecimal getPOSTOP () {
					return this.POSTOP;
				}

				public Boolean POSTOPIsNullable(){
				    return false;
				}
				public Boolean POSTOPIsKey(){
				    return false;
				}
				public Integer POSTOPLength(){
				    return 5;
				}
				public Integer POSTOPPrecision(){
				    return 2;
				}
				public String POSTOPDefault(){
				
					return "";
				
				}
				public String POSTOPComment(){
				
				    return "";
				
				}
				public String POSTOPPattern(){
				
					return "";
				
				}
				public String POSTOPOriginalDbColumnName(){
				
					return "POSTOP";
				
				}

				
			    public BigDecimal POSKID;

				public BigDecimal getPOSKID () {
					return this.POSKID;
				}

				public Boolean POSKIDIsNullable(){
				    return false;
				}
				public Boolean POSKIDIsKey(){
				    return false;
				}
				public Integer POSKIDLength(){
				    return 5;
				}
				public Integer POSKIDPrecision(){
				    return 2;
				}
				public String POSKIDDefault(){
				
					return "";
				
				}
				public String POSKIDComment(){
				
				    return "";
				
				}
				public String POSKIDPattern(){
				
					return "";
				
				}
				public String POSKIDOriginalDbColumnName(){
				
					return "POSKID";
				
				}

				
			    public BigDecimal POOTHN;

				public BigDecimal getPOOTHN () {
					return this.POOTHN;
				}

				public Boolean POOTHNIsNullable(){
				    return false;
				}
				public Boolean POOTHNIsKey(){
				    return false;
				}
				public Integer POOTHNLength(){
				    return 5;
				}
				public Integer POOTHNPrecision(){
				    return 2;
				}
				public String POOTHNDefault(){
				
					return "";
				
				}
				public String POOTHNComment(){
				
				    return "";
				
				}
				public String POOTHNPattern(){
				
					return "";
				
				}
				public String POOTHNOriginalDbColumnName(){
				
					return "POOTHN";
				
				}

				
			    public BigDecimal POOTHP;

				public BigDecimal getPOOTHP () {
					return this.POOTHP;
				}

				public Boolean POOTHPIsNullable(){
				    return false;
				}
				public Boolean POOTHPIsKey(){
				    return false;
				}
				public Integer POOTHPLength(){
				    return 5;
				}
				public Integer POOTHPPrecision(){
				    return 3;
				}
				public String POOTHPDefault(){
				
					return "";
				
				}
				public String POOTHPComment(){
				
				    return "";
				
				}
				public String POOTHPPattern(){
				
					return "";
				
				}
				public String POOTHPOriginalDbColumnName(){
				
					return "POOTHP";
				
				}

				
			    public BigDecimal POBTCH;

				public BigDecimal getPOBTCH () {
					return this.POBTCH;
				}

				public Boolean POBTCHIsNullable(){
				    return false;
				}
				public Boolean POBTCHIsKey(){
				    return false;
				}
				public Integer POBTCHLength(){
				    return 7;
				}
				public Integer POBTCHPrecision(){
				    return 0;
				}
				public String POBTCHDefault(){
				
					return "";
				
				}
				public String POBTCHComment(){
				
				    return "";
				
				}
				public String POBTCHPattern(){
				
					return "";
				
				}
				public String POBTCHOriginalDbColumnName(){
				
					return "POBTCH";
				
				}

				
			    public BigDecimal PORRET;

				public BigDecimal getPORRET () {
					return this.PORRET;
				}

				public Boolean PORRETIsNullable(){
				    return false;
				}
				public Boolean PORRETIsKey(){
				    return false;
				}
				public Integer PORRETLength(){
				    return 9;
				}
				public Integer PORRETPrecision(){
				    return 2;
				}
				public String PORRETDefault(){
				
					return "";
				
				}
				public String PORRETComment(){
				
				    return "";
				
				}
				public String PORRETPattern(){
				
					return "";
				
				}
				public String PORRETOriginalDbColumnName(){
				
					return "PORRET";
				
				}

				
			    public BigDecimal PORVAT;

				public BigDecimal getPORVAT () {
					return this.PORVAT;
				}

				public Boolean PORVATIsNullable(){
				    return false;
				}
				public Boolean PORVATIsKey(){
				    return false;
				}
				public Integer PORVATLength(){
				    return 9;
				}
				public Integer PORVATPrecision(){
				    return 2;
				}
				public String PORVATDefault(){
				
					return "";
				
				}
				public String PORVATComment(){
				
				    return "";
				
				}
				public String PORVATPattern(){
				
					return "";
				
				}
				public String PORVATOriginalDbColumnName(){
				
					return "PORVAT";
				
				}

				
			    public BigDecimal PORCST;

				public BigDecimal getPORCST () {
					return this.PORCST;
				}

				public Boolean PORCSTIsNullable(){
				    return false;
				}
				public Boolean PORCSTIsKey(){
				    return false;
				}
				public Integer PORCSTLength(){
				    return 9;
				}
				public Integer PORCSTPrecision(){
				    return 2;
				}
				public String PORCSTDefault(){
				
					return "";
				
				}
				public String PORCSTComment(){
				
				    return "";
				
				}
				public String PORCSTPattern(){
				
					return "";
				
				}
				public String PORCSTOriginalDbColumnName(){
				
					return "PORCST";
				
				}

				
			    public BigDecimal POTPLT;

				public BigDecimal getPOTPLT () {
					return this.POTPLT;
				}

				public Boolean POTPLTIsNullable(){
				    return false;
				}
				public Boolean POTPLTIsKey(){
				    return false;
				}
				public Integer POTPLTLength(){
				    return 7;
				}
				public Integer POTPLTPrecision(){
				    return 2;
				}
				public String POTPLTDefault(){
				
					return "";
				
				}
				public String POTPLTComment(){
				
				    return "";
				
				}
				public String POTPLTPattern(){
				
					return "";
				
				}
				public String POTPLTOriginalDbColumnName(){
				
					return "POTPLT";
				
				}

				
			    public BigDecimal POCUBE;

				public BigDecimal getPOCUBE () {
					return this.POCUBE;
				}

				public Boolean POCUBEIsNullable(){
				    return false;
				}
				public Boolean POCUBEIsKey(){
				    return false;
				}
				public Integer POCUBELength(){
				    return 13;
				}
				public Integer POCUBEPrecision(){
				    return 3;
				}
				public String POCUBEDefault(){
				
					return "";
				
				}
				public String POCUBEComment(){
				
				    return "";
				
				}
				public String POCUBEPattern(){
				
					return "";
				
				}
				public String POCUBEOriginalDbColumnName(){
				
					return "POCUBE";
				
				}

				
			    public BigDecimal POPDCN;

				public BigDecimal getPOPDCN () {
					return this.POPDCN;
				}

				public Boolean POPDCNIsNullable(){
				    return false;
				}
				public Boolean POPDCNIsKey(){
				    return false;
				}
				public Integer POPDCNLength(){
				    return 1;
				}
				public Integer POPDCNPrecision(){
				    return 0;
				}
				public String POPDCNDefault(){
				
					return "";
				
				}
				public String POPDCNComment(){
				
				    return "";
				
				}
				public String POPDCNPattern(){
				
					return "";
				
				}
				public String POPDCNOriginalDbColumnName(){
				
					return "POPDCN";
				
				}

				
			    public float POPDWN;

				public float getPOPDWN () {
					return this.POPDWN;
				}

				public Boolean POPDWNIsNullable(){
				    return false;
				}
				public Boolean POPDWNIsKey(){
				    return false;
				}
				public Integer POPDWNLength(){
				    return 6;
				}
				public Integer POPDWNPrecision(){
				    return 0;
				}
				public String POPDWNDefault(){
				
					return "";
				
				}
				public String POPDWNComment(){
				
				    return "";
				
				}
				public String POPDWNPattern(){
				
					return "";
				
				}
				public String POPDWNOriginalDbColumnName(){
				
					return "POPDWN";
				
				}

				
			    public float SHPNUM;

				public float getSHPNUM () {
					return this.SHPNUM;
				}

				public Boolean SHPNUMIsNullable(){
				    return false;
				}
				public Boolean SHPNUMIsKey(){
				    return false;
				}
				public Integer SHPNUMLength(){
				    return 2;
				}
				public Integer SHPNUMPrecision(){
				    return 0;
				}
				public String SHPNUMDefault(){
				
					return "";
				
				}
				public String SHPNUMComment(){
				
				    return "";
				
				}
				public String SHPNUMPattern(){
				
					return "";
				
				}
				public String SHPNUMOriginalDbColumnName(){
				
					return "SHPNUM";
				
				}

				
			    public BigDecimal POPYCN;

				public BigDecimal getPOPYCN () {
					return this.POPYCN;
				}

				public Boolean POPYCNIsNullable(){
				    return false;
				}
				public Boolean POPYCNIsKey(){
				    return false;
				}
				public Integer POPYCNLength(){
				    return 1;
				}
				public Integer POPYCNPrecision(){
				    return 0;
				}
				public String POPYCNDefault(){
				
					return "";
				
				}
				public String POPYCNComment(){
				
				    return "";
				
				}
				public String POPYCNPattern(){
				
					return "";
				
				}
				public String POPYCNOriginalDbColumnName(){
				
					return "POPYCN";
				
				}

				
			    public float POPYDT;

				public float getPOPYDT () {
					return this.POPYDT;
				}

				public Boolean POPYDTIsNullable(){
				    return false;
				}
				public Boolean POPYDTIsKey(){
				    return false;
				}
				public Integer POPYDTLength(){
				    return 6;
				}
				public Integer POPYDTPrecision(){
				    return 0;
				}
				public String POPYDTDefault(){
				
					return "";
				
				}
				public String POPYDTComment(){
				
				    return "";
				
				}
				public String POPYDTPattern(){
				
					return "";
				
				}
				public String POPYDTOriginalDbColumnName(){
				
					return "POPYDT";
				
				}

				
			    public String POBYTP;

				public String getPOBYTP () {
					return this.POBYTP;
				}

				public Boolean POBYTPIsNullable(){
				    return false;
				}
				public Boolean POBYTPIsKey(){
				    return false;
				}
				public Integer POBYTPLength(){
				    return 1;
				}
				public Integer POBYTPPrecision(){
				    return 0;
				}
				public String POBYTPDefault(){
				
					return "";
				
				}
				public String POBYTPComment(){
				
				    return "";
				
				}
				public String POBYTPPattern(){
				
					return "";
				
				}
				public String POBYTPOriginalDbColumnName(){
				
					return "POBYTP";
				
				}

				
			    public BigDecimal POMALS;

				public BigDecimal getPOMALS () {
					return this.POMALS;
				}

				public Boolean POMALSIsNullable(){
				    return false;
				}
				public Boolean POMALSIsKey(){
				    return false;
				}
				public Integer POMALSLength(){
				    return 9;
				}
				public Integer POMALSPrecision(){
				    return 2;
				}
				public String POMALSDefault(){
				
					return "";
				
				}
				public String POMALSComment(){
				
				    return "";
				
				}
				public String POMALSPattern(){
				
					return "";
				
				}
				public String POMALSOriginalDbColumnName(){
				
					return "POMALS";
				
				}

				
			    public BigDecimal POMALV;

				public BigDecimal getPOMALV () {
					return this.POMALV;
				}

				public Boolean POMALVIsNullable(){
				    return false;
				}
				public Boolean POMALVIsKey(){
				    return false;
				}
				public Integer POMALVLength(){
				    return 9;
				}
				public Integer POMALVPrecision(){
				    return 2;
				}
				public String POMALVDefault(){
				
					return "";
				
				}
				public String POMALVComment(){
				
				    return "";
				
				}
				public String POMALVPattern(){
				
					return "";
				
				}
				public String POMALVOriginalDbColumnName(){
				
					return "POMALV";
				
				}

				
			    public float POMSPO;

				public float getPOMSPO () {
					return this.POMSPO;
				}

				public Boolean POMSPOIsNullable(){
				    return false;
				}
				public Boolean POMSPOIsKey(){
				    return false;
				}
				public Integer POMSPOLength(){
				    return 6;
				}
				public Integer POMSPOPrecision(){
				    return 0;
				}
				public String POMSPODefault(){
				
					return "";
				
				}
				public String POMSPOComment(){
				
				    return "";
				
				}
				public String POMSPOPattern(){
				
					return "";
				
				}
				public String POMSPOOriginalDbColumnName(){
				
					return "POMSPO";
				
				}

				
			    public float POMSBO;

				public float getPOMSBO () {
					return this.POMSBO;
				}

				public Boolean POMSBOIsNullable(){
				    return false;
				}
				public Boolean POMSBOIsKey(){
				    return false;
				}
				public Integer POMSBOLength(){
				    return 2;
				}
				public Integer POMSBOPrecision(){
				    return 0;
				}
				public String POMSBODefault(){
				
					return "";
				
				}
				public String POMSBOComment(){
				
				    return "";
				
				}
				public String POMSBOPattern(){
				
					return "";
				
				}
				public String POMSBOOriginalDbColumnName(){
				
					return "POMSBO";
				
				}

				
			    public float POLOAD;

				public float getPOLOAD () {
					return this.POLOAD;
				}

				public Boolean POLOADIsNullable(){
				    return false;
				}
				public Boolean POLOADIsKey(){
				    return false;
				}
				public Integer POLOADLength(){
				    return 4;
				}
				public Integer POLOADPrecision(){
				    return 0;
				}
				public String POLOADDefault(){
				
					return "";
				
				}
				public String POLOADComment(){
				
				    return "";
				
				}
				public String POLOADPattern(){
				
					return "";
				
				}
				public String POLOADOriginalDbColumnName(){
				
					return "POLOAD";
				
				}

				
			    public BigDecimal POMCRT;

				public BigDecimal getPOMCRT () {
					return this.POMCRT;
				}

				public Boolean POMCRTIsNullable(){
				    return false;
				}
				public Boolean POMCRTIsKey(){
				    return false;
				}
				public Integer POMCRTLength(){
				    return 15;
				}
				public Integer POMCRTPrecision(){
				    return 8;
				}
				public String POMCRTDefault(){
				
					return "";
				
				}
				public String POMCRTComment(){
				
				    return "";
				
				}
				public String POMCRTPattern(){
				
					return "";
				
				}
				public String POMCRTOriginalDbColumnName(){
				
					return "POMCRT";
				
				}

				
			    public BigDecimal POMCCN;

				public BigDecimal getPOMCCN () {
					return this.POMCCN;
				}

				public Boolean POMCCNIsNullable(){
				    return false;
				}
				public Boolean POMCCNIsKey(){
				    return false;
				}
				public Integer POMCCNLength(){
				    return 1;
				}
				public Integer POMCCNPrecision(){
				    return 0;
				}
				public String POMCCNDefault(){
				
					return "";
				
				}
				public String POMCCNComment(){
				
				    return "";
				
				}
				public String POMCCNPattern(){
				
					return "";
				
				}
				public String POMCCNOriginalDbColumnName(){
				
					return "POMCCN";
				
				}

				
			    public BigDecimal POMCDT;

				public BigDecimal getPOMCDT () {
					return this.POMCDT;
				}

				public Boolean POMCDTIsNullable(){
				    return false;
				}
				public Boolean POMCDTIsKey(){
				    return false;
				}
				public Integer POMCDTLength(){
				    return 6;
				}
				public Integer POMCDTPrecision(){
				    return 0;
				}
				public String POMCDTDefault(){
				
					return "";
				
				}
				public String POMCDTComment(){
				
				    return "";
				
				}
				public String POMCDTPattern(){
				
					return "";
				
				}
				public String POMCDTOriginalDbColumnName(){
				
					return "POMCDT";
				
				}

				
			    public String POQCKE;

				public String getPOQCKE () {
					return this.POQCKE;
				}

				public Boolean POQCKEIsNullable(){
				    return false;
				}
				public Boolean POQCKEIsKey(){
				    return false;
				}
				public Integer POQCKELength(){
				    return 1;
				}
				public Integer POQCKEPrecision(){
				    return 0;
				}
				public String POQCKEDefault(){
				
					return "";
				
				}
				public String POQCKEComment(){
				
				    return "";
				
				}
				public String POQCKEPattern(){
				
					return "";
				
				}
				public String POQCKEOriginalDbColumnName(){
				
					return "POQCKE";
				
				}

				
			    public String POMTYP;

				public String getPOMTYP () {
					return this.POMTYP;
				}

				public Boolean POMTYPIsNullable(){
				    return false;
				}
				public Boolean POMTYPIsKey(){
				    return false;
				}
				public Integer POMTYPLength(){
				    return 1;
				}
				public Integer POMTYPPrecision(){
				    return 0;
				}
				public String POMTYPDefault(){
				
					return "";
				
				}
				public String POMTYPComment(){
				
				    return "";
				
				}
				public String POMTYPPattern(){
				
					return "";
				
				}
				public String POMTYPOriginalDbColumnName(){
				
					return "POMTYP";
				
				}

				
			    public String PO850F;

				public String getPO850F () {
					return this.PO850F;
				}

				public Boolean PO850FIsNullable(){
				    return false;
				}
				public Boolean PO850FIsKey(){
				    return false;
				}
				public Integer PO850FLength(){
				    return 1;
				}
				public Integer PO850FPrecision(){
				    return 0;
				}
				public String PO850FDefault(){
				
					return "";
				
				}
				public String PO850FComment(){
				
				    return "";
				
				}
				public String PO850FPattern(){
				
					return "";
				
				}
				public String PO850FOriginalDbColumnName(){
				
					return "PO850F";
				
				}

				
			    public String PO860F;

				public String getPO860F () {
					return this.PO860F;
				}

				public Boolean PO860FIsNullable(){
				    return false;
				}
				public Boolean PO860FIsKey(){
				    return false;
				}
				public Integer PO860FLength(){
				    return 1;
				}
				public Integer PO860FPrecision(){
				    return 0;
				}
				public String PO860FDefault(){
				
					return "";
				
				}
				public String PO860FComment(){
				
				    return "";
				
				}
				public String PO860FPattern(){
				
					return "";
				
				}
				public String PO860FOriginalDbColumnName(){
				
					return "PO860F";
				
				}

				
			    public String POTPID;

				public String getPOTPID () {
					return this.POTPID;
				}

				public Boolean POTPIDIsNullable(){
				    return false;
				}
				public Boolean POTPIDIsKey(){
				    return false;
				}
				public Integer POTPIDLength(){
				    return 1;
				}
				public Integer POTPIDPrecision(){
				    return 0;
				}
				public String POTPIDDefault(){
				
					return "";
				
				}
				public String POTPIDComment(){
				
				    return "";
				
				}
				public String POTPIDPattern(){
				
					return "";
				
				}
				public String POTPIDOriginalDbColumnName(){
				
					return "POTPID";
				
				}

				
			    public BigDecimal POBSCN;

				public BigDecimal getPOBSCN () {
					return this.POBSCN;
				}

				public Boolean POBSCNIsNullable(){
				    return false;
				}
				public Boolean POBSCNIsKey(){
				    return false;
				}
				public Integer POBSCNLength(){
				    return 1;
				}
				public Integer POBSCNPrecision(){
				    return 0;
				}
				public String POBSCNDefault(){
				
					return "";
				
				}
				public String POBSCNComment(){
				
				    return "";
				
				}
				public String POBSCNPattern(){
				
					return "";
				
				}
				public String POBSCNOriginalDbColumnName(){
				
					return "POBSCN";
				
				}

				
			    public float POBSDT;

				public float getPOBSDT () {
					return this.POBSDT;
				}

				public Boolean POBSDTIsNullable(){
				    return false;
				}
				public Boolean POBSDTIsKey(){
				    return false;
				}
				public Integer POBSDTLength(){
				    return 6;
				}
				public Integer POBSDTPrecision(){
				    return 0;
				}
				public String POBSDTDefault(){
				
					return "";
				
				}
				public String POBSDTComment(){
				
				    return "";
				
				}
				public String POBSDTPattern(){
				
					return "";
				
				}
				public String POBSDTOriginalDbColumnName(){
				
					return "POBSDT";
				
				}

				
			    public BigDecimal POASCN;

				public BigDecimal getPOASCN () {
					return this.POASCN;
				}

				public Boolean POASCNIsNullable(){
				    return false;
				}
				public Boolean POASCNIsKey(){
				    return false;
				}
				public Integer POASCNLength(){
				    return 1;
				}
				public Integer POASCNPrecision(){
				    return 0;
				}
				public String POASCNDefault(){
				
					return "";
				
				}
				public String POASCNComment(){
				
				    return "";
				
				}
				public String POASCNPattern(){
				
					return "";
				
				}
				public String POASCNOriginalDbColumnName(){
				
					return "POASCN";
				
				}

				
			    public float POASDT;

				public float getPOASDT () {
					return this.POASDT;
				}

				public Boolean POASDTIsNullable(){
				    return false;
				}
				public Boolean POASDTIsKey(){
				    return false;
				}
				public Integer POASDTLength(){
				    return 6;
				}
				public Integer POASDTPrecision(){
				    return 0;
				}
				public String POASDTDefault(){
				
					return "";
				
				}
				public String POASDTComment(){
				
				    return "";
				
				}
				public String POASDTPattern(){
				
					return "";
				
				}
				public String POASDTOriginalDbColumnName(){
				
					return "POASDT";
				
				}

				
			    public String POCODF;

				public String getPOCODF () {
					return this.POCODF;
				}

				public Boolean POCODFIsNullable(){
				    return false;
				}
				public Boolean POCODFIsKey(){
				    return false;
				}
				public Integer POCODFLength(){
				    return 3;
				}
				public Integer POCODFPrecision(){
				    return 0;
				}
				public String POCODFDefault(){
				
					return "";
				
				}
				public String POCODFComment(){
				
				    return "";
				
				}
				public String POCODFPattern(){
				
					return "";
				
				}
				public String POCODFOriginalDbColumnName(){
				
					return "POCODF";
				
				}

				
			    public String POCODT;

				public String getPOCODT () {
					return this.POCODT;
				}

				public Boolean POCODTIsNullable(){
				    return false;
				}
				public Boolean POCODTIsKey(){
				    return false;
				}
				public Integer POCODTLength(){
				    return 3;
				}
				public Integer POCODTPrecision(){
				    return 0;
				}
				public String POCODTDefault(){
				
					return "";
				
				}
				public String POCODTComment(){
				
				    return "";
				
				}
				public String POCODTPattern(){
				
					return "";
				
				}
				public String POCODTOriginalDbColumnName(){
				
					return "POCODT";
				
				}

				
			    public String POCVTP;

				public String getPOCVTP () {
					return this.POCVTP;
				}

				public Boolean POCVTPIsNullable(){
				    return false;
				}
				public Boolean POCVTPIsKey(){
				    return false;
				}
				public Integer POCVTPLength(){
				    return 3;
				}
				public Integer POCVTPPrecision(){
				    return 0;
				}
				public String POCVTPDefault(){
				
					return "";
				
				}
				public String POCVTPComment(){
				
				    return "";
				
				}
				public String POCVTPPattern(){
				
					return "";
				
				}
				public String POCVTPOriginalDbColumnName(){
				
					return "POCVTP";
				
				}

				
			    public String POCVMD;

				public String getPOCVMD () {
					return this.POCVMD;
				}

				public Boolean POCVMDIsNullable(){
				    return false;
				}
				public Boolean POCVMDIsKey(){
				    return false;
				}
				public Integer POCVMDLength(){
				    return 1;
				}
				public Integer POCVMDPrecision(){
				    return 0;
				}
				public String POCVMDDefault(){
				
					return "";
				
				}
				public String POCVMDComment(){
				
				    return "";
				
				}
				public String POCVMDPattern(){
				
					return "";
				
				}
				public String POCVMDOriginalDbColumnName(){
				
					return "POCVMD";
				
				}

				
			    public String POMCPY;

				public String getPOMCPY () {
					return this.POMCPY;
				}

				public Boolean POMCPYIsNullable(){
				    return false;
				}
				public Boolean POMCPYIsKey(){
				    return false;
				}
				public Integer POMCPYLength(){
				    return 1;
				}
				public Integer POMCPYPrecision(){
				    return 0;
				}
				public String POMCPYDefault(){
				
					return "";
				
				}
				public String POMCPYComment(){
				
				    return "";
				
				}
				public String POMCPYPattern(){
				
					return "";
				
				}
				public String POMCPYOriginalDbColumnName(){
				
					return "POMCPY";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			        this.PONUMB = dis.readFloat();
					
			        this.POBON = dis.readFloat();
					
			        this.POVNUM = dis.readFloat();
					
			        this.POTRMS = dis.readFloat();
					
					this.POTIND = readString(dis);
					
					this.POSTAT = readString(dis);
					
					this.POTYPE = readString(dis);
					
					this.PODEST = readString(dis);
					
						this.POSTOR = (BigDecimal) dis.readObject();
					
					this.POADYN = readString(dis);
					
					this.PODMTH = readString(dis);
					
					this.POALBO = readString(dis);
					
					this.POCONF = readString(dis);
					
					this.POPHON = readString(dis);
					
					this.POBUYR = readString(dis);
					
			        this.PODPT = dis.readFloat();
					
			        this.POSDPT = dis.readFloat();
					
			        this.POTHER = dis.readFloat();
					
					this.POFPCD = readString(dis);
					
					this.POFOB = readString(dis);
					
					this.POSHP1 = readString(dis);
					
					this.POSHP2 = readString(dis);
					
					this.POSHPP = readString(dis);
					
					this.POSHPC = readString(dis);
					
						this.POECEN = (BigDecimal) dis.readObject();
					
			        this.POEDAT = dis.readFloat();
					
						this.POSCEN = (BigDecimal) dis.readObject();
					
			        this.POSDAT = dis.readFloat();
					
						this.POCCEN = (BigDecimal) dis.readObject();
					
			        this.POCDAT = dis.readFloat();
					
						this.PORCEN = (BigDecimal) dis.readObject();
					
			        this.PORDAT = dis.readFloat();
					
						this.POLCCN = (BigDecimal) dis.readObject();
					
			        this.POLCHG = dis.readFloat();
					
			        this.PORFRQ = dis.readFloat();
					
			        this.POLEAD = dis.readFloat();
					
					this.POORIG = readString(dis);
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
						this.POCOST = (BigDecimal) dis.readObject();
					
						this.POVAT = (BigDecimal) dis.readObject();
					
						this.PORETL = (BigDecimal) dis.readObject();
					
						this.POCASE = (BigDecimal) dis.readObject();
					
						this.POUNTS = (BigDecimal) dis.readObject();
					
						this.POWGHT = (BigDecimal) dis.readObject();
					
						this.POTARP = (BigDecimal) dis.readObject();
					
						this.POSTOP = (BigDecimal) dis.readObject();
					
						this.POSKID = (BigDecimal) dis.readObject();
					
						this.POOTHN = (BigDecimal) dis.readObject();
					
						this.POOTHP = (BigDecimal) dis.readObject();
					
						this.POBTCH = (BigDecimal) dis.readObject();
					
						this.PORRET = (BigDecimal) dis.readObject();
					
						this.PORVAT = (BigDecimal) dis.readObject();
					
						this.PORCST = (BigDecimal) dis.readObject();
					
						this.POTPLT = (BigDecimal) dis.readObject();
					
						this.POCUBE = (BigDecimal) dis.readObject();
					
						this.POPDCN = (BigDecimal) dis.readObject();
					
			        this.POPDWN = dis.readFloat();
					
			        this.SHPNUM = dis.readFloat();
					
						this.POPYCN = (BigDecimal) dis.readObject();
					
			        this.POPYDT = dis.readFloat();
					
					this.POBYTP = readString(dis);
					
						this.POMALS = (BigDecimal) dis.readObject();
					
						this.POMALV = (BigDecimal) dis.readObject();
					
			        this.POMSPO = dis.readFloat();
					
			        this.POMSBO = dis.readFloat();
					
			        this.POLOAD = dis.readFloat();
					
						this.POMCRT = (BigDecimal) dis.readObject();
					
						this.POMCCN = (BigDecimal) dis.readObject();
					
						this.POMCDT = (BigDecimal) dis.readObject();
					
					this.POQCKE = readString(dis);
					
					this.POMTYP = readString(dis);
					
					this.PO850F = readString(dis);
					
					this.PO860F = readString(dis);
					
					this.POTPID = readString(dis);
					
						this.POBSCN = (BigDecimal) dis.readObject();
					
			        this.POBSDT = dis.readFloat();
					
						this.POASCN = (BigDecimal) dis.readObject();
					
			        this.POASDT = dis.readFloat();
					
					this.POCODF = readString(dis);
					
					this.POCODT = readString(dis);
					
					this.POCVTP = readString(dis);
					
					this.POCVMD = readString(dis);
					
					this.POMCPY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			        this.PONUMB = dis.readFloat();
					
			        this.POBON = dis.readFloat();
					
			        this.POVNUM = dis.readFloat();
					
			        this.POTRMS = dis.readFloat();
					
					this.POTIND = readString(dis);
					
					this.POSTAT = readString(dis);
					
					this.POTYPE = readString(dis);
					
					this.PODEST = readString(dis);
					
						this.POSTOR = (BigDecimal) dis.readObject();
					
					this.POADYN = readString(dis);
					
					this.PODMTH = readString(dis);
					
					this.POALBO = readString(dis);
					
					this.POCONF = readString(dis);
					
					this.POPHON = readString(dis);
					
					this.POBUYR = readString(dis);
					
			        this.PODPT = dis.readFloat();
					
			        this.POSDPT = dis.readFloat();
					
			        this.POTHER = dis.readFloat();
					
					this.POFPCD = readString(dis);
					
					this.POFOB = readString(dis);
					
					this.POSHP1 = readString(dis);
					
					this.POSHP2 = readString(dis);
					
					this.POSHPP = readString(dis);
					
					this.POSHPC = readString(dis);
					
						this.POECEN = (BigDecimal) dis.readObject();
					
			        this.POEDAT = dis.readFloat();
					
						this.POSCEN = (BigDecimal) dis.readObject();
					
			        this.POSDAT = dis.readFloat();
					
						this.POCCEN = (BigDecimal) dis.readObject();
					
			        this.POCDAT = dis.readFloat();
					
						this.PORCEN = (BigDecimal) dis.readObject();
					
			        this.PORDAT = dis.readFloat();
					
						this.POLCCN = (BigDecimal) dis.readObject();
					
			        this.POLCHG = dis.readFloat();
					
			        this.PORFRQ = dis.readFloat();
					
			        this.POLEAD = dis.readFloat();
					
					this.POORIG = readString(dis);
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
						this.POCOST = (BigDecimal) dis.readObject();
					
						this.POVAT = (BigDecimal) dis.readObject();
					
						this.PORETL = (BigDecimal) dis.readObject();
					
						this.POCASE = (BigDecimal) dis.readObject();
					
						this.POUNTS = (BigDecimal) dis.readObject();
					
						this.POWGHT = (BigDecimal) dis.readObject();
					
						this.POTARP = (BigDecimal) dis.readObject();
					
						this.POSTOP = (BigDecimal) dis.readObject();
					
						this.POSKID = (BigDecimal) dis.readObject();
					
						this.POOTHN = (BigDecimal) dis.readObject();
					
						this.POOTHP = (BigDecimal) dis.readObject();
					
						this.POBTCH = (BigDecimal) dis.readObject();
					
						this.PORRET = (BigDecimal) dis.readObject();
					
						this.PORVAT = (BigDecimal) dis.readObject();
					
						this.PORCST = (BigDecimal) dis.readObject();
					
						this.POTPLT = (BigDecimal) dis.readObject();
					
						this.POCUBE = (BigDecimal) dis.readObject();
					
						this.POPDCN = (BigDecimal) dis.readObject();
					
			        this.POPDWN = dis.readFloat();
					
			        this.SHPNUM = dis.readFloat();
					
						this.POPYCN = (BigDecimal) dis.readObject();
					
			        this.POPYDT = dis.readFloat();
					
					this.POBYTP = readString(dis);
					
						this.POMALS = (BigDecimal) dis.readObject();
					
						this.POMALV = (BigDecimal) dis.readObject();
					
			        this.POMSPO = dis.readFloat();
					
			        this.POMSBO = dis.readFloat();
					
			        this.POLOAD = dis.readFloat();
					
						this.POMCRT = (BigDecimal) dis.readObject();
					
						this.POMCCN = (BigDecimal) dis.readObject();
					
						this.POMCDT = (BigDecimal) dis.readObject();
					
					this.POQCKE = readString(dis);
					
					this.POMTYP = readString(dis);
					
					this.PO850F = readString(dis);
					
					this.PO860F = readString(dis);
					
					this.POTPID = readString(dis);
					
						this.POBSCN = (BigDecimal) dis.readObject();
					
			        this.POBSDT = dis.readFloat();
					
						this.POASCN = (BigDecimal) dis.readObject();
					
			        this.POASDT = dis.readFloat();
					
					this.POCODF = readString(dis);
					
					this.POCODT = readString(dis);
					
					this.POCVTP = readString(dis);
					
					this.POCVMD = readString(dis);
					
					this.POMCPY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.PONUMB);
					
					// float
				
		            	dos.writeFloat(this.POBON);
					
					// float
				
		            	dos.writeFloat(this.POVNUM);
					
					// float
				
		            	dos.writeFloat(this.POTRMS);
					
					// String
				
						writeString(this.POTIND,dos);
					
					// String
				
						writeString(this.POSTAT,dos);
					
					// String
				
						writeString(this.POTYPE,dos);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOR);
					
					// String
				
						writeString(this.POADYN,dos);
					
					// String
				
						writeString(this.PODMTH,dos);
					
					// String
				
						writeString(this.POALBO,dos);
					
					// String
				
						writeString(this.POCONF,dos);
					
					// String
				
						writeString(this.POPHON,dos);
					
					// String
				
						writeString(this.POBUYR,dos);
					
					// float
				
		            	dos.writeFloat(this.PODPT);
					
					// float
				
		            	dos.writeFloat(this.POSDPT);
					
					// float
				
		            	dos.writeFloat(this.POTHER);
					
					// String
				
						writeString(this.POFPCD,dos);
					
					// String
				
						writeString(this.POFOB,dos);
					
					// String
				
						writeString(this.POSHP1,dos);
					
					// String
				
						writeString(this.POSHP2,dos);
					
					// String
				
						writeString(this.POSHPP,dos);
					
					// String
				
						writeString(this.POSHPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POECEN);
					
					// float
				
		            	dos.writeFloat(this.POEDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSCEN);
					
					// float
				
		            	dos.writeFloat(this.POSDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCCEN);
					
					// float
				
		            	dos.writeFloat(this.POCDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCEN);
					
					// float
				
		            	dos.writeFloat(this.PORDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLCCN);
					
					// float
				
		            	dos.writeFloat(this.POLCHG);
					
					// float
				
		            	dos.writeFloat(this.PORFRQ);
					
					// float
				
		            	dos.writeFloat(this.POLEAD);
					
					// String
				
						writeString(this.POORIG,dos);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCOST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORETL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POUNTS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POWGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBTCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTPLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPDCN);
					
					// float
				
		            	dos.writeFloat(this.POPDWN);
					
					// float
				
		            	dos.writeFloat(this.SHPNUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPYCN);
					
					// float
				
		            	dos.writeFloat(this.POPYDT);
					
					// String
				
						writeString(this.POBYTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALV);
					
					// float
				
		            	dos.writeFloat(this.POMSPO);
					
					// float
				
		            	dos.writeFloat(this.POMSBO);
					
					// float
				
		            	dos.writeFloat(this.POLOAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCCN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCDT);
					
					// String
				
						writeString(this.POQCKE,dos);
					
					// String
				
						writeString(this.POMTYP,dos);
					
					// String
				
						writeString(this.PO850F,dos);
					
					// String
				
						writeString(this.PO860F,dos);
					
					// String
				
						writeString(this.POTPID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBSCN);
					
					// float
				
		            	dos.writeFloat(this.POBSDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POASCN);
					
					// float
				
		            	dos.writeFloat(this.POASDT);
					
					// String
				
						writeString(this.POCODF,dos);
					
					// String
				
						writeString(this.POCODT,dos);
					
					// String
				
						writeString(this.POCVTP,dos);
					
					// String
				
						writeString(this.POCVMD,dos);
					
					// String
				
						writeString(this.POMCPY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.PONUMB);
					
					// float
				
		            	dos.writeFloat(this.POBON);
					
					// float
				
		            	dos.writeFloat(this.POVNUM);
					
					// float
				
		            	dos.writeFloat(this.POTRMS);
					
					// String
				
						writeString(this.POTIND,dos);
					
					// String
				
						writeString(this.POSTAT,dos);
					
					// String
				
						writeString(this.POTYPE,dos);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOR);
					
					// String
				
						writeString(this.POADYN,dos);
					
					// String
				
						writeString(this.PODMTH,dos);
					
					// String
				
						writeString(this.POALBO,dos);
					
					// String
				
						writeString(this.POCONF,dos);
					
					// String
				
						writeString(this.POPHON,dos);
					
					// String
				
						writeString(this.POBUYR,dos);
					
					// float
				
		            	dos.writeFloat(this.PODPT);
					
					// float
				
		            	dos.writeFloat(this.POSDPT);
					
					// float
				
		            	dos.writeFloat(this.POTHER);
					
					// String
				
						writeString(this.POFPCD,dos);
					
					// String
				
						writeString(this.POFOB,dos);
					
					// String
				
						writeString(this.POSHP1,dos);
					
					// String
				
						writeString(this.POSHP2,dos);
					
					// String
				
						writeString(this.POSHPP,dos);
					
					// String
				
						writeString(this.POSHPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POECEN);
					
					// float
				
		            	dos.writeFloat(this.POEDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSCEN);
					
					// float
				
		            	dos.writeFloat(this.POSDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCCEN);
					
					// float
				
		            	dos.writeFloat(this.POCDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCEN);
					
					// float
				
		            	dos.writeFloat(this.PORDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLCCN);
					
					// float
				
		            	dos.writeFloat(this.POLCHG);
					
					// float
				
		            	dos.writeFloat(this.PORFRQ);
					
					// float
				
		            	dos.writeFloat(this.POLEAD);
					
					// String
				
						writeString(this.POORIG,dos);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCOST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORETL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POUNTS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POWGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBTCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTPLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPDCN);
					
					// float
				
		            	dos.writeFloat(this.POPDWN);
					
					// float
				
		            	dos.writeFloat(this.SHPNUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPYCN);
					
					// float
				
		            	dos.writeFloat(this.POPYDT);
					
					// String
				
						writeString(this.POBYTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALV);
					
					// float
				
		            	dos.writeFloat(this.POMSPO);
					
					// float
				
		            	dos.writeFloat(this.POMSBO);
					
					// float
				
		            	dos.writeFloat(this.POLOAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCCN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCDT);
					
					// String
				
						writeString(this.POQCKE,dos);
					
					// String
				
						writeString(this.POMTYP,dos);
					
					// String
				
						writeString(this.PO850F,dos);
					
					// String
				
						writeString(this.PO860F,dos);
					
					// String
				
						writeString(this.POTPID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBSCN);
					
					// float
				
		            	dos.writeFloat(this.POBSDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POASCN);
					
					// float
				
		            	dos.writeFloat(this.POASDT);
					
					// String
				
						writeString(this.POCODF,dos);
					
					// String
				
						writeString(this.POCODT,dos);
					
					// String
				
						writeString(this.POCVTP,dos);
					
					// String
				
						writeString(this.POCVMD,dos);
					
					// String
				
						writeString(this.POMCPY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PONUMB="+String.valueOf(PONUMB));
		sb.append(",POBON="+String.valueOf(POBON));
		sb.append(",POVNUM="+String.valueOf(POVNUM));
		sb.append(",POTRMS="+String.valueOf(POTRMS));
		sb.append(",POTIND="+POTIND);
		sb.append(",POSTAT="+POSTAT);
		sb.append(",POTYPE="+POTYPE);
		sb.append(",PODEST="+PODEST);
		sb.append(",POSTOR="+String.valueOf(POSTOR));
		sb.append(",POADYN="+POADYN);
		sb.append(",PODMTH="+PODMTH);
		sb.append(",POALBO="+POALBO);
		sb.append(",POCONF="+POCONF);
		sb.append(",POPHON="+POPHON);
		sb.append(",POBUYR="+POBUYR);
		sb.append(",PODPT="+String.valueOf(PODPT));
		sb.append(",POSDPT="+String.valueOf(POSDPT));
		sb.append(",POTHER="+String.valueOf(POTHER));
		sb.append(",POFPCD="+POFPCD);
		sb.append(",POFOB="+POFOB);
		sb.append(",POSHP1="+POSHP1);
		sb.append(",POSHP2="+POSHP2);
		sb.append(",POSHPP="+POSHPP);
		sb.append(",POSHPC="+POSHPC);
		sb.append(",POECEN="+String.valueOf(POECEN));
		sb.append(",POEDAT="+String.valueOf(POEDAT));
		sb.append(",POSCEN="+String.valueOf(POSCEN));
		sb.append(",POSDAT="+String.valueOf(POSDAT));
		sb.append(",POCCEN="+String.valueOf(POCCEN));
		sb.append(",POCDAT="+String.valueOf(POCDAT));
		sb.append(",PORCEN="+String.valueOf(PORCEN));
		sb.append(",PORDAT="+String.valueOf(PORDAT));
		sb.append(",POLCCN="+String.valueOf(POLCCN));
		sb.append(",POLCHG="+String.valueOf(POLCHG));
		sb.append(",PORFRQ="+String.valueOf(PORFRQ));
		sb.append(",POLEAD="+String.valueOf(POLEAD));
		sb.append(",POORIG="+POORIG);
		sb.append(",PONOT1="+PONOT1);
		sb.append(",PONOT2="+PONOT2);
		sb.append(",PONOT3="+PONOT3);
		sb.append(",POCOST="+String.valueOf(POCOST));
		sb.append(",POVAT="+String.valueOf(POVAT));
		sb.append(",PORETL="+String.valueOf(PORETL));
		sb.append(",POCASE="+String.valueOf(POCASE));
		sb.append(",POUNTS="+String.valueOf(POUNTS));
		sb.append(",POWGHT="+String.valueOf(POWGHT));
		sb.append(",POTARP="+String.valueOf(POTARP));
		sb.append(",POSTOP="+String.valueOf(POSTOP));
		sb.append(",POSKID="+String.valueOf(POSKID));
		sb.append(",POOTHN="+String.valueOf(POOTHN));
		sb.append(",POOTHP="+String.valueOf(POOTHP));
		sb.append(",POBTCH="+String.valueOf(POBTCH));
		sb.append(",PORRET="+String.valueOf(PORRET));
		sb.append(",PORVAT="+String.valueOf(PORVAT));
		sb.append(",PORCST="+String.valueOf(PORCST));
		sb.append(",POTPLT="+String.valueOf(POTPLT));
		sb.append(",POCUBE="+String.valueOf(POCUBE));
		sb.append(",POPDCN="+String.valueOf(POPDCN));
		sb.append(",POPDWN="+String.valueOf(POPDWN));
		sb.append(",SHPNUM="+String.valueOf(SHPNUM));
		sb.append(",POPYCN="+String.valueOf(POPYCN));
		sb.append(",POPYDT="+String.valueOf(POPYDT));
		sb.append(",POBYTP="+POBYTP);
		sb.append(",POMALS="+String.valueOf(POMALS));
		sb.append(",POMALV="+String.valueOf(POMALV));
		sb.append(",POMSPO="+String.valueOf(POMSPO));
		sb.append(",POMSBO="+String.valueOf(POMSBO));
		sb.append(",POLOAD="+String.valueOf(POLOAD));
		sb.append(",POMCRT="+String.valueOf(POMCRT));
		sb.append(",POMCCN="+String.valueOf(POMCCN));
		sb.append(",POMCDT="+String.valueOf(POMCDT));
		sb.append(",POQCKE="+POQCKE);
		sb.append(",POMTYP="+POMTYP);
		sb.append(",PO850F="+PO850F);
		sb.append(",PO860F="+PO860F);
		sb.append(",POTPID="+POTPID);
		sb.append(",POBSCN="+String.valueOf(POBSCN));
		sb.append(",POBSDT="+String.valueOf(POBSDT));
		sb.append(",POASCN="+String.valueOf(POASCN));
		sb.append(",POASDT="+String.valueOf(POASDT));
		sb.append(",POCODF="+POCODF);
		sb.append(",POCODT="+POCODT);
		sb.append(",POCVTP="+POCVTP);
		sb.append(",POCVMD="+POCVMD);
		sb.append(",POMCPY="+POMCPY);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(PONUMB);
        			
        			sb.append("|");
        		
        				sb.append(POBON);
        			
        			sb.append("|");
        		
        				sb.append(POVNUM);
        			
        			sb.append("|");
        		
        				sb.append(POTRMS);
        			
        			sb.append("|");
        		
        				if(POTIND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTIND);
            			}
            		
        			sb.append("|");
        		
        				if(POSTAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTAT);
            			}
            		
        			sb.append("|");
        		
        				if(POTYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTYPE);
            			}
            		
        			sb.append("|");
        		
        				if(PODEST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODEST);
            			}
            		
        			sb.append("|");
        		
        				if(POSTOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTOR);
            			}
            		
        			sb.append("|");
        		
        				if(POADYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POADYN);
            			}
            		
        			sb.append("|");
        		
        				if(PODMTH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODMTH);
            			}
            		
        			sb.append("|");
        		
        				if(POALBO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POALBO);
            			}
            		
        			sb.append("|");
        		
        				if(POCONF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCONF);
            			}
            		
        			sb.append("|");
        		
        				if(POPHON == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPHON);
            			}
            		
        			sb.append("|");
        		
        				if(POBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBUYR);
            			}
            		
        			sb.append("|");
        		
        				sb.append(PODPT);
        			
        			sb.append("|");
        		
        				sb.append(POSDPT);
        			
        			sb.append("|");
        		
        				sb.append(POTHER);
        			
        			sb.append("|");
        		
        				if(POFPCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFPCD);
            			}
            		
        			sb.append("|");
        		
        				if(POFOB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFOB);
            			}
            		
        			sb.append("|");
        		
        				if(POSHP1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHP1);
            			}
            		
        			sb.append("|");
        		
        				if(POSHP2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHP2);
            			}
            		
        			sb.append("|");
        		
        				if(POSHPP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHPP);
            			}
            		
        			sb.append("|");
        		
        				if(POSHPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHPC);
            			}
            		
        			sb.append("|");
        		
        				if(POECEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POECEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POEDAT);
        			
        			sb.append("|");
        		
        				if(POSCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSCEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POSDAT);
        			
        			sb.append("|");
        		
        				if(POCCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCCEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POCDAT);
        			
        			sb.append("|");
        		
        				if(PORCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORCEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(PORDAT);
        			
        			sb.append("|");
        		
        				if(POLCCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLCCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POLCHG);
        			
        			sb.append("|");
        		
        				sb.append(PORFRQ);
        			
        			sb.append("|");
        		
        				sb.append(POLEAD);
        			
        			sb.append("|");
        		
        				if(POORIG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POORIG);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT1);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT3);
            			}
            		
        			sb.append("|");
        		
        				if(POCOST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCOST);
            			}
            		
        			sb.append("|");
        		
        				if(POVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POVAT);
            			}
            		
        			sb.append("|");
        		
        				if(PORETL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORETL);
            			}
            		
        			sb.append("|");
        		
        				if(POCASE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCASE);
            			}
            		
        			sb.append("|");
        		
        				if(POUNTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POUNTS);
            			}
            		
        			sb.append("|");
        		
        				if(POWGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POWGHT);
            			}
            		
        			sb.append("|");
        		
        				if(POTARP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTARP);
            			}
            		
        			sb.append("|");
        		
        				if(POSTOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTOP);
            			}
            		
        			sb.append("|");
        		
        				if(POSKID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSKID);
            			}
            		
        			sb.append("|");
        		
        				if(POOTHN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POOTHN);
            			}
            		
        			sb.append("|");
        		
        				if(POOTHP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POOTHP);
            			}
            		
        			sb.append("|");
        		
        				if(POBTCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBTCH);
            			}
            		
        			sb.append("|");
        		
        				if(PORRET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORRET);
            			}
            		
        			sb.append("|");
        		
        				if(PORVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORVAT);
            			}
            		
        			sb.append("|");
        		
        				if(PORCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORCST);
            			}
            		
        			sb.append("|");
        		
        				if(POTPLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTPLT);
            			}
            		
        			sb.append("|");
        		
        				if(POCUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCUBE);
            			}
            		
        			sb.append("|");
        		
        				if(POPDCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPDCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POPDWN);
        			
        			sb.append("|");
        		
        				sb.append(SHPNUM);
        			
        			sb.append("|");
        		
        				if(POPYCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPYCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POPYDT);
        			
        			sb.append("|");
        		
        				if(POBYTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBYTP);
            			}
            		
        			sb.append("|");
        		
        				if(POMALS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMALS);
            			}
            		
        			sb.append("|");
        		
        				if(POMALV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMALV);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POMSPO);
        			
        			sb.append("|");
        		
        				sb.append(POMSBO);
        			
        			sb.append("|");
        		
        				sb.append(POLOAD);
        			
        			sb.append("|");
        		
        				if(POMCRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCRT);
            			}
            		
        			sb.append("|");
        		
        				if(POMCCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCCN);
            			}
            		
        			sb.append("|");
        		
        				if(POMCDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCDT);
            			}
            		
        			sb.append("|");
        		
        				if(POQCKE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POQCKE);
            			}
            		
        			sb.append("|");
        		
        				if(POMTYP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMTYP);
            			}
            		
        			sb.append("|");
        		
        				if(PO850F == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO850F);
            			}
            		
        			sb.append("|");
        		
        				if(PO860F == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO860F);
            			}
            		
        			sb.append("|");
        		
        				if(POTPID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTPID);
            			}
            		
        			sb.append("|");
        		
        				if(POBSCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBSCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POBSDT);
        			
        			sb.append("|");
        		
        				if(POASCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POASCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POASDT);
        			
        			sb.append("|");
        		
        				if(POCODF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCODF);
            			}
            		
        			sb.append("|");
        		
        				if(POCODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCODT);
            			}
            		
        			sb.append("|");
        		
        				if(POCVTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCVTP);
            			}
            		
        			sb.append("|");
        		
        				if(POCVMD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCVMD);
            			}
            		
        			sb.append("|");
        		
        				if(POMCPY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCPY);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row12");
			
		int tos_count_tFileOutputDelimited_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_1 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_1.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_1.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FILENAME" + " = " + "\"/data/talend/data_repository/POMHDR.csv\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_1 - "  + (log4jParamters_tFileOutputDelimited_1) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_1", "tFileOutputDelimited_1", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("/data/talend/data_repository/POMHDR.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                                log.info("tFileOutputDelimited_1 - Creating directory '" + dir_tFileOutputDelimited_1.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_1.mkdirs();
                                log.info("tFileOutputDelimited_1 - The directory '"+ dir_tFileOutputDelimited_1.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        String zipName_tFileOutputDelimited_1 = fullName_tFileOutputDelimited_1 + ".zip";
                        java.io.File file_tFileOutputDelimited_1 = new java.io.File(zipName_tFileOutputDelimited_1);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_1= null;
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        if(file_tFileOutputDelimited_1.exists()) {
                            file_tFileOutputDelimited_1.delete();
                        }
                        zipOut_tFileOutputDelimited_1= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_1)));
                        zipOut_tFileOutputDelimited_1.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_1.getName()));
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_1,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("PONUMB");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POBON");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POVNUM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POTRMS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POTIND");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSTAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POTYPE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PODEST");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSTOR");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POADYN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PODMTH");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POALBO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCONF");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POPHON");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POBUYR");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PODPT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSDPT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POTHER");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POFPCD");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POFOB");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSHP1");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSHP2");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSHPP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSHPC");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POECEN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POEDAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSCEN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSDAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCCEN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCDAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PORCEN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PORDAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POLCCN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POLCHG");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PORFRQ");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POLEAD");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POORIG");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PONOT1");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PONOT2");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PONOT3");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCOST");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POVAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PORETL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCASE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POUNTS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POWGHT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POTARP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSTOP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POSKID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POOTHN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POOTHP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POBTCH");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PORRET");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PORVAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PORCST");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POTPLT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCUBE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POPDCN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POPDWN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SHPNUM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POPYCN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POPYDT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POBYTP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMALS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMALV");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMSPO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMSBO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POLOAD");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMCRT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMCCN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMCDT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POQCKE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMTYP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PO850F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PO860F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POTPID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POBSCN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POBSDT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POASCN");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POASDT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCODF");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCODT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCVTP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POCVMD");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("POMCPY");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"select * from MM4R5LIB.POMHDR\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("PONUMB")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBON")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POVNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTRMS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTIND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTYPE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODEST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTOR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POADYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODMTH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POALBO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCONF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPHON")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBUYR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSDPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTHER")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POFPCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POFOB")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHP1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHP2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHPP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POECEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POEDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSCEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCCEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORCEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLCCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLCHG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORFRQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLEAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POORIG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCOST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POVAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORETL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCASE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POUNTS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POWGHT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTARP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSKID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POOTHN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POOTHP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBTCH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORRET")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORVAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORCST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTPLT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCUBE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPDCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPDWN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("SHPNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPYCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPYDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBYTP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMALS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMALV")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMSPO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMSBO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLOAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCRT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POQCKE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMTYP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PO850F")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PO860F")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTPID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBSCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBSDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POASCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POASDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCODF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCODT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCVTP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCVMD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCPY")+"}]");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_1", "tDBInput_1", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_1 = context.jda_password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select * from MM4R5LIB.POMHDR";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row12.PONUMB = 0;
							} else {
		                          
            row12.PONUMB = rs_tDBInput_1.getFloat(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row12.POBON = 0;
							} else {
		                          
            row12.POBON = rs_tDBInput_1.getFloat(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row12.POVNUM = 0;
							} else {
		                          
            row12.POVNUM = rs_tDBInput_1.getFloat(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row12.POTRMS = 0;
							} else {
		                          
            row12.POTRMS = rs_tDBInput_1.getFloat(4);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row12.POTIND = null;
							} else {
	                         		
        	row12.POTIND = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row12.POSTAT = null;
							} else {
	                         		
        	row12.POSTAT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row12.POTYPE = null;
							} else {
	                         		
        	row12.POTYPE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row12.PODEST = null;
							} else {
	                         		
        	row12.PODEST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row12.POSTOR = null;
							} else {
		                          
            row12.POSTOR = rs_tDBInput_1.getBigDecimal(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row12.POADYN = null;
							} else {
	                         		
        	row12.POADYN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row12.PODMTH = null;
							} else {
	                         		
        	row12.PODMTH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row12.POALBO = null;
							} else {
	                         		
        	row12.POALBO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row12.POCONF = null;
							} else {
	                         		
        	row12.POCONF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row12.POPHON = null;
							} else {
	                         		
        	row12.POPHON = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row12.POBUYR = null;
							} else {
	                         		
        	row12.POBUYR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row12.PODPT = 0;
							} else {
		                          
            row12.PODPT = rs_tDBInput_1.getFloat(16);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row12.POSDPT = 0;
							} else {
		                          
            row12.POSDPT = rs_tDBInput_1.getFloat(17);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row12.POTHER = 0;
							} else {
		                          
            row12.POTHER = rs_tDBInput_1.getFloat(18);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row12.POFPCD = null;
							} else {
	                         		
        	row12.POFPCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row12.POFOB = null;
							} else {
	                         		
        	row12.POFOB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row12.POSHP1 = null;
							} else {
	                         		
        	row12.POSHP1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row12.POSHP2 = null;
							} else {
	                         		
        	row12.POSHP2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row12.POSHPP = null;
							} else {
	                         		
        	row12.POSHPP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row12.POSHPC = null;
							} else {
	                         		
        	row12.POSHPC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row12.POECEN = null;
							} else {
		                          
            row12.POECEN = rs_tDBInput_1.getBigDecimal(25);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row12.POEDAT = 0;
							} else {
		                          
            row12.POEDAT = rs_tDBInput_1.getFloat(26);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row12.POSCEN = null;
							} else {
		                          
            row12.POSCEN = rs_tDBInput_1.getBigDecimal(27);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row12.POSDAT = 0;
							} else {
		                          
            row12.POSDAT = rs_tDBInput_1.getFloat(28);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row12.POCCEN = null;
							} else {
		                          
            row12.POCCEN = rs_tDBInput_1.getBigDecimal(29);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row12.POCDAT = 0;
							} else {
		                          
            row12.POCDAT = rs_tDBInput_1.getFloat(30);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row12.PORCEN = null;
							} else {
		                          
            row12.PORCEN = rs_tDBInput_1.getBigDecimal(31);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row12.PORDAT = 0;
							} else {
		                          
            row12.PORDAT = rs_tDBInput_1.getFloat(32);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row12.POLCCN = null;
							} else {
		                          
            row12.POLCCN = rs_tDBInput_1.getBigDecimal(33);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row12.POLCHG = 0;
							} else {
		                          
            row12.POLCHG = rs_tDBInput_1.getFloat(34);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row12.PORFRQ = 0;
							} else {
		                          
            row12.PORFRQ = rs_tDBInput_1.getFloat(35);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row12.POLEAD = 0;
							} else {
		                          
            row12.POLEAD = rs_tDBInput_1.getFloat(36);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row12.POORIG = null;
							} else {
	                         		
        	row12.POORIG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row12.PONOT1 = null;
							} else {
	                         		
        	row12.PONOT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row12.PONOT2 = null;
							} else {
	                         		
        	row12.PONOT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row12.PONOT3 = null;
							} else {
	                         		
        	row12.PONOT3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row12.POCOST = null;
							} else {
		                          
            row12.POCOST = rs_tDBInput_1.getBigDecimal(41);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row12.POVAT = null;
							} else {
		                          
            row12.POVAT = rs_tDBInput_1.getBigDecimal(42);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row12.PORETL = null;
							} else {
		                          
            row12.PORETL = rs_tDBInput_1.getBigDecimal(43);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row12.POCASE = null;
							} else {
		                          
            row12.POCASE = rs_tDBInput_1.getBigDecimal(44);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row12.POUNTS = null;
							} else {
		                          
            row12.POUNTS = rs_tDBInput_1.getBigDecimal(45);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row12.POWGHT = null;
							} else {
		                          
            row12.POWGHT = rs_tDBInput_1.getBigDecimal(46);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row12.POTARP = null;
							} else {
		                          
            row12.POTARP = rs_tDBInput_1.getBigDecimal(47);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row12.POSTOP = null;
							} else {
		                          
            row12.POSTOP = rs_tDBInput_1.getBigDecimal(48);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row12.POSKID = null;
							} else {
		                          
            row12.POSKID = rs_tDBInput_1.getBigDecimal(49);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row12.POOTHN = null;
							} else {
		                          
            row12.POOTHN = rs_tDBInput_1.getBigDecimal(50);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row12.POOTHP = null;
							} else {
		                          
            row12.POOTHP = rs_tDBInput_1.getBigDecimal(51);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row12.POBTCH = null;
							} else {
		                          
            row12.POBTCH = rs_tDBInput_1.getBigDecimal(52);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row12.PORRET = null;
							} else {
		                          
            row12.PORRET = rs_tDBInput_1.getBigDecimal(53);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row12.PORVAT = null;
							} else {
		                          
            row12.PORVAT = rs_tDBInput_1.getBigDecimal(54);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row12.PORCST = null;
							} else {
		                          
            row12.PORCST = rs_tDBInput_1.getBigDecimal(55);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row12.POTPLT = null;
							} else {
		                          
            row12.POTPLT = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row12.POCUBE = null;
							} else {
		                          
            row12.POCUBE = rs_tDBInput_1.getBigDecimal(57);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row12.POPDCN = null;
							} else {
		                          
            row12.POPDCN = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row12.POPDWN = 0;
							} else {
		                          
            row12.POPDWN = rs_tDBInput_1.getFloat(59);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row12.SHPNUM = 0;
							} else {
		                          
            row12.SHPNUM = rs_tDBInput_1.getFloat(60);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row12.POPYCN = null;
							} else {
		                          
            row12.POPYCN = rs_tDBInput_1.getBigDecimal(61);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row12.POPYDT = 0;
							} else {
		                          
            row12.POPYDT = rs_tDBInput_1.getFloat(62);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row12.POBYTP = null;
							} else {
	                         		
        	row12.POBYTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 63, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row12.POMALS = null;
							} else {
		                          
            row12.POMALS = rs_tDBInput_1.getBigDecimal(64);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row12.POMALV = null;
							} else {
		                          
            row12.POMALV = rs_tDBInput_1.getBigDecimal(65);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row12.POMSPO = 0;
							} else {
		                          
            row12.POMSPO = rs_tDBInput_1.getFloat(66);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row12.POMSBO = 0;
							} else {
		                          
            row12.POMSBO = rs_tDBInput_1.getFloat(67);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row12.POLOAD = 0;
							} else {
		                          
            row12.POLOAD = rs_tDBInput_1.getFloat(68);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row12.POMCRT = null;
							} else {
		                          
            row12.POMCRT = rs_tDBInput_1.getBigDecimal(69);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row12.POMCCN = null;
							} else {
		                          
            row12.POMCCN = rs_tDBInput_1.getBigDecimal(70);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row12.POMCDT = null;
							} else {
		                          
            row12.POMCDT = rs_tDBInput_1.getBigDecimal(71);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row12.POQCKE = null;
							} else {
	                         		
        	row12.POQCKE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row12.POMTYP = null;
							} else {
	                         		
        	row12.POMTYP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row12.PO850F = null;
							} else {
	                         		
        	row12.PO850F = routines.system.JDBCUtil.getString(rs_tDBInput_1, 74, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row12.PO860F = null;
							} else {
	                         		
        	row12.PO860F = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row12.POTPID = null;
							} else {
	                         		
        	row12.POTPID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row12.POBSCN = null;
							} else {
		                          
            row12.POBSCN = rs_tDBInput_1.getBigDecimal(77);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row12.POBSDT = 0;
							} else {
		                          
            row12.POBSDT = rs_tDBInput_1.getFloat(78);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row12.POASCN = null;
							} else {
		                          
            row12.POASCN = rs_tDBInput_1.getBigDecimal(79);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 80) {
								row12.POASDT = 0;
							} else {
		                          
            row12.POASDT = rs_tDBInput_1.getFloat(80);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 81) {
								row12.POCODF = null;
							} else {
	                         		
        	row12.POCODF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 81, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 82) {
								row12.POCODT = null;
							} else {
	                         		
        	row12.POCODT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 82, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 83) {
								row12.POCVTP = null;
							} else {
	                         		
        	row12.POCVTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 83, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 84) {
								row12.POCVMD = null;
							} else {
	                         		
        	row12.POCVMD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 84, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 85) {
								row12.POMCPY = null;
							} else {
	                         		
        	row12.POMCPY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 85, false);
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row12","tDBInput_1","tDBInput_1","tAS400Input","tFileOutputDelimited_1","tFileOutputDelimited_1","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row12 - " + (row12==null? "": row12.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                        sb_tFileOutputDelimited_1.append(
                            row12.PONUMB
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POBON
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POVNUM
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POTRMS
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POTIND != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POTIND
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSTAT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSTAT
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POTYPE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POTYPE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PODEST != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PODEST
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSTOR != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSTOR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POADYN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POADYN
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PODMTH != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PODMTH
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POALBO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POALBO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCONF != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCONF
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POPHON != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POPHON
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POBUYR != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POBUYR
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.PODPT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POSDPT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POTHER
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POFPCD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POFPCD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POFOB != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POFOB
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSHP1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSHP1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSHP2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSHP2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSHPP != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSHPP
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSHPC != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSHPC
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POECEN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POECEN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POEDAT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSCEN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSCEN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POSDAT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCCEN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCCEN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POCDAT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PORCEN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PORCEN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.PORDAT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POLCCN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POLCCN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POLCHG
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.PORFRQ
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POLEAD
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POORIG != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POORIG
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PONOT1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PONOT1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PONOT2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PONOT2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PONOT3 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PONOT3
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCOST != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCOST.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POVAT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POVAT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PORETL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PORETL.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCASE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCASE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POUNTS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POUNTS.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POWGHT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POWGHT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POTARP != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POTARP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSTOP != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSTOP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POSKID != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POSKID.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POOTHN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POOTHN.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POOTHP != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POOTHP.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POBTCH != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POBTCH.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PORRET != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PORRET.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PORVAT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PORVAT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PORCST != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PORCST.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POTPLT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POTPLT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCUBE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCUBE.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POPDCN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POPDCN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POPDWN
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.SHPNUM
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POPYCN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POPYCN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POPYDT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POBYTP != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POBYTP
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POMALS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POMALS.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POMALV != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POMALV.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POMSPO
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POMSBO
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POLOAD
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POMCRT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POMCRT.setScale(8, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POMCCN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POMCCN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POMCDT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POMCDT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POQCKE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POQCKE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POMTYP != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POMTYP
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PO850F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PO850F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PO860F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PO860F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POTPID != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POTPID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POBSCN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POBSCN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POBSDT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POASCN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POASCN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row12.POASDT
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCODF != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCODF
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCODT != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCODT
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCVTP != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCVTP
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POCVMD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POCVMD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.POMCPY != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.POMCPY
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());
                        log.debug("tFileOutputDelimited_1 - Writing the record " + nb_line_tFileOutputDelimited_1 + ".");

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	
				log.debug("tFileOutputDelimited_1 - Written records count: " + nb_line_tFileOutputDelimited_1 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row12",2,0,
			 			"tDBInput_1","tDBInput_1","tAS400Input","tFileOutputDelimited_1","tFileOutputDelimited_1","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_1 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputDelimited_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class tmap_POMHDRStruct implements routines.system.IPersistableRow<tmap_POMHDRStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public Double PONUMB;

				public Double getPONUMB () {
					return this.PONUMB;
				}

				public Boolean PONUMBIsNullable(){
				    return true;
				}
				public Boolean PONUMBIsKey(){
				    return false;
				}
				public Integer PONUMBLength(){
				    return null;
				}
				public Integer PONUMBPrecision(){
				    return null;
				}
				public String PONUMBDefault(){
				
					return "";
				
				}
				public String PONUMBComment(){
				
				    return "";
				
				}
				public String PONUMBPattern(){
				
					return "";
				
				}
				public String PONUMBOriginalDbColumnName(){
				
					return "PONUMB";
				
				}

				
			    public Double POBON;

				public Double getPOBON () {
					return this.POBON;
				}

				public Boolean POBONIsNullable(){
				    return true;
				}
				public Boolean POBONIsKey(){
				    return false;
				}
				public Integer POBONLength(){
				    return null;
				}
				public Integer POBONPrecision(){
				    return null;
				}
				public String POBONDefault(){
				
					return "";
				
				}
				public String POBONComment(){
				
				    return "";
				
				}
				public String POBONPattern(){
				
					return "";
				
				}
				public String POBONOriginalDbColumnName(){
				
					return "POBON";
				
				}

				
			    public Double POVNUM;

				public Double getPOVNUM () {
					return this.POVNUM;
				}

				public Boolean POVNUMIsNullable(){
				    return true;
				}
				public Boolean POVNUMIsKey(){
				    return false;
				}
				public Integer POVNUMLength(){
				    return null;
				}
				public Integer POVNUMPrecision(){
				    return null;
				}
				public String POVNUMDefault(){
				
					return "";
				
				}
				public String POVNUMComment(){
				
				    return "";
				
				}
				public String POVNUMPattern(){
				
					return "";
				
				}
				public String POVNUMOriginalDbColumnName(){
				
					return "POVNUM";
				
				}

				
			    public Double POTRMS;

				public Double getPOTRMS () {
					return this.POTRMS;
				}

				public Boolean POTRMSIsNullable(){
				    return true;
				}
				public Boolean POTRMSIsKey(){
				    return false;
				}
				public Integer POTRMSLength(){
				    return null;
				}
				public Integer POTRMSPrecision(){
				    return null;
				}
				public String POTRMSDefault(){
				
					return "";
				
				}
				public String POTRMSComment(){
				
				    return "";
				
				}
				public String POTRMSPattern(){
				
					return "";
				
				}
				public String POTRMSOriginalDbColumnName(){
				
					return "POTRMS";
				
				}

				
			    public String POTIND;

				public String getPOTIND () {
					return this.POTIND;
				}

				public Boolean POTINDIsNullable(){
				    return true;
				}
				public Boolean POTINDIsKey(){
				    return false;
				}
				public Integer POTINDLength(){
				    return null;
				}
				public Integer POTINDPrecision(){
				    return null;
				}
				public String POTINDDefault(){
				
					return null;
				
				}
				public String POTINDComment(){
				
				    return "";
				
				}
				public String POTINDPattern(){
				
					return "";
				
				}
				public String POTINDOriginalDbColumnName(){
				
					return "POTIND";
				
				}

				
			    public String POSTAT;

				public String getPOSTAT () {
					return this.POSTAT;
				}

				public Boolean POSTATIsNullable(){
				    return true;
				}
				public Boolean POSTATIsKey(){
				    return false;
				}
				public Integer POSTATLength(){
				    return null;
				}
				public Integer POSTATPrecision(){
				    return null;
				}
				public String POSTATDefault(){
				
					return null;
				
				}
				public String POSTATComment(){
				
				    return "";
				
				}
				public String POSTATPattern(){
				
					return "";
				
				}
				public String POSTATOriginalDbColumnName(){
				
					return "POSTAT";
				
				}

				
			    public String POTYPE;

				public String getPOTYPE () {
					return this.POTYPE;
				}

				public Boolean POTYPEIsNullable(){
				    return true;
				}
				public Boolean POTYPEIsKey(){
				    return false;
				}
				public Integer POTYPELength(){
				    return null;
				}
				public Integer POTYPEPrecision(){
				    return null;
				}
				public String POTYPEDefault(){
				
					return null;
				
				}
				public String POTYPEComment(){
				
				    return "";
				
				}
				public String POTYPEPattern(){
				
					return "";
				
				}
				public String POTYPEOriginalDbColumnName(){
				
					return "POTYPE";
				
				}

				
			    public String PODEST;

				public String getPODEST () {
					return this.PODEST;
				}

				public Boolean PODESTIsNullable(){
				    return true;
				}
				public Boolean PODESTIsKey(){
				    return false;
				}
				public Integer PODESTLength(){
				    return null;
				}
				public Integer PODESTPrecision(){
				    return null;
				}
				public String PODESTDefault(){
				
					return null;
				
				}
				public String PODESTComment(){
				
				    return "";
				
				}
				public String PODESTPattern(){
				
					return "";
				
				}
				public String PODESTOriginalDbColumnName(){
				
					return "PODEST";
				
				}

				
			    public BigDecimal POSTOR;

				public BigDecimal getPOSTOR () {
					return this.POSTOR;
				}

				public Boolean POSTORIsNullable(){
				    return true;
				}
				public Boolean POSTORIsKey(){
				    return false;
				}
				public Integer POSTORLength(){
				    return null;
				}
				public Integer POSTORPrecision(){
				    return null;
				}
				public String POSTORDefault(){
				
					return "";
				
				}
				public String POSTORComment(){
				
				    return "";
				
				}
				public String POSTORPattern(){
				
					return "";
				
				}
				public String POSTOROriginalDbColumnName(){
				
					return "POSTOR";
				
				}

				
			    public String POADYN;

				public String getPOADYN () {
					return this.POADYN;
				}

				public Boolean POADYNIsNullable(){
				    return true;
				}
				public Boolean POADYNIsKey(){
				    return false;
				}
				public Integer POADYNLength(){
				    return null;
				}
				public Integer POADYNPrecision(){
				    return null;
				}
				public String POADYNDefault(){
				
					return null;
				
				}
				public String POADYNComment(){
				
				    return "";
				
				}
				public String POADYNPattern(){
				
					return "";
				
				}
				public String POADYNOriginalDbColumnName(){
				
					return "POADYN";
				
				}

				
			    public String PODMTH;

				public String getPODMTH () {
					return this.PODMTH;
				}

				public Boolean PODMTHIsNullable(){
				    return true;
				}
				public Boolean PODMTHIsKey(){
				    return false;
				}
				public Integer PODMTHLength(){
				    return null;
				}
				public Integer PODMTHPrecision(){
				    return null;
				}
				public String PODMTHDefault(){
				
					return null;
				
				}
				public String PODMTHComment(){
				
				    return "";
				
				}
				public String PODMTHPattern(){
				
					return "";
				
				}
				public String PODMTHOriginalDbColumnName(){
				
					return "PODMTH";
				
				}

				
			    public String POALBO;

				public String getPOALBO () {
					return this.POALBO;
				}

				public Boolean POALBOIsNullable(){
				    return true;
				}
				public Boolean POALBOIsKey(){
				    return false;
				}
				public Integer POALBOLength(){
				    return null;
				}
				public Integer POALBOPrecision(){
				    return null;
				}
				public String POALBODefault(){
				
					return "";
				
				}
				public String POALBOComment(){
				
				    return "";
				
				}
				public String POALBOPattern(){
				
					return "";
				
				}
				public String POALBOOriginalDbColumnName(){
				
					return "POALBO";
				
				}

				
			    public String POCONF;

				public String getPOCONF () {
					return this.POCONF;
				}

				public Boolean POCONFIsNullable(){
				    return true;
				}
				public Boolean POCONFIsKey(){
				    return false;
				}
				public Integer POCONFLength(){
				    return null;
				}
				public Integer POCONFPrecision(){
				    return null;
				}
				public String POCONFDefault(){
				
					return "";
				
				}
				public String POCONFComment(){
				
				    return "";
				
				}
				public String POCONFPattern(){
				
					return "";
				
				}
				public String POCONFOriginalDbColumnName(){
				
					return "POCONF";
				
				}

				
			    public String POPHON;

				public String getPOPHON () {
					return this.POPHON;
				}

				public Boolean POPHONIsNullable(){
				    return true;
				}
				public Boolean POPHONIsKey(){
				    return false;
				}
				public Integer POPHONLength(){
				    return null;
				}
				public Integer POPHONPrecision(){
				    return null;
				}
				public String POPHONDefault(){
				
					return "";
				
				}
				public String POPHONComment(){
				
				    return "";
				
				}
				public String POPHONPattern(){
				
					return "";
				
				}
				public String POPHONOriginalDbColumnName(){
				
					return "POPHON";
				
				}

				
			    public String POBUYR;

				public String getPOBUYR () {
					return this.POBUYR;
				}

				public Boolean POBUYRIsNullable(){
				    return true;
				}
				public Boolean POBUYRIsKey(){
				    return false;
				}
				public Integer POBUYRLength(){
				    return null;
				}
				public Integer POBUYRPrecision(){
				    return null;
				}
				public String POBUYRDefault(){
				
					return "";
				
				}
				public String POBUYRComment(){
				
				    return "";
				
				}
				public String POBUYRPattern(){
				
					return "";
				
				}
				public String POBUYROriginalDbColumnName(){
				
					return "POBUYR";
				
				}

				
			    public Double PODPT;

				public Double getPODPT () {
					return this.PODPT;
				}

				public Boolean PODPTIsNullable(){
				    return true;
				}
				public Boolean PODPTIsKey(){
				    return false;
				}
				public Integer PODPTLength(){
				    return null;
				}
				public Integer PODPTPrecision(){
				    return null;
				}
				public String PODPTDefault(){
				
					return "";
				
				}
				public String PODPTComment(){
				
				    return "";
				
				}
				public String PODPTPattern(){
				
					return "";
				
				}
				public String PODPTOriginalDbColumnName(){
				
					return "PODPT";
				
				}

				
			    public Double POSDPT;

				public Double getPOSDPT () {
					return this.POSDPT;
				}

				public Boolean POSDPTIsNullable(){
				    return true;
				}
				public Boolean POSDPTIsKey(){
				    return false;
				}
				public Integer POSDPTLength(){
				    return null;
				}
				public Integer POSDPTPrecision(){
				    return null;
				}
				public String POSDPTDefault(){
				
					return "";
				
				}
				public String POSDPTComment(){
				
				    return "";
				
				}
				public String POSDPTPattern(){
				
					return "";
				
				}
				public String POSDPTOriginalDbColumnName(){
				
					return "POSDPT";
				
				}

				
			    public Double POTHER;

				public Double getPOTHER () {
					return this.POTHER;
				}

				public Boolean POTHERIsNullable(){
				    return true;
				}
				public Boolean POTHERIsKey(){
				    return false;
				}
				public Integer POTHERLength(){
				    return null;
				}
				public Integer POTHERPrecision(){
				    return null;
				}
				public String POTHERDefault(){
				
					return "";
				
				}
				public String POTHERComment(){
				
				    return "";
				
				}
				public String POTHERPattern(){
				
					return "";
				
				}
				public String POTHEROriginalDbColumnName(){
				
					return "POTHER";
				
				}

				
			    public String POFPCD;

				public String getPOFPCD () {
					return this.POFPCD;
				}

				public Boolean POFPCDIsNullable(){
				    return true;
				}
				public Boolean POFPCDIsKey(){
				    return false;
				}
				public Integer POFPCDLength(){
				    return null;
				}
				public Integer POFPCDPrecision(){
				    return null;
				}
				public String POFPCDDefault(){
				
					return null;
				
				}
				public String POFPCDComment(){
				
				    return "";
				
				}
				public String POFPCDPattern(){
				
					return "";
				
				}
				public String POFPCDOriginalDbColumnName(){
				
					return "POFPCD";
				
				}

				
			    public String POFOB;

				public String getPOFOB () {
					return this.POFOB;
				}

				public Boolean POFOBIsNullable(){
				    return true;
				}
				public Boolean POFOBIsKey(){
				    return false;
				}
				public Integer POFOBLength(){
				    return null;
				}
				public Integer POFOBPrecision(){
				    return null;
				}
				public String POFOBDefault(){
				
					return null;
				
				}
				public String POFOBComment(){
				
				    return "";
				
				}
				public String POFOBPattern(){
				
					return "";
				
				}
				public String POFOBOriginalDbColumnName(){
				
					return "POFOB";
				
				}

				
			    public String POSHP1;

				public String getPOSHP1 () {
					return this.POSHP1;
				}

				public Boolean POSHP1IsNullable(){
				    return true;
				}
				public Boolean POSHP1IsKey(){
				    return false;
				}
				public Integer POSHP1Length(){
				    return null;
				}
				public Integer POSHP1Precision(){
				    return null;
				}
				public String POSHP1Default(){
				
					return null;
				
				}
				public String POSHP1Comment(){
				
				    return "";
				
				}
				public String POSHP1Pattern(){
				
					return "";
				
				}
				public String POSHP1OriginalDbColumnName(){
				
					return "POSHP1";
				
				}

				
			    public String POSHP2;

				public String getPOSHP2 () {
					return this.POSHP2;
				}

				public Boolean POSHP2IsNullable(){
				    return true;
				}
				public Boolean POSHP2IsKey(){
				    return false;
				}
				public Integer POSHP2Length(){
				    return null;
				}
				public Integer POSHP2Precision(){
				    return null;
				}
				public String POSHP2Default(){
				
					return null;
				
				}
				public String POSHP2Comment(){
				
				    return "";
				
				}
				public String POSHP2Pattern(){
				
					return "";
				
				}
				public String POSHP2OriginalDbColumnName(){
				
					return "POSHP2";
				
				}

				
			    public String POSHPP;

				public String getPOSHPP () {
					return this.POSHPP;
				}

				public Boolean POSHPPIsNullable(){
				    return true;
				}
				public Boolean POSHPPIsKey(){
				    return false;
				}
				public Integer POSHPPLength(){
				    return null;
				}
				public Integer POSHPPPrecision(){
				    return null;
				}
				public String POSHPPDefault(){
				
					return null;
				
				}
				public String POSHPPComment(){
				
				    return "";
				
				}
				public String POSHPPPattern(){
				
					return "";
				
				}
				public String POSHPPOriginalDbColumnName(){
				
					return "POSHPP";
				
				}

				
			    public String POSHPC;

				public String getPOSHPC () {
					return this.POSHPC;
				}

				public Boolean POSHPCIsNullable(){
				    return true;
				}
				public Boolean POSHPCIsKey(){
				    return false;
				}
				public Integer POSHPCLength(){
				    return null;
				}
				public Integer POSHPCPrecision(){
				    return null;
				}
				public String POSHPCDefault(){
				
					return null;
				
				}
				public String POSHPCComment(){
				
				    return "";
				
				}
				public String POSHPCPattern(){
				
					return "";
				
				}
				public String POSHPCOriginalDbColumnName(){
				
					return "POSHPC";
				
				}

				
			    public BigDecimal POECEN;

				public BigDecimal getPOECEN () {
					return this.POECEN;
				}

				public Boolean POECENIsNullable(){
				    return true;
				}
				public Boolean POECENIsKey(){
				    return false;
				}
				public Integer POECENLength(){
				    return null;
				}
				public Integer POECENPrecision(){
				    return null;
				}
				public String POECENDefault(){
				
					return "";
				
				}
				public String POECENComment(){
				
				    return "";
				
				}
				public String POECENPattern(){
				
					return "";
				
				}
				public String POECENOriginalDbColumnName(){
				
					return "POECEN";
				
				}

				
			    public Double POEDAT;

				public Double getPOEDAT () {
					return this.POEDAT;
				}

				public Boolean POEDATIsNullable(){
				    return true;
				}
				public Boolean POEDATIsKey(){
				    return false;
				}
				public Integer POEDATLength(){
				    return null;
				}
				public Integer POEDATPrecision(){
				    return null;
				}
				public String POEDATDefault(){
				
					return "";
				
				}
				public String POEDATComment(){
				
				    return "";
				
				}
				public String POEDATPattern(){
				
					return "";
				
				}
				public String POEDATOriginalDbColumnName(){
				
					return "POEDAT";
				
				}

				
			    public BigDecimal POSCEN;

				public BigDecimal getPOSCEN () {
					return this.POSCEN;
				}

				public Boolean POSCENIsNullable(){
				    return true;
				}
				public Boolean POSCENIsKey(){
				    return false;
				}
				public Integer POSCENLength(){
				    return null;
				}
				public Integer POSCENPrecision(){
				    return null;
				}
				public String POSCENDefault(){
				
					return "";
				
				}
				public String POSCENComment(){
				
				    return "";
				
				}
				public String POSCENPattern(){
				
					return "";
				
				}
				public String POSCENOriginalDbColumnName(){
				
					return "POSCEN";
				
				}

				
			    public Double POSDAT;

				public Double getPOSDAT () {
					return this.POSDAT;
				}

				public Boolean POSDATIsNullable(){
				    return true;
				}
				public Boolean POSDATIsKey(){
				    return false;
				}
				public Integer POSDATLength(){
				    return null;
				}
				public Integer POSDATPrecision(){
				    return null;
				}
				public String POSDATDefault(){
				
					return "";
				
				}
				public String POSDATComment(){
				
				    return "";
				
				}
				public String POSDATPattern(){
				
					return "";
				
				}
				public String POSDATOriginalDbColumnName(){
				
					return "POSDAT";
				
				}

				
			    public BigDecimal POCCEN;

				public BigDecimal getPOCCEN () {
					return this.POCCEN;
				}

				public Boolean POCCENIsNullable(){
				    return true;
				}
				public Boolean POCCENIsKey(){
				    return false;
				}
				public Integer POCCENLength(){
				    return null;
				}
				public Integer POCCENPrecision(){
				    return null;
				}
				public String POCCENDefault(){
				
					return "";
				
				}
				public String POCCENComment(){
				
				    return "";
				
				}
				public String POCCENPattern(){
				
					return "";
				
				}
				public String POCCENOriginalDbColumnName(){
				
					return "POCCEN";
				
				}

				
			    public Double POCDAT;

				public Double getPOCDAT () {
					return this.POCDAT;
				}

				public Boolean POCDATIsNullable(){
				    return true;
				}
				public Boolean POCDATIsKey(){
				    return false;
				}
				public Integer POCDATLength(){
				    return null;
				}
				public Integer POCDATPrecision(){
				    return null;
				}
				public String POCDATDefault(){
				
					return "";
				
				}
				public String POCDATComment(){
				
				    return "";
				
				}
				public String POCDATPattern(){
				
					return "";
				
				}
				public String POCDATOriginalDbColumnName(){
				
					return "POCDAT";
				
				}

				
			    public BigDecimal PORCEN;

				public BigDecimal getPORCEN () {
					return this.PORCEN;
				}

				public Boolean PORCENIsNullable(){
				    return true;
				}
				public Boolean PORCENIsKey(){
				    return false;
				}
				public Integer PORCENLength(){
				    return null;
				}
				public Integer PORCENPrecision(){
				    return null;
				}
				public String PORCENDefault(){
				
					return "";
				
				}
				public String PORCENComment(){
				
				    return "";
				
				}
				public String PORCENPattern(){
				
					return "";
				
				}
				public String PORCENOriginalDbColumnName(){
				
					return "PORCEN";
				
				}

				
			    public Double PORDAT;

				public Double getPORDAT () {
					return this.PORDAT;
				}

				public Boolean PORDATIsNullable(){
				    return true;
				}
				public Boolean PORDATIsKey(){
				    return false;
				}
				public Integer PORDATLength(){
				    return null;
				}
				public Integer PORDATPrecision(){
				    return null;
				}
				public String PORDATDefault(){
				
					return "";
				
				}
				public String PORDATComment(){
				
				    return "";
				
				}
				public String PORDATPattern(){
				
					return "";
				
				}
				public String PORDATOriginalDbColumnName(){
				
					return "PORDAT";
				
				}

				
			    public BigDecimal POLCCN;

				public BigDecimal getPOLCCN () {
					return this.POLCCN;
				}

				public Boolean POLCCNIsNullable(){
				    return true;
				}
				public Boolean POLCCNIsKey(){
				    return false;
				}
				public Integer POLCCNLength(){
				    return null;
				}
				public Integer POLCCNPrecision(){
				    return null;
				}
				public String POLCCNDefault(){
				
					return "";
				
				}
				public String POLCCNComment(){
				
				    return "";
				
				}
				public String POLCCNPattern(){
				
					return "";
				
				}
				public String POLCCNOriginalDbColumnName(){
				
					return "POLCCN";
				
				}

				
			    public Double POLCHG;

				public Double getPOLCHG () {
					return this.POLCHG;
				}

				public Boolean POLCHGIsNullable(){
				    return true;
				}
				public Boolean POLCHGIsKey(){
				    return false;
				}
				public Integer POLCHGLength(){
				    return null;
				}
				public Integer POLCHGPrecision(){
				    return null;
				}
				public String POLCHGDefault(){
				
					return "";
				
				}
				public String POLCHGComment(){
				
				    return "";
				
				}
				public String POLCHGPattern(){
				
					return "";
				
				}
				public String POLCHGOriginalDbColumnName(){
				
					return "POLCHG";
				
				}

				
			    public Double PORFRQ;

				public Double getPORFRQ () {
					return this.PORFRQ;
				}

				public Boolean PORFRQIsNullable(){
				    return true;
				}
				public Boolean PORFRQIsKey(){
				    return false;
				}
				public Integer PORFRQLength(){
				    return null;
				}
				public Integer PORFRQPrecision(){
				    return null;
				}
				public String PORFRQDefault(){
				
					return "";
				
				}
				public String PORFRQComment(){
				
				    return "";
				
				}
				public String PORFRQPattern(){
				
					return "";
				
				}
				public String PORFRQOriginalDbColumnName(){
				
					return "PORFRQ";
				
				}

				
			    public Double POLEAD;

				public Double getPOLEAD () {
					return this.POLEAD;
				}

				public Boolean POLEADIsNullable(){
				    return true;
				}
				public Boolean POLEADIsKey(){
				    return false;
				}
				public Integer POLEADLength(){
				    return null;
				}
				public Integer POLEADPrecision(){
				    return null;
				}
				public String POLEADDefault(){
				
					return "";
				
				}
				public String POLEADComment(){
				
				    return "";
				
				}
				public String POLEADPattern(){
				
					return "";
				
				}
				public String POLEADOriginalDbColumnName(){
				
					return "POLEAD";
				
				}

				
			    public String POORIG;

				public String getPOORIG () {
					return this.POORIG;
				}

				public Boolean POORIGIsNullable(){
				    return true;
				}
				public Boolean POORIGIsKey(){
				    return false;
				}
				public Integer POORIGLength(){
				    return null;
				}
				public Integer POORIGPrecision(){
				    return null;
				}
				public String POORIGDefault(){
				
					return "";
				
				}
				public String POORIGComment(){
				
				    return "";
				
				}
				public String POORIGPattern(){
				
					return "";
				
				}
				public String POORIGOriginalDbColumnName(){
				
					return "POORIG";
				
				}

				
			    public String PONOT1;

				public String getPONOT1 () {
					return this.PONOT1;
				}

				public Boolean PONOT1IsNullable(){
				    return true;
				}
				public Boolean PONOT1IsKey(){
				    return false;
				}
				public Integer PONOT1Length(){
				    return null;
				}
				public Integer PONOT1Precision(){
				    return null;
				}
				public String PONOT1Default(){
				
					return "";
				
				}
				public String PONOT1Comment(){
				
				    return "";
				
				}
				public String PONOT1Pattern(){
				
					return "";
				
				}
				public String PONOT1OriginalDbColumnName(){
				
					return "PONOT1";
				
				}

				
			    public String PONOT2;

				public String getPONOT2 () {
					return this.PONOT2;
				}

				public Boolean PONOT2IsNullable(){
				    return true;
				}
				public Boolean PONOT2IsKey(){
				    return false;
				}
				public Integer PONOT2Length(){
				    return null;
				}
				public Integer PONOT2Precision(){
				    return null;
				}
				public String PONOT2Default(){
				
					return "";
				
				}
				public String PONOT2Comment(){
				
				    return "";
				
				}
				public String PONOT2Pattern(){
				
					return "";
				
				}
				public String PONOT2OriginalDbColumnName(){
				
					return "PONOT2";
				
				}

				
			    public String PONOT3;

				public String getPONOT3 () {
					return this.PONOT3;
				}

				public Boolean PONOT3IsNullable(){
				    return true;
				}
				public Boolean PONOT3IsKey(){
				    return false;
				}
				public Integer PONOT3Length(){
				    return null;
				}
				public Integer PONOT3Precision(){
				    return null;
				}
				public String PONOT3Default(){
				
					return "";
				
				}
				public String PONOT3Comment(){
				
				    return "";
				
				}
				public String PONOT3Pattern(){
				
					return "";
				
				}
				public String PONOT3OriginalDbColumnName(){
				
					return "PONOT3";
				
				}

				
			    public BigDecimal POCOST;

				public BigDecimal getPOCOST () {
					return this.POCOST;
				}

				public Boolean POCOSTIsNullable(){
				    return true;
				}
				public Boolean POCOSTIsKey(){
				    return false;
				}
				public Integer POCOSTLength(){
				    return null;
				}
				public Integer POCOSTPrecision(){
				    return null;
				}
				public String POCOSTDefault(){
				
					return "";
				
				}
				public String POCOSTComment(){
				
				    return "";
				
				}
				public String POCOSTPattern(){
				
					return "";
				
				}
				public String POCOSTOriginalDbColumnName(){
				
					return "POCOST";
				
				}

				
			    public BigDecimal POVAT;

				public BigDecimal getPOVAT () {
					return this.POVAT;
				}

				public Boolean POVATIsNullable(){
				    return true;
				}
				public Boolean POVATIsKey(){
				    return false;
				}
				public Integer POVATLength(){
				    return null;
				}
				public Integer POVATPrecision(){
				    return null;
				}
				public String POVATDefault(){
				
					return "";
				
				}
				public String POVATComment(){
				
				    return "";
				
				}
				public String POVATPattern(){
				
					return "";
				
				}
				public String POVATOriginalDbColumnName(){
				
					return "POVAT";
				
				}

				
			    public BigDecimal PORETL;

				public BigDecimal getPORETL () {
					return this.PORETL;
				}

				public Boolean PORETLIsNullable(){
				    return true;
				}
				public Boolean PORETLIsKey(){
				    return false;
				}
				public Integer PORETLLength(){
				    return null;
				}
				public Integer PORETLPrecision(){
				    return null;
				}
				public String PORETLDefault(){
				
					return "";
				
				}
				public String PORETLComment(){
				
				    return "";
				
				}
				public String PORETLPattern(){
				
					return "";
				
				}
				public String PORETLOriginalDbColumnName(){
				
					return "PORETL";
				
				}

				
			    public BigDecimal POCASE;

				public BigDecimal getPOCASE () {
					return this.POCASE;
				}

				public Boolean POCASEIsNullable(){
				    return true;
				}
				public Boolean POCASEIsKey(){
				    return false;
				}
				public Integer POCASELength(){
				    return null;
				}
				public Integer POCASEPrecision(){
				    return null;
				}
				public String POCASEDefault(){
				
					return "";
				
				}
				public String POCASEComment(){
				
				    return "";
				
				}
				public String POCASEPattern(){
				
					return "";
				
				}
				public String POCASEOriginalDbColumnName(){
				
					return "POCASE";
				
				}

				
			    public BigDecimal POUNTS;

				public BigDecimal getPOUNTS () {
					return this.POUNTS;
				}

				public Boolean POUNTSIsNullable(){
				    return true;
				}
				public Boolean POUNTSIsKey(){
				    return false;
				}
				public Integer POUNTSLength(){
				    return null;
				}
				public Integer POUNTSPrecision(){
				    return null;
				}
				public String POUNTSDefault(){
				
					return "";
				
				}
				public String POUNTSComment(){
				
				    return "";
				
				}
				public String POUNTSPattern(){
				
					return "";
				
				}
				public String POUNTSOriginalDbColumnName(){
				
					return "POUNTS";
				
				}

				
			    public BigDecimal POWGHT;

				public BigDecimal getPOWGHT () {
					return this.POWGHT;
				}

				public Boolean POWGHTIsNullable(){
				    return true;
				}
				public Boolean POWGHTIsKey(){
				    return false;
				}
				public Integer POWGHTLength(){
				    return null;
				}
				public Integer POWGHTPrecision(){
				    return null;
				}
				public String POWGHTDefault(){
				
					return "";
				
				}
				public String POWGHTComment(){
				
				    return "";
				
				}
				public String POWGHTPattern(){
				
					return "";
				
				}
				public String POWGHTOriginalDbColumnName(){
				
					return "POWGHT";
				
				}

				
			    public BigDecimal POTARP;

				public BigDecimal getPOTARP () {
					return this.POTARP;
				}

				public Boolean POTARPIsNullable(){
				    return true;
				}
				public Boolean POTARPIsKey(){
				    return false;
				}
				public Integer POTARPLength(){
				    return null;
				}
				public Integer POTARPPrecision(){
				    return null;
				}
				public String POTARPDefault(){
				
					return "";
				
				}
				public String POTARPComment(){
				
				    return "";
				
				}
				public String POTARPPattern(){
				
					return "";
				
				}
				public String POTARPOriginalDbColumnName(){
				
					return "POTARP";
				
				}

				
			    public BigDecimal POSTOP;

				public BigDecimal getPOSTOP () {
					return this.POSTOP;
				}

				public Boolean POSTOPIsNullable(){
				    return true;
				}
				public Boolean POSTOPIsKey(){
				    return false;
				}
				public Integer POSTOPLength(){
				    return null;
				}
				public Integer POSTOPPrecision(){
				    return null;
				}
				public String POSTOPDefault(){
				
					return "";
				
				}
				public String POSTOPComment(){
				
				    return "";
				
				}
				public String POSTOPPattern(){
				
					return "";
				
				}
				public String POSTOPOriginalDbColumnName(){
				
					return "POSTOP";
				
				}

				
			    public BigDecimal POSKID;

				public BigDecimal getPOSKID () {
					return this.POSKID;
				}

				public Boolean POSKIDIsNullable(){
				    return true;
				}
				public Boolean POSKIDIsKey(){
				    return false;
				}
				public Integer POSKIDLength(){
				    return null;
				}
				public Integer POSKIDPrecision(){
				    return null;
				}
				public String POSKIDDefault(){
				
					return "";
				
				}
				public String POSKIDComment(){
				
				    return "";
				
				}
				public String POSKIDPattern(){
				
					return "";
				
				}
				public String POSKIDOriginalDbColumnName(){
				
					return "POSKID";
				
				}

				
			    public BigDecimal POOTHN;

				public BigDecimal getPOOTHN () {
					return this.POOTHN;
				}

				public Boolean POOTHNIsNullable(){
				    return true;
				}
				public Boolean POOTHNIsKey(){
				    return false;
				}
				public Integer POOTHNLength(){
				    return null;
				}
				public Integer POOTHNPrecision(){
				    return null;
				}
				public String POOTHNDefault(){
				
					return "";
				
				}
				public String POOTHNComment(){
				
				    return "";
				
				}
				public String POOTHNPattern(){
				
					return "";
				
				}
				public String POOTHNOriginalDbColumnName(){
				
					return "POOTHN";
				
				}

				
			    public BigDecimal POOTHP;

				public BigDecimal getPOOTHP () {
					return this.POOTHP;
				}

				public Boolean POOTHPIsNullable(){
				    return true;
				}
				public Boolean POOTHPIsKey(){
				    return false;
				}
				public Integer POOTHPLength(){
				    return null;
				}
				public Integer POOTHPPrecision(){
				    return null;
				}
				public String POOTHPDefault(){
				
					return "";
				
				}
				public String POOTHPComment(){
				
				    return "";
				
				}
				public String POOTHPPattern(){
				
					return "";
				
				}
				public String POOTHPOriginalDbColumnName(){
				
					return "POOTHP";
				
				}

				
			    public BigDecimal POBTCH;

				public BigDecimal getPOBTCH () {
					return this.POBTCH;
				}

				public Boolean POBTCHIsNullable(){
				    return true;
				}
				public Boolean POBTCHIsKey(){
				    return false;
				}
				public Integer POBTCHLength(){
				    return null;
				}
				public Integer POBTCHPrecision(){
				    return null;
				}
				public String POBTCHDefault(){
				
					return "";
				
				}
				public String POBTCHComment(){
				
				    return "";
				
				}
				public String POBTCHPattern(){
				
					return "";
				
				}
				public String POBTCHOriginalDbColumnName(){
				
					return "POBTCH";
				
				}

				
			    public BigDecimal PORRET;

				public BigDecimal getPORRET () {
					return this.PORRET;
				}

				public Boolean PORRETIsNullable(){
				    return true;
				}
				public Boolean PORRETIsKey(){
				    return false;
				}
				public Integer PORRETLength(){
				    return null;
				}
				public Integer PORRETPrecision(){
				    return null;
				}
				public String PORRETDefault(){
				
					return "";
				
				}
				public String PORRETComment(){
				
				    return "";
				
				}
				public String PORRETPattern(){
				
					return "";
				
				}
				public String PORRETOriginalDbColumnName(){
				
					return "PORRET";
				
				}

				
			    public BigDecimal PORVAT;

				public BigDecimal getPORVAT () {
					return this.PORVAT;
				}

				public Boolean PORVATIsNullable(){
				    return true;
				}
				public Boolean PORVATIsKey(){
				    return false;
				}
				public Integer PORVATLength(){
				    return null;
				}
				public Integer PORVATPrecision(){
				    return null;
				}
				public String PORVATDefault(){
				
					return "";
				
				}
				public String PORVATComment(){
				
				    return "";
				
				}
				public String PORVATPattern(){
				
					return "";
				
				}
				public String PORVATOriginalDbColumnName(){
				
					return "PORVAT";
				
				}

				
			    public BigDecimal PORCST;

				public BigDecimal getPORCST () {
					return this.PORCST;
				}

				public Boolean PORCSTIsNullable(){
				    return true;
				}
				public Boolean PORCSTIsKey(){
				    return false;
				}
				public Integer PORCSTLength(){
				    return null;
				}
				public Integer PORCSTPrecision(){
				    return null;
				}
				public String PORCSTDefault(){
				
					return "";
				
				}
				public String PORCSTComment(){
				
				    return "";
				
				}
				public String PORCSTPattern(){
				
					return "";
				
				}
				public String PORCSTOriginalDbColumnName(){
				
					return "PORCST";
				
				}

				
			    public BigDecimal POTPLT;

				public BigDecimal getPOTPLT () {
					return this.POTPLT;
				}

				public Boolean POTPLTIsNullable(){
				    return true;
				}
				public Boolean POTPLTIsKey(){
				    return false;
				}
				public Integer POTPLTLength(){
				    return null;
				}
				public Integer POTPLTPrecision(){
				    return null;
				}
				public String POTPLTDefault(){
				
					return "";
				
				}
				public String POTPLTComment(){
				
				    return "";
				
				}
				public String POTPLTPattern(){
				
					return "";
				
				}
				public String POTPLTOriginalDbColumnName(){
				
					return "POTPLT";
				
				}

				
			    public BigDecimal POCUBE;

				public BigDecimal getPOCUBE () {
					return this.POCUBE;
				}

				public Boolean POCUBEIsNullable(){
				    return true;
				}
				public Boolean POCUBEIsKey(){
				    return false;
				}
				public Integer POCUBELength(){
				    return null;
				}
				public Integer POCUBEPrecision(){
				    return null;
				}
				public String POCUBEDefault(){
				
					return "";
				
				}
				public String POCUBEComment(){
				
				    return "";
				
				}
				public String POCUBEPattern(){
				
					return "";
				
				}
				public String POCUBEOriginalDbColumnName(){
				
					return "POCUBE";
				
				}

				
			    public BigDecimal POPDCN;

				public BigDecimal getPOPDCN () {
					return this.POPDCN;
				}

				public Boolean POPDCNIsNullable(){
				    return true;
				}
				public Boolean POPDCNIsKey(){
				    return false;
				}
				public Integer POPDCNLength(){
				    return null;
				}
				public Integer POPDCNPrecision(){
				    return null;
				}
				public String POPDCNDefault(){
				
					return "";
				
				}
				public String POPDCNComment(){
				
				    return "";
				
				}
				public String POPDCNPattern(){
				
					return "";
				
				}
				public String POPDCNOriginalDbColumnName(){
				
					return "POPDCN";
				
				}

				
			    public Double POPDWN;

				public Double getPOPDWN () {
					return this.POPDWN;
				}

				public Boolean POPDWNIsNullable(){
				    return true;
				}
				public Boolean POPDWNIsKey(){
				    return false;
				}
				public Integer POPDWNLength(){
				    return null;
				}
				public Integer POPDWNPrecision(){
				    return null;
				}
				public String POPDWNDefault(){
				
					return "";
				
				}
				public String POPDWNComment(){
				
				    return "";
				
				}
				public String POPDWNPattern(){
				
					return "";
				
				}
				public String POPDWNOriginalDbColumnName(){
				
					return "POPDWN";
				
				}

				
			    public Double SHPNUM;

				public Double getSHPNUM () {
					return this.SHPNUM;
				}

				public Boolean SHPNUMIsNullable(){
				    return true;
				}
				public Boolean SHPNUMIsKey(){
				    return false;
				}
				public Integer SHPNUMLength(){
				    return null;
				}
				public Integer SHPNUMPrecision(){
				    return null;
				}
				public String SHPNUMDefault(){
				
					return "";
				
				}
				public String SHPNUMComment(){
				
				    return "";
				
				}
				public String SHPNUMPattern(){
				
					return "";
				
				}
				public String SHPNUMOriginalDbColumnName(){
				
					return "SHPNUM";
				
				}

				
			    public BigDecimal POPYCN;

				public BigDecimal getPOPYCN () {
					return this.POPYCN;
				}

				public Boolean POPYCNIsNullable(){
				    return true;
				}
				public Boolean POPYCNIsKey(){
				    return false;
				}
				public Integer POPYCNLength(){
				    return null;
				}
				public Integer POPYCNPrecision(){
				    return null;
				}
				public String POPYCNDefault(){
				
					return "";
				
				}
				public String POPYCNComment(){
				
				    return "";
				
				}
				public String POPYCNPattern(){
				
					return "";
				
				}
				public String POPYCNOriginalDbColumnName(){
				
					return "POPYCN";
				
				}

				
			    public Double POPYDT;

				public Double getPOPYDT () {
					return this.POPYDT;
				}

				public Boolean POPYDTIsNullable(){
				    return true;
				}
				public Boolean POPYDTIsKey(){
				    return false;
				}
				public Integer POPYDTLength(){
				    return null;
				}
				public Integer POPYDTPrecision(){
				    return null;
				}
				public String POPYDTDefault(){
				
					return "";
				
				}
				public String POPYDTComment(){
				
				    return "";
				
				}
				public String POPYDTPattern(){
				
					return "";
				
				}
				public String POPYDTOriginalDbColumnName(){
				
					return "POPYDT";
				
				}

				
			    public String POBYTP;

				public String getPOBYTP () {
					return this.POBYTP;
				}

				public Boolean POBYTPIsNullable(){
				    return true;
				}
				public Boolean POBYTPIsKey(){
				    return false;
				}
				public Integer POBYTPLength(){
				    return null;
				}
				public Integer POBYTPPrecision(){
				    return null;
				}
				public String POBYTPDefault(){
				
					return "";
				
				}
				public String POBYTPComment(){
				
				    return "";
				
				}
				public String POBYTPPattern(){
				
					return "";
				
				}
				public String POBYTPOriginalDbColumnName(){
				
					return "POBYTP";
				
				}

				
			    public BigDecimal POMALS;

				public BigDecimal getPOMALS () {
					return this.POMALS;
				}

				public Boolean POMALSIsNullable(){
				    return true;
				}
				public Boolean POMALSIsKey(){
				    return false;
				}
				public Integer POMALSLength(){
				    return null;
				}
				public Integer POMALSPrecision(){
				    return null;
				}
				public String POMALSDefault(){
				
					return "";
				
				}
				public String POMALSComment(){
				
				    return "";
				
				}
				public String POMALSPattern(){
				
					return "";
				
				}
				public String POMALSOriginalDbColumnName(){
				
					return "POMALS";
				
				}

				
			    public BigDecimal POMALV;

				public BigDecimal getPOMALV () {
					return this.POMALV;
				}

				public Boolean POMALVIsNullable(){
				    return true;
				}
				public Boolean POMALVIsKey(){
				    return false;
				}
				public Integer POMALVLength(){
				    return null;
				}
				public Integer POMALVPrecision(){
				    return null;
				}
				public String POMALVDefault(){
				
					return "";
				
				}
				public String POMALVComment(){
				
				    return "";
				
				}
				public String POMALVPattern(){
				
					return "";
				
				}
				public String POMALVOriginalDbColumnName(){
				
					return "POMALV";
				
				}

				
			    public Double POMSPO;

				public Double getPOMSPO () {
					return this.POMSPO;
				}

				public Boolean POMSPOIsNullable(){
				    return true;
				}
				public Boolean POMSPOIsKey(){
				    return false;
				}
				public Integer POMSPOLength(){
				    return null;
				}
				public Integer POMSPOPrecision(){
				    return null;
				}
				public String POMSPODefault(){
				
					return "";
				
				}
				public String POMSPOComment(){
				
				    return "";
				
				}
				public String POMSPOPattern(){
				
					return "";
				
				}
				public String POMSPOOriginalDbColumnName(){
				
					return "POMSPO";
				
				}

				
			    public Double POMSBO;

				public Double getPOMSBO () {
					return this.POMSBO;
				}

				public Boolean POMSBOIsNullable(){
				    return true;
				}
				public Boolean POMSBOIsKey(){
				    return false;
				}
				public Integer POMSBOLength(){
				    return null;
				}
				public Integer POMSBOPrecision(){
				    return null;
				}
				public String POMSBODefault(){
				
					return "";
				
				}
				public String POMSBOComment(){
				
				    return "";
				
				}
				public String POMSBOPattern(){
				
					return "";
				
				}
				public String POMSBOOriginalDbColumnName(){
				
					return "POMSBO";
				
				}

				
			    public Double POLOAD;

				public Double getPOLOAD () {
					return this.POLOAD;
				}

				public Boolean POLOADIsNullable(){
				    return true;
				}
				public Boolean POLOADIsKey(){
				    return false;
				}
				public Integer POLOADLength(){
				    return null;
				}
				public Integer POLOADPrecision(){
				    return null;
				}
				public String POLOADDefault(){
				
					return "";
				
				}
				public String POLOADComment(){
				
				    return "";
				
				}
				public String POLOADPattern(){
				
					return "";
				
				}
				public String POLOADOriginalDbColumnName(){
				
					return "POLOAD";
				
				}

				
			    public BigDecimal POMCRT;

				public BigDecimal getPOMCRT () {
					return this.POMCRT;
				}

				public Boolean POMCRTIsNullable(){
				    return true;
				}
				public Boolean POMCRTIsKey(){
				    return false;
				}
				public Integer POMCRTLength(){
				    return null;
				}
				public Integer POMCRTPrecision(){
				    return null;
				}
				public String POMCRTDefault(){
				
					return "";
				
				}
				public String POMCRTComment(){
				
				    return "";
				
				}
				public String POMCRTPattern(){
				
					return "";
				
				}
				public String POMCRTOriginalDbColumnName(){
				
					return "POMCRT";
				
				}

				
			    public BigDecimal POMCCN;

				public BigDecimal getPOMCCN () {
					return this.POMCCN;
				}

				public Boolean POMCCNIsNullable(){
				    return true;
				}
				public Boolean POMCCNIsKey(){
				    return false;
				}
				public Integer POMCCNLength(){
				    return null;
				}
				public Integer POMCCNPrecision(){
				    return null;
				}
				public String POMCCNDefault(){
				
					return "";
				
				}
				public String POMCCNComment(){
				
				    return "";
				
				}
				public String POMCCNPattern(){
				
					return "";
				
				}
				public String POMCCNOriginalDbColumnName(){
				
					return "POMCCN";
				
				}

				
			    public BigDecimal POMCDT;

				public BigDecimal getPOMCDT () {
					return this.POMCDT;
				}

				public Boolean POMCDTIsNullable(){
				    return true;
				}
				public Boolean POMCDTIsKey(){
				    return false;
				}
				public Integer POMCDTLength(){
				    return null;
				}
				public Integer POMCDTPrecision(){
				    return null;
				}
				public String POMCDTDefault(){
				
					return "";
				
				}
				public String POMCDTComment(){
				
				    return "";
				
				}
				public String POMCDTPattern(){
				
					return "";
				
				}
				public String POMCDTOriginalDbColumnName(){
				
					return "POMCDT";
				
				}

				
			    public String POQCKE;

				public String getPOQCKE () {
					return this.POQCKE;
				}

				public Boolean POQCKEIsNullable(){
				    return true;
				}
				public Boolean POQCKEIsKey(){
				    return false;
				}
				public Integer POQCKELength(){
				    return null;
				}
				public Integer POQCKEPrecision(){
				    return null;
				}
				public String POQCKEDefault(){
				
					return "";
				
				}
				public String POQCKEComment(){
				
				    return "";
				
				}
				public String POQCKEPattern(){
				
					return "";
				
				}
				public String POQCKEOriginalDbColumnName(){
				
					return "POQCKE";
				
				}

				
			    public String POMTYP;

				public String getPOMTYP () {
					return this.POMTYP;
				}

				public Boolean POMTYPIsNullable(){
				    return true;
				}
				public Boolean POMTYPIsKey(){
				    return false;
				}
				public Integer POMTYPLength(){
				    return null;
				}
				public Integer POMTYPPrecision(){
				    return null;
				}
				public String POMTYPDefault(){
				
					return "";
				
				}
				public String POMTYPComment(){
				
				    return "";
				
				}
				public String POMTYPPattern(){
				
					return "";
				
				}
				public String POMTYPOriginalDbColumnName(){
				
					return "POMTYP";
				
				}

				
			    public String PO850F;

				public String getPO850F () {
					return this.PO850F;
				}

				public Boolean PO850FIsNullable(){
				    return true;
				}
				public Boolean PO850FIsKey(){
				    return false;
				}
				public Integer PO850FLength(){
				    return null;
				}
				public Integer PO850FPrecision(){
				    return null;
				}
				public String PO850FDefault(){
				
					return "";
				
				}
				public String PO850FComment(){
				
				    return "";
				
				}
				public String PO850FPattern(){
				
					return "";
				
				}
				public String PO850FOriginalDbColumnName(){
				
					return "PO850F";
				
				}

				
			    public String PO860F;

				public String getPO860F () {
					return this.PO860F;
				}

				public Boolean PO860FIsNullable(){
				    return true;
				}
				public Boolean PO860FIsKey(){
				    return false;
				}
				public Integer PO860FLength(){
				    return null;
				}
				public Integer PO860FPrecision(){
				    return null;
				}
				public String PO860FDefault(){
				
					return "";
				
				}
				public String PO860FComment(){
				
				    return "";
				
				}
				public String PO860FPattern(){
				
					return "";
				
				}
				public String PO860FOriginalDbColumnName(){
				
					return "PO860F";
				
				}

				
			    public String POTPID;

				public String getPOTPID () {
					return this.POTPID;
				}

				public Boolean POTPIDIsNullable(){
				    return true;
				}
				public Boolean POTPIDIsKey(){
				    return false;
				}
				public Integer POTPIDLength(){
				    return null;
				}
				public Integer POTPIDPrecision(){
				    return null;
				}
				public String POTPIDDefault(){
				
					return "";
				
				}
				public String POTPIDComment(){
				
				    return "";
				
				}
				public String POTPIDPattern(){
				
					return "";
				
				}
				public String POTPIDOriginalDbColumnName(){
				
					return "POTPID";
				
				}

				
			    public BigDecimal POBSCN;

				public BigDecimal getPOBSCN () {
					return this.POBSCN;
				}

				public Boolean POBSCNIsNullable(){
				    return true;
				}
				public Boolean POBSCNIsKey(){
				    return false;
				}
				public Integer POBSCNLength(){
				    return null;
				}
				public Integer POBSCNPrecision(){
				    return null;
				}
				public String POBSCNDefault(){
				
					return "";
				
				}
				public String POBSCNComment(){
				
				    return "";
				
				}
				public String POBSCNPattern(){
				
					return "";
				
				}
				public String POBSCNOriginalDbColumnName(){
				
					return "POBSCN";
				
				}

				
			    public Double POBSDT;

				public Double getPOBSDT () {
					return this.POBSDT;
				}

				public Boolean POBSDTIsNullable(){
				    return true;
				}
				public Boolean POBSDTIsKey(){
				    return false;
				}
				public Integer POBSDTLength(){
				    return null;
				}
				public Integer POBSDTPrecision(){
				    return null;
				}
				public String POBSDTDefault(){
				
					return "";
				
				}
				public String POBSDTComment(){
				
				    return "";
				
				}
				public String POBSDTPattern(){
				
					return "";
				
				}
				public String POBSDTOriginalDbColumnName(){
				
					return "POBSDT";
				
				}

				
			    public BigDecimal POASCN;

				public BigDecimal getPOASCN () {
					return this.POASCN;
				}

				public Boolean POASCNIsNullable(){
				    return true;
				}
				public Boolean POASCNIsKey(){
				    return false;
				}
				public Integer POASCNLength(){
				    return null;
				}
				public Integer POASCNPrecision(){
				    return null;
				}
				public String POASCNDefault(){
				
					return "";
				
				}
				public String POASCNComment(){
				
				    return "";
				
				}
				public String POASCNPattern(){
				
					return "";
				
				}
				public String POASCNOriginalDbColumnName(){
				
					return "POASCN";
				
				}

				
			    public Double POASDT;

				public Double getPOASDT () {
					return this.POASDT;
				}

				public Boolean POASDTIsNullable(){
				    return true;
				}
				public Boolean POASDTIsKey(){
				    return false;
				}
				public Integer POASDTLength(){
				    return null;
				}
				public Integer POASDTPrecision(){
				    return null;
				}
				public String POASDTDefault(){
				
					return "";
				
				}
				public String POASDTComment(){
				
				    return "";
				
				}
				public String POASDTPattern(){
				
					return "";
				
				}
				public String POASDTOriginalDbColumnName(){
				
					return "POASDT";
				
				}

				
			    public String POCODF;

				public String getPOCODF () {
					return this.POCODF;
				}

				public Boolean POCODFIsNullable(){
				    return true;
				}
				public Boolean POCODFIsKey(){
				    return false;
				}
				public Integer POCODFLength(){
				    return null;
				}
				public Integer POCODFPrecision(){
				    return null;
				}
				public String POCODFDefault(){
				
					return null;
				
				}
				public String POCODFComment(){
				
				    return "";
				
				}
				public String POCODFPattern(){
				
					return "";
				
				}
				public String POCODFOriginalDbColumnName(){
				
					return "POCODF";
				
				}

				
			    public String POCODT;

				public String getPOCODT () {
					return this.POCODT;
				}

				public Boolean POCODTIsNullable(){
				    return true;
				}
				public Boolean POCODTIsKey(){
				    return false;
				}
				public Integer POCODTLength(){
				    return null;
				}
				public Integer POCODTPrecision(){
				    return null;
				}
				public String POCODTDefault(){
				
					return null;
				
				}
				public String POCODTComment(){
				
				    return "";
				
				}
				public String POCODTPattern(){
				
					return "";
				
				}
				public String POCODTOriginalDbColumnName(){
				
					return "POCODT";
				
				}

				
			    public String POCVTP;

				public String getPOCVTP () {
					return this.POCVTP;
				}

				public Boolean POCVTPIsNullable(){
				    return true;
				}
				public Boolean POCVTPIsKey(){
				    return false;
				}
				public Integer POCVTPLength(){
				    return null;
				}
				public Integer POCVTPPrecision(){
				    return null;
				}
				public String POCVTPDefault(){
				
					return null;
				
				}
				public String POCVTPComment(){
				
				    return "";
				
				}
				public String POCVTPPattern(){
				
					return "";
				
				}
				public String POCVTPOriginalDbColumnName(){
				
					return "POCVTP";
				
				}

				
			    public String POCVMD;

				public String getPOCVMD () {
					return this.POCVMD;
				}

				public Boolean POCVMDIsNullable(){
				    return true;
				}
				public Boolean POCVMDIsKey(){
				    return false;
				}
				public Integer POCVMDLength(){
				    return null;
				}
				public Integer POCVMDPrecision(){
				    return null;
				}
				public String POCVMDDefault(){
				
					return null;
				
				}
				public String POCVMDComment(){
				
				    return "";
				
				}
				public String POCVMDPattern(){
				
					return "";
				
				}
				public String POCVMDOriginalDbColumnName(){
				
					return "POCVMD";
				
				}

				
			    public String POMCPY;

				public String getPOMCPY () {
					return this.POMCPY;
				}

				public Boolean POMCPYIsNullable(){
				    return true;
				}
				public Boolean POMCPYIsKey(){
				    return false;
				}
				public Integer POMCPYLength(){
				    return null;
				}
				public Integer POMCPYPrecision(){
				    return null;
				}
				public String POMCPYDefault(){
				
					return null;
				
				}
				public String POMCPYComment(){
				
				    return "";
				
				}
				public String POMCPYPattern(){
				
					return "";
				
				}
				public String POMCPYOriginalDbColumnName(){
				
					return "POMCPY";
				
				}

				
			    public java.util.Date LOAD_DATE;

				public java.util.Date getLOAD_DATE () {
					return this.LOAD_DATE;
				}

				public Boolean LOAD_DATEIsNullable(){
				    return true;
				}
				public Boolean LOAD_DATEIsKey(){
				    return false;
				}
				public Integer LOAD_DATELength(){
				    return null;
				}
				public Integer LOAD_DATEPrecision(){
				    return null;
				}
				public String LOAD_DATEDefault(){
				
					return null;
				
				}
				public String LOAD_DATEComment(){
				
				    return "";
				
				}
				public String LOAD_DATEPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String LOAD_DATEOriginalDbColumnName(){
				
					return "LOAD_DATE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PONUMB = null;
           				} else {
           			    	this.PONUMB = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBON = null;
           				} else {
           			    	this.POBON = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POVNUM = null;
           				} else {
           			    	this.POVNUM = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POTRMS = null;
           				} else {
           			    	this.POTRMS = dis.readDouble();
           				}
					
					this.POTIND = readString(dis);
					
					this.POSTAT = readString(dis);
					
					this.POTYPE = readString(dis);
					
					this.PODEST = readString(dis);
					
						this.POSTOR = (BigDecimal) dis.readObject();
					
					this.POADYN = readString(dis);
					
					this.PODMTH = readString(dis);
					
					this.POALBO = readString(dis);
					
					this.POCONF = readString(dis);
					
					this.POPHON = readString(dis);
					
					this.POBUYR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PODPT = null;
           				} else {
           			    	this.PODPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSDPT = null;
           				} else {
           			    	this.POSDPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POTHER = null;
           				} else {
           			    	this.POTHER = dis.readDouble();
           				}
					
					this.POFPCD = readString(dis);
					
					this.POFOB = readString(dis);
					
					this.POSHP1 = readString(dis);
					
					this.POSHP2 = readString(dis);
					
					this.POSHPP = readString(dis);
					
					this.POSHPC = readString(dis);
					
						this.POECEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POEDAT = null;
           				} else {
           			    	this.POEDAT = dis.readDouble();
           				}
					
						this.POSCEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSDAT = null;
           				} else {
           			    	this.POSDAT = dis.readDouble();
           				}
					
						this.POCCEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POCDAT = null;
           				} else {
           			    	this.POCDAT = dis.readDouble();
           				}
					
						this.PORCEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORDAT = null;
           				} else {
           			    	this.PORDAT = dis.readDouble();
           				}
					
						this.POLCCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POLCHG = null;
           				} else {
           			    	this.POLCHG = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORFRQ = null;
           				} else {
           			    	this.PORFRQ = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POLEAD = null;
           				} else {
           			    	this.POLEAD = dis.readDouble();
           				}
					
					this.POORIG = readString(dis);
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
						this.POCOST = (BigDecimal) dis.readObject();
					
						this.POVAT = (BigDecimal) dis.readObject();
					
						this.PORETL = (BigDecimal) dis.readObject();
					
						this.POCASE = (BigDecimal) dis.readObject();
					
						this.POUNTS = (BigDecimal) dis.readObject();
					
						this.POWGHT = (BigDecimal) dis.readObject();
					
						this.POTARP = (BigDecimal) dis.readObject();
					
						this.POSTOP = (BigDecimal) dis.readObject();
					
						this.POSKID = (BigDecimal) dis.readObject();
					
						this.POOTHN = (BigDecimal) dis.readObject();
					
						this.POOTHP = (BigDecimal) dis.readObject();
					
						this.POBTCH = (BigDecimal) dis.readObject();
					
						this.PORRET = (BigDecimal) dis.readObject();
					
						this.PORVAT = (BigDecimal) dis.readObject();
					
						this.PORCST = (BigDecimal) dis.readObject();
					
						this.POTPLT = (BigDecimal) dis.readObject();
					
						this.POCUBE = (BigDecimal) dis.readObject();
					
						this.POPDCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POPDWN = null;
           				} else {
           			    	this.POPDWN = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SHPNUM = null;
           				} else {
           			    	this.SHPNUM = dis.readDouble();
           				}
					
						this.POPYCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POPYDT = null;
           				} else {
           			    	this.POPYDT = dis.readDouble();
           				}
					
					this.POBYTP = readString(dis);
					
						this.POMALS = (BigDecimal) dis.readObject();
					
						this.POMALV = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POMSPO = null;
           				} else {
           			    	this.POMSPO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POMSBO = null;
           				} else {
           			    	this.POMSBO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POLOAD = null;
           				} else {
           			    	this.POLOAD = dis.readDouble();
           				}
					
						this.POMCRT = (BigDecimal) dis.readObject();
					
						this.POMCCN = (BigDecimal) dis.readObject();
					
						this.POMCDT = (BigDecimal) dis.readObject();
					
					this.POQCKE = readString(dis);
					
					this.POMTYP = readString(dis);
					
					this.PO850F = readString(dis);
					
					this.PO860F = readString(dis);
					
					this.POTPID = readString(dis);
					
						this.POBSCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBSDT = null;
           				} else {
           			    	this.POBSDT = dis.readDouble();
           				}
					
						this.POASCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POASDT = null;
           				} else {
           			    	this.POASDT = dis.readDouble();
           				}
					
					this.POCODF = readString(dis);
					
					this.POCODT = readString(dis);
					
					this.POCVTP = readString(dis);
					
					this.POCVMD = readString(dis);
					
					this.POMCPY = readString(dis);
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PONUMB = null;
           				} else {
           			    	this.PONUMB = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBON = null;
           				} else {
           			    	this.POBON = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POVNUM = null;
           				} else {
           			    	this.POVNUM = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POTRMS = null;
           				} else {
           			    	this.POTRMS = dis.readDouble();
           				}
					
					this.POTIND = readString(dis);
					
					this.POSTAT = readString(dis);
					
					this.POTYPE = readString(dis);
					
					this.PODEST = readString(dis);
					
						this.POSTOR = (BigDecimal) dis.readObject();
					
					this.POADYN = readString(dis);
					
					this.PODMTH = readString(dis);
					
					this.POALBO = readString(dis);
					
					this.POCONF = readString(dis);
					
					this.POPHON = readString(dis);
					
					this.POBUYR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PODPT = null;
           				} else {
           			    	this.PODPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSDPT = null;
           				} else {
           			    	this.POSDPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POTHER = null;
           				} else {
           			    	this.POTHER = dis.readDouble();
           				}
					
					this.POFPCD = readString(dis);
					
					this.POFOB = readString(dis);
					
					this.POSHP1 = readString(dis);
					
					this.POSHP2 = readString(dis);
					
					this.POSHPP = readString(dis);
					
					this.POSHPC = readString(dis);
					
						this.POECEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POEDAT = null;
           				} else {
           			    	this.POEDAT = dis.readDouble();
           				}
					
						this.POSCEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSDAT = null;
           				} else {
           			    	this.POSDAT = dis.readDouble();
           				}
					
						this.POCCEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POCDAT = null;
           				} else {
           			    	this.POCDAT = dis.readDouble();
           				}
					
						this.PORCEN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORDAT = null;
           				} else {
           			    	this.PORDAT = dis.readDouble();
           				}
					
						this.POLCCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POLCHG = null;
           				} else {
           			    	this.POLCHG = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORFRQ = null;
           				} else {
           			    	this.PORFRQ = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POLEAD = null;
           				} else {
           			    	this.POLEAD = dis.readDouble();
           				}
					
					this.POORIG = readString(dis);
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
						this.POCOST = (BigDecimal) dis.readObject();
					
						this.POVAT = (BigDecimal) dis.readObject();
					
						this.PORETL = (BigDecimal) dis.readObject();
					
						this.POCASE = (BigDecimal) dis.readObject();
					
						this.POUNTS = (BigDecimal) dis.readObject();
					
						this.POWGHT = (BigDecimal) dis.readObject();
					
						this.POTARP = (BigDecimal) dis.readObject();
					
						this.POSTOP = (BigDecimal) dis.readObject();
					
						this.POSKID = (BigDecimal) dis.readObject();
					
						this.POOTHN = (BigDecimal) dis.readObject();
					
						this.POOTHP = (BigDecimal) dis.readObject();
					
						this.POBTCH = (BigDecimal) dis.readObject();
					
						this.PORRET = (BigDecimal) dis.readObject();
					
						this.PORVAT = (BigDecimal) dis.readObject();
					
						this.PORCST = (BigDecimal) dis.readObject();
					
						this.POTPLT = (BigDecimal) dis.readObject();
					
						this.POCUBE = (BigDecimal) dis.readObject();
					
						this.POPDCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POPDWN = null;
           				} else {
           			    	this.POPDWN = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SHPNUM = null;
           				} else {
           			    	this.SHPNUM = dis.readDouble();
           				}
					
						this.POPYCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POPYDT = null;
           				} else {
           			    	this.POPYDT = dis.readDouble();
           				}
					
					this.POBYTP = readString(dis);
					
						this.POMALS = (BigDecimal) dis.readObject();
					
						this.POMALV = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POMSPO = null;
           				} else {
           			    	this.POMSPO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POMSBO = null;
           				} else {
           			    	this.POMSBO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POLOAD = null;
           				} else {
           			    	this.POLOAD = dis.readDouble();
           				}
					
						this.POMCRT = (BigDecimal) dis.readObject();
					
						this.POMCCN = (BigDecimal) dis.readObject();
					
						this.POMCDT = (BigDecimal) dis.readObject();
					
					this.POQCKE = readString(dis);
					
					this.POMTYP = readString(dis);
					
					this.PO850F = readString(dis);
					
					this.PO860F = readString(dis);
					
					this.POTPID = readString(dis);
					
						this.POBSCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBSDT = null;
           				} else {
           			    	this.POBSDT = dis.readDouble();
           				}
					
						this.POASCN = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POASDT = null;
           				} else {
           			    	this.POASDT = dis.readDouble();
           				}
					
					this.POCODF = readString(dis);
					
					this.POCODT = readString(dis);
					
					this.POCVTP = readString(dis);
					
					this.POCVMD = readString(dis);
					
					this.POMCPY = readString(dis);
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PONUMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PONUMB);
		            	}
					
					// Double
				
						if(this.POBON == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBON);
		            	}
					
					// Double
				
						if(this.POVNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POVNUM);
		            	}
					
					// Double
				
						if(this.POTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POTRMS);
		            	}
					
					// String
				
						writeString(this.POTIND,dos);
					
					// String
				
						writeString(this.POSTAT,dos);
					
					// String
				
						writeString(this.POTYPE,dos);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOR);
					
					// String
				
						writeString(this.POADYN,dos);
					
					// String
				
						writeString(this.PODMTH,dos);
					
					// String
				
						writeString(this.POALBO,dos);
					
					// String
				
						writeString(this.POCONF,dos);
					
					// String
				
						writeString(this.POPHON,dos);
					
					// String
				
						writeString(this.POBUYR,dos);
					
					// Double
				
						if(this.PODPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PODPT);
		            	}
					
					// Double
				
						if(this.POSDPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSDPT);
		            	}
					
					// Double
				
						if(this.POTHER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POTHER);
		            	}
					
					// String
				
						writeString(this.POFPCD,dos);
					
					// String
				
						writeString(this.POFOB,dos);
					
					// String
				
						writeString(this.POSHP1,dos);
					
					// String
				
						writeString(this.POSHP2,dos);
					
					// String
				
						writeString(this.POSHPP,dos);
					
					// String
				
						writeString(this.POSHPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POECEN);
					
					// Double
				
						if(this.POEDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POEDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSCEN);
					
					// Double
				
						if(this.POSDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCCEN);
					
					// Double
				
						if(this.POCDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POCDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCEN);
					
					// Double
				
						if(this.PORDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLCCN);
					
					// Double
				
						if(this.POLCHG == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POLCHG);
		            	}
					
					// Double
				
						if(this.PORFRQ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORFRQ);
		            	}
					
					// Double
				
						if(this.POLEAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POLEAD);
		            	}
					
					// String
				
						writeString(this.POORIG,dos);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCOST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORETL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POUNTS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POWGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBTCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTPLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPDCN);
					
					// Double
				
						if(this.POPDWN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POPDWN);
		            	}
					
					// Double
				
						if(this.SHPNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SHPNUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPYCN);
					
					// Double
				
						if(this.POPYDT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POPYDT);
		            	}
					
					// String
				
						writeString(this.POBYTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALV);
					
					// Double
				
						if(this.POMSPO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POMSPO);
		            	}
					
					// Double
				
						if(this.POMSBO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POMSBO);
		            	}
					
					// Double
				
						if(this.POLOAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POLOAD);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCCN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCDT);
					
					// String
				
						writeString(this.POQCKE,dos);
					
					// String
				
						writeString(this.POMTYP,dos);
					
					// String
				
						writeString(this.PO850F,dos);
					
					// String
				
						writeString(this.PO860F,dos);
					
					// String
				
						writeString(this.POTPID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBSCN);
					
					// Double
				
						if(this.POBSDT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBSDT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POASCN);
					
					// Double
				
						if(this.POASDT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POASDT);
		            	}
					
					// String
				
						writeString(this.POCODF,dos);
					
					// String
				
						writeString(this.POCODT,dos);
					
					// String
				
						writeString(this.POCVTP,dos);
					
					// String
				
						writeString(this.POCVMD,dos);
					
					// String
				
						writeString(this.POMCPY,dos);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PONUMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PONUMB);
		            	}
					
					// Double
				
						if(this.POBON == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBON);
		            	}
					
					// Double
				
						if(this.POVNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POVNUM);
		            	}
					
					// Double
				
						if(this.POTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POTRMS);
		            	}
					
					// String
				
						writeString(this.POTIND,dos);
					
					// String
				
						writeString(this.POSTAT,dos);
					
					// String
				
						writeString(this.POTYPE,dos);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOR);
					
					// String
				
						writeString(this.POADYN,dos);
					
					// String
				
						writeString(this.PODMTH,dos);
					
					// String
				
						writeString(this.POALBO,dos);
					
					// String
				
						writeString(this.POCONF,dos);
					
					// String
				
						writeString(this.POPHON,dos);
					
					// String
				
						writeString(this.POBUYR,dos);
					
					// Double
				
						if(this.PODPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PODPT);
		            	}
					
					// Double
				
						if(this.POSDPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSDPT);
		            	}
					
					// Double
				
						if(this.POTHER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POTHER);
		            	}
					
					// String
				
						writeString(this.POFPCD,dos);
					
					// String
				
						writeString(this.POFOB,dos);
					
					// String
				
						writeString(this.POSHP1,dos);
					
					// String
				
						writeString(this.POSHP2,dos);
					
					// String
				
						writeString(this.POSHPP,dos);
					
					// String
				
						writeString(this.POSHPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POECEN);
					
					// Double
				
						if(this.POEDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POEDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSCEN);
					
					// Double
				
						if(this.POSDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCCEN);
					
					// Double
				
						if(this.POCDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POCDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCEN);
					
					// Double
				
						if(this.PORDAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORDAT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLCCN);
					
					// Double
				
						if(this.POLCHG == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POLCHG);
		            	}
					
					// Double
				
						if(this.PORFRQ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORFRQ);
		            	}
					
					// Double
				
						if(this.POLEAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POLEAD);
		            	}
					
					// String
				
						writeString(this.POORIG,dos);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCOST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORETL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POUNTS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POWGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBTCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTPLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPDCN);
					
					// Double
				
						if(this.POPDWN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POPDWN);
		            	}
					
					// Double
				
						if(this.SHPNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SHPNUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPYCN);
					
					// Double
				
						if(this.POPYDT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POPYDT);
		            	}
					
					// String
				
						writeString(this.POBYTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALV);
					
					// Double
				
						if(this.POMSPO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POMSPO);
		            	}
					
					// Double
				
						if(this.POMSBO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POMSBO);
		            	}
					
					// Double
				
						if(this.POLOAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POLOAD);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCCN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCDT);
					
					// String
				
						writeString(this.POQCKE,dos);
					
					// String
				
						writeString(this.POMTYP,dos);
					
					// String
				
						writeString(this.PO850F,dos);
					
					// String
				
						writeString(this.PO860F,dos);
					
					// String
				
						writeString(this.POTPID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBSCN);
					
					// Double
				
						if(this.POBSDT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBSDT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.POASCN);
					
					// Double
				
						if(this.POASDT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POASDT);
		            	}
					
					// String
				
						writeString(this.POCODF,dos);
					
					// String
				
						writeString(this.POCODT,dos);
					
					// String
				
						writeString(this.POCVTP,dos);
					
					// String
				
						writeString(this.POCVMD,dos);
					
					// String
				
						writeString(this.POMCPY,dos);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PONUMB="+String.valueOf(PONUMB));
		sb.append(",POBON="+String.valueOf(POBON));
		sb.append(",POVNUM="+String.valueOf(POVNUM));
		sb.append(",POTRMS="+String.valueOf(POTRMS));
		sb.append(",POTIND="+POTIND);
		sb.append(",POSTAT="+POSTAT);
		sb.append(",POTYPE="+POTYPE);
		sb.append(",PODEST="+PODEST);
		sb.append(",POSTOR="+String.valueOf(POSTOR));
		sb.append(",POADYN="+POADYN);
		sb.append(",PODMTH="+PODMTH);
		sb.append(",POALBO="+POALBO);
		sb.append(",POCONF="+POCONF);
		sb.append(",POPHON="+POPHON);
		sb.append(",POBUYR="+POBUYR);
		sb.append(",PODPT="+String.valueOf(PODPT));
		sb.append(",POSDPT="+String.valueOf(POSDPT));
		sb.append(",POTHER="+String.valueOf(POTHER));
		sb.append(",POFPCD="+POFPCD);
		sb.append(",POFOB="+POFOB);
		sb.append(",POSHP1="+POSHP1);
		sb.append(",POSHP2="+POSHP2);
		sb.append(",POSHPP="+POSHPP);
		sb.append(",POSHPC="+POSHPC);
		sb.append(",POECEN="+String.valueOf(POECEN));
		sb.append(",POEDAT="+String.valueOf(POEDAT));
		sb.append(",POSCEN="+String.valueOf(POSCEN));
		sb.append(",POSDAT="+String.valueOf(POSDAT));
		sb.append(",POCCEN="+String.valueOf(POCCEN));
		sb.append(",POCDAT="+String.valueOf(POCDAT));
		sb.append(",PORCEN="+String.valueOf(PORCEN));
		sb.append(",PORDAT="+String.valueOf(PORDAT));
		sb.append(",POLCCN="+String.valueOf(POLCCN));
		sb.append(",POLCHG="+String.valueOf(POLCHG));
		sb.append(",PORFRQ="+String.valueOf(PORFRQ));
		sb.append(",POLEAD="+String.valueOf(POLEAD));
		sb.append(",POORIG="+POORIG);
		sb.append(",PONOT1="+PONOT1);
		sb.append(",PONOT2="+PONOT2);
		sb.append(",PONOT3="+PONOT3);
		sb.append(",POCOST="+String.valueOf(POCOST));
		sb.append(",POVAT="+String.valueOf(POVAT));
		sb.append(",PORETL="+String.valueOf(PORETL));
		sb.append(",POCASE="+String.valueOf(POCASE));
		sb.append(",POUNTS="+String.valueOf(POUNTS));
		sb.append(",POWGHT="+String.valueOf(POWGHT));
		sb.append(",POTARP="+String.valueOf(POTARP));
		sb.append(",POSTOP="+String.valueOf(POSTOP));
		sb.append(",POSKID="+String.valueOf(POSKID));
		sb.append(",POOTHN="+String.valueOf(POOTHN));
		sb.append(",POOTHP="+String.valueOf(POOTHP));
		sb.append(",POBTCH="+String.valueOf(POBTCH));
		sb.append(",PORRET="+String.valueOf(PORRET));
		sb.append(",PORVAT="+String.valueOf(PORVAT));
		sb.append(",PORCST="+String.valueOf(PORCST));
		sb.append(",POTPLT="+String.valueOf(POTPLT));
		sb.append(",POCUBE="+String.valueOf(POCUBE));
		sb.append(",POPDCN="+String.valueOf(POPDCN));
		sb.append(",POPDWN="+String.valueOf(POPDWN));
		sb.append(",SHPNUM="+String.valueOf(SHPNUM));
		sb.append(",POPYCN="+String.valueOf(POPYCN));
		sb.append(",POPYDT="+String.valueOf(POPYDT));
		sb.append(",POBYTP="+POBYTP);
		sb.append(",POMALS="+String.valueOf(POMALS));
		sb.append(",POMALV="+String.valueOf(POMALV));
		sb.append(",POMSPO="+String.valueOf(POMSPO));
		sb.append(",POMSBO="+String.valueOf(POMSBO));
		sb.append(",POLOAD="+String.valueOf(POLOAD));
		sb.append(",POMCRT="+String.valueOf(POMCRT));
		sb.append(",POMCCN="+String.valueOf(POMCCN));
		sb.append(",POMCDT="+String.valueOf(POMCDT));
		sb.append(",POQCKE="+POQCKE);
		sb.append(",POMTYP="+POMTYP);
		sb.append(",PO850F="+PO850F);
		sb.append(",PO860F="+PO860F);
		sb.append(",POTPID="+POTPID);
		sb.append(",POBSCN="+String.valueOf(POBSCN));
		sb.append(",POBSDT="+String.valueOf(POBSDT));
		sb.append(",POASCN="+String.valueOf(POASCN));
		sb.append(",POASDT="+String.valueOf(POASDT));
		sb.append(",POCODF="+POCODF);
		sb.append(",POCODT="+POCODT);
		sb.append(",POCVTP="+POCVTP);
		sb.append(",POCVMD="+POCVMD);
		sb.append(",POMCPY="+POMCPY);
		sb.append(",LOAD_DATE="+String.valueOf(LOAD_DATE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(PONUMB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONUMB);
            			}
            		
        			sb.append("|");
        		
        				if(POBON == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBON);
            			}
            		
        			sb.append("|");
        		
        				if(POVNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POVNUM);
            			}
            		
        			sb.append("|");
        		
        				if(POTRMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTRMS);
            			}
            		
        			sb.append("|");
        		
        				if(POTIND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTIND);
            			}
            		
        			sb.append("|");
        		
        				if(POSTAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTAT);
            			}
            		
        			sb.append("|");
        		
        				if(POTYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTYPE);
            			}
            		
        			sb.append("|");
        		
        				if(PODEST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODEST);
            			}
            		
        			sb.append("|");
        		
        				if(POSTOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTOR);
            			}
            		
        			sb.append("|");
        		
        				if(POADYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POADYN);
            			}
            		
        			sb.append("|");
        		
        				if(PODMTH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODMTH);
            			}
            		
        			sb.append("|");
        		
        				if(POALBO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POALBO);
            			}
            		
        			sb.append("|");
        		
        				if(POCONF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCONF);
            			}
            		
        			sb.append("|");
        		
        				if(POPHON == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPHON);
            			}
            		
        			sb.append("|");
        		
        				if(POBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(PODPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODPT);
            			}
            		
        			sb.append("|");
        		
        				if(POSDPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSDPT);
            			}
            		
        			sb.append("|");
        		
        				if(POTHER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTHER);
            			}
            		
        			sb.append("|");
        		
        				if(POFPCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFPCD);
            			}
            		
        			sb.append("|");
        		
        				if(POFOB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFOB);
            			}
            		
        			sb.append("|");
        		
        				if(POSHP1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHP1);
            			}
            		
        			sb.append("|");
        		
        				if(POSHP2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHP2);
            			}
            		
        			sb.append("|");
        		
        				if(POSHPP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHPP);
            			}
            		
        			sb.append("|");
        		
        				if(POSHPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHPC);
            			}
            		
        			sb.append("|");
        		
        				if(POECEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POECEN);
            			}
            		
        			sb.append("|");
        		
        				if(POEDAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POEDAT);
            			}
            		
        			sb.append("|");
        		
        				if(POSCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSCEN);
            			}
            		
        			sb.append("|");
        		
        				if(POSDAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSDAT);
            			}
            		
        			sb.append("|");
        		
        				if(POCCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCCEN);
            			}
            		
        			sb.append("|");
        		
        				if(POCDAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCDAT);
            			}
            		
        			sb.append("|");
        		
        				if(PORCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORCEN);
            			}
            		
        			sb.append("|");
        		
        				if(PORDAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORDAT);
            			}
            		
        			sb.append("|");
        		
        				if(POLCCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLCCN);
            			}
            		
        			sb.append("|");
        		
        				if(POLCHG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLCHG);
            			}
            		
        			sb.append("|");
        		
        				if(PORFRQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORFRQ);
            			}
            		
        			sb.append("|");
        		
        				if(POLEAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLEAD);
            			}
            		
        			sb.append("|");
        		
        				if(POORIG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POORIG);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT1);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT3);
            			}
            		
        			sb.append("|");
        		
        				if(POCOST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCOST);
            			}
            		
        			sb.append("|");
        		
        				if(POVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POVAT);
            			}
            		
        			sb.append("|");
        		
        				if(PORETL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORETL);
            			}
            		
        			sb.append("|");
        		
        				if(POCASE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCASE);
            			}
            		
        			sb.append("|");
        		
        				if(POUNTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POUNTS);
            			}
            		
        			sb.append("|");
        		
        				if(POWGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POWGHT);
            			}
            		
        			sb.append("|");
        		
        				if(POTARP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTARP);
            			}
            		
        			sb.append("|");
        		
        				if(POSTOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTOP);
            			}
            		
        			sb.append("|");
        		
        				if(POSKID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSKID);
            			}
            		
        			sb.append("|");
        		
        				if(POOTHN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POOTHN);
            			}
            		
        			sb.append("|");
        		
        				if(POOTHP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POOTHP);
            			}
            		
        			sb.append("|");
        		
        				if(POBTCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBTCH);
            			}
            		
        			sb.append("|");
        		
        				if(PORRET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORRET);
            			}
            		
        			sb.append("|");
        		
        				if(PORVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORVAT);
            			}
            		
        			sb.append("|");
        		
        				if(PORCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORCST);
            			}
            		
        			sb.append("|");
        		
        				if(POTPLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTPLT);
            			}
            		
        			sb.append("|");
        		
        				if(POCUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCUBE);
            			}
            		
        			sb.append("|");
        		
        				if(POPDCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPDCN);
            			}
            		
        			sb.append("|");
        		
        				if(POPDWN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPDWN);
            			}
            		
        			sb.append("|");
        		
        				if(SHPNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHPNUM);
            			}
            		
        			sb.append("|");
        		
        				if(POPYCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPYCN);
            			}
            		
        			sb.append("|");
        		
        				if(POPYDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPYDT);
            			}
            		
        			sb.append("|");
        		
        				if(POBYTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBYTP);
            			}
            		
        			sb.append("|");
        		
        				if(POMALS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMALS);
            			}
            		
        			sb.append("|");
        		
        				if(POMALV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMALV);
            			}
            		
        			sb.append("|");
        		
        				if(POMSPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMSPO);
            			}
            		
        			sb.append("|");
        		
        				if(POMSBO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMSBO);
            			}
            		
        			sb.append("|");
        		
        				if(POLOAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLOAD);
            			}
            		
        			sb.append("|");
        		
        				if(POMCRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCRT);
            			}
            		
        			sb.append("|");
        		
        				if(POMCCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCCN);
            			}
            		
        			sb.append("|");
        		
        				if(POMCDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCDT);
            			}
            		
        			sb.append("|");
        		
        				if(POQCKE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POQCKE);
            			}
            		
        			sb.append("|");
        		
        				if(POMTYP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMTYP);
            			}
            		
        			sb.append("|");
        		
        				if(PO850F == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO850F);
            			}
            		
        			sb.append("|");
        		
        				if(PO860F == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO860F);
            			}
            		
        			sb.append("|");
        		
        				if(POTPID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTPID);
            			}
            		
        			sb.append("|");
        		
        				if(POBSCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBSCN);
            			}
            		
        			sb.append("|");
        		
        				if(POBSDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBSDT);
            			}
            		
        			sb.append("|");
        		
        				if(POASCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POASCN);
            			}
            		
        			sb.append("|");
        		
        				if(POASDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POASDT);
            			}
            		
        			sb.append("|");
        		
        				if(POCODF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCODF);
            			}
            		
        			sb.append("|");
        		
        				if(POCODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCODT);
            			}
            		
        			sb.append("|");
        		
        				if(POCVTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCVTP);
            			}
            		
        			sb.append("|");
        		
        				if(POCVMD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCVMD);
            			}
            		
        			sb.append("|");
        		
        				if(POMCPY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCPY);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_DATE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(tmap_POMHDRStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public double PONUMB;

				public double getPONUMB () {
					return this.PONUMB;
				}

				public Boolean PONUMBIsNullable(){
				    return false;
				}
				public Boolean PONUMBIsKey(){
				    return false;
				}
				public Integer PONUMBLength(){
				    return null;
				}
				public Integer PONUMBPrecision(){
				    return null;
				}
				public String PONUMBDefault(){
				
					return "";
				
				}
				public String PONUMBComment(){
				
				    return "";
				
				}
				public String PONUMBPattern(){
				
					return "";
				
				}
				public String PONUMBOriginalDbColumnName(){
				
					return "PONUMB";
				
				}

				
			    public double POBON;

				public double getPOBON () {
					return this.POBON;
				}

				public Boolean POBONIsNullable(){
				    return false;
				}
				public Boolean POBONIsKey(){
				    return false;
				}
				public Integer POBONLength(){
				    return null;
				}
				public Integer POBONPrecision(){
				    return null;
				}
				public String POBONDefault(){
				
					return "";
				
				}
				public String POBONComment(){
				
				    return "";
				
				}
				public String POBONPattern(){
				
					return "";
				
				}
				public String POBONOriginalDbColumnName(){
				
					return "POBON";
				
				}

				
			    public double POVNUM;

				public double getPOVNUM () {
					return this.POVNUM;
				}

				public Boolean POVNUMIsNullable(){
				    return false;
				}
				public Boolean POVNUMIsKey(){
				    return false;
				}
				public Integer POVNUMLength(){
				    return null;
				}
				public Integer POVNUMPrecision(){
				    return null;
				}
				public String POVNUMDefault(){
				
					return "";
				
				}
				public String POVNUMComment(){
				
				    return "";
				
				}
				public String POVNUMPattern(){
				
					return "";
				
				}
				public String POVNUMOriginalDbColumnName(){
				
					return "POVNUM";
				
				}

				
			    public double POTRMS;

				public double getPOTRMS () {
					return this.POTRMS;
				}

				public Boolean POTRMSIsNullable(){
				    return false;
				}
				public Boolean POTRMSIsKey(){
				    return false;
				}
				public Integer POTRMSLength(){
				    return null;
				}
				public Integer POTRMSPrecision(){
				    return null;
				}
				public String POTRMSDefault(){
				
					return "";
				
				}
				public String POTRMSComment(){
				
				    return "";
				
				}
				public String POTRMSPattern(){
				
					return "";
				
				}
				public String POTRMSOriginalDbColumnName(){
				
					return "POTRMS";
				
				}

				
			    public String POTIND;

				public String getPOTIND () {
					return this.POTIND;
				}

				public Boolean POTINDIsNullable(){
				    return false;
				}
				public Boolean POTINDIsKey(){
				    return false;
				}
				public Integer POTINDLength(){
				    return null;
				}
				public Integer POTINDPrecision(){
				    return null;
				}
				public String POTINDDefault(){
				
					return null;
				
				}
				public String POTINDComment(){
				
				    return "";
				
				}
				public String POTINDPattern(){
				
					return "";
				
				}
				public String POTINDOriginalDbColumnName(){
				
					return "POTIND";
				
				}

				
			    public String POSTAT;

				public String getPOSTAT () {
					return this.POSTAT;
				}

				public Boolean POSTATIsNullable(){
				    return false;
				}
				public Boolean POSTATIsKey(){
				    return false;
				}
				public Integer POSTATLength(){
				    return null;
				}
				public Integer POSTATPrecision(){
				    return null;
				}
				public String POSTATDefault(){
				
					return null;
				
				}
				public String POSTATComment(){
				
				    return "";
				
				}
				public String POSTATPattern(){
				
					return "";
				
				}
				public String POSTATOriginalDbColumnName(){
				
					return "POSTAT";
				
				}

				
			    public String POTYPE;

				public String getPOTYPE () {
					return this.POTYPE;
				}

				public Boolean POTYPEIsNullable(){
				    return false;
				}
				public Boolean POTYPEIsKey(){
				    return false;
				}
				public Integer POTYPELength(){
				    return null;
				}
				public Integer POTYPEPrecision(){
				    return null;
				}
				public String POTYPEDefault(){
				
					return null;
				
				}
				public String POTYPEComment(){
				
				    return "";
				
				}
				public String POTYPEPattern(){
				
					return "";
				
				}
				public String POTYPEOriginalDbColumnName(){
				
					return "POTYPE";
				
				}

				
			    public String PODEST;

				public String getPODEST () {
					return this.PODEST;
				}

				public Boolean PODESTIsNullable(){
				    return false;
				}
				public Boolean PODESTIsKey(){
				    return false;
				}
				public Integer PODESTLength(){
				    return null;
				}
				public Integer PODESTPrecision(){
				    return null;
				}
				public String PODESTDefault(){
				
					return null;
				
				}
				public String PODESTComment(){
				
				    return "";
				
				}
				public String PODESTPattern(){
				
					return "";
				
				}
				public String PODESTOriginalDbColumnName(){
				
					return "PODEST";
				
				}

				
			    public BigDecimal POSTOR;

				public BigDecimal getPOSTOR () {
					return this.POSTOR;
				}

				public Boolean POSTORIsNullable(){
				    return false;
				}
				public Boolean POSTORIsKey(){
				    return false;
				}
				public Integer POSTORLength(){
				    return null;
				}
				public Integer POSTORPrecision(){
				    return null;
				}
				public String POSTORDefault(){
				
					return "";
				
				}
				public String POSTORComment(){
				
				    return "";
				
				}
				public String POSTORPattern(){
				
					return "";
				
				}
				public String POSTOROriginalDbColumnName(){
				
					return "POSTOR";
				
				}

				
			    public String POADYN;

				public String getPOADYN () {
					return this.POADYN;
				}

				public Boolean POADYNIsNullable(){
				    return false;
				}
				public Boolean POADYNIsKey(){
				    return false;
				}
				public Integer POADYNLength(){
				    return null;
				}
				public Integer POADYNPrecision(){
				    return null;
				}
				public String POADYNDefault(){
				
					return null;
				
				}
				public String POADYNComment(){
				
				    return "";
				
				}
				public String POADYNPattern(){
				
					return "";
				
				}
				public String POADYNOriginalDbColumnName(){
				
					return "POADYN";
				
				}

				
			    public String PODMTH;

				public String getPODMTH () {
					return this.PODMTH;
				}

				public Boolean PODMTHIsNullable(){
				    return false;
				}
				public Boolean PODMTHIsKey(){
				    return false;
				}
				public Integer PODMTHLength(){
				    return null;
				}
				public Integer PODMTHPrecision(){
				    return null;
				}
				public String PODMTHDefault(){
				
					return null;
				
				}
				public String PODMTHComment(){
				
				    return "";
				
				}
				public String PODMTHPattern(){
				
					return "";
				
				}
				public String PODMTHOriginalDbColumnName(){
				
					return "PODMTH";
				
				}

				
			    public String POALBO;

				public String getPOALBO () {
					return this.POALBO;
				}

				public Boolean POALBOIsNullable(){
				    return false;
				}
				public Boolean POALBOIsKey(){
				    return false;
				}
				public Integer POALBOLength(){
				    return null;
				}
				public Integer POALBOPrecision(){
				    return null;
				}
				public String POALBODefault(){
				
					return null;
				
				}
				public String POALBOComment(){
				
				    return "";
				
				}
				public String POALBOPattern(){
				
					return "";
				
				}
				public String POALBOOriginalDbColumnName(){
				
					return "POALBO";
				
				}

				
			    public String POCONF;

				public String getPOCONF () {
					return this.POCONF;
				}

				public Boolean POCONFIsNullable(){
				    return false;
				}
				public Boolean POCONFIsKey(){
				    return false;
				}
				public Integer POCONFLength(){
				    return null;
				}
				public Integer POCONFPrecision(){
				    return null;
				}
				public String POCONFDefault(){
				
					return null;
				
				}
				public String POCONFComment(){
				
				    return "";
				
				}
				public String POCONFPattern(){
				
					return "";
				
				}
				public String POCONFOriginalDbColumnName(){
				
					return "POCONF";
				
				}

				
			    public String POPHON;

				public String getPOPHON () {
					return this.POPHON;
				}

				public Boolean POPHONIsNullable(){
				    return false;
				}
				public Boolean POPHONIsKey(){
				    return false;
				}
				public Integer POPHONLength(){
				    return null;
				}
				public Integer POPHONPrecision(){
				    return null;
				}
				public String POPHONDefault(){
				
					return null;
				
				}
				public String POPHONComment(){
				
				    return "";
				
				}
				public String POPHONPattern(){
				
					return "";
				
				}
				public String POPHONOriginalDbColumnName(){
				
					return "POPHON";
				
				}

				
			    public String POBUYR;

				public String getPOBUYR () {
					return this.POBUYR;
				}

				public Boolean POBUYRIsNullable(){
				    return false;
				}
				public Boolean POBUYRIsKey(){
				    return false;
				}
				public Integer POBUYRLength(){
				    return null;
				}
				public Integer POBUYRPrecision(){
				    return null;
				}
				public String POBUYRDefault(){
				
					return null;
				
				}
				public String POBUYRComment(){
				
				    return "";
				
				}
				public String POBUYRPattern(){
				
					return "";
				
				}
				public String POBUYROriginalDbColumnName(){
				
					return "POBUYR";
				
				}

				
			    public double PODPT;

				public double getPODPT () {
					return this.PODPT;
				}

				public Boolean PODPTIsNullable(){
				    return false;
				}
				public Boolean PODPTIsKey(){
				    return false;
				}
				public Integer PODPTLength(){
				    return null;
				}
				public Integer PODPTPrecision(){
				    return null;
				}
				public String PODPTDefault(){
				
					return "";
				
				}
				public String PODPTComment(){
				
				    return "";
				
				}
				public String PODPTPattern(){
				
					return "";
				
				}
				public String PODPTOriginalDbColumnName(){
				
					return "PODPT";
				
				}

				
			    public double POSDPT;

				public double getPOSDPT () {
					return this.POSDPT;
				}

				public Boolean POSDPTIsNullable(){
				    return false;
				}
				public Boolean POSDPTIsKey(){
				    return false;
				}
				public Integer POSDPTLength(){
				    return null;
				}
				public Integer POSDPTPrecision(){
				    return null;
				}
				public String POSDPTDefault(){
				
					return "";
				
				}
				public String POSDPTComment(){
				
				    return "";
				
				}
				public String POSDPTPattern(){
				
					return "";
				
				}
				public String POSDPTOriginalDbColumnName(){
				
					return "POSDPT";
				
				}

				
			    public double POTHER;

				public double getPOTHER () {
					return this.POTHER;
				}

				public Boolean POTHERIsNullable(){
				    return false;
				}
				public Boolean POTHERIsKey(){
				    return false;
				}
				public Integer POTHERLength(){
				    return null;
				}
				public Integer POTHERPrecision(){
				    return null;
				}
				public String POTHERDefault(){
				
					return "";
				
				}
				public String POTHERComment(){
				
				    return "";
				
				}
				public String POTHERPattern(){
				
					return "";
				
				}
				public String POTHEROriginalDbColumnName(){
				
					return "POTHER";
				
				}

				
			    public String POFPCD;

				public String getPOFPCD () {
					return this.POFPCD;
				}

				public Boolean POFPCDIsNullable(){
				    return false;
				}
				public Boolean POFPCDIsKey(){
				    return false;
				}
				public Integer POFPCDLength(){
				    return null;
				}
				public Integer POFPCDPrecision(){
				    return null;
				}
				public String POFPCDDefault(){
				
					return "";
				
				}
				public String POFPCDComment(){
				
				    return "";
				
				}
				public String POFPCDPattern(){
				
					return "";
				
				}
				public String POFPCDOriginalDbColumnName(){
				
					return "POFPCD";
				
				}

				
			    public String POFOB;

				public String getPOFOB () {
					return this.POFOB;
				}

				public Boolean POFOBIsNullable(){
				    return false;
				}
				public Boolean POFOBIsKey(){
				    return false;
				}
				public Integer POFOBLength(){
				    return null;
				}
				public Integer POFOBPrecision(){
				    return null;
				}
				public String POFOBDefault(){
				
					return "";
				
				}
				public String POFOBComment(){
				
				    return "";
				
				}
				public String POFOBPattern(){
				
					return "";
				
				}
				public String POFOBOriginalDbColumnName(){
				
					return "POFOB";
				
				}

				
			    public String POSHP1;

				public String getPOSHP1 () {
					return this.POSHP1;
				}

				public Boolean POSHP1IsNullable(){
				    return false;
				}
				public Boolean POSHP1IsKey(){
				    return false;
				}
				public Integer POSHP1Length(){
				    return null;
				}
				public Integer POSHP1Precision(){
				    return null;
				}
				public String POSHP1Default(){
				
					return "";
				
				}
				public String POSHP1Comment(){
				
				    return "";
				
				}
				public String POSHP1Pattern(){
				
					return "";
				
				}
				public String POSHP1OriginalDbColumnName(){
				
					return "POSHP1";
				
				}

				
			    public String POSHP2;

				public String getPOSHP2 () {
					return this.POSHP2;
				}

				public Boolean POSHP2IsNullable(){
				    return false;
				}
				public Boolean POSHP2IsKey(){
				    return false;
				}
				public Integer POSHP2Length(){
				    return null;
				}
				public Integer POSHP2Precision(){
				    return null;
				}
				public String POSHP2Default(){
				
					return "";
				
				}
				public String POSHP2Comment(){
				
				    return "";
				
				}
				public String POSHP2Pattern(){
				
					return "";
				
				}
				public String POSHP2OriginalDbColumnName(){
				
					return "POSHP2";
				
				}

				
			    public String POSHPP;

				public String getPOSHPP () {
					return this.POSHPP;
				}

				public Boolean POSHPPIsNullable(){
				    return false;
				}
				public Boolean POSHPPIsKey(){
				    return false;
				}
				public Integer POSHPPLength(){
				    return null;
				}
				public Integer POSHPPPrecision(){
				    return null;
				}
				public String POSHPPDefault(){
				
					return "";
				
				}
				public String POSHPPComment(){
				
				    return "";
				
				}
				public String POSHPPPattern(){
				
					return "";
				
				}
				public String POSHPPOriginalDbColumnName(){
				
					return "POSHPP";
				
				}

				
			    public String POSHPC;

				public String getPOSHPC () {
					return this.POSHPC;
				}

				public Boolean POSHPCIsNullable(){
				    return false;
				}
				public Boolean POSHPCIsKey(){
				    return false;
				}
				public Integer POSHPCLength(){
				    return null;
				}
				public Integer POSHPCPrecision(){
				    return null;
				}
				public String POSHPCDefault(){
				
					return "";
				
				}
				public String POSHPCComment(){
				
				    return "";
				
				}
				public String POSHPCPattern(){
				
					return "";
				
				}
				public String POSHPCOriginalDbColumnName(){
				
					return "POSHPC";
				
				}

				
			    public BigDecimal POECEN;

				public BigDecimal getPOECEN () {
					return this.POECEN;
				}

				public Boolean POECENIsNullable(){
				    return false;
				}
				public Boolean POECENIsKey(){
				    return false;
				}
				public Integer POECENLength(){
				    return null;
				}
				public Integer POECENPrecision(){
				    return null;
				}
				public String POECENDefault(){
				
					return "";
				
				}
				public String POECENComment(){
				
				    return "";
				
				}
				public String POECENPattern(){
				
					return "";
				
				}
				public String POECENOriginalDbColumnName(){
				
					return "POECEN";
				
				}

				
			    public double POEDAT;

				public double getPOEDAT () {
					return this.POEDAT;
				}

				public Boolean POEDATIsNullable(){
				    return false;
				}
				public Boolean POEDATIsKey(){
				    return false;
				}
				public Integer POEDATLength(){
				    return null;
				}
				public Integer POEDATPrecision(){
				    return null;
				}
				public String POEDATDefault(){
				
					return "";
				
				}
				public String POEDATComment(){
				
				    return "";
				
				}
				public String POEDATPattern(){
				
					return "";
				
				}
				public String POEDATOriginalDbColumnName(){
				
					return "POEDAT";
				
				}

				
			    public BigDecimal POSCEN;

				public BigDecimal getPOSCEN () {
					return this.POSCEN;
				}

				public Boolean POSCENIsNullable(){
				    return false;
				}
				public Boolean POSCENIsKey(){
				    return false;
				}
				public Integer POSCENLength(){
				    return null;
				}
				public Integer POSCENPrecision(){
				    return null;
				}
				public String POSCENDefault(){
				
					return "";
				
				}
				public String POSCENComment(){
				
				    return "";
				
				}
				public String POSCENPattern(){
				
					return "";
				
				}
				public String POSCENOriginalDbColumnName(){
				
					return "POSCEN";
				
				}

				
			    public double POSDAT;

				public double getPOSDAT () {
					return this.POSDAT;
				}

				public Boolean POSDATIsNullable(){
				    return false;
				}
				public Boolean POSDATIsKey(){
				    return false;
				}
				public Integer POSDATLength(){
				    return null;
				}
				public Integer POSDATPrecision(){
				    return null;
				}
				public String POSDATDefault(){
				
					return "";
				
				}
				public String POSDATComment(){
				
				    return "";
				
				}
				public String POSDATPattern(){
				
					return "";
				
				}
				public String POSDATOriginalDbColumnName(){
				
					return "POSDAT";
				
				}

				
			    public BigDecimal POCCEN;

				public BigDecimal getPOCCEN () {
					return this.POCCEN;
				}

				public Boolean POCCENIsNullable(){
				    return false;
				}
				public Boolean POCCENIsKey(){
				    return false;
				}
				public Integer POCCENLength(){
				    return null;
				}
				public Integer POCCENPrecision(){
				    return null;
				}
				public String POCCENDefault(){
				
					return "";
				
				}
				public String POCCENComment(){
				
				    return "";
				
				}
				public String POCCENPattern(){
				
					return "";
				
				}
				public String POCCENOriginalDbColumnName(){
				
					return "POCCEN";
				
				}

				
			    public double POCDAT;

				public double getPOCDAT () {
					return this.POCDAT;
				}

				public Boolean POCDATIsNullable(){
				    return false;
				}
				public Boolean POCDATIsKey(){
				    return false;
				}
				public Integer POCDATLength(){
				    return null;
				}
				public Integer POCDATPrecision(){
				    return null;
				}
				public String POCDATDefault(){
				
					return "";
				
				}
				public String POCDATComment(){
				
				    return "";
				
				}
				public String POCDATPattern(){
				
					return "";
				
				}
				public String POCDATOriginalDbColumnName(){
				
					return "POCDAT";
				
				}

				
			    public BigDecimal PORCEN;

				public BigDecimal getPORCEN () {
					return this.PORCEN;
				}

				public Boolean PORCENIsNullable(){
				    return false;
				}
				public Boolean PORCENIsKey(){
				    return false;
				}
				public Integer PORCENLength(){
				    return null;
				}
				public Integer PORCENPrecision(){
				    return null;
				}
				public String PORCENDefault(){
				
					return "";
				
				}
				public String PORCENComment(){
				
				    return "";
				
				}
				public String PORCENPattern(){
				
					return "";
				
				}
				public String PORCENOriginalDbColumnName(){
				
					return "PORCEN";
				
				}

				
			    public double PORDAT;

				public double getPORDAT () {
					return this.PORDAT;
				}

				public Boolean PORDATIsNullable(){
				    return false;
				}
				public Boolean PORDATIsKey(){
				    return false;
				}
				public Integer PORDATLength(){
				    return null;
				}
				public Integer PORDATPrecision(){
				    return null;
				}
				public String PORDATDefault(){
				
					return "";
				
				}
				public String PORDATComment(){
				
				    return "";
				
				}
				public String PORDATPattern(){
				
					return "";
				
				}
				public String PORDATOriginalDbColumnName(){
				
					return "PORDAT";
				
				}

				
			    public BigDecimal POLCCN;

				public BigDecimal getPOLCCN () {
					return this.POLCCN;
				}

				public Boolean POLCCNIsNullable(){
				    return false;
				}
				public Boolean POLCCNIsKey(){
				    return false;
				}
				public Integer POLCCNLength(){
				    return null;
				}
				public Integer POLCCNPrecision(){
				    return null;
				}
				public String POLCCNDefault(){
				
					return "";
				
				}
				public String POLCCNComment(){
				
				    return "";
				
				}
				public String POLCCNPattern(){
				
					return "";
				
				}
				public String POLCCNOriginalDbColumnName(){
				
					return "POLCCN";
				
				}

				
			    public double POLCHG;

				public double getPOLCHG () {
					return this.POLCHG;
				}

				public Boolean POLCHGIsNullable(){
				    return false;
				}
				public Boolean POLCHGIsKey(){
				    return false;
				}
				public Integer POLCHGLength(){
				    return null;
				}
				public Integer POLCHGPrecision(){
				    return null;
				}
				public String POLCHGDefault(){
				
					return "";
				
				}
				public String POLCHGComment(){
				
				    return "";
				
				}
				public String POLCHGPattern(){
				
					return "";
				
				}
				public String POLCHGOriginalDbColumnName(){
				
					return "POLCHG";
				
				}

				
			    public double PORFRQ;

				public double getPORFRQ () {
					return this.PORFRQ;
				}

				public Boolean PORFRQIsNullable(){
				    return false;
				}
				public Boolean PORFRQIsKey(){
				    return false;
				}
				public Integer PORFRQLength(){
				    return null;
				}
				public Integer PORFRQPrecision(){
				    return null;
				}
				public String PORFRQDefault(){
				
					return "";
				
				}
				public String PORFRQComment(){
				
				    return "";
				
				}
				public String PORFRQPattern(){
				
					return "";
				
				}
				public String PORFRQOriginalDbColumnName(){
				
					return "PORFRQ";
				
				}

				
			    public double POLEAD;

				public double getPOLEAD () {
					return this.POLEAD;
				}

				public Boolean POLEADIsNullable(){
				    return false;
				}
				public Boolean POLEADIsKey(){
				    return false;
				}
				public Integer POLEADLength(){
				    return null;
				}
				public Integer POLEADPrecision(){
				    return null;
				}
				public String POLEADDefault(){
				
					return "";
				
				}
				public String POLEADComment(){
				
				    return "";
				
				}
				public String POLEADPattern(){
				
					return "";
				
				}
				public String POLEADOriginalDbColumnName(){
				
					return "POLEAD";
				
				}

				
			    public String POORIG;

				public String getPOORIG () {
					return this.POORIG;
				}

				public Boolean POORIGIsNullable(){
				    return false;
				}
				public Boolean POORIGIsKey(){
				    return false;
				}
				public Integer POORIGLength(){
				    return null;
				}
				public Integer POORIGPrecision(){
				    return null;
				}
				public String POORIGDefault(){
				
					return "";
				
				}
				public String POORIGComment(){
				
				    return "";
				
				}
				public String POORIGPattern(){
				
					return "";
				
				}
				public String POORIGOriginalDbColumnName(){
				
					return "POORIG";
				
				}

				
			    public String PONOT1;

				public String getPONOT1 () {
					return this.PONOT1;
				}

				public Boolean PONOT1IsNullable(){
				    return false;
				}
				public Boolean PONOT1IsKey(){
				    return false;
				}
				public Integer PONOT1Length(){
				    return null;
				}
				public Integer PONOT1Precision(){
				    return null;
				}
				public String PONOT1Default(){
				
					return "";
				
				}
				public String PONOT1Comment(){
				
				    return "";
				
				}
				public String PONOT1Pattern(){
				
					return "";
				
				}
				public String PONOT1OriginalDbColumnName(){
				
					return "PONOT1";
				
				}

				
			    public String PONOT2;

				public String getPONOT2 () {
					return this.PONOT2;
				}

				public Boolean PONOT2IsNullable(){
				    return false;
				}
				public Boolean PONOT2IsKey(){
				    return false;
				}
				public Integer PONOT2Length(){
				    return null;
				}
				public Integer PONOT2Precision(){
				    return null;
				}
				public String PONOT2Default(){
				
					return "";
				
				}
				public String PONOT2Comment(){
				
				    return "";
				
				}
				public String PONOT2Pattern(){
				
					return "";
				
				}
				public String PONOT2OriginalDbColumnName(){
				
					return "PONOT2";
				
				}

				
			    public String PONOT3;

				public String getPONOT3 () {
					return this.PONOT3;
				}

				public Boolean PONOT3IsNullable(){
				    return false;
				}
				public Boolean PONOT3IsKey(){
				    return false;
				}
				public Integer PONOT3Length(){
				    return null;
				}
				public Integer PONOT3Precision(){
				    return null;
				}
				public String PONOT3Default(){
				
					return "";
				
				}
				public String PONOT3Comment(){
				
				    return "";
				
				}
				public String PONOT3Pattern(){
				
					return "";
				
				}
				public String PONOT3OriginalDbColumnName(){
				
					return "PONOT3";
				
				}

				
			    public BigDecimal POCOST;

				public BigDecimal getPOCOST () {
					return this.POCOST;
				}

				public Boolean POCOSTIsNullable(){
				    return false;
				}
				public Boolean POCOSTIsKey(){
				    return false;
				}
				public Integer POCOSTLength(){
				    return null;
				}
				public Integer POCOSTPrecision(){
				    return null;
				}
				public String POCOSTDefault(){
				
					return "";
				
				}
				public String POCOSTComment(){
				
				    return "";
				
				}
				public String POCOSTPattern(){
				
					return "";
				
				}
				public String POCOSTOriginalDbColumnName(){
				
					return "POCOST";
				
				}

				
			    public BigDecimal POVAT;

				public BigDecimal getPOVAT () {
					return this.POVAT;
				}

				public Boolean POVATIsNullable(){
				    return false;
				}
				public Boolean POVATIsKey(){
				    return false;
				}
				public Integer POVATLength(){
				    return null;
				}
				public Integer POVATPrecision(){
				    return null;
				}
				public String POVATDefault(){
				
					return "";
				
				}
				public String POVATComment(){
				
				    return "";
				
				}
				public String POVATPattern(){
				
					return "";
				
				}
				public String POVATOriginalDbColumnName(){
				
					return "POVAT";
				
				}

				
			    public BigDecimal PORETL;

				public BigDecimal getPORETL () {
					return this.PORETL;
				}

				public Boolean PORETLIsNullable(){
				    return false;
				}
				public Boolean PORETLIsKey(){
				    return false;
				}
				public Integer PORETLLength(){
				    return null;
				}
				public Integer PORETLPrecision(){
				    return null;
				}
				public String PORETLDefault(){
				
					return "";
				
				}
				public String PORETLComment(){
				
				    return "";
				
				}
				public String PORETLPattern(){
				
					return "";
				
				}
				public String PORETLOriginalDbColumnName(){
				
					return "PORETL";
				
				}

				
			    public BigDecimal POCASE;

				public BigDecimal getPOCASE () {
					return this.POCASE;
				}

				public Boolean POCASEIsNullable(){
				    return false;
				}
				public Boolean POCASEIsKey(){
				    return false;
				}
				public Integer POCASELength(){
				    return null;
				}
				public Integer POCASEPrecision(){
				    return null;
				}
				public String POCASEDefault(){
				
					return "";
				
				}
				public String POCASEComment(){
				
				    return "";
				
				}
				public String POCASEPattern(){
				
					return "";
				
				}
				public String POCASEOriginalDbColumnName(){
				
					return "POCASE";
				
				}

				
			    public BigDecimal POUNTS;

				public BigDecimal getPOUNTS () {
					return this.POUNTS;
				}

				public Boolean POUNTSIsNullable(){
				    return false;
				}
				public Boolean POUNTSIsKey(){
				    return false;
				}
				public Integer POUNTSLength(){
				    return null;
				}
				public Integer POUNTSPrecision(){
				    return null;
				}
				public String POUNTSDefault(){
				
					return "";
				
				}
				public String POUNTSComment(){
				
				    return "";
				
				}
				public String POUNTSPattern(){
				
					return "";
				
				}
				public String POUNTSOriginalDbColumnName(){
				
					return "POUNTS";
				
				}

				
			    public BigDecimal POWGHT;

				public BigDecimal getPOWGHT () {
					return this.POWGHT;
				}

				public Boolean POWGHTIsNullable(){
				    return false;
				}
				public Boolean POWGHTIsKey(){
				    return false;
				}
				public Integer POWGHTLength(){
				    return null;
				}
				public Integer POWGHTPrecision(){
				    return null;
				}
				public String POWGHTDefault(){
				
					return "";
				
				}
				public String POWGHTComment(){
				
				    return "";
				
				}
				public String POWGHTPattern(){
				
					return "";
				
				}
				public String POWGHTOriginalDbColumnName(){
				
					return "POWGHT";
				
				}

				
			    public BigDecimal POTARP;

				public BigDecimal getPOTARP () {
					return this.POTARP;
				}

				public Boolean POTARPIsNullable(){
				    return false;
				}
				public Boolean POTARPIsKey(){
				    return false;
				}
				public Integer POTARPLength(){
				    return null;
				}
				public Integer POTARPPrecision(){
				    return null;
				}
				public String POTARPDefault(){
				
					return "";
				
				}
				public String POTARPComment(){
				
				    return "";
				
				}
				public String POTARPPattern(){
				
					return "";
				
				}
				public String POTARPOriginalDbColumnName(){
				
					return "POTARP";
				
				}

				
			    public BigDecimal POSTOP;

				public BigDecimal getPOSTOP () {
					return this.POSTOP;
				}

				public Boolean POSTOPIsNullable(){
				    return false;
				}
				public Boolean POSTOPIsKey(){
				    return false;
				}
				public Integer POSTOPLength(){
				    return null;
				}
				public Integer POSTOPPrecision(){
				    return null;
				}
				public String POSTOPDefault(){
				
					return "";
				
				}
				public String POSTOPComment(){
				
				    return "";
				
				}
				public String POSTOPPattern(){
				
					return "";
				
				}
				public String POSTOPOriginalDbColumnName(){
				
					return "POSTOP";
				
				}

				
			    public BigDecimal POSKID;

				public BigDecimal getPOSKID () {
					return this.POSKID;
				}

				public Boolean POSKIDIsNullable(){
				    return false;
				}
				public Boolean POSKIDIsKey(){
				    return false;
				}
				public Integer POSKIDLength(){
				    return null;
				}
				public Integer POSKIDPrecision(){
				    return null;
				}
				public String POSKIDDefault(){
				
					return "";
				
				}
				public String POSKIDComment(){
				
				    return "";
				
				}
				public String POSKIDPattern(){
				
					return "";
				
				}
				public String POSKIDOriginalDbColumnName(){
				
					return "POSKID";
				
				}

				
			    public BigDecimal POOTHN;

				public BigDecimal getPOOTHN () {
					return this.POOTHN;
				}

				public Boolean POOTHNIsNullable(){
				    return false;
				}
				public Boolean POOTHNIsKey(){
				    return false;
				}
				public Integer POOTHNLength(){
				    return null;
				}
				public Integer POOTHNPrecision(){
				    return null;
				}
				public String POOTHNDefault(){
				
					return "";
				
				}
				public String POOTHNComment(){
				
				    return "";
				
				}
				public String POOTHNPattern(){
				
					return "";
				
				}
				public String POOTHNOriginalDbColumnName(){
				
					return "POOTHN";
				
				}

				
			    public BigDecimal POOTHP;

				public BigDecimal getPOOTHP () {
					return this.POOTHP;
				}

				public Boolean POOTHPIsNullable(){
				    return false;
				}
				public Boolean POOTHPIsKey(){
				    return false;
				}
				public Integer POOTHPLength(){
				    return null;
				}
				public Integer POOTHPPrecision(){
				    return null;
				}
				public String POOTHPDefault(){
				
					return "";
				
				}
				public String POOTHPComment(){
				
				    return "";
				
				}
				public String POOTHPPattern(){
				
					return "";
				
				}
				public String POOTHPOriginalDbColumnName(){
				
					return "POOTHP";
				
				}

				
			    public BigDecimal POBTCH;

				public BigDecimal getPOBTCH () {
					return this.POBTCH;
				}

				public Boolean POBTCHIsNullable(){
				    return false;
				}
				public Boolean POBTCHIsKey(){
				    return false;
				}
				public Integer POBTCHLength(){
				    return null;
				}
				public Integer POBTCHPrecision(){
				    return null;
				}
				public String POBTCHDefault(){
				
					return "";
				
				}
				public String POBTCHComment(){
				
				    return "";
				
				}
				public String POBTCHPattern(){
				
					return "";
				
				}
				public String POBTCHOriginalDbColumnName(){
				
					return "POBTCH";
				
				}

				
			    public BigDecimal PORRET;

				public BigDecimal getPORRET () {
					return this.PORRET;
				}

				public Boolean PORRETIsNullable(){
				    return false;
				}
				public Boolean PORRETIsKey(){
				    return false;
				}
				public Integer PORRETLength(){
				    return null;
				}
				public Integer PORRETPrecision(){
				    return null;
				}
				public String PORRETDefault(){
				
					return "";
				
				}
				public String PORRETComment(){
				
				    return "";
				
				}
				public String PORRETPattern(){
				
					return "";
				
				}
				public String PORRETOriginalDbColumnName(){
				
					return "PORRET";
				
				}

				
			    public BigDecimal PORVAT;

				public BigDecimal getPORVAT () {
					return this.PORVAT;
				}

				public Boolean PORVATIsNullable(){
				    return false;
				}
				public Boolean PORVATIsKey(){
				    return false;
				}
				public Integer PORVATLength(){
				    return null;
				}
				public Integer PORVATPrecision(){
				    return null;
				}
				public String PORVATDefault(){
				
					return "";
				
				}
				public String PORVATComment(){
				
				    return "";
				
				}
				public String PORVATPattern(){
				
					return "";
				
				}
				public String PORVATOriginalDbColumnName(){
				
					return "PORVAT";
				
				}

				
			    public BigDecimal PORCST;

				public BigDecimal getPORCST () {
					return this.PORCST;
				}

				public Boolean PORCSTIsNullable(){
				    return false;
				}
				public Boolean PORCSTIsKey(){
				    return false;
				}
				public Integer PORCSTLength(){
				    return null;
				}
				public Integer PORCSTPrecision(){
				    return null;
				}
				public String PORCSTDefault(){
				
					return "";
				
				}
				public String PORCSTComment(){
				
				    return "";
				
				}
				public String PORCSTPattern(){
				
					return "";
				
				}
				public String PORCSTOriginalDbColumnName(){
				
					return "PORCST";
				
				}

				
			    public BigDecimal POTPLT;

				public BigDecimal getPOTPLT () {
					return this.POTPLT;
				}

				public Boolean POTPLTIsNullable(){
				    return false;
				}
				public Boolean POTPLTIsKey(){
				    return false;
				}
				public Integer POTPLTLength(){
				    return null;
				}
				public Integer POTPLTPrecision(){
				    return null;
				}
				public String POTPLTDefault(){
				
					return "";
				
				}
				public String POTPLTComment(){
				
				    return "";
				
				}
				public String POTPLTPattern(){
				
					return "";
				
				}
				public String POTPLTOriginalDbColumnName(){
				
					return "POTPLT";
				
				}

				
			    public BigDecimal POCUBE;

				public BigDecimal getPOCUBE () {
					return this.POCUBE;
				}

				public Boolean POCUBEIsNullable(){
				    return false;
				}
				public Boolean POCUBEIsKey(){
				    return false;
				}
				public Integer POCUBELength(){
				    return null;
				}
				public Integer POCUBEPrecision(){
				    return null;
				}
				public String POCUBEDefault(){
				
					return "";
				
				}
				public String POCUBEComment(){
				
				    return "";
				
				}
				public String POCUBEPattern(){
				
					return "";
				
				}
				public String POCUBEOriginalDbColumnName(){
				
					return "POCUBE";
				
				}

				
			    public BigDecimal POPDCN;

				public BigDecimal getPOPDCN () {
					return this.POPDCN;
				}

				public Boolean POPDCNIsNullable(){
				    return false;
				}
				public Boolean POPDCNIsKey(){
				    return false;
				}
				public Integer POPDCNLength(){
				    return null;
				}
				public Integer POPDCNPrecision(){
				    return null;
				}
				public String POPDCNDefault(){
				
					return "";
				
				}
				public String POPDCNComment(){
				
				    return "";
				
				}
				public String POPDCNPattern(){
				
					return "";
				
				}
				public String POPDCNOriginalDbColumnName(){
				
					return "POPDCN";
				
				}

				
			    public double POPDWN;

				public double getPOPDWN () {
					return this.POPDWN;
				}

				public Boolean POPDWNIsNullable(){
				    return false;
				}
				public Boolean POPDWNIsKey(){
				    return false;
				}
				public Integer POPDWNLength(){
				    return null;
				}
				public Integer POPDWNPrecision(){
				    return null;
				}
				public String POPDWNDefault(){
				
					return "";
				
				}
				public String POPDWNComment(){
				
				    return "";
				
				}
				public String POPDWNPattern(){
				
					return "";
				
				}
				public String POPDWNOriginalDbColumnName(){
				
					return "POPDWN";
				
				}

				
			    public double SHPNUM;

				public double getSHPNUM () {
					return this.SHPNUM;
				}

				public Boolean SHPNUMIsNullable(){
				    return false;
				}
				public Boolean SHPNUMIsKey(){
				    return false;
				}
				public Integer SHPNUMLength(){
				    return null;
				}
				public Integer SHPNUMPrecision(){
				    return null;
				}
				public String SHPNUMDefault(){
				
					return "";
				
				}
				public String SHPNUMComment(){
				
				    return "";
				
				}
				public String SHPNUMPattern(){
				
					return "";
				
				}
				public String SHPNUMOriginalDbColumnName(){
				
					return "SHPNUM";
				
				}

				
			    public BigDecimal POPYCN;

				public BigDecimal getPOPYCN () {
					return this.POPYCN;
				}

				public Boolean POPYCNIsNullable(){
				    return false;
				}
				public Boolean POPYCNIsKey(){
				    return false;
				}
				public Integer POPYCNLength(){
				    return null;
				}
				public Integer POPYCNPrecision(){
				    return null;
				}
				public String POPYCNDefault(){
				
					return "";
				
				}
				public String POPYCNComment(){
				
				    return "";
				
				}
				public String POPYCNPattern(){
				
					return "";
				
				}
				public String POPYCNOriginalDbColumnName(){
				
					return "POPYCN";
				
				}

				
			    public double POPYDT;

				public double getPOPYDT () {
					return this.POPYDT;
				}

				public Boolean POPYDTIsNullable(){
				    return false;
				}
				public Boolean POPYDTIsKey(){
				    return false;
				}
				public Integer POPYDTLength(){
				    return null;
				}
				public Integer POPYDTPrecision(){
				    return null;
				}
				public String POPYDTDefault(){
				
					return "";
				
				}
				public String POPYDTComment(){
				
				    return "";
				
				}
				public String POPYDTPattern(){
				
					return "";
				
				}
				public String POPYDTOriginalDbColumnName(){
				
					return "POPYDT";
				
				}

				
			    public String POBYTP;

				public String getPOBYTP () {
					return this.POBYTP;
				}

				public Boolean POBYTPIsNullable(){
				    return false;
				}
				public Boolean POBYTPIsKey(){
				    return false;
				}
				public Integer POBYTPLength(){
				    return null;
				}
				public Integer POBYTPPrecision(){
				    return null;
				}
				public String POBYTPDefault(){
				
					return "";
				
				}
				public String POBYTPComment(){
				
				    return "";
				
				}
				public String POBYTPPattern(){
				
					return "";
				
				}
				public String POBYTPOriginalDbColumnName(){
				
					return "POBYTP";
				
				}

				
			    public BigDecimal POMALS;

				public BigDecimal getPOMALS () {
					return this.POMALS;
				}

				public Boolean POMALSIsNullable(){
				    return false;
				}
				public Boolean POMALSIsKey(){
				    return false;
				}
				public Integer POMALSLength(){
				    return null;
				}
				public Integer POMALSPrecision(){
				    return null;
				}
				public String POMALSDefault(){
				
					return "";
				
				}
				public String POMALSComment(){
				
				    return "";
				
				}
				public String POMALSPattern(){
				
					return "";
				
				}
				public String POMALSOriginalDbColumnName(){
				
					return "POMALS";
				
				}

				
			    public BigDecimal POMALV;

				public BigDecimal getPOMALV () {
					return this.POMALV;
				}

				public Boolean POMALVIsNullable(){
				    return false;
				}
				public Boolean POMALVIsKey(){
				    return false;
				}
				public Integer POMALVLength(){
				    return null;
				}
				public Integer POMALVPrecision(){
				    return null;
				}
				public String POMALVDefault(){
				
					return "";
				
				}
				public String POMALVComment(){
				
				    return "";
				
				}
				public String POMALVPattern(){
				
					return "";
				
				}
				public String POMALVOriginalDbColumnName(){
				
					return "POMALV";
				
				}

				
			    public double POMSPO;

				public double getPOMSPO () {
					return this.POMSPO;
				}

				public Boolean POMSPOIsNullable(){
				    return false;
				}
				public Boolean POMSPOIsKey(){
				    return false;
				}
				public Integer POMSPOLength(){
				    return null;
				}
				public Integer POMSPOPrecision(){
				    return null;
				}
				public String POMSPODefault(){
				
					return "";
				
				}
				public String POMSPOComment(){
				
				    return "";
				
				}
				public String POMSPOPattern(){
				
					return "";
				
				}
				public String POMSPOOriginalDbColumnName(){
				
					return "POMSPO";
				
				}

				
			    public double POMSBO;

				public double getPOMSBO () {
					return this.POMSBO;
				}

				public Boolean POMSBOIsNullable(){
				    return false;
				}
				public Boolean POMSBOIsKey(){
				    return false;
				}
				public Integer POMSBOLength(){
				    return null;
				}
				public Integer POMSBOPrecision(){
				    return null;
				}
				public String POMSBODefault(){
				
					return "";
				
				}
				public String POMSBOComment(){
				
				    return "";
				
				}
				public String POMSBOPattern(){
				
					return "";
				
				}
				public String POMSBOOriginalDbColumnName(){
				
					return "POMSBO";
				
				}

				
			    public double POLOAD;

				public double getPOLOAD () {
					return this.POLOAD;
				}

				public Boolean POLOADIsNullable(){
				    return false;
				}
				public Boolean POLOADIsKey(){
				    return false;
				}
				public Integer POLOADLength(){
				    return null;
				}
				public Integer POLOADPrecision(){
				    return null;
				}
				public String POLOADDefault(){
				
					return "";
				
				}
				public String POLOADComment(){
				
				    return "";
				
				}
				public String POLOADPattern(){
				
					return "";
				
				}
				public String POLOADOriginalDbColumnName(){
				
					return "POLOAD";
				
				}

				
			    public BigDecimal POMCRT;

				public BigDecimal getPOMCRT () {
					return this.POMCRT;
				}

				public Boolean POMCRTIsNullable(){
				    return false;
				}
				public Boolean POMCRTIsKey(){
				    return false;
				}
				public Integer POMCRTLength(){
				    return null;
				}
				public Integer POMCRTPrecision(){
				    return null;
				}
				public String POMCRTDefault(){
				
					return "";
				
				}
				public String POMCRTComment(){
				
				    return "";
				
				}
				public String POMCRTPattern(){
				
					return "";
				
				}
				public String POMCRTOriginalDbColumnName(){
				
					return "POMCRT";
				
				}

				
			    public BigDecimal POMCCN;

				public BigDecimal getPOMCCN () {
					return this.POMCCN;
				}

				public Boolean POMCCNIsNullable(){
				    return false;
				}
				public Boolean POMCCNIsKey(){
				    return false;
				}
				public Integer POMCCNLength(){
				    return null;
				}
				public Integer POMCCNPrecision(){
				    return null;
				}
				public String POMCCNDefault(){
				
					return "";
				
				}
				public String POMCCNComment(){
				
				    return "";
				
				}
				public String POMCCNPattern(){
				
					return "";
				
				}
				public String POMCCNOriginalDbColumnName(){
				
					return "POMCCN";
				
				}

				
			    public BigDecimal POMCDT;

				public BigDecimal getPOMCDT () {
					return this.POMCDT;
				}

				public Boolean POMCDTIsNullable(){
				    return false;
				}
				public Boolean POMCDTIsKey(){
				    return false;
				}
				public Integer POMCDTLength(){
				    return null;
				}
				public Integer POMCDTPrecision(){
				    return null;
				}
				public String POMCDTDefault(){
				
					return "";
				
				}
				public String POMCDTComment(){
				
				    return "";
				
				}
				public String POMCDTPattern(){
				
					return "";
				
				}
				public String POMCDTOriginalDbColumnName(){
				
					return "POMCDT";
				
				}

				
			    public String POQCKE;

				public String getPOQCKE () {
					return this.POQCKE;
				}

				public Boolean POQCKEIsNullable(){
				    return false;
				}
				public Boolean POQCKEIsKey(){
				    return false;
				}
				public Integer POQCKELength(){
				    return null;
				}
				public Integer POQCKEPrecision(){
				    return null;
				}
				public String POQCKEDefault(){
				
					return "";
				
				}
				public String POQCKEComment(){
				
				    return "";
				
				}
				public String POQCKEPattern(){
				
					return "";
				
				}
				public String POQCKEOriginalDbColumnName(){
				
					return "POQCKE";
				
				}

				
			    public String POMTYP;

				public String getPOMTYP () {
					return this.POMTYP;
				}

				public Boolean POMTYPIsNullable(){
				    return false;
				}
				public Boolean POMTYPIsKey(){
				    return false;
				}
				public Integer POMTYPLength(){
				    return null;
				}
				public Integer POMTYPPrecision(){
				    return null;
				}
				public String POMTYPDefault(){
				
					return "";
				
				}
				public String POMTYPComment(){
				
				    return "";
				
				}
				public String POMTYPPattern(){
				
					return "";
				
				}
				public String POMTYPOriginalDbColumnName(){
				
					return "POMTYP";
				
				}

				
			    public String PO850F;

				public String getPO850F () {
					return this.PO850F;
				}

				public Boolean PO850FIsNullable(){
				    return false;
				}
				public Boolean PO850FIsKey(){
				    return false;
				}
				public Integer PO850FLength(){
				    return null;
				}
				public Integer PO850FPrecision(){
				    return null;
				}
				public String PO850FDefault(){
				
					return "";
				
				}
				public String PO850FComment(){
				
				    return "";
				
				}
				public String PO850FPattern(){
				
					return "";
				
				}
				public String PO850FOriginalDbColumnName(){
				
					return "PO850F";
				
				}

				
			    public String PO860F;

				public String getPO860F () {
					return this.PO860F;
				}

				public Boolean PO860FIsNullable(){
				    return false;
				}
				public Boolean PO860FIsKey(){
				    return false;
				}
				public Integer PO860FLength(){
				    return null;
				}
				public Integer PO860FPrecision(){
				    return null;
				}
				public String PO860FDefault(){
				
					return "";
				
				}
				public String PO860FComment(){
				
				    return "";
				
				}
				public String PO860FPattern(){
				
					return "";
				
				}
				public String PO860FOriginalDbColumnName(){
				
					return "PO860F";
				
				}

				
			    public String POTPID;

				public String getPOTPID () {
					return this.POTPID;
				}

				public Boolean POTPIDIsNullable(){
				    return false;
				}
				public Boolean POTPIDIsKey(){
				    return false;
				}
				public Integer POTPIDLength(){
				    return null;
				}
				public Integer POTPIDPrecision(){
				    return null;
				}
				public String POTPIDDefault(){
				
					return "";
				
				}
				public String POTPIDComment(){
				
				    return "";
				
				}
				public String POTPIDPattern(){
				
					return "";
				
				}
				public String POTPIDOriginalDbColumnName(){
				
					return "POTPID";
				
				}

				
			    public BigDecimal POBSCN;

				public BigDecimal getPOBSCN () {
					return this.POBSCN;
				}

				public Boolean POBSCNIsNullable(){
				    return false;
				}
				public Boolean POBSCNIsKey(){
				    return false;
				}
				public Integer POBSCNLength(){
				    return null;
				}
				public Integer POBSCNPrecision(){
				    return null;
				}
				public String POBSCNDefault(){
				
					return "";
				
				}
				public String POBSCNComment(){
				
				    return "";
				
				}
				public String POBSCNPattern(){
				
					return "";
				
				}
				public String POBSCNOriginalDbColumnName(){
				
					return "POBSCN";
				
				}

				
			    public double POBSDT;

				public double getPOBSDT () {
					return this.POBSDT;
				}

				public Boolean POBSDTIsNullable(){
				    return false;
				}
				public Boolean POBSDTIsKey(){
				    return false;
				}
				public Integer POBSDTLength(){
				    return null;
				}
				public Integer POBSDTPrecision(){
				    return null;
				}
				public String POBSDTDefault(){
				
					return "";
				
				}
				public String POBSDTComment(){
				
				    return "";
				
				}
				public String POBSDTPattern(){
				
					return "";
				
				}
				public String POBSDTOriginalDbColumnName(){
				
					return "POBSDT";
				
				}

				
			    public BigDecimal POASCN;

				public BigDecimal getPOASCN () {
					return this.POASCN;
				}

				public Boolean POASCNIsNullable(){
				    return false;
				}
				public Boolean POASCNIsKey(){
				    return false;
				}
				public Integer POASCNLength(){
				    return null;
				}
				public Integer POASCNPrecision(){
				    return null;
				}
				public String POASCNDefault(){
				
					return "";
				
				}
				public String POASCNComment(){
				
				    return "";
				
				}
				public String POASCNPattern(){
				
					return "";
				
				}
				public String POASCNOriginalDbColumnName(){
				
					return "POASCN";
				
				}

				
			    public double POASDT;

				public double getPOASDT () {
					return this.POASDT;
				}

				public Boolean POASDTIsNullable(){
				    return false;
				}
				public Boolean POASDTIsKey(){
				    return false;
				}
				public Integer POASDTLength(){
				    return null;
				}
				public Integer POASDTPrecision(){
				    return null;
				}
				public String POASDTDefault(){
				
					return "";
				
				}
				public String POASDTComment(){
				
				    return "";
				
				}
				public String POASDTPattern(){
				
					return "";
				
				}
				public String POASDTOriginalDbColumnName(){
				
					return "POASDT";
				
				}

				
			    public String POCODF;

				public String getPOCODF () {
					return this.POCODF;
				}

				public Boolean POCODFIsNullable(){
				    return false;
				}
				public Boolean POCODFIsKey(){
				    return false;
				}
				public Integer POCODFLength(){
				    return null;
				}
				public Integer POCODFPrecision(){
				    return null;
				}
				public String POCODFDefault(){
				
					return "";
				
				}
				public String POCODFComment(){
				
				    return "";
				
				}
				public String POCODFPattern(){
				
					return "";
				
				}
				public String POCODFOriginalDbColumnName(){
				
					return "POCODF";
				
				}

				
			    public String POCODT;

				public String getPOCODT () {
					return this.POCODT;
				}

				public Boolean POCODTIsNullable(){
				    return false;
				}
				public Boolean POCODTIsKey(){
				    return false;
				}
				public Integer POCODTLength(){
				    return null;
				}
				public Integer POCODTPrecision(){
				    return null;
				}
				public String POCODTDefault(){
				
					return "";
				
				}
				public String POCODTComment(){
				
				    return "";
				
				}
				public String POCODTPattern(){
				
					return "";
				
				}
				public String POCODTOriginalDbColumnName(){
				
					return "POCODT";
				
				}

				
			    public String POCVTP;

				public String getPOCVTP () {
					return this.POCVTP;
				}

				public Boolean POCVTPIsNullable(){
				    return false;
				}
				public Boolean POCVTPIsKey(){
				    return false;
				}
				public Integer POCVTPLength(){
				    return null;
				}
				public Integer POCVTPPrecision(){
				    return null;
				}
				public String POCVTPDefault(){
				
					return "";
				
				}
				public String POCVTPComment(){
				
				    return "";
				
				}
				public String POCVTPPattern(){
				
					return "";
				
				}
				public String POCVTPOriginalDbColumnName(){
				
					return "POCVTP";
				
				}

				
			    public String POCVMD;

				public String getPOCVMD () {
					return this.POCVMD;
				}

				public Boolean POCVMDIsNullable(){
				    return false;
				}
				public Boolean POCVMDIsKey(){
				    return false;
				}
				public Integer POCVMDLength(){
				    return null;
				}
				public Integer POCVMDPrecision(){
				    return null;
				}
				public String POCVMDDefault(){
				
					return "";
				
				}
				public String POCVMDComment(){
				
				    return "";
				
				}
				public String POCVMDPattern(){
				
					return "";
				
				}
				public String POCVMDOriginalDbColumnName(){
				
					return "POCVMD";
				
				}

				
			    public String POMCPY;

				public String getPOMCPY () {
					return this.POMCPY;
				}

				public Boolean POMCPYIsNullable(){
				    return false;
				}
				public Boolean POMCPYIsKey(){
				    return false;
				}
				public Integer POMCPYLength(){
				    return null;
				}
				public Integer POMCPYPrecision(){
				    return null;
				}
				public String POMCPYDefault(){
				
					return "";
				
				}
				public String POMCPYComment(){
				
				    return "";
				
				}
				public String POMCPYPattern(){
				
					return "";
				
				}
				public String POMCPYOriginalDbColumnName(){
				
					return "POMCPY";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			        this.PONUMB = dis.readDouble();
					
			        this.POBON = dis.readDouble();
					
			        this.POVNUM = dis.readDouble();
					
			        this.POTRMS = dis.readDouble();
					
					this.POTIND = readString(dis);
					
					this.POSTAT = readString(dis);
					
					this.POTYPE = readString(dis);
					
					this.PODEST = readString(dis);
					
						this.POSTOR = (BigDecimal) dis.readObject();
					
					this.POADYN = readString(dis);
					
					this.PODMTH = readString(dis);
					
					this.POALBO = readString(dis);
					
					this.POCONF = readString(dis);
					
					this.POPHON = readString(dis);
					
					this.POBUYR = readString(dis);
					
			        this.PODPT = dis.readDouble();
					
			        this.POSDPT = dis.readDouble();
					
			        this.POTHER = dis.readDouble();
					
					this.POFPCD = readString(dis);
					
					this.POFOB = readString(dis);
					
					this.POSHP1 = readString(dis);
					
					this.POSHP2 = readString(dis);
					
					this.POSHPP = readString(dis);
					
					this.POSHPC = readString(dis);
					
						this.POECEN = (BigDecimal) dis.readObject();
					
			        this.POEDAT = dis.readDouble();
					
						this.POSCEN = (BigDecimal) dis.readObject();
					
			        this.POSDAT = dis.readDouble();
					
						this.POCCEN = (BigDecimal) dis.readObject();
					
			        this.POCDAT = dis.readDouble();
					
						this.PORCEN = (BigDecimal) dis.readObject();
					
			        this.PORDAT = dis.readDouble();
					
						this.POLCCN = (BigDecimal) dis.readObject();
					
			        this.POLCHG = dis.readDouble();
					
			        this.PORFRQ = dis.readDouble();
					
			        this.POLEAD = dis.readDouble();
					
					this.POORIG = readString(dis);
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
						this.POCOST = (BigDecimal) dis.readObject();
					
						this.POVAT = (BigDecimal) dis.readObject();
					
						this.PORETL = (BigDecimal) dis.readObject();
					
						this.POCASE = (BigDecimal) dis.readObject();
					
						this.POUNTS = (BigDecimal) dis.readObject();
					
						this.POWGHT = (BigDecimal) dis.readObject();
					
						this.POTARP = (BigDecimal) dis.readObject();
					
						this.POSTOP = (BigDecimal) dis.readObject();
					
						this.POSKID = (BigDecimal) dis.readObject();
					
						this.POOTHN = (BigDecimal) dis.readObject();
					
						this.POOTHP = (BigDecimal) dis.readObject();
					
						this.POBTCH = (BigDecimal) dis.readObject();
					
						this.PORRET = (BigDecimal) dis.readObject();
					
						this.PORVAT = (BigDecimal) dis.readObject();
					
						this.PORCST = (BigDecimal) dis.readObject();
					
						this.POTPLT = (BigDecimal) dis.readObject();
					
						this.POCUBE = (BigDecimal) dis.readObject();
					
						this.POPDCN = (BigDecimal) dis.readObject();
					
			        this.POPDWN = dis.readDouble();
					
			        this.SHPNUM = dis.readDouble();
					
						this.POPYCN = (BigDecimal) dis.readObject();
					
			        this.POPYDT = dis.readDouble();
					
					this.POBYTP = readString(dis);
					
						this.POMALS = (BigDecimal) dis.readObject();
					
						this.POMALV = (BigDecimal) dis.readObject();
					
			        this.POMSPO = dis.readDouble();
					
			        this.POMSBO = dis.readDouble();
					
			        this.POLOAD = dis.readDouble();
					
						this.POMCRT = (BigDecimal) dis.readObject();
					
						this.POMCCN = (BigDecimal) dis.readObject();
					
						this.POMCDT = (BigDecimal) dis.readObject();
					
					this.POQCKE = readString(dis);
					
					this.POMTYP = readString(dis);
					
					this.PO850F = readString(dis);
					
					this.PO860F = readString(dis);
					
					this.POTPID = readString(dis);
					
						this.POBSCN = (BigDecimal) dis.readObject();
					
			        this.POBSDT = dis.readDouble();
					
						this.POASCN = (BigDecimal) dis.readObject();
					
			        this.POASDT = dis.readDouble();
					
					this.POCODF = readString(dis);
					
					this.POCODT = readString(dis);
					
					this.POCVTP = readString(dis);
					
					this.POCVMD = readString(dis);
					
					this.POMCPY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			        this.PONUMB = dis.readDouble();
					
			        this.POBON = dis.readDouble();
					
			        this.POVNUM = dis.readDouble();
					
			        this.POTRMS = dis.readDouble();
					
					this.POTIND = readString(dis);
					
					this.POSTAT = readString(dis);
					
					this.POTYPE = readString(dis);
					
					this.PODEST = readString(dis);
					
						this.POSTOR = (BigDecimal) dis.readObject();
					
					this.POADYN = readString(dis);
					
					this.PODMTH = readString(dis);
					
					this.POALBO = readString(dis);
					
					this.POCONF = readString(dis);
					
					this.POPHON = readString(dis);
					
					this.POBUYR = readString(dis);
					
			        this.PODPT = dis.readDouble();
					
			        this.POSDPT = dis.readDouble();
					
			        this.POTHER = dis.readDouble();
					
					this.POFPCD = readString(dis);
					
					this.POFOB = readString(dis);
					
					this.POSHP1 = readString(dis);
					
					this.POSHP2 = readString(dis);
					
					this.POSHPP = readString(dis);
					
					this.POSHPC = readString(dis);
					
						this.POECEN = (BigDecimal) dis.readObject();
					
			        this.POEDAT = dis.readDouble();
					
						this.POSCEN = (BigDecimal) dis.readObject();
					
			        this.POSDAT = dis.readDouble();
					
						this.POCCEN = (BigDecimal) dis.readObject();
					
			        this.POCDAT = dis.readDouble();
					
						this.PORCEN = (BigDecimal) dis.readObject();
					
			        this.PORDAT = dis.readDouble();
					
						this.POLCCN = (BigDecimal) dis.readObject();
					
			        this.POLCHG = dis.readDouble();
					
			        this.PORFRQ = dis.readDouble();
					
			        this.POLEAD = dis.readDouble();
					
					this.POORIG = readString(dis);
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
						this.POCOST = (BigDecimal) dis.readObject();
					
						this.POVAT = (BigDecimal) dis.readObject();
					
						this.PORETL = (BigDecimal) dis.readObject();
					
						this.POCASE = (BigDecimal) dis.readObject();
					
						this.POUNTS = (BigDecimal) dis.readObject();
					
						this.POWGHT = (BigDecimal) dis.readObject();
					
						this.POTARP = (BigDecimal) dis.readObject();
					
						this.POSTOP = (BigDecimal) dis.readObject();
					
						this.POSKID = (BigDecimal) dis.readObject();
					
						this.POOTHN = (BigDecimal) dis.readObject();
					
						this.POOTHP = (BigDecimal) dis.readObject();
					
						this.POBTCH = (BigDecimal) dis.readObject();
					
						this.PORRET = (BigDecimal) dis.readObject();
					
						this.PORVAT = (BigDecimal) dis.readObject();
					
						this.PORCST = (BigDecimal) dis.readObject();
					
						this.POTPLT = (BigDecimal) dis.readObject();
					
						this.POCUBE = (BigDecimal) dis.readObject();
					
						this.POPDCN = (BigDecimal) dis.readObject();
					
			        this.POPDWN = dis.readDouble();
					
			        this.SHPNUM = dis.readDouble();
					
						this.POPYCN = (BigDecimal) dis.readObject();
					
			        this.POPYDT = dis.readDouble();
					
					this.POBYTP = readString(dis);
					
						this.POMALS = (BigDecimal) dis.readObject();
					
						this.POMALV = (BigDecimal) dis.readObject();
					
			        this.POMSPO = dis.readDouble();
					
			        this.POMSBO = dis.readDouble();
					
			        this.POLOAD = dis.readDouble();
					
						this.POMCRT = (BigDecimal) dis.readObject();
					
						this.POMCCN = (BigDecimal) dis.readObject();
					
						this.POMCDT = (BigDecimal) dis.readObject();
					
					this.POQCKE = readString(dis);
					
					this.POMTYP = readString(dis);
					
					this.PO850F = readString(dis);
					
					this.PO860F = readString(dis);
					
					this.POTPID = readString(dis);
					
						this.POBSCN = (BigDecimal) dis.readObject();
					
			        this.POBSDT = dis.readDouble();
					
						this.POASCN = (BigDecimal) dis.readObject();
					
			        this.POASDT = dis.readDouble();
					
					this.POCODF = readString(dis);
					
					this.POCODT = readString(dis);
					
					this.POCVTP = readString(dis);
					
					this.POCVMD = readString(dis);
					
					this.POMCPY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.PONUMB);
					
					// double
				
		            	dos.writeDouble(this.POBON);
					
					// double
				
		            	dos.writeDouble(this.POVNUM);
					
					// double
				
		            	dos.writeDouble(this.POTRMS);
					
					// String
				
						writeString(this.POTIND,dos);
					
					// String
				
						writeString(this.POSTAT,dos);
					
					// String
				
						writeString(this.POTYPE,dos);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOR);
					
					// String
				
						writeString(this.POADYN,dos);
					
					// String
				
						writeString(this.PODMTH,dos);
					
					// String
				
						writeString(this.POALBO,dos);
					
					// String
				
						writeString(this.POCONF,dos);
					
					// String
				
						writeString(this.POPHON,dos);
					
					// String
				
						writeString(this.POBUYR,dos);
					
					// double
				
		            	dos.writeDouble(this.PODPT);
					
					// double
				
		            	dos.writeDouble(this.POSDPT);
					
					// double
				
		            	dos.writeDouble(this.POTHER);
					
					// String
				
						writeString(this.POFPCD,dos);
					
					// String
				
						writeString(this.POFOB,dos);
					
					// String
				
						writeString(this.POSHP1,dos);
					
					// String
				
						writeString(this.POSHP2,dos);
					
					// String
				
						writeString(this.POSHPP,dos);
					
					// String
				
						writeString(this.POSHPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POECEN);
					
					// double
				
		            	dos.writeDouble(this.POEDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSCEN);
					
					// double
				
		            	dos.writeDouble(this.POSDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCCEN);
					
					// double
				
		            	dos.writeDouble(this.POCDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCEN);
					
					// double
				
		            	dos.writeDouble(this.PORDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLCCN);
					
					// double
				
		            	dos.writeDouble(this.POLCHG);
					
					// double
				
		            	dos.writeDouble(this.PORFRQ);
					
					// double
				
		            	dos.writeDouble(this.POLEAD);
					
					// String
				
						writeString(this.POORIG,dos);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCOST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORETL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POUNTS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POWGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBTCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTPLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPDCN);
					
					// double
				
		            	dos.writeDouble(this.POPDWN);
					
					// double
				
		            	dos.writeDouble(this.SHPNUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPYCN);
					
					// double
				
		            	dos.writeDouble(this.POPYDT);
					
					// String
				
						writeString(this.POBYTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALV);
					
					// double
				
		            	dos.writeDouble(this.POMSPO);
					
					// double
				
		            	dos.writeDouble(this.POMSBO);
					
					// double
				
		            	dos.writeDouble(this.POLOAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCCN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCDT);
					
					// String
				
						writeString(this.POQCKE,dos);
					
					// String
				
						writeString(this.POMTYP,dos);
					
					// String
				
						writeString(this.PO850F,dos);
					
					// String
				
						writeString(this.PO860F,dos);
					
					// String
				
						writeString(this.POTPID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBSCN);
					
					// double
				
		            	dos.writeDouble(this.POBSDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POASCN);
					
					// double
				
		            	dos.writeDouble(this.POASDT);
					
					// String
				
						writeString(this.POCODF,dos);
					
					// String
				
						writeString(this.POCODT,dos);
					
					// String
				
						writeString(this.POCVTP,dos);
					
					// String
				
						writeString(this.POCVMD,dos);
					
					// String
				
						writeString(this.POMCPY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.PONUMB);
					
					// double
				
		            	dos.writeDouble(this.POBON);
					
					// double
				
		            	dos.writeDouble(this.POVNUM);
					
					// double
				
		            	dos.writeDouble(this.POTRMS);
					
					// String
				
						writeString(this.POTIND,dos);
					
					// String
				
						writeString(this.POSTAT,dos);
					
					// String
				
						writeString(this.POTYPE,dos);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOR);
					
					// String
				
						writeString(this.POADYN,dos);
					
					// String
				
						writeString(this.PODMTH,dos);
					
					// String
				
						writeString(this.POALBO,dos);
					
					// String
				
						writeString(this.POCONF,dos);
					
					// String
				
						writeString(this.POPHON,dos);
					
					// String
				
						writeString(this.POBUYR,dos);
					
					// double
				
		            	dos.writeDouble(this.PODPT);
					
					// double
				
		            	dos.writeDouble(this.POSDPT);
					
					// double
				
		            	dos.writeDouble(this.POTHER);
					
					// String
				
						writeString(this.POFPCD,dos);
					
					// String
				
						writeString(this.POFOB,dos);
					
					// String
				
						writeString(this.POSHP1,dos);
					
					// String
				
						writeString(this.POSHP2,dos);
					
					// String
				
						writeString(this.POSHPP,dos);
					
					// String
				
						writeString(this.POSHPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POECEN);
					
					// double
				
		            	dos.writeDouble(this.POEDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSCEN);
					
					// double
				
		            	dos.writeDouble(this.POSDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCCEN);
					
					// double
				
		            	dos.writeDouble(this.POCDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCEN);
					
					// double
				
		            	dos.writeDouble(this.PORDAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLCCN);
					
					// double
				
		            	dos.writeDouble(this.POLCHG);
					
					// double
				
		            	dos.writeDouble(this.PORFRQ);
					
					// double
				
		            	dos.writeDouble(this.POLEAD);
					
					// String
				
						writeString(this.POORIG,dos);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCOST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORETL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POUNTS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POWGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POOTHP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBTCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PORCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTPLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POCUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPDCN);
					
					// double
				
		            	dos.writeDouble(this.POPDWN);
					
					// double
				
		            	dos.writeDouble(this.SHPNUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POPYCN);
					
					// double
				
		            	dos.writeDouble(this.POPYDT);
					
					// String
				
						writeString(this.POBYTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMALV);
					
					// double
				
		            	dos.writeDouble(this.POMSPO);
					
					// double
				
		            	dos.writeDouble(this.POMSBO);
					
					// double
				
		            	dos.writeDouble(this.POLOAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCCN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCDT);
					
					// String
				
						writeString(this.POQCKE,dos);
					
					// String
				
						writeString(this.POMTYP,dos);
					
					// String
				
						writeString(this.PO850F,dos);
					
					// String
				
						writeString(this.PO860F,dos);
					
					// String
				
						writeString(this.POTPID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBSCN);
					
					// double
				
		            	dos.writeDouble(this.POBSDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POASCN);
					
					// double
				
		            	dos.writeDouble(this.POASDT);
					
					// String
				
						writeString(this.POCODF,dos);
					
					// String
				
						writeString(this.POCODT,dos);
					
					// String
				
						writeString(this.POCVTP,dos);
					
					// String
				
						writeString(this.POCVMD,dos);
					
					// String
				
						writeString(this.POMCPY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PONUMB="+String.valueOf(PONUMB));
		sb.append(",POBON="+String.valueOf(POBON));
		sb.append(",POVNUM="+String.valueOf(POVNUM));
		sb.append(",POTRMS="+String.valueOf(POTRMS));
		sb.append(",POTIND="+POTIND);
		sb.append(",POSTAT="+POSTAT);
		sb.append(",POTYPE="+POTYPE);
		sb.append(",PODEST="+PODEST);
		sb.append(",POSTOR="+String.valueOf(POSTOR));
		sb.append(",POADYN="+POADYN);
		sb.append(",PODMTH="+PODMTH);
		sb.append(",POALBO="+POALBO);
		sb.append(",POCONF="+POCONF);
		sb.append(",POPHON="+POPHON);
		sb.append(",POBUYR="+POBUYR);
		sb.append(",PODPT="+String.valueOf(PODPT));
		sb.append(",POSDPT="+String.valueOf(POSDPT));
		sb.append(",POTHER="+String.valueOf(POTHER));
		sb.append(",POFPCD="+POFPCD);
		sb.append(",POFOB="+POFOB);
		sb.append(",POSHP1="+POSHP1);
		sb.append(",POSHP2="+POSHP2);
		sb.append(",POSHPP="+POSHPP);
		sb.append(",POSHPC="+POSHPC);
		sb.append(",POECEN="+String.valueOf(POECEN));
		sb.append(",POEDAT="+String.valueOf(POEDAT));
		sb.append(",POSCEN="+String.valueOf(POSCEN));
		sb.append(",POSDAT="+String.valueOf(POSDAT));
		sb.append(",POCCEN="+String.valueOf(POCCEN));
		sb.append(",POCDAT="+String.valueOf(POCDAT));
		sb.append(",PORCEN="+String.valueOf(PORCEN));
		sb.append(",PORDAT="+String.valueOf(PORDAT));
		sb.append(",POLCCN="+String.valueOf(POLCCN));
		sb.append(",POLCHG="+String.valueOf(POLCHG));
		sb.append(",PORFRQ="+String.valueOf(PORFRQ));
		sb.append(",POLEAD="+String.valueOf(POLEAD));
		sb.append(",POORIG="+POORIG);
		sb.append(",PONOT1="+PONOT1);
		sb.append(",PONOT2="+PONOT2);
		sb.append(",PONOT3="+PONOT3);
		sb.append(",POCOST="+String.valueOf(POCOST));
		sb.append(",POVAT="+String.valueOf(POVAT));
		sb.append(",PORETL="+String.valueOf(PORETL));
		sb.append(",POCASE="+String.valueOf(POCASE));
		sb.append(",POUNTS="+String.valueOf(POUNTS));
		sb.append(",POWGHT="+String.valueOf(POWGHT));
		sb.append(",POTARP="+String.valueOf(POTARP));
		sb.append(",POSTOP="+String.valueOf(POSTOP));
		sb.append(",POSKID="+String.valueOf(POSKID));
		sb.append(",POOTHN="+String.valueOf(POOTHN));
		sb.append(",POOTHP="+String.valueOf(POOTHP));
		sb.append(",POBTCH="+String.valueOf(POBTCH));
		sb.append(",PORRET="+String.valueOf(PORRET));
		sb.append(",PORVAT="+String.valueOf(PORVAT));
		sb.append(",PORCST="+String.valueOf(PORCST));
		sb.append(",POTPLT="+String.valueOf(POTPLT));
		sb.append(",POCUBE="+String.valueOf(POCUBE));
		sb.append(",POPDCN="+String.valueOf(POPDCN));
		sb.append(",POPDWN="+String.valueOf(POPDWN));
		sb.append(",SHPNUM="+String.valueOf(SHPNUM));
		sb.append(",POPYCN="+String.valueOf(POPYCN));
		sb.append(",POPYDT="+String.valueOf(POPYDT));
		sb.append(",POBYTP="+POBYTP);
		sb.append(",POMALS="+String.valueOf(POMALS));
		sb.append(",POMALV="+String.valueOf(POMALV));
		sb.append(",POMSPO="+String.valueOf(POMSPO));
		sb.append(",POMSBO="+String.valueOf(POMSBO));
		sb.append(",POLOAD="+String.valueOf(POLOAD));
		sb.append(",POMCRT="+String.valueOf(POMCRT));
		sb.append(",POMCCN="+String.valueOf(POMCCN));
		sb.append(",POMCDT="+String.valueOf(POMCDT));
		sb.append(",POQCKE="+POQCKE);
		sb.append(",POMTYP="+POMTYP);
		sb.append(",PO850F="+PO850F);
		sb.append(",PO860F="+PO860F);
		sb.append(",POTPID="+POTPID);
		sb.append(",POBSCN="+String.valueOf(POBSCN));
		sb.append(",POBSDT="+String.valueOf(POBSDT));
		sb.append(",POASCN="+String.valueOf(POASCN));
		sb.append(",POASDT="+String.valueOf(POASDT));
		sb.append(",POCODF="+POCODF);
		sb.append(",POCODT="+POCODT);
		sb.append(",POCVTP="+POCVTP);
		sb.append(",POCVMD="+POCVMD);
		sb.append(",POMCPY="+POMCPY);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(PONUMB);
        			
        			sb.append("|");
        		
        				sb.append(POBON);
        			
        			sb.append("|");
        		
        				sb.append(POVNUM);
        			
        			sb.append("|");
        		
        				sb.append(POTRMS);
        			
        			sb.append("|");
        		
        				if(POTIND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTIND);
            			}
            		
        			sb.append("|");
        		
        				if(POSTAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTAT);
            			}
            		
        			sb.append("|");
        		
        				if(POTYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTYPE);
            			}
            		
        			sb.append("|");
        		
        				if(PODEST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODEST);
            			}
            		
        			sb.append("|");
        		
        				if(POSTOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTOR);
            			}
            		
        			sb.append("|");
        		
        				if(POADYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POADYN);
            			}
            		
        			sb.append("|");
        		
        				if(PODMTH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODMTH);
            			}
            		
        			sb.append("|");
        		
        				if(POALBO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POALBO);
            			}
            		
        			sb.append("|");
        		
        				if(POCONF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCONF);
            			}
            		
        			sb.append("|");
        		
        				if(POPHON == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPHON);
            			}
            		
        			sb.append("|");
        		
        				if(POBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBUYR);
            			}
            		
        			sb.append("|");
        		
        				sb.append(PODPT);
        			
        			sb.append("|");
        		
        				sb.append(POSDPT);
        			
        			sb.append("|");
        		
        				sb.append(POTHER);
        			
        			sb.append("|");
        		
        				if(POFPCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFPCD);
            			}
            		
        			sb.append("|");
        		
        				if(POFOB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFOB);
            			}
            		
        			sb.append("|");
        		
        				if(POSHP1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHP1);
            			}
            		
        			sb.append("|");
        		
        				if(POSHP2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHP2);
            			}
            		
        			sb.append("|");
        		
        				if(POSHPP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHPP);
            			}
            		
        			sb.append("|");
        		
        				if(POSHPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSHPC);
            			}
            		
        			sb.append("|");
        		
        				if(POECEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POECEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POEDAT);
        			
        			sb.append("|");
        		
        				if(POSCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSCEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POSDAT);
        			
        			sb.append("|");
        		
        				if(POCCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCCEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POCDAT);
        			
        			sb.append("|");
        		
        				if(PORCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORCEN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(PORDAT);
        			
        			sb.append("|");
        		
        				if(POLCCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLCCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POLCHG);
        			
        			sb.append("|");
        		
        				sb.append(PORFRQ);
        			
        			sb.append("|");
        		
        				sb.append(POLEAD);
        			
        			sb.append("|");
        		
        				if(POORIG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POORIG);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT1);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT3);
            			}
            		
        			sb.append("|");
        		
        				if(POCOST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCOST);
            			}
            		
        			sb.append("|");
        		
        				if(POVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POVAT);
            			}
            		
        			sb.append("|");
        		
        				if(PORETL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORETL);
            			}
            		
        			sb.append("|");
        		
        				if(POCASE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCASE);
            			}
            		
        			sb.append("|");
        		
        				if(POUNTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POUNTS);
            			}
            		
        			sb.append("|");
        		
        				if(POWGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POWGHT);
            			}
            		
        			sb.append("|");
        		
        				if(POTARP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTARP);
            			}
            		
        			sb.append("|");
        		
        				if(POSTOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTOP);
            			}
            		
        			sb.append("|");
        		
        				if(POSKID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSKID);
            			}
            		
        			sb.append("|");
        		
        				if(POOTHN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POOTHN);
            			}
            		
        			sb.append("|");
        		
        				if(POOTHP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POOTHP);
            			}
            		
        			sb.append("|");
        		
        				if(POBTCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBTCH);
            			}
            		
        			sb.append("|");
        		
        				if(PORRET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORRET);
            			}
            		
        			sb.append("|");
        		
        				if(PORVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORVAT);
            			}
            		
        			sb.append("|");
        		
        				if(PORCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PORCST);
            			}
            		
        			sb.append("|");
        		
        				if(POTPLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTPLT);
            			}
            		
        			sb.append("|");
        		
        				if(POCUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCUBE);
            			}
            		
        			sb.append("|");
        		
        				if(POPDCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPDCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POPDWN);
        			
        			sb.append("|");
        		
        				sb.append(SHPNUM);
        			
        			sb.append("|");
        		
        				if(POPYCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POPYCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POPYDT);
        			
        			sb.append("|");
        		
        				if(POBYTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBYTP);
            			}
            		
        			sb.append("|");
        		
        				if(POMALS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMALS);
            			}
            		
        			sb.append("|");
        		
        				if(POMALV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMALV);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POMSPO);
        			
        			sb.append("|");
        		
        				sb.append(POMSBO);
        			
        			sb.append("|");
        		
        				sb.append(POLOAD);
        			
        			sb.append("|");
        		
        				if(POMCRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCRT);
            			}
            		
        			sb.append("|");
        		
        				if(POMCCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCCN);
            			}
            		
        			sb.append("|");
        		
        				if(POMCDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCDT);
            			}
            		
        			sb.append("|");
        		
        				if(POQCKE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POQCKE);
            			}
            		
        			sb.append("|");
        		
        				if(POMTYP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMTYP);
            			}
            		
        			sb.append("|");
        		
        				if(PO850F == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO850F);
            			}
            		
        			sb.append("|");
        		
        				if(PO860F == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO860F);
            			}
            		
        			sb.append("|");
        		
        				if(POTPID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTPID);
            			}
            		
        			sb.append("|");
        		
        				if(POBSCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBSCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POBSDT);
        			
        			sb.append("|");
        		
        				if(POASCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POASCN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POASDT);
        			
        			sb.append("|");
        		
        				if(POCODF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCODF);
            			}
            		
        			sb.append("|");
        		
        				if(POCODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCODT);
            			}
            		
        			sb.append("|");
        		
        				if(POCVTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCVTP);
            			}
            		
        			sb.append("|");
        		
        				if(POCVMD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POCVMD);
            			}
            		
        			sb.append("|");
        		
        				if(POMCPY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCPY);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
tmap_POMHDRStruct tmap_POMHDR = new tmap_POMHDRStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"tmap_POMHDR");
			
		int tos_count_tDBOutput_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_2", "tDBOutput_2", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_2 = (String)(restRequest_tDBOutput_2 != null ? restRequest_tDBOutput_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_2 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_2 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_2 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_2 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_2.createRuntimeProperties();
 		                    props_tDBOutput_2.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_2.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_2.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_2.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_2_1_fisrt sst_tDBOutput_2_1_fisrt = new SchemaSettingTool_tDBOutput_2_1_fisrt();
 		                    
 		                    props_tDBOutput_2.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_2_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_2.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_2.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_2.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_2.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_2.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_2.table.setValue("tableName",
 		                    "PO_HEADER_POMHDR");
 		                    
 		                    props_tDBOutput_2.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_2.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_2.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_2.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_2.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_2.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_2_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tDBOutput_10\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"PONUMB\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PONUMB\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PONUMB\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PONUMB\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBON\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POBON\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POBON\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POBON\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POVNUM\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POVNUM\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POVNUM\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POVNUM\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTRMS\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POTRMS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POTRMS\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POTRMS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTIND\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POTIND\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POTIND\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POTIND\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSTAT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSTAT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSTAT\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSTAT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTYPE\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POTYPE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POTYPE\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POTYPE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PODEST\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PODEST\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PODEST\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PODEST\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSTOR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSTOR\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSTOR\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSTOR\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POADYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POADYN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POADYN\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POADYN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PODMTH\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PODMTH\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PODMTH\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PODMTH\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POALBO\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POALBO\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POALBO\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POALBO\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCONF\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCONF\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCONF\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCONF\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POPHON\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POPHON\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POPHON\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POPHON\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBUYR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POBUYR\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POBUYR\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POBUYR\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PODPT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PODPT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PODPT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PODPT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSDPT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSDPT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSDPT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSDPT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTHER\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POTHER\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POTHER\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POTHER\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POFPCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POFPCD\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POFPCD\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POFPCD\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POFOB\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POFOB\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POFOB\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POFOB\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSHP1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSHP1\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSHP1\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSHP1\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSHP2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSHP2\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSHP2\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSHP2\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSHPP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSHPP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSHPP\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSHPP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSHPC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSHPC\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSHPC\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSHPC\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POECEN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POECEN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POECEN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POECEN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POEDAT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POEDAT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POEDAT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POEDAT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSCEN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSCEN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSCEN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSCEN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSDAT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSDAT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSDAT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSDAT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCCEN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCCEN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCCEN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCCEN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCDAT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCDAT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCDAT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCDAT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PORCEN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PORCEN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PORCEN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PORCEN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PORDAT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PORDAT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PORDAT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PORDAT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POLCCN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POLCCN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POLCCN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POLCCN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POLCHG\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POLCHG\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POLCHG\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POLCHG\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PORFRQ\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PORFRQ\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PORFRQ\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PORFRQ\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POLEAD\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POLEAD\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POLEAD\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POLEAD\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POORIG\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POORIG\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POORIG\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POORIG\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PONOT1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PONOT1\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PONOT1\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PONOT1\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PONOT2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PONOT2\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PONOT2\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PONOT2\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PONOT3\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PONOT3\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PONOT3\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PONOT3\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCOST\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCOST\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCOST\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCOST\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POVAT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POVAT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POVAT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POVAT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PORETL\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PORETL\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PORETL\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PORETL\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCASE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCASE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCASE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCASE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POUNTS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POUNTS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POUNTS\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POUNTS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POWGHT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POWGHT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POWGHT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POWGHT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTARP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POTARP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POTARP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POTARP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSTOP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSTOP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSTOP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSTOP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSKID\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POSKID\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POSKID\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POSKID\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POOTHN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POOTHN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POOTHN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POOTHN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POOTHP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POOTHP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POOTHP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POOTHP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBTCH\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POBTCH\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POBTCH\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POBTCH\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PORRET\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PORRET\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PORRET\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PORRET\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PORVAT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PORVAT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PORVAT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PORVAT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PORCST\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PORCST\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PORCST\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PORCST\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTPLT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POTPLT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POTPLT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POTPLT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCUBE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCUBE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCUBE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCUBE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POPDCN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POPDCN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POPDCN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POPDCN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POPDWN\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POPDWN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POPDWN\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POPDWN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"SHPNUM\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"SHPNUM\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"SHPNUM\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SHPNUM\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POPYCN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POPYCN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POPYCN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POPYCN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POPYDT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POPYDT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POPYDT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POPYDT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBYTP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POBYTP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POBYTP\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POBYTP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMALS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMALS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMALS\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMALS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMALV\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMALV\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMALV\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMALV\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMSPO\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMSPO\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMSPO\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMSPO\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMSBO\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMSBO\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMSBO\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMSBO\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POLOAD\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POLOAD\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POLOAD\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POLOAD\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMCRT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMCRT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMCRT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMCRT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMCCN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMCCN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMCCN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMCCN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMCDT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMCDT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMCDT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMCDT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POQCKE\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POQCKE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POQCKE\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POQCKE\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMTYP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMTYP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMTYP\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMTYP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PO850F\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PO850F\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PO850F\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PO850F\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PO860F\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PO860F\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"PO860F\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PO860F\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTPID\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POTPID\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POTPID\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POTPID\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBSCN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POBSCN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POBSCN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POBSCN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBSDT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POBSDT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POBSDT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POBSDT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POASCN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POASCN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POASCN\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POASCN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POASDT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POASDT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POASDT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POASDT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCODF\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCODF\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCODF\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCODF\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCODT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCODT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCODT\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCODT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCVTP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCVTP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCVTP\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCVTP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POCVMD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POCVMD\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POCVMD\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POCVMD\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMCPY\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"POMCPY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"POMCPY\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"POMCPY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LOAD_DATE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"LOAD_DATE\",\"di.prop.di.date.date\":\"true\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"di.column.relationshipType\":\"\",\"di.prop.di.column.logicalType\":\"date\",\"di.table.label\":\"LOAD_DATE\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_10\",\"di.table.label\":\"tDBOutput_10\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_2_2_fisrt sst_tDBOutput_2_2_fisrt = new SchemaSettingTool_tDBOutput_2_2_fisrt();
 		                    
 		                    props_tDBOutput_2.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_2_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_2.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_2 = props_tDBOutput_2.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_2.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_2);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_2.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_2 = props_tDBOutput_2.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_2.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_2);
        }
    }
globalMap.put("tDBOutput_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_2_MAPPINGS_URL", mappings_url_tDBOutput_2);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_2 = null;
topology_tDBOutput_2 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_2 = def_tDBOutput_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_2, topology_tDBOutput_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_2 = def_tDBOutput_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_2 = componentRuntime_tDBOutput_2.initialize(container_tDBOutput_2, props_tDBOutput_2);

if (initVr_tDBOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_2.getMessage());
}

if(componentRuntime_tDBOutput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_2;
	compDriverInitialization_tDBOutput_2.runAtDriver(container_tDBOutput_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_2 = null;
if(componentRuntime_tDBOutput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_2;
	if (doesNodeBelongToRequest_tDBOutput_2) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_2 = sourceOrSink_tDBOutput_2.validate(container_tDBOutput_2);
        if (vr_tDBOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_2.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_2 = null;
    if (sourceOrSink_tDBOutput_2 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_2 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_2;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_2 = sink_tDBOutput_2.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_2) {
            writeOperation_tDBOutput_2.initialize(container_tDBOutput_2);
        }
        writer_tDBOutput_2 = writeOperation_tDBOutput_2.createWriter(container_tDBOutput_2);
        if (doesNodeBelongToRequest_tDBOutput_2) {
            writer_tDBOutput_2.open("tDBOutput_2");
        }

        resourceMap.put("writer_tDBOutput_2", writer_tDBOutput_2);
    } // end of "sourceOrSink_tDBOutput_2 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_2 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_2.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_2 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_2 = props_tDBOutput_2.getSchema(c_tDBOutput_2, false);
    incomingEnforcer_tDBOutput_2 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_2);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_2 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_2 = null;


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row1");
			
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date var1;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_tmap_POMHDR_tMap_1 = 0;
				
tmap_POMHDRStruct tmap_POMHDR_tmp = new tmap_POMHDRStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";
	
	
		int tos_count_tFileInputDelimited_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_2 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_2.append("Parameters:");
                            log4jParamters_tFileInputDelimited_2.append("FILENAME" + " = " + "\"/data/talend/data_repository/POMHDR.zip\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("PONUMB")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBON")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POVNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTRMS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTIND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTYPE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODEST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTOR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POADYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODMTH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POALBO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCONF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPHON")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBUYR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSDPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTHER")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POFPCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POFOB")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHP1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHP2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHPP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSHPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POECEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POEDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSCEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCCEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORCEN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORDAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLCCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLCHG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORFRQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLEAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POORIG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCOST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POVAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORETL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCASE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POUNTS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POWGHT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTARP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSKID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POOTHN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POOTHP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBTCH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORRET")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORVAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PORCST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTPLT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCUBE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPDCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPDWN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("SHPNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPYCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POPYDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBYTP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMALS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMALV")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMSPO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMSBO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLOAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCRT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POQCKE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMTYP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PO850F")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PO860F")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTPID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBSCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBSDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POASCN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POASDT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCODF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCODT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCVTP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POCVMD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCPY")+"}]");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_2 - "  + (log4jParamters_tFileInputDelimited_2) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_2", "tFileInputDelimited_2", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = "/data/talend/data_repository/POMHDR.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_2 = null;
						try {
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
								zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_2));
							}else{
								zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
									log.error("tFileInputDelimited_2 - " +e.getMessage());
								
								System.err.println(e.getMessage());
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_2 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_2 = zis_tFileInputDelimited_2.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_2 - " +e.getMessage());
									
									System.err.println(e.getMessage());
									break;
								
							}
							if(entry_tFileInputDelimited_2 == null) {
								break;
							}
							if(entry_tFileInputDelimited_2.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_2, "ISO-8859-15","|","\n",false,1,0,
								
									limit_tFileInputDelimited_2
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_2 - " +e.getMessage());
									
									System.err.println(e.getMessage());
								
							}
					
				    
				    	log.info("tFileInputDelimited_2 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PONUMB = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PONUMB", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'PONUMB' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POBON = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBON", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POBON' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POVNUM = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POVNUM", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POVNUM' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POTRMS = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POTRMS", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POTRMS' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row1.POTIND = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row1.POSTAT = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row1.POTYPE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row1.PODEST = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POSTOR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSTOR", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POSTOR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							row1.POADYN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row1.PODMTH = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							row1.POALBO = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							row1.POCONF = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
							row1.POPHON = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
							row1.POBUYR = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PODPT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PODPT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'PODPT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POSDPT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSDPT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POSDPT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POTHER = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POTHER", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POTHER' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
							row1.POFPCD = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
							row1.POFOB = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
							row1.POSHP1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
							row1.POSHP2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 22;
					
							row1.POSHPP = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 23;
					
							row1.POSHPC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 24;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POECEN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POECEN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POECEN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 25;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POEDAT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POEDAT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POEDAT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 26;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POSCEN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSCEN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POSCEN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 27;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POSDAT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSDAT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POSDAT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 28;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POCCEN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POCCEN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POCCEN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 29;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POCDAT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POCDAT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POCDAT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 30;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PORCEN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PORCEN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.PORCEN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 31;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PORDAT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PORDAT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'PORDAT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 32;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POLCCN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POLCCN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POLCCN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 33;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POLCHG = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POLCHG", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POLCHG' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 34;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PORFRQ = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PORFRQ", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'PORFRQ' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 35;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POLEAD = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POLEAD", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POLEAD' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 36;
					
							row1.POORIG = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 37;
					
							row1.PONOT1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 38;
					
							row1.PONOT2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 39;
					
							row1.PONOT3 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 40;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POCOST = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POCOST", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POCOST = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 41;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POVAT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POVAT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POVAT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 42;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PORETL = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PORETL", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.PORETL = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 43;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POCASE = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POCASE", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POCASE = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 44;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POUNTS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POUNTS", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POUNTS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 45;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POWGHT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POWGHT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POWGHT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 46;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POTARP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POTARP", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POTARP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 47;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POSTOP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSTOP", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POSTOP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 48;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POSKID = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSKID", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POSKID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 49;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POOTHN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POOTHN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POOTHN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 50;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POOTHP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POOTHP", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POOTHP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 51;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POBTCH = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBTCH", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POBTCH = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 52;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PORRET = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PORRET", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.PORRET = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 53;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PORVAT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PORVAT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.PORVAT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 54;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.PORCST = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PORCST", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.PORCST = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 55;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POTPLT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POTPLT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POTPLT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 56;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POCUBE = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POCUBE", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POCUBE = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 57;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POPDCN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POPDCN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POPDCN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 58;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POPDWN = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POPDWN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POPDWN' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 59;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.SHPNUM = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SHPNUM", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'SHPNUM' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 60;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POPYCN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POPYCN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POPYCN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 61;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POPYDT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POPYDT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POPYDT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 62;
					
							row1.POBYTP = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 63;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POMALS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMALS", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POMALS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 64;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POMALV = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMALV", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POMALV = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 65;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POMSPO = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMSPO", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POMSPO' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 66;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POMSBO = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMSBO", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POMSBO' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 67;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POLOAD = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POLOAD", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POLOAD' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 68;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POMCRT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMCRT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POMCRT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 69;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POMCCN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMCCN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POMCCN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 70;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POMCDT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMCDT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POMCDT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 71;
					
							row1.POQCKE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 72;
					
							row1.POMTYP = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 73;
					
							row1.PO850F = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 74;
					
							row1.PO860F = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 75;
					
							row1.POTPID = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 76;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POBSCN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBSCN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POBSCN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 77;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POBSDT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBSDT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POBSDT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 78;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POASCN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POASCN", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row1.POASCN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 79;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row1.POASDT = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POASDT", "row1", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'POASDT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 80;
					
							row1.POCODF = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 81;
					
							row1.POCODT = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 82;
					
							row1.POCVTP = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 83;
					
							row1.POCVMD = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 84;
					
							row1.POMCPY = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
												log.error("tFileInputDelimited_2 - " +e.getMessage());
											
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
										
			    					}
								
			log.debug("tFileInputDelimited_2 - Retrieving the record " + fid_tFileInputDelimited_2.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row1","tFileInputDelimited_2","tFileInputDelimited_2","tFileInputDelimited","tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")) ;// ###############################
        // ###############################
        // # Output tables

tmap_POMHDR = null;


// # Output table : 'tmap_POMHDR'
count_tmap_POMHDR_tMap_1++;

tmap_POMHDR_tmp.PONUMB = row1.PONUMB;
tmap_POMHDR_tmp.POBON = row1.POBON;
tmap_POMHDR_tmp.POVNUM = row1.POVNUM;
tmap_POMHDR_tmp.POTRMS = row1.POTRMS;
tmap_POMHDR_tmp.POTIND = row1.POTIND;
tmap_POMHDR_tmp.POSTAT = row1.POSTAT;
tmap_POMHDR_tmp.POTYPE = row1.POTYPE;
tmap_POMHDR_tmp.PODEST = row1.PODEST;
tmap_POMHDR_tmp.POSTOR = row1.POSTOR;
tmap_POMHDR_tmp.POADYN = row1.POADYN;
tmap_POMHDR_tmp.PODMTH = row1.PODMTH;
tmap_POMHDR_tmp.POALBO = row1.POALBO;
tmap_POMHDR_tmp.POCONF = row1.POCONF;
tmap_POMHDR_tmp.POPHON = row1.POPHON;
tmap_POMHDR_tmp.POBUYR = row1.POBUYR;
tmap_POMHDR_tmp.PODPT = row1.PODPT;
tmap_POMHDR_tmp.POSDPT = row1.POSDPT;
tmap_POMHDR_tmp.POTHER = row1.POTHER;
tmap_POMHDR_tmp.POFPCD = row1.POFPCD;
tmap_POMHDR_tmp.POFOB = row1.POFOB;
tmap_POMHDR_tmp.POSHP1 = row1.POSHP1;
tmap_POMHDR_tmp.POSHP2 = row1.POSHP2;
tmap_POMHDR_tmp.POSHPP = row1.POSHPP;
tmap_POMHDR_tmp.POSHPC = row1.POSHPC;
tmap_POMHDR_tmp.POECEN = row1.POECEN;
tmap_POMHDR_tmp.POEDAT = row1.POEDAT;
tmap_POMHDR_tmp.POSCEN = row1.POSCEN;
tmap_POMHDR_tmp.POSDAT = row1.POSDAT;
tmap_POMHDR_tmp.POCCEN = row1.POCCEN;
tmap_POMHDR_tmp.POCDAT = row1.POCDAT;
tmap_POMHDR_tmp.PORCEN = row1.PORCEN;
tmap_POMHDR_tmp.PORDAT = row1.PORDAT;
tmap_POMHDR_tmp.POLCCN = row1.POLCCN;
tmap_POMHDR_tmp.POLCHG = row1.POLCHG;
tmap_POMHDR_tmp.PORFRQ = row1.PORFRQ;
tmap_POMHDR_tmp.POLEAD = row1.POLEAD;
tmap_POMHDR_tmp.POORIG = row1.POORIG;
tmap_POMHDR_tmp.PONOT1 = row1.PONOT1;
tmap_POMHDR_tmp.PONOT2 = row1.PONOT2;
tmap_POMHDR_tmp.PONOT3 = row1.PONOT3;
tmap_POMHDR_tmp.POCOST = row1.POCOST;
tmap_POMHDR_tmp.POVAT = row1.POVAT;
tmap_POMHDR_tmp.PORETL = row1.PORETL;
tmap_POMHDR_tmp.POCASE = row1.POCASE;
tmap_POMHDR_tmp.POUNTS = row1.POUNTS;
tmap_POMHDR_tmp.POWGHT = row1.POWGHT;
tmap_POMHDR_tmp.POTARP = row1.POTARP;
tmap_POMHDR_tmp.POSTOP = row1.POSTOP;
tmap_POMHDR_tmp.POSKID = row1.POSKID;
tmap_POMHDR_tmp.POOTHN = row1.POOTHN;
tmap_POMHDR_tmp.POOTHP = row1.POOTHP;
tmap_POMHDR_tmp.POBTCH = row1.POBTCH;
tmap_POMHDR_tmp.PORRET = row1.PORRET;
tmap_POMHDR_tmp.PORVAT = row1.PORVAT;
tmap_POMHDR_tmp.PORCST = row1.PORCST;
tmap_POMHDR_tmp.POTPLT = row1.POTPLT;
tmap_POMHDR_tmp.POCUBE = row1.POCUBE;
tmap_POMHDR_tmp.POPDCN = row1.POPDCN;
tmap_POMHDR_tmp.POPDWN = row1.POPDWN;
tmap_POMHDR_tmp.SHPNUM = row1.SHPNUM;
tmap_POMHDR_tmp.POPYCN = row1.POPYCN;
tmap_POMHDR_tmp.POPYDT = row1.POPYDT;
tmap_POMHDR_tmp.POBYTP = row1.POBYTP;
tmap_POMHDR_tmp.POMALS = row1.POMALS;
tmap_POMHDR_tmp.POMALV = row1.POMALV;
tmap_POMHDR_tmp.POMSPO = row1.POMSPO;
tmap_POMHDR_tmp.POMSBO = row1.POMSBO;
tmap_POMHDR_tmp.POLOAD = row1.POLOAD;
tmap_POMHDR_tmp.POMCRT = row1.POMCRT;
tmap_POMHDR_tmp.POMCCN = row1.POMCCN;
tmap_POMHDR_tmp.POMCDT = row1.POMCDT;
tmap_POMHDR_tmp.POQCKE = row1.POQCKE;
tmap_POMHDR_tmp.POMTYP = row1.POMTYP;
tmap_POMHDR_tmp.PO850F = row1.PO850F;
tmap_POMHDR_tmp.PO860F = row1.PO860F;
tmap_POMHDR_tmp.POTPID = row1.POTPID;
tmap_POMHDR_tmp.POBSCN = row1.POBSCN;
tmap_POMHDR_tmp.POBSDT = row1.POBSDT;
tmap_POMHDR_tmp.POASCN = row1.POASCN;
tmap_POMHDR_tmp.POASDT = row1.POASDT;
tmap_POMHDR_tmp.POCODF = row1.POCODF;
tmap_POMHDR_tmp.POCODT = row1.POCODT;
tmap_POMHDR_tmp.POCVTP = row1.POCVTP;
tmap_POMHDR_tmp.POCVMD = row1.POCVMD;
tmap_POMHDR_tmp.POMCPY = row1.POMCPY;
tmap_POMHDR_tmp.LOAD_DATE = Var.var1 ;
tmap_POMHDR = tmap_POMHDR_tmp;
log.debug("tMap_1 - Outputting the record " + count_tmap_POMHDR_tMap_1 + " of the output table 'tmap_POMHDR'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "tmap_POMHDR"
if(tmap_POMHDR != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"tmap_POMHDR","tMap_1","tMap_1","tMap","tDBOutput_2","tDBOutput_2","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("tmap_POMHDR - " + (tmap_POMHDR==null? "": tmap_POMHDR.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_2 != null) {
            incomingEnforcer_tDBOutput_2.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PONUMB") != null){
                    incomingEnforcer_tDBOutput_2.put("PONUMB", tmap_POMHDR.PONUMB);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POBON") != null){
                    incomingEnforcer_tDBOutput_2.put("POBON", tmap_POMHDR.POBON);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POVNUM") != null){
                    incomingEnforcer_tDBOutput_2.put("POVNUM", tmap_POMHDR.POVNUM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POTRMS") != null){
                    incomingEnforcer_tDBOutput_2.put("POTRMS", tmap_POMHDR.POTRMS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POTIND") != null){
                    incomingEnforcer_tDBOutput_2.put("POTIND", tmap_POMHDR.POTIND);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSTAT") != null){
                    incomingEnforcer_tDBOutput_2.put("POSTAT", tmap_POMHDR.POSTAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POTYPE") != null){
                    incomingEnforcer_tDBOutput_2.put("POTYPE", tmap_POMHDR.POTYPE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PODEST") != null){
                    incomingEnforcer_tDBOutput_2.put("PODEST", tmap_POMHDR.PODEST);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSTOR") != null){
                    incomingEnforcer_tDBOutput_2.put("POSTOR", tmap_POMHDR.POSTOR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POADYN") != null){
                    incomingEnforcer_tDBOutput_2.put("POADYN", tmap_POMHDR.POADYN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PODMTH") != null){
                    incomingEnforcer_tDBOutput_2.put("PODMTH", tmap_POMHDR.PODMTH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POALBO") != null){
                    incomingEnforcer_tDBOutput_2.put("POALBO", tmap_POMHDR.POALBO);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCONF") != null){
                    incomingEnforcer_tDBOutput_2.put("POCONF", tmap_POMHDR.POCONF);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POPHON") != null){
                    incomingEnforcer_tDBOutput_2.put("POPHON", tmap_POMHDR.POPHON);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POBUYR") != null){
                    incomingEnforcer_tDBOutput_2.put("POBUYR", tmap_POMHDR.POBUYR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PODPT") != null){
                    incomingEnforcer_tDBOutput_2.put("PODPT", tmap_POMHDR.PODPT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSDPT") != null){
                    incomingEnforcer_tDBOutput_2.put("POSDPT", tmap_POMHDR.POSDPT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POTHER") != null){
                    incomingEnforcer_tDBOutput_2.put("POTHER", tmap_POMHDR.POTHER);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POFPCD") != null){
                    incomingEnforcer_tDBOutput_2.put("POFPCD", tmap_POMHDR.POFPCD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POFOB") != null){
                    incomingEnforcer_tDBOutput_2.put("POFOB", tmap_POMHDR.POFOB);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSHP1") != null){
                    incomingEnforcer_tDBOutput_2.put("POSHP1", tmap_POMHDR.POSHP1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSHP2") != null){
                    incomingEnforcer_tDBOutput_2.put("POSHP2", tmap_POMHDR.POSHP2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSHPP") != null){
                    incomingEnforcer_tDBOutput_2.put("POSHPP", tmap_POMHDR.POSHPP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSHPC") != null){
                    incomingEnforcer_tDBOutput_2.put("POSHPC", tmap_POMHDR.POSHPC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POECEN") != null){
                    incomingEnforcer_tDBOutput_2.put("POECEN", tmap_POMHDR.POECEN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POEDAT") != null){
                    incomingEnforcer_tDBOutput_2.put("POEDAT", tmap_POMHDR.POEDAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSCEN") != null){
                    incomingEnforcer_tDBOutput_2.put("POSCEN", tmap_POMHDR.POSCEN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSDAT") != null){
                    incomingEnforcer_tDBOutput_2.put("POSDAT", tmap_POMHDR.POSDAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCCEN") != null){
                    incomingEnforcer_tDBOutput_2.put("POCCEN", tmap_POMHDR.POCCEN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCDAT") != null){
                    incomingEnforcer_tDBOutput_2.put("POCDAT", tmap_POMHDR.POCDAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PORCEN") != null){
                    incomingEnforcer_tDBOutput_2.put("PORCEN", tmap_POMHDR.PORCEN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PORDAT") != null){
                    incomingEnforcer_tDBOutput_2.put("PORDAT", tmap_POMHDR.PORDAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POLCCN") != null){
                    incomingEnforcer_tDBOutput_2.put("POLCCN", tmap_POMHDR.POLCCN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POLCHG") != null){
                    incomingEnforcer_tDBOutput_2.put("POLCHG", tmap_POMHDR.POLCHG);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PORFRQ") != null){
                    incomingEnforcer_tDBOutput_2.put("PORFRQ", tmap_POMHDR.PORFRQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POLEAD") != null){
                    incomingEnforcer_tDBOutput_2.put("POLEAD", tmap_POMHDR.POLEAD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POORIG") != null){
                    incomingEnforcer_tDBOutput_2.put("POORIG", tmap_POMHDR.POORIG);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PONOT1") != null){
                    incomingEnforcer_tDBOutput_2.put("PONOT1", tmap_POMHDR.PONOT1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PONOT2") != null){
                    incomingEnforcer_tDBOutput_2.put("PONOT2", tmap_POMHDR.PONOT2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PONOT3") != null){
                    incomingEnforcer_tDBOutput_2.put("PONOT3", tmap_POMHDR.PONOT3);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCOST") != null){
                    incomingEnforcer_tDBOutput_2.put("POCOST", tmap_POMHDR.POCOST);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POVAT") != null){
                    incomingEnforcer_tDBOutput_2.put("POVAT", tmap_POMHDR.POVAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PORETL") != null){
                    incomingEnforcer_tDBOutput_2.put("PORETL", tmap_POMHDR.PORETL);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCASE") != null){
                    incomingEnforcer_tDBOutput_2.put("POCASE", tmap_POMHDR.POCASE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POUNTS") != null){
                    incomingEnforcer_tDBOutput_2.put("POUNTS", tmap_POMHDR.POUNTS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POWGHT") != null){
                    incomingEnforcer_tDBOutput_2.put("POWGHT", tmap_POMHDR.POWGHT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POTARP") != null){
                    incomingEnforcer_tDBOutput_2.put("POTARP", tmap_POMHDR.POTARP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSTOP") != null){
                    incomingEnforcer_tDBOutput_2.put("POSTOP", tmap_POMHDR.POSTOP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POSKID") != null){
                    incomingEnforcer_tDBOutput_2.put("POSKID", tmap_POMHDR.POSKID);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POOTHN") != null){
                    incomingEnforcer_tDBOutput_2.put("POOTHN", tmap_POMHDR.POOTHN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POOTHP") != null){
                    incomingEnforcer_tDBOutput_2.put("POOTHP", tmap_POMHDR.POOTHP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POBTCH") != null){
                    incomingEnforcer_tDBOutput_2.put("POBTCH", tmap_POMHDR.POBTCH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PORRET") != null){
                    incomingEnforcer_tDBOutput_2.put("PORRET", tmap_POMHDR.PORRET);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PORVAT") != null){
                    incomingEnforcer_tDBOutput_2.put("PORVAT", tmap_POMHDR.PORVAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PORCST") != null){
                    incomingEnforcer_tDBOutput_2.put("PORCST", tmap_POMHDR.PORCST);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POTPLT") != null){
                    incomingEnforcer_tDBOutput_2.put("POTPLT", tmap_POMHDR.POTPLT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCUBE") != null){
                    incomingEnforcer_tDBOutput_2.put("POCUBE", tmap_POMHDR.POCUBE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POPDCN") != null){
                    incomingEnforcer_tDBOutput_2.put("POPDCN", tmap_POMHDR.POPDCN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POPDWN") != null){
                    incomingEnforcer_tDBOutput_2.put("POPDWN", tmap_POMHDR.POPDWN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("SHPNUM") != null){
                    incomingEnforcer_tDBOutput_2.put("SHPNUM", tmap_POMHDR.SHPNUM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POPYCN") != null){
                    incomingEnforcer_tDBOutput_2.put("POPYCN", tmap_POMHDR.POPYCN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POPYDT") != null){
                    incomingEnforcer_tDBOutput_2.put("POPYDT", tmap_POMHDR.POPYDT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POBYTP") != null){
                    incomingEnforcer_tDBOutput_2.put("POBYTP", tmap_POMHDR.POBYTP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMALS") != null){
                    incomingEnforcer_tDBOutput_2.put("POMALS", tmap_POMHDR.POMALS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMALV") != null){
                    incomingEnforcer_tDBOutput_2.put("POMALV", tmap_POMHDR.POMALV);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMSPO") != null){
                    incomingEnforcer_tDBOutput_2.put("POMSPO", tmap_POMHDR.POMSPO);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMSBO") != null){
                    incomingEnforcer_tDBOutput_2.put("POMSBO", tmap_POMHDR.POMSBO);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POLOAD") != null){
                    incomingEnforcer_tDBOutput_2.put("POLOAD", tmap_POMHDR.POLOAD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMCRT") != null){
                    incomingEnforcer_tDBOutput_2.put("POMCRT", tmap_POMHDR.POMCRT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMCCN") != null){
                    incomingEnforcer_tDBOutput_2.put("POMCCN", tmap_POMHDR.POMCCN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMCDT") != null){
                    incomingEnforcer_tDBOutput_2.put("POMCDT", tmap_POMHDR.POMCDT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POQCKE") != null){
                    incomingEnforcer_tDBOutput_2.put("POQCKE", tmap_POMHDR.POQCKE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMTYP") != null){
                    incomingEnforcer_tDBOutput_2.put("POMTYP", tmap_POMHDR.POMTYP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PO850F") != null){
                    incomingEnforcer_tDBOutput_2.put("PO850F", tmap_POMHDR.PO850F);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("PO860F") != null){
                    incomingEnforcer_tDBOutput_2.put("PO860F", tmap_POMHDR.PO860F);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POTPID") != null){
                    incomingEnforcer_tDBOutput_2.put("POTPID", tmap_POMHDR.POTPID);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POBSCN") != null){
                    incomingEnforcer_tDBOutput_2.put("POBSCN", tmap_POMHDR.POBSCN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POBSDT") != null){
                    incomingEnforcer_tDBOutput_2.put("POBSDT", tmap_POMHDR.POBSDT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POASCN") != null){
                    incomingEnforcer_tDBOutput_2.put("POASCN", tmap_POMHDR.POASCN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POASDT") != null){
                    incomingEnforcer_tDBOutput_2.put("POASDT", tmap_POMHDR.POASDT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCODF") != null){
                    incomingEnforcer_tDBOutput_2.put("POCODF", tmap_POMHDR.POCODF);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCODT") != null){
                    incomingEnforcer_tDBOutput_2.put("POCODT", tmap_POMHDR.POCODT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCVTP") != null){
                    incomingEnforcer_tDBOutput_2.put("POCVTP", tmap_POMHDR.POCVTP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POCVMD") != null){
                    incomingEnforcer_tDBOutput_2.put("POCVMD", tmap_POMHDR.POCVMD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("POMCPY") != null){
                    incomingEnforcer_tDBOutput_2.put("POMCPY", tmap_POMHDR.POMCPY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("LOAD_DATE") != null){
                    incomingEnforcer_tDBOutput_2.put("LOAD_DATE", tmap_POMHDR.LOAD_DATE);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_2 = null;
        if (incomingEnforcer_tDBOutput_2 != null) {
            data_tDBOutput_2 = incomingEnforcer_tDBOutput_2.getCurrentRecord();
        }
        
        if (writer_tDBOutput_2 != null && data_tDBOutput_2 != null) {
        	writer_tDBOutput_2.write(data_tDBOutput_2);
        }
        
        nb_line_tDBOutput_2++;

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	


 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	


 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "tmap_POMHDR"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	


				
            }
            nb_line_tFileInputDelimited_2+=fid_tFileInputDelimited_2.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/POMHDR.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_2!=null){
            		fid_tFileInputDelimited_2.close();
            	}
            }
            if(fid_tFileInputDelimited_2!=null){
            	globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
            }
					
						log.info("tFileInputDelimited_2- Retrieved records count: "+ nb_line_tFileInputDelimited_2 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_2 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'tmap_POMHDR': " + count_tmap_POMHDR_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row1",2,0,
			 			"tFileInputDelimited_2","tFileInputDelimited_2","tFileInputDelimited","tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_2", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_2 = null;
    if (writer_tDBOutput_2 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_2 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_2.close();
        resultMap_tDBOutput_2 = writer_tDBOutput_2.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_2), container_tDBOutput_2);
    }
if(resultMap_tDBOutput_2!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_2 : resultMap_tDBOutput_2.entrySet()) {
		switch(entry_tDBOutput_2.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "ERROR_MESSAGE", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_LINE", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_SUCCESS", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_REJECT", entry_tDBOutput_2.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_2 = new StringBuilder();
            for (int i_tDBOutput_2 = 0; i_tDBOutput_2 < entry_tDBOutput_2.getKey().length(); i_tDBOutput_2++) {
                char ch_tDBOutput_2 = entry_tDBOutput_2.getKey().charAt(i_tDBOutput_2);
                if(Character.isUpperCase(ch_tDBOutput_2) && i_tDBOutput_2> 0) {
                	studio_key_tDBOutput_2.append('_');
                }
                studio_key_tDBOutput_2.append(ch_tDBOutput_2);
            }
			container_tDBOutput_2.setComponentData("tDBOutput_2", studio_key_tDBOutput_2.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_2.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"tmap_POMHDR",2,0,
			 			"tMap_1","tMap_1","tMap","tDBOutput_2","tDBOutput_2","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tFileDelete_2Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_2")==null){
    if(resourceMap.get("writer_tDBOutput_2")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_2")).close();
		} catch (java.io.IOException e_tDBOutput_2) {
			String errorMessage_tDBOutput_2 = "failed to release the resource in tDBOutput_2 :" + e_tDBOutput_2.getMessage();
			System.err.println(errorMessage_tDBOutput_2);
		}
	}
}
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";
	
	
		int tos_count_tFileDelete_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_2 = new StringBuilder();
                    log4jParamters_tFileDelete_2.append("Parameters:");
                            log4jParamters_tFileDelete_2.append("PATH" + " = " + "\"/data/talend/data_repository/POMHDR.zip\"");
                        log4jParamters_tFileDelete_2.append(" | ");
                            log4jParamters_tFileDelete_2.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_2.append(" | ");
                            log4jParamters_tFileDelete_2.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_2 - "  + (log4jParamters_tFileDelete_2) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_2", "tFileDelete_2", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 

				final StringBuffer log4jSb_tFileDelete_2 = new StringBuffer();
			
class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_2=new java.io.File("/data/talend/data_repository/POMHDR.zip");
	if(path_tFileDelete_2.exists()){
		if(path_tFileDelete_2.isFile()){
	    	if(path_tFileDelete_2.delete()){
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_2 - File : "+ path_tFileDelete_2.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_2.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_2.isDirectory()){ 
	    	DeleteFoldertFileDelete_2 dftFileDelete_2 = new DeleteFoldertFileDelete_2();
	    	if(dftFileDelete_2.delete(path_tFileDelete_2)){
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_2 - Directory : "+ path_tFileDelete_2.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_2_DELETE_PATH","/data/talend/data_repository/POMHDR.zip");
 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_2 - "  + ("Done.") );

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_3", false);
		start_Hash.put("tDBRow_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_3";
	
	
		int tos_count_tDBRow_3 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_3", "tDBRow_1", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_3 = (String)(restRequest_tDBRow_3 != null ? restRequest_tDBRow_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_3 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_3 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_3 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_3 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_3.createRuntimeProperties();
 		                    props_tDBRow_3.setValue("query",
 		                    "DELETE from   OPEN_PO_DETAIL_POMDTL\nWHERE LOAD_DATE = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_3.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tDBRow_3.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_3.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_3_1_fisrt sst_tDBRow_3_1_fisrt = new SchemaSettingTool_tDBRow_3_1_fisrt();
 		                    
 		                    props_tDBRow_3.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_3_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_3_2_fisrt sst_tDBRow_3_2_fisrt = new SchemaSettingTool_tDBRow_3_2_fisrt();
 		                    
 		                    props_tDBRow_3.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_3.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_3.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_3.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_3.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_3.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_3.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_3.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_3.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_3.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_3.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_3.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_3.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_3_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_3_3_fisrt sst_tDBRow_3_3_fisrt = new SchemaSettingTool_tDBRow_3_3_fisrt();
 		                    
 		                    props_tDBRow_3.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_3.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_3);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_3.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_3);
        }
    }
globalMap.put("tDBRow_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_3_MAPPINGS_URL", mappings_url_tDBRow_3);

org.talend.components.api.container.RuntimeContainer container_tDBRow_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_3 = null;
topology_tDBRow_3 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_3 = def_tDBRow_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_3, topology_tDBRow_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_3 = def_tDBRow_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_3 = componentRuntime_tDBRow_3.initialize(container_tDBRow_3, props_tDBRow_3);

if (initVr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_3.getMessage());
}

if(componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_3;
	compDriverInitialization_tDBRow_3.runAtDriver(container_tDBRow_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_3 = null;
if(componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_3;
	if (doesNodeBelongToRequest_tDBRow_3) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_3 = sourceOrSink_tDBRow_3.validate(container_tDBRow_3);
        if (vr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_3.getMessage());
        }
	}
}

 



/**
 * [tDBRow_3 begin ] stop
 */
	
	/**
	 * [tDBRow_3 main ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	


 


	tos_count_tDBRow_3++;

/**
 * [tDBRow_3 main ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	


 



/**
 * [tDBRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	


 



/**
 * [tDBRow_3 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_3 end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	
// end of generic


resourceMap.put("finish_tDBRow_3", Boolean.TRUE);

 

ok_Hash.put("tDBRow_3", true);
end_Hash.put("tDBRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBInput_3Process(globalMap);



/**
 * [tDBRow_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_3")==null){
}
 



/**
 * [tDBRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public float PONUMB;

				public float getPONUMB () {
					return this.PONUMB;
				}

				public Boolean PONUMBIsNullable(){
				    return false;
				}
				public Boolean PONUMBIsKey(){
				    return false;
				}
				public Integer PONUMBLength(){
				    return 6;
				}
				public Integer PONUMBPrecision(){
				    return 0;
				}
				public String PONUMBDefault(){
				
					return "";
				
				}
				public String PONUMBComment(){
				
				    return "";
				
				}
				public String PONUMBPattern(){
				
					return "";
				
				}
				public String PONUMBOriginalDbColumnName(){
				
					return "PONUMB";
				
				}

				
			    public float POBON;

				public float getPOBON () {
					return this.POBON;
				}

				public Boolean POBONIsNullable(){
				    return false;
				}
				public Boolean POBONIsKey(){
				    return false;
				}
				public Integer POBONLength(){
				    return 2;
				}
				public Integer POBONPrecision(){
				    return 0;
				}
				public String POBONDefault(){
				
					return "";
				
				}
				public String POBONComment(){
				
				    return "";
				
				}
				public String POBONPattern(){
				
					return "";
				
				}
				public String POBONOriginalDbColumnName(){
				
					return "POBON";
				
				}

				
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return false;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return 9;
				}
				public Integer INUMBRPrecision(){
				    return 0;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public String PODEST;

				public String getPODEST () {
					return this.PODEST;
				}

				public Boolean PODESTIsNullable(){
				    return false;
				}
				public Boolean PODESTIsKey(){
				    return false;
				}
				public Integer PODESTLength(){
				    return 1;
				}
				public Integer PODESTPrecision(){
				    return 0;
				}
				public String PODESTDefault(){
				
					return null;
				
				}
				public String PODESTComment(){
				
				    return "";
				
				}
				public String PODESTPattern(){
				
					return "";
				
				}
				public String PODESTOriginalDbColumnName(){
				
					return "PODEST";
				
				}

				
			    public BigDecimal POLOC;

				public BigDecimal getPOLOC () {
					return this.POLOC;
				}

				public Boolean POLOCIsNullable(){
				    return false;
				}
				public Boolean POLOCIsKey(){
				    return false;
				}
				public Integer POLOCLength(){
				    return 5;
				}
				public Integer POLOCPrecision(){
				    return 0;
				}
				public String POLOCDefault(){
				
					return "";
				
				}
				public String POLOCComment(){
				
				    return "";
				
				}
				public String POLOCPattern(){
				
					return "";
				
				}
				public String POLOCOriginalDbColumnName(){
				
					return "POLOC";
				
				}

				
			    public BigDecimal ISLOC1;

				public BigDecimal getISLOC1 () {
					return this.ISLOC1;
				}

				public Boolean ISLOC1IsNullable(){
				    return false;
				}
				public Boolean ISLOC1IsKey(){
				    return false;
				}
				public Integer ISLOC1Length(){
				    return 5;
				}
				public Integer ISLOC1Precision(){
				    return 0;
				}
				public String ISLOC1Default(){
				
					return "";
				
				}
				public String ISLOC1Comment(){
				
				    return "";
				
				}
				public String ISLOC1Pattern(){
				
					return "";
				
				}
				public String ISLOC1OriginalDbColumnName(){
				
					return "ISLOC1";
				
				}

				
			    public String ISLOC2;

				public String getISLOC2 () {
					return this.ISLOC2;
				}

				public Boolean ISLOC2IsNullable(){
				    return false;
				}
				public Boolean ISLOC2IsKey(){
				    return false;
				}
				public Integer ISLOC2Length(){
				    return 2;
				}
				public Integer ISLOC2Precision(){
				    return 0;
				}
				public String ISLOC2Default(){
				
					return null;
				
				}
				public String ISLOC2Comment(){
				
				    return "";
				
				}
				public String ISLOC2Pattern(){
				
					return "";
				
				}
				public String ISLOC2OriginalDbColumnName(){
				
					return "ISLOC2";
				
				}

				
			    public String ISLOC3;

				public String getISLOC3 () {
					return this.ISLOC3;
				}

				public Boolean ISLOC3IsNullable(){
				    return false;
				}
				public Boolean ISLOC3IsKey(){
				    return false;
				}
				public Integer ISLOC3Length(){
				    return 2;
				}
				public Integer ISLOC3Precision(){
				    return 0;
				}
				public String ISLOC3Default(){
				
					return null;
				
				}
				public String ISLOC3Comment(){
				
				    return "";
				
				}
				public String ISLOC3Pattern(){
				
					return "";
				
				}
				public String ISLOC3OriginalDbColumnName(){
				
					return "ISLOC3";
				
				}

				
			    public String POMUM;

				public String getPOMUM () {
					return this.POMUM;
				}

				public Boolean POMUMIsNullable(){
				    return false;
				}
				public Boolean POMUMIsKey(){
				    return false;
				}
				public Integer POMUMLength(){
				    return 3;
				}
				public Integer POMUMPrecision(){
				    return 0;
				}
				public String POMUMDefault(){
				
					return null;
				
				}
				public String POMUMComment(){
				
				    return "";
				
				}
				public String POMUMPattern(){
				
					return "";
				
				}
				public String POMUMOriginalDbColumnName(){
				
					return "POMUM";
				
				}

				
			    public BigDecimal POMBSF;

				public BigDecimal getPOMBSF () {
					return this.POMBSF;
				}

				public Boolean POMBSFIsNullable(){
				    return false;
				}
				public Boolean POMBSFIsKey(){
				    return false;
				}
				public Integer POMBSFLength(){
				    return 11;
				}
				public Integer POMBSFPrecision(){
				    return 5;
				}
				public String POMBSFDefault(){
				
					return "";
				
				}
				public String POMBSFComment(){
				
				    return "";
				
				}
				public String POMBSFPattern(){
				
					return "";
				
				}
				public String POMBSFOriginalDbColumnName(){
				
					return "POMBSF";
				
				}

				
			    public BigDecimal POMPK;

				public BigDecimal getPOMPK () {
					return this.POMPK;
				}

				public Boolean POMPKIsNullable(){
				    return false;
				}
				public Boolean POMPKIsKey(){
				    return false;
				}
				public Integer POMPKLength(){
				    return 9;
				}
				public Integer POMPKPrecision(){
				    return 2;
				}
				public String POMPKDefault(){
				
					return "";
				
				}
				public String POMPKComment(){
				
				    return "";
				
				}
				public String POMPKPattern(){
				
					return "";
				
				}
				public String POMPKOriginalDbColumnName(){
				
					return "POMPK";
				
				}

				
			    public BigDecimal POMCST;

				public BigDecimal getPOMCST () {
					return this.POMCST;
				}

				public Boolean POMCSTIsNullable(){
				    return false;
				}
				public Boolean POMCSTIsKey(){
				    return false;
				}
				public Integer POMCSTLength(){
				    return 9;
				}
				public Integer POMCSTPrecision(){
				    return 3;
				}
				public String POMCSTDefault(){
				
					return "";
				
				}
				public String POMCSTComment(){
				
				    return "";
				
				}
				public String POMCSTPattern(){
				
					return "";
				
				}
				public String POMCSTOriginalDbColumnName(){
				
					return "POMCST";
				
				}

				
			    public BigDecimal POMVAT;

				public BigDecimal getPOMVAT () {
					return this.POMVAT;
				}

				public Boolean POMVATIsNullable(){
				    return false;
				}
				public Boolean POMVATIsKey(){
				    return false;
				}
				public Integer POMVATLength(){
				    return 9;
				}
				public Integer POMVATPrecision(){
				    return 2;
				}
				public String POMVATDefault(){
				
					return "";
				
				}
				public String POMVATComment(){
				
				    return "";
				
				}
				public String POMVATPattern(){
				
					return "";
				
				}
				public String POMVATOriginalDbColumnName(){
				
					return "POMVAT";
				
				}

				
			    public BigDecimal POMRET;

				public BigDecimal getPOMRET () {
					return this.POMRET;
				}

				public Boolean POMRETIsNullable(){
				    return false;
				}
				public Boolean POMRETIsKey(){
				    return false;
				}
				public Integer POMRETLength(){
				    return 9;
				}
				public Integer POMRETPrecision(){
				    return 2;
				}
				public String POMRETDefault(){
				
					return "";
				
				}
				public String POMRETComment(){
				
				    return "";
				
				}
				public String POMRETPattern(){
				
					return "";
				
				}
				public String POMRETOriginalDbColumnName(){
				
					return "POMRET";
				
				}

				
			    public BigDecimal POMQTY;

				public BigDecimal getPOMQTY () {
					return this.POMQTY;
				}

				public Boolean POMQTYIsNullable(){
				    return false;
				}
				public Boolean POMQTYIsKey(){
				    return false;
				}
				public Integer POMQTYLength(){
				    return 9;
				}
				public Integer POMQTYPrecision(){
				    return 2;
				}
				public String POMQTYDefault(){
				
					return "";
				
				}
				public String POMQTYComment(){
				
				    return "";
				
				}
				public String POMQTYPattern(){
				
					return "";
				
				}
				public String POMQTYOriginalDbColumnName(){
				
					return "POMQTY";
				
				}

				
			    public BigDecimal POMREC;

				public BigDecimal getPOMREC () {
					return this.POMREC;
				}

				public Boolean POMRECIsNullable(){
				    return false;
				}
				public Boolean POMRECIsKey(){
				    return false;
				}
				public Integer POMRECLength(){
				    return 9;
				}
				public Integer POMRECPrecision(){
				    return 2;
				}
				public String POMRECDefault(){
				
					return "";
				
				}
				public String POMRECComment(){
				
				    return "";
				
				}
				public String POMRECPattern(){
				
					return "";
				
				}
				public String POMRECOriginalDbColumnName(){
				
					return "POMREC";
				
				}

				
			    public String PVNDPN;

				public String getPVNDPN () {
					return this.PVNDPN;
				}

				public Boolean PVNDPNIsNullable(){
				    return false;
				}
				public Boolean PVNDPNIsKey(){
				    return false;
				}
				public Integer PVNDPNLength(){
				    return 15;
				}
				public Integer PVNDPNPrecision(){
				    return 0;
				}
				public String PVNDPNDefault(){
				
					return "";
				
				}
				public String PVNDPNComment(){
				
				    return "";
				
				}
				public String PVNDPNPattern(){
				
					return "";
				
				}
				public String PVNDPNOriginalDbColumnName(){
				
					return "PVNDPN";
				
				}

				
			    public BigDecimal POMORG;

				public BigDecimal getPOMORG () {
					return this.POMORG;
				}

				public Boolean POMORGIsNullable(){
				    return false;
				}
				public Boolean POMORGIsKey(){
				    return false;
				}
				public Integer POMORGLength(){
				    return 9;
				}
				public Integer POMORGPrecision(){
				    return 2;
				}
				public String POMORGDefault(){
				
					return "";
				
				}
				public String POMORGComment(){
				
				    return "";
				
				}
				public String POMORGPattern(){
				
					return "";
				
				}
				public String POMORGOriginalDbColumnName(){
				
					return "POMORG";
				
				}

				
			    public BigDecimal POFREE;

				public BigDecimal getPOFREE () {
					return this.POFREE;
				}

				public Boolean POFREEIsNullable(){
				    return false;
				}
				public Boolean POFREEIsKey(){
				    return false;
				}
				public Integer POFREELength(){
				    return 9;
				}
				public Integer POFREEPrecision(){
				    return 2;
				}
				public String POFREEDefault(){
				
					return "";
				
				}
				public String POFREEComment(){
				
				    return "";
				
				}
				public String POFREEPattern(){
				
					return "";
				
				}
				public String POFREEOriginalDbColumnName(){
				
					return "POFREE";
				
				}

				
			    public BigDecimal POMRES;

				public BigDecimal getPOMRES () {
					return this.POMRES;
				}

				public Boolean POMRESIsNullable(){
				    return false;
				}
				public Boolean POMRESIsKey(){
				    return false;
				}
				public Integer POMRESLength(){
				    return 9;
				}
				public Integer POMRESPrecision(){
				    return 2;
				}
				public String POMRESDefault(){
				
					return "";
				
				}
				public String POMRESComment(){
				
				    return "";
				
				}
				public String POMRESPattern(){
				
					return "";
				
				}
				public String POMRESOriginalDbColumnName(){
				
					return "POMRES";
				
				}

				
			    public BigDecimal POTALW;

				public BigDecimal getPOTALW () {
					return this.POTALW;
				}

				public Boolean POTALWIsNullable(){
				    return false;
				}
				public Boolean POTALWIsKey(){
				    return false;
				}
				public Integer POTALWLength(){
				    return 9;
				}
				public Integer POTALWPrecision(){
				    return 3;
				}
				public String POTALWDefault(){
				
					return "";
				
				}
				public String POTALWComment(){
				
				    return "";
				
				}
				public String POTALWPattern(){
				
					return "";
				
				}
				public String POTALWOriginalDbColumnName(){
				
					return "POTALW";
				
				}

				
			    public float POSVND;

				public float getPOSVND () {
					return this.POSVND;
				}

				public Boolean POSVNDIsNullable(){
				    return false;
				}
				public Boolean POSVNDIsKey(){
				    return false;
				}
				public Integer POSVNDLength(){
				    return 6;
				}
				public Integer POSVNDPrecision(){
				    return 0;
				}
				public String POSVNDDefault(){
				
					return "";
				
				}
				public String POSVNDComment(){
				
				    return "";
				
				}
				public String POSVNDPattern(){
				
					return "";
				
				}
				public String POSVNDOriginalDbColumnName(){
				
					return "POSVND";
				
				}

				
			    public String POSTYL;

				public String getPOSTYL () {
					return this.POSTYL;
				}

				public Boolean POSTYLIsNullable(){
				    return false;
				}
				public Boolean POSTYLIsKey(){
				    return false;
				}
				public Integer POSTYLLength(){
				    return 15;
				}
				public Integer POSTYLPrecision(){
				    return 0;
				}
				public String POSTYLDefault(){
				
					return "";
				
				}
				public String POSTYLComment(){
				
				    return "";
				
				}
				public String POSTYLPattern(){
				
					return "";
				
				}
				public String POSTYLOriginalDbColumnName(){
				
					return "POSTYL";
				
				}

				
			    public String POMFLG;

				public String getPOMFLG () {
					return this.POMFLG;
				}

				public Boolean POMFLGIsNullable(){
				    return false;
				}
				public Boolean POMFLGIsKey(){
				    return false;
				}
				public Integer POMFLGLength(){
				    return 1;
				}
				public Integer POMFLGPrecision(){
				    return 0;
				}
				public String POMFLGDefault(){
				
					return "";
				
				}
				public String POMFLGComment(){
				
				    return "";
				
				}
				public String POMFLGPattern(){
				
					return "";
				
				}
				public String POMFLGOriginalDbColumnName(){
				
					return "POMFLG";
				
				}

				
			    public String POSEAS;

				public String getPOSEAS () {
					return this.POSEAS;
				}

				public Boolean POSEASIsNullable(){
				    return false;
				}
				public Boolean POSEASIsKey(){
				    return false;
				}
				public Integer POSEASLength(){
				    return 3;
				}
				public Integer POSEASPrecision(){
				    return 0;
				}
				public String POSEASDefault(){
				
					return "";
				
				}
				public String POSEASComment(){
				
				    return "";
				
				}
				public String POSEASPattern(){
				
					return "";
				
				}
				public String POSEASOriginalDbColumnName(){
				
					return "POSEAS";
				
				}

				
			    public float POSCOL;

				public float getPOSCOL () {
					return this.POSCOL;
				}

				public Boolean POSCOLIsNullable(){
				    return false;
				}
				public Boolean POSCOLIsKey(){
				    return false;
				}
				public Integer POSCOLLength(){
				    return 4;
				}
				public Integer POSCOLPrecision(){
				    return 0;
				}
				public String POSCOLDefault(){
				
					return "";
				
				}
				public String POSCOLComment(){
				
				    return "";
				
				}
				public String POSCOLPattern(){
				
					return "";
				
				}
				public String POSCOLOriginalDbColumnName(){
				
					return "POSCOL";
				
				}

				
			    public String POSSIZ;

				public String getPOSSIZ () {
					return this.POSSIZ;
				}

				public Boolean POSSIZIsNullable(){
				    return false;
				}
				public Boolean POSSIZIsKey(){
				    return false;
				}
				public Integer POSSIZLength(){
				    return 4;
				}
				public Integer POSSIZPrecision(){
				    return 0;
				}
				public String POSSIZDefault(){
				
					return "";
				
				}
				public String POSSIZComment(){
				
				    return "";
				
				}
				public String POSSIZPattern(){
				
					return "";
				
				}
				public String POSSIZOriginalDbColumnName(){
				
					return "POSSIZ";
				
				}

				
			    public String POSDIM;

				public String getPOSDIM () {
					return this.POSDIM;
				}

				public Boolean POSDIMIsNullable(){
				    return false;
				}
				public Boolean POSDIMIsKey(){
				    return false;
				}
				public Integer POSDIMLength(){
				    return 4;
				}
				public Integer POSDIMPrecision(){
				    return 0;
				}
				public String POSDIMDefault(){
				
					return "";
				
				}
				public String POSDIMComment(){
				
				    return "";
				
				}
				public String POSDIMPattern(){
				
					return "";
				
				}
				public String POSDIMOriginalDbColumnName(){
				
					return "POSDIM";
				
				}

				
			    public BigDecimal POBQTY;

				public BigDecimal getPOBQTY () {
					return this.POBQTY;
				}

				public Boolean POBQTYIsNullable(){
				    return false;
				}
				public Boolean POBQTYIsKey(){
				    return false;
				}
				public Integer POBQTYLength(){
				    return 9;
				}
				public Integer POBQTYPrecision(){
				    return 2;
				}
				public String POBQTYDefault(){
				
					return "";
				
				}
				public String POBQTYComment(){
				
				    return "";
				
				}
				public String POBQTYPattern(){
				
					return "";
				
				}
				public String POBQTYOriginalDbColumnName(){
				
					return "POBQTY";
				
				}

				
			    public BigDecimal POBCST;

				public BigDecimal getPOBCST () {
					return this.POBCST;
				}

				public Boolean POBCSTIsNullable(){
				    return false;
				}
				public Boolean POBCSTIsKey(){
				    return false;
				}
				public Integer POBCSTLength(){
				    return 9;
				}
				public Integer POBCSTPrecision(){
				    return 3;
				}
				public String POBCSTDefault(){
				
					return "";
				
				}
				public String POBCSTComment(){
				
				    return "";
				
				}
				public String POBCSTPattern(){
				
					return "";
				
				}
				public String POBCSTOriginalDbColumnName(){
				
					return "POBCST";
				
				}

				
			    public BigDecimal POBALW;

				public BigDecimal getPOBALW () {
					return this.POBALW;
				}

				public Boolean POBALWIsNullable(){
				    return false;
				}
				public Boolean POBALWIsKey(){
				    return false;
				}
				public Integer POBALWLength(){
				    return 9;
				}
				public Integer POBALWPrecision(){
				    return 3;
				}
				public String POBALWDefault(){
				
					return "";
				
				}
				public String POBALWComment(){
				
				    return "";
				
				}
				public String POBALWPattern(){
				
					return "";
				
				}
				public String POBALWOriginalDbColumnName(){
				
					return "POBALW";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			        this.PONUMB = dis.readFloat();
					
			        this.POBON = dis.readFloat();
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.PODEST = readString(dis);
					
						this.POLOC = (BigDecimal) dis.readObject();
					
						this.ISLOC1 = (BigDecimal) dis.readObject();
					
					this.ISLOC2 = readString(dis);
					
					this.ISLOC3 = readString(dis);
					
					this.POMUM = readString(dis);
					
						this.POMBSF = (BigDecimal) dis.readObject();
					
						this.POMPK = (BigDecimal) dis.readObject();
					
						this.POMCST = (BigDecimal) dis.readObject();
					
						this.POMVAT = (BigDecimal) dis.readObject();
					
						this.POMRET = (BigDecimal) dis.readObject();
					
						this.POMQTY = (BigDecimal) dis.readObject();
					
						this.POMREC = (BigDecimal) dis.readObject();
					
					this.PVNDPN = readString(dis);
					
						this.POMORG = (BigDecimal) dis.readObject();
					
						this.POFREE = (BigDecimal) dis.readObject();
					
						this.POMRES = (BigDecimal) dis.readObject();
					
						this.POTALW = (BigDecimal) dis.readObject();
					
			        this.POSVND = dis.readFloat();
					
					this.POSTYL = readString(dis);
					
					this.POMFLG = readString(dis);
					
					this.POSEAS = readString(dis);
					
			        this.POSCOL = dis.readFloat();
					
					this.POSSIZ = readString(dis);
					
					this.POSDIM = readString(dis);
					
						this.POBQTY = (BigDecimal) dis.readObject();
					
						this.POBCST = (BigDecimal) dis.readObject();
					
						this.POBALW = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			        this.PONUMB = dis.readFloat();
					
			        this.POBON = dis.readFloat();
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.PODEST = readString(dis);
					
						this.POLOC = (BigDecimal) dis.readObject();
					
						this.ISLOC1 = (BigDecimal) dis.readObject();
					
					this.ISLOC2 = readString(dis);
					
					this.ISLOC3 = readString(dis);
					
					this.POMUM = readString(dis);
					
						this.POMBSF = (BigDecimal) dis.readObject();
					
						this.POMPK = (BigDecimal) dis.readObject();
					
						this.POMCST = (BigDecimal) dis.readObject();
					
						this.POMVAT = (BigDecimal) dis.readObject();
					
						this.POMRET = (BigDecimal) dis.readObject();
					
						this.POMQTY = (BigDecimal) dis.readObject();
					
						this.POMREC = (BigDecimal) dis.readObject();
					
					this.PVNDPN = readString(dis);
					
						this.POMORG = (BigDecimal) dis.readObject();
					
						this.POFREE = (BigDecimal) dis.readObject();
					
						this.POMRES = (BigDecimal) dis.readObject();
					
						this.POTALW = (BigDecimal) dis.readObject();
					
			        this.POSVND = dis.readFloat();
					
					this.POSTYL = readString(dis);
					
					this.POMFLG = readString(dis);
					
					this.POSEAS = readString(dis);
					
			        this.POSCOL = dis.readFloat();
					
					this.POSSIZ = readString(dis);
					
					this.POSDIM = readString(dis);
					
						this.POBQTY = (BigDecimal) dis.readObject();
					
						this.POBCST = (BigDecimal) dis.readObject();
					
						this.POBALW = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.PONUMB);
					
					// float
				
		            	dos.writeFloat(this.POBON);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISLOC1);
					
					// String
				
						writeString(this.ISLOC2,dos);
					
					// String
				
						writeString(this.ISLOC3,dos);
					
					// String
				
						writeString(this.POMUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMBSF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMPK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMREC);
					
					// String
				
						writeString(this.PVNDPN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMORG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POFREE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTALW);
					
					// float
				
		            	dos.writeFloat(this.POSVND);
					
					// String
				
						writeString(this.POSTYL,dos);
					
					// String
				
						writeString(this.POMFLG,dos);
					
					// String
				
						writeString(this.POSEAS,dos);
					
					// float
				
		            	dos.writeFloat(this.POSCOL);
					
					// String
				
						writeString(this.POSSIZ,dos);
					
					// String
				
						writeString(this.POSDIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBALW);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.PONUMB);
					
					// float
				
		            	dos.writeFloat(this.POBON);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISLOC1);
					
					// String
				
						writeString(this.ISLOC2,dos);
					
					// String
				
						writeString(this.ISLOC3,dos);
					
					// String
				
						writeString(this.POMUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMBSF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMPK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMREC);
					
					// String
				
						writeString(this.PVNDPN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMORG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POFREE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTALW);
					
					// float
				
		            	dos.writeFloat(this.POSVND);
					
					// String
				
						writeString(this.POSTYL,dos);
					
					// String
				
						writeString(this.POMFLG,dos);
					
					// String
				
						writeString(this.POSEAS,dos);
					
					// float
				
		            	dos.writeFloat(this.POSCOL);
					
					// String
				
						writeString(this.POSSIZ,dos);
					
					// String
				
						writeString(this.POSDIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBALW);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PONUMB="+String.valueOf(PONUMB));
		sb.append(",POBON="+String.valueOf(POBON));
		sb.append(",INUMBR="+String.valueOf(INUMBR));
		sb.append(",PODEST="+PODEST);
		sb.append(",POLOC="+String.valueOf(POLOC));
		sb.append(",ISLOC1="+String.valueOf(ISLOC1));
		sb.append(",ISLOC2="+ISLOC2);
		sb.append(",ISLOC3="+ISLOC3);
		sb.append(",POMUM="+POMUM);
		sb.append(",POMBSF="+String.valueOf(POMBSF));
		sb.append(",POMPK="+String.valueOf(POMPK));
		sb.append(",POMCST="+String.valueOf(POMCST));
		sb.append(",POMVAT="+String.valueOf(POMVAT));
		sb.append(",POMRET="+String.valueOf(POMRET));
		sb.append(",POMQTY="+String.valueOf(POMQTY));
		sb.append(",POMREC="+String.valueOf(POMREC));
		sb.append(",PVNDPN="+PVNDPN);
		sb.append(",POMORG="+String.valueOf(POMORG));
		sb.append(",POFREE="+String.valueOf(POFREE));
		sb.append(",POMRES="+String.valueOf(POMRES));
		sb.append(",POTALW="+String.valueOf(POTALW));
		sb.append(",POSVND="+String.valueOf(POSVND));
		sb.append(",POSTYL="+POSTYL);
		sb.append(",POMFLG="+POMFLG);
		sb.append(",POSEAS="+POSEAS);
		sb.append(",POSCOL="+String.valueOf(POSCOL));
		sb.append(",POSSIZ="+POSSIZ);
		sb.append(",POSDIM="+POSDIM);
		sb.append(",POBQTY="+String.valueOf(POBQTY));
		sb.append(",POBCST="+String.valueOf(POBCST));
		sb.append(",POBALW="+String.valueOf(POBALW));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(PONUMB);
        			
        			sb.append("|");
        		
        				sb.append(POBON);
        			
        			sb.append("|");
        		
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(PODEST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODEST);
            			}
            		
        			sb.append("|");
        		
        				if(POLOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLOC);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC1);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC2);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC3);
            			}
            		
        			sb.append("|");
        		
        				if(POMUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMUM);
            			}
            		
        			sb.append("|");
        		
        				if(POMBSF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMBSF);
            			}
            		
        			sb.append("|");
        		
        				if(POMPK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMPK);
            			}
            		
        			sb.append("|");
        		
        				if(POMCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCST);
            			}
            		
        			sb.append("|");
        		
        				if(POMVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMVAT);
            			}
            		
        			sb.append("|");
        		
        				if(POMRET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMRET);
            			}
            		
        			sb.append("|");
        		
        				if(POMQTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMQTY);
            			}
            		
        			sb.append("|");
        		
        				if(POMREC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMREC);
            			}
            		
        			sb.append("|");
        		
        				if(PVNDPN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PVNDPN);
            			}
            		
        			sb.append("|");
        		
        				if(POMORG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMORG);
            			}
            		
        			sb.append("|");
        		
        				if(POFREE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFREE);
            			}
            		
        			sb.append("|");
        		
        				if(POMRES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMRES);
            			}
            		
        			sb.append("|");
        		
        				if(POTALW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTALW);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POSVND);
        			
        			sb.append("|");
        		
        				if(POSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(POMFLG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMFLG);
            			}
            		
        			sb.append("|");
        		
        				if(POSEAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSEAS);
            			}
            		
        			sb.append("|");
        		
        				sb.append(POSCOL);
        			
        			sb.append("|");
        		
        				if(POSSIZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSSIZ);
            			}
            		
        			sb.append("|");
        		
        				if(POSDIM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSDIM);
            			}
            		
        			sb.append("|");
        		
        				if(POBQTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBQTY);
            			}
            		
        			sb.append("|");
        		
        				if(POBCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBCST);
            			}
            		
        			sb.append("|");
        		
        				if(POBALW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBALW);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row4");
			
		int tos_count_tFileOutputDelimited_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_3 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_3.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_3.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FILENAME" + " = " + "\"/data/talend/data_repository/POMDTL.csv\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_3 - "  + (log4jParamters_tFileOutputDelimited_3) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_3", "tFileOutputDelimited_1", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File("/data/talend/data_repository/POMDTL.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                                log.info("tFileOutputDelimited_3 - Creating directory '" + dir_tFileOutputDelimited_3.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_3.mkdirs();
                                log.info("tFileOutputDelimited_3 - The directory '"+ dir_tFileOutputDelimited_3.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        String zipName_tFileOutputDelimited_3 = fullName_tFileOutputDelimited_3 + ".zip";
                        java.io.File file_tFileOutputDelimited_3 = new java.io.File(zipName_tFileOutputDelimited_3);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_3= null;
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        if(file_tFileOutputDelimited_3.exists()) {
                            file_tFileOutputDelimited_3.delete();
                        }
                        zipOut_tFileOutputDelimited_3= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_3)));
                        zipOut_tFileOutputDelimited_3.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_3.getName()));
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_3,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("PONUMB");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POBON");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("INUMBR");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("PODEST");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POLOC");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ISLOC1");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ISLOC2");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ISLOC3");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMUM");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMBSF");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMPK");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMCST");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMVAT");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMRET");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMQTY");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMREC");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("PVNDPN");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMORG");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POFREE");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMRES");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POTALW");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POSVND");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POSTYL");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POMFLG");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POSEAS");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POSCOL");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POSSIZ");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POSDIM");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POBQTY");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POBCST");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("POBALW");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_3 = new StringBuilder();
                    log4jParamters_tDBInput_3.append("Parameters:");
                            log4jParamters_tDBInput_3.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("QUERY" + " = " + "\"select * from MM4R5LIB.POMDTL\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("PONUMB")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBON")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODEST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLOC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISLOC1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISLOC2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISLOC3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMBSF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMPK")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMVAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMRET")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMQTY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMREC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PVNDPN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMORG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POFREE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMRES")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTALW")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSVND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTYL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMFLG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSEAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSCOL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSSIZ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSDIM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBQTY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBCST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBALW")+"}]");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + (log4jParamters_tDBInput_3) );
                    } 
                } 
            new BytesLimit65535_tDBInput_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_3", "tDBInput_1", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_3 = context.jda_password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				  
				String url_tDBInput_3 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_3 - Driver ClassName: "+driverClass_tDBInput_3+".");
			
	    		log.debug("tDBInput_3 - Connection attempt to '" + url_tDBInput_3 + "' with the username '" + dbUser_tDBInput_3 + "'.");
			
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
	    		log.debug("tDBInput_3 - Connection to '" + url_tDBInput_3 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select * from MM4R5LIB.POMDTL";
		    
	    		log.debug("tDBInput_3 - Executing the query: '" + dbquery_tDBInput_3 + "'.");
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    	log.debug("tDBInput_3 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row4.PONUMB = 0;
							} else {
		                          
            row4.PONUMB = rs_tDBInput_3.getFloat(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row4.POBON = 0;
							} else {
		                          
            row4.POBON = rs_tDBInput_3.getFloat(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row4.INUMBR = null;
							} else {
		                          
            row4.INUMBR = rs_tDBInput_3.getBigDecimal(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row4.PODEST = null;
							} else {
	                         		
        	row4.PODEST = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row4.POLOC = null;
							} else {
		                          
            row4.POLOC = rs_tDBInput_3.getBigDecimal(5);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row4.ISLOC1 = null;
							} else {
		                          
            row4.ISLOC1 = rs_tDBInput_3.getBigDecimal(6);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row4.ISLOC2 = null;
							} else {
	                         		
        	row4.ISLOC2 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row4.ISLOC3 = null;
							} else {
	                         		
        	row4.ISLOC3 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row4.POMUM = null;
							} else {
	                         		
        	row4.POMUM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row4.POMBSF = null;
							} else {
		                          
            row4.POMBSF = rs_tDBInput_3.getBigDecimal(10);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row4.POMPK = null;
							} else {
		                          
            row4.POMPK = rs_tDBInput_3.getBigDecimal(11);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row4.POMCST = null;
							} else {
		                          
            row4.POMCST = rs_tDBInput_3.getBigDecimal(12);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row4.POMVAT = null;
							} else {
		                          
            row4.POMVAT = rs_tDBInput_3.getBigDecimal(13);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row4.POMRET = null;
							} else {
		                          
            row4.POMRET = rs_tDBInput_3.getBigDecimal(14);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row4.POMQTY = null;
							} else {
		                          
            row4.POMQTY = rs_tDBInput_3.getBigDecimal(15);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row4.POMREC = null;
							} else {
		                          
            row4.POMREC = rs_tDBInput_3.getBigDecimal(16);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row4.PVNDPN = null;
							} else {
	                         		
        	row4.PVNDPN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row4.POMORG = null;
							} else {
		                          
            row4.POMORG = rs_tDBInput_3.getBigDecimal(18);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row4.POFREE = null;
							} else {
		                          
            row4.POFREE = rs_tDBInput_3.getBigDecimal(19);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row4.POMRES = null;
							} else {
		                          
            row4.POMRES = rs_tDBInput_3.getBigDecimal(20);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row4.POTALW = null;
							} else {
		                          
            row4.POTALW = rs_tDBInput_3.getBigDecimal(21);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row4.POSVND = 0;
							} else {
		                          
            row4.POSVND = rs_tDBInput_3.getFloat(22);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row4.POSTYL = null;
							} else {
	                         		
        	row4.POSTYL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row4.POMFLG = null;
							} else {
	                         		
        	row4.POMFLG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 24, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row4.POSEAS = null;
							} else {
	                         		
        	row4.POSEAS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 25, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row4.POSCOL = 0;
							} else {
		                          
            row4.POSCOL = rs_tDBInput_3.getFloat(26);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row4.POSSIZ = null;
							} else {
	                         		
        	row4.POSSIZ = routines.system.JDBCUtil.getString(rs_tDBInput_3, 27, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 28) {
								row4.POSDIM = null;
							} else {
	                         		
        	row4.POSDIM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 28, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 29) {
								row4.POBQTY = null;
							} else {
		                          
            row4.POBQTY = rs_tDBInput_3.getBigDecimal(29);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 30) {
								row4.POBCST = null;
							} else {
		                          
            row4.POBCST = rs_tDBInput_3.getBigDecimal(30);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 31) {
								row4.POBALW = null;
							} else {
		                          
            row4.POBALW = rs_tDBInput_3.getBigDecimal(31);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					
						log.debug("tDBInput_3 - Retrieving the record " + nb_line_tDBInput_3 + ".");
					



 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row4","tDBInput_3","tDBInput_1","tAS400Input","tFileOutputDelimited_3","tFileOutputDelimited_1","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                        sb_tFileOutputDelimited_3.append(
                            row4.PONUMB
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row4.POBON
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.INUMBR != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.INUMBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.PODEST != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.PODEST
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POLOC != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POLOC.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.ISLOC1 != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.ISLOC1.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.ISLOC2 != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.ISLOC2
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.ISLOC3 != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.ISLOC3
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMUM != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMUM
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMBSF != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMBSF.setScale(5, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMPK != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMPK.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMCST != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMCST.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMVAT != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMVAT.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMRET != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMRET.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMQTY != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMQTY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMREC != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMREC.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.PVNDPN != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.PVNDPN
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMORG != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMORG.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POFREE != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POFREE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMRES != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMRES.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POTALW != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POTALW.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row4.POSVND
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POSTYL != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POSTYL
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POMFLG != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POMFLG
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POSEAS != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POSEAS
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row4.POSCOL
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POSSIZ != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POSSIZ
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POSDIM != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POSDIM
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POBQTY != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POBQTY.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POBCST != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POBCST.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row4.POBALW != null) {
                        sb_tFileOutputDelimited_3.append(
                            row4.POBALW.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());
                        log.debug("tFileOutputDelimited_3 - Writing the record " + nb_line_tFileOutputDelimited_3 + ".");

                    }



 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
	    		log.debug("tDBInput_3 - Closing the connection to the database.");
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_3 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
	    		log.debug("tDBInput_3 - Retrieved records count: "+nb_line_tDBInput_3 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + ("Done.") );

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	
				log.debug("tFileOutputDelimited_3 - Written records count: " + nb_line_tFileOutputDelimited_3 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row4",2,0,
			 			"tDBInput_3","tDBInput_1","tAS400Input","tFileOutputDelimited_3","tFileOutputDelimited_1","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_3 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputDelimited_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class tmap_POMDTLStruct implements routines.system.IPersistableRow<tmap_POMDTLStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public Double PONUMB;

				public Double getPONUMB () {
					return this.PONUMB;
				}

				public Boolean PONUMBIsNullable(){
				    return true;
				}
				public Boolean PONUMBIsKey(){
				    return false;
				}
				public Integer PONUMBLength(){
				    return null;
				}
				public Integer PONUMBPrecision(){
				    return null;
				}
				public String PONUMBDefault(){
				
					return "";
				
				}
				public String PONUMBComment(){
				
				    return "";
				
				}
				public String PONUMBPattern(){
				
					return "";
				
				}
				public String PONUMBOriginalDbColumnName(){
				
					return "PONUMB";
				
				}

				
			    public Double POBON;

				public Double getPOBON () {
					return this.POBON;
				}

				public Boolean POBONIsNullable(){
				    return true;
				}
				public Boolean POBONIsKey(){
				    return false;
				}
				public Integer POBONLength(){
				    return null;
				}
				public Integer POBONPrecision(){
				    return null;
				}
				public String POBONDefault(){
				
					return "";
				
				}
				public String POBONComment(){
				
				    return "";
				
				}
				public String POBONPattern(){
				
					return "";
				
				}
				public String POBONOriginalDbColumnName(){
				
					return "POBON";
				
				}

				
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public String PODEST;

				public String getPODEST () {
					return this.PODEST;
				}

				public Boolean PODESTIsNullable(){
				    return true;
				}
				public Boolean PODESTIsKey(){
				    return false;
				}
				public Integer PODESTLength(){
				    return null;
				}
				public Integer PODESTPrecision(){
				    return null;
				}
				public String PODESTDefault(){
				
					return null;
				
				}
				public String PODESTComment(){
				
				    return "";
				
				}
				public String PODESTPattern(){
				
					return "";
				
				}
				public String PODESTOriginalDbColumnName(){
				
					return "PODEST";
				
				}

				
			    public BigDecimal POLOC;

				public BigDecimal getPOLOC () {
					return this.POLOC;
				}

				public Boolean POLOCIsNullable(){
				    return true;
				}
				public Boolean POLOCIsKey(){
				    return false;
				}
				public Integer POLOCLength(){
				    return null;
				}
				public Integer POLOCPrecision(){
				    return null;
				}
				public String POLOCDefault(){
				
					return "";
				
				}
				public String POLOCComment(){
				
				    return "";
				
				}
				public String POLOCPattern(){
				
					return "";
				
				}
				public String POLOCOriginalDbColumnName(){
				
					return "POLOC";
				
				}

				
			    public BigDecimal ISLOC1;

				public BigDecimal getISLOC1 () {
					return this.ISLOC1;
				}

				public Boolean ISLOC1IsNullable(){
				    return true;
				}
				public Boolean ISLOC1IsKey(){
				    return false;
				}
				public Integer ISLOC1Length(){
				    return null;
				}
				public Integer ISLOC1Precision(){
				    return null;
				}
				public String ISLOC1Default(){
				
					return "";
				
				}
				public String ISLOC1Comment(){
				
				    return "";
				
				}
				public String ISLOC1Pattern(){
				
					return "";
				
				}
				public String ISLOC1OriginalDbColumnName(){
				
					return "ISLOC1";
				
				}

				
			    public String ISLOC2;

				public String getISLOC2 () {
					return this.ISLOC2;
				}

				public Boolean ISLOC2IsNullable(){
				    return true;
				}
				public Boolean ISLOC2IsKey(){
				    return false;
				}
				public Integer ISLOC2Length(){
				    return null;
				}
				public Integer ISLOC2Precision(){
				    return null;
				}
				public String ISLOC2Default(){
				
					return null;
				
				}
				public String ISLOC2Comment(){
				
				    return "";
				
				}
				public String ISLOC2Pattern(){
				
					return "";
				
				}
				public String ISLOC2OriginalDbColumnName(){
				
					return "ISLOC2";
				
				}

				
			    public String ISLOC3;

				public String getISLOC3 () {
					return this.ISLOC3;
				}

				public Boolean ISLOC3IsNullable(){
				    return true;
				}
				public Boolean ISLOC3IsKey(){
				    return false;
				}
				public Integer ISLOC3Length(){
				    return null;
				}
				public Integer ISLOC3Precision(){
				    return null;
				}
				public String ISLOC3Default(){
				
					return null;
				
				}
				public String ISLOC3Comment(){
				
				    return "";
				
				}
				public String ISLOC3Pattern(){
				
					return "";
				
				}
				public String ISLOC3OriginalDbColumnName(){
				
					return "ISLOC3";
				
				}

				
			    public String POMUM;

				public String getPOMUM () {
					return this.POMUM;
				}

				public Boolean POMUMIsNullable(){
				    return true;
				}
				public Boolean POMUMIsKey(){
				    return false;
				}
				public Integer POMUMLength(){
				    return null;
				}
				public Integer POMUMPrecision(){
				    return null;
				}
				public String POMUMDefault(){
				
					return null;
				
				}
				public String POMUMComment(){
				
				    return "";
				
				}
				public String POMUMPattern(){
				
					return "";
				
				}
				public String POMUMOriginalDbColumnName(){
				
					return "POMUM";
				
				}

				
			    public BigDecimal POMBSF;

				public BigDecimal getPOMBSF () {
					return this.POMBSF;
				}

				public Boolean POMBSFIsNullable(){
				    return true;
				}
				public Boolean POMBSFIsKey(){
				    return false;
				}
				public Integer POMBSFLength(){
				    return null;
				}
				public Integer POMBSFPrecision(){
				    return null;
				}
				public String POMBSFDefault(){
				
					return "";
				
				}
				public String POMBSFComment(){
				
				    return "";
				
				}
				public String POMBSFPattern(){
				
					return "";
				
				}
				public String POMBSFOriginalDbColumnName(){
				
					return "POMBSF";
				
				}

				
			    public BigDecimal POMPK;

				public BigDecimal getPOMPK () {
					return this.POMPK;
				}

				public Boolean POMPKIsNullable(){
				    return true;
				}
				public Boolean POMPKIsKey(){
				    return false;
				}
				public Integer POMPKLength(){
				    return null;
				}
				public Integer POMPKPrecision(){
				    return null;
				}
				public String POMPKDefault(){
				
					return "";
				
				}
				public String POMPKComment(){
				
				    return "";
				
				}
				public String POMPKPattern(){
				
					return "";
				
				}
				public String POMPKOriginalDbColumnName(){
				
					return "POMPK";
				
				}

				
			    public BigDecimal POMCST;

				public BigDecimal getPOMCST () {
					return this.POMCST;
				}

				public Boolean POMCSTIsNullable(){
				    return true;
				}
				public Boolean POMCSTIsKey(){
				    return false;
				}
				public Integer POMCSTLength(){
				    return null;
				}
				public Integer POMCSTPrecision(){
				    return null;
				}
				public String POMCSTDefault(){
				
					return "";
				
				}
				public String POMCSTComment(){
				
				    return "";
				
				}
				public String POMCSTPattern(){
				
					return "";
				
				}
				public String POMCSTOriginalDbColumnName(){
				
					return "POMCST";
				
				}

				
			    public BigDecimal POMVAT;

				public BigDecimal getPOMVAT () {
					return this.POMVAT;
				}

				public Boolean POMVATIsNullable(){
				    return true;
				}
				public Boolean POMVATIsKey(){
				    return false;
				}
				public Integer POMVATLength(){
				    return null;
				}
				public Integer POMVATPrecision(){
				    return null;
				}
				public String POMVATDefault(){
				
					return "";
				
				}
				public String POMVATComment(){
				
				    return "";
				
				}
				public String POMVATPattern(){
				
					return "";
				
				}
				public String POMVATOriginalDbColumnName(){
				
					return "POMVAT";
				
				}

				
			    public BigDecimal POMRET;

				public BigDecimal getPOMRET () {
					return this.POMRET;
				}

				public Boolean POMRETIsNullable(){
				    return true;
				}
				public Boolean POMRETIsKey(){
				    return false;
				}
				public Integer POMRETLength(){
				    return null;
				}
				public Integer POMRETPrecision(){
				    return null;
				}
				public String POMRETDefault(){
				
					return "";
				
				}
				public String POMRETComment(){
				
				    return "";
				
				}
				public String POMRETPattern(){
				
					return "";
				
				}
				public String POMRETOriginalDbColumnName(){
				
					return "POMRET";
				
				}

				
			    public BigDecimal POMQTY;

				public BigDecimal getPOMQTY () {
					return this.POMQTY;
				}

				public Boolean POMQTYIsNullable(){
				    return true;
				}
				public Boolean POMQTYIsKey(){
				    return false;
				}
				public Integer POMQTYLength(){
				    return null;
				}
				public Integer POMQTYPrecision(){
				    return null;
				}
				public String POMQTYDefault(){
				
					return "";
				
				}
				public String POMQTYComment(){
				
				    return "";
				
				}
				public String POMQTYPattern(){
				
					return "";
				
				}
				public String POMQTYOriginalDbColumnName(){
				
					return "POMQTY";
				
				}

				
			    public BigDecimal POMREC;

				public BigDecimal getPOMREC () {
					return this.POMREC;
				}

				public Boolean POMRECIsNullable(){
				    return true;
				}
				public Boolean POMRECIsKey(){
				    return false;
				}
				public Integer POMRECLength(){
				    return null;
				}
				public Integer POMRECPrecision(){
				    return null;
				}
				public String POMRECDefault(){
				
					return "";
				
				}
				public String POMRECComment(){
				
				    return "";
				
				}
				public String POMRECPattern(){
				
					return "";
				
				}
				public String POMRECOriginalDbColumnName(){
				
					return "POMREC";
				
				}

				
			    public String PVNDPN;

				public String getPVNDPN () {
					return this.PVNDPN;
				}

				public Boolean PVNDPNIsNullable(){
				    return true;
				}
				public Boolean PVNDPNIsKey(){
				    return false;
				}
				public Integer PVNDPNLength(){
				    return null;
				}
				public Integer PVNDPNPrecision(){
				    return null;
				}
				public String PVNDPNDefault(){
				
					return null;
				
				}
				public String PVNDPNComment(){
				
				    return "";
				
				}
				public String PVNDPNPattern(){
				
					return "";
				
				}
				public String PVNDPNOriginalDbColumnName(){
				
					return "PVNDPN";
				
				}

				
			    public BigDecimal POMORG;

				public BigDecimal getPOMORG () {
					return this.POMORG;
				}

				public Boolean POMORGIsNullable(){
				    return true;
				}
				public Boolean POMORGIsKey(){
				    return false;
				}
				public Integer POMORGLength(){
				    return null;
				}
				public Integer POMORGPrecision(){
				    return null;
				}
				public String POMORGDefault(){
				
					return "";
				
				}
				public String POMORGComment(){
				
				    return "";
				
				}
				public String POMORGPattern(){
				
					return "";
				
				}
				public String POMORGOriginalDbColumnName(){
				
					return "POMORG";
				
				}

				
			    public BigDecimal POFREE;

				public BigDecimal getPOFREE () {
					return this.POFREE;
				}

				public Boolean POFREEIsNullable(){
				    return true;
				}
				public Boolean POFREEIsKey(){
				    return false;
				}
				public Integer POFREELength(){
				    return null;
				}
				public Integer POFREEPrecision(){
				    return null;
				}
				public String POFREEDefault(){
				
					return "";
				
				}
				public String POFREEComment(){
				
				    return "";
				
				}
				public String POFREEPattern(){
				
					return "";
				
				}
				public String POFREEOriginalDbColumnName(){
				
					return "POFREE";
				
				}

				
			    public BigDecimal POMRES;

				public BigDecimal getPOMRES () {
					return this.POMRES;
				}

				public Boolean POMRESIsNullable(){
				    return true;
				}
				public Boolean POMRESIsKey(){
				    return false;
				}
				public Integer POMRESLength(){
				    return null;
				}
				public Integer POMRESPrecision(){
				    return null;
				}
				public String POMRESDefault(){
				
					return "";
				
				}
				public String POMRESComment(){
				
				    return "";
				
				}
				public String POMRESPattern(){
				
					return "";
				
				}
				public String POMRESOriginalDbColumnName(){
				
					return "POMRES";
				
				}

				
			    public BigDecimal POTALW;

				public BigDecimal getPOTALW () {
					return this.POTALW;
				}

				public Boolean POTALWIsNullable(){
				    return true;
				}
				public Boolean POTALWIsKey(){
				    return false;
				}
				public Integer POTALWLength(){
				    return null;
				}
				public Integer POTALWPrecision(){
				    return null;
				}
				public String POTALWDefault(){
				
					return "";
				
				}
				public String POTALWComment(){
				
				    return "";
				
				}
				public String POTALWPattern(){
				
					return "";
				
				}
				public String POTALWOriginalDbColumnName(){
				
					return "POTALW";
				
				}

				
			    public Double POSVND;

				public Double getPOSVND () {
					return this.POSVND;
				}

				public Boolean POSVNDIsNullable(){
				    return true;
				}
				public Boolean POSVNDIsKey(){
				    return false;
				}
				public Integer POSVNDLength(){
				    return null;
				}
				public Integer POSVNDPrecision(){
				    return null;
				}
				public String POSVNDDefault(){
				
					return "";
				
				}
				public String POSVNDComment(){
				
				    return "";
				
				}
				public String POSVNDPattern(){
				
					return "";
				
				}
				public String POSVNDOriginalDbColumnName(){
				
					return "POSVND";
				
				}

				
			    public String POSTYL;

				public String getPOSTYL () {
					return this.POSTYL;
				}

				public Boolean POSTYLIsNullable(){
				    return true;
				}
				public Boolean POSTYLIsKey(){
				    return false;
				}
				public Integer POSTYLLength(){
				    return null;
				}
				public Integer POSTYLPrecision(){
				    return null;
				}
				public String POSTYLDefault(){
				
					return null;
				
				}
				public String POSTYLComment(){
				
				    return "";
				
				}
				public String POSTYLPattern(){
				
					return "";
				
				}
				public String POSTYLOriginalDbColumnName(){
				
					return "POSTYL";
				
				}

				
			    public String POMFLG;

				public String getPOMFLG () {
					return this.POMFLG;
				}

				public Boolean POMFLGIsNullable(){
				    return true;
				}
				public Boolean POMFLGIsKey(){
				    return false;
				}
				public Integer POMFLGLength(){
				    return null;
				}
				public Integer POMFLGPrecision(){
				    return null;
				}
				public String POMFLGDefault(){
				
					return null;
				
				}
				public String POMFLGComment(){
				
				    return "";
				
				}
				public String POMFLGPattern(){
				
					return "";
				
				}
				public String POMFLGOriginalDbColumnName(){
				
					return "POMFLG";
				
				}

				
			    public String POSEAS;

				public String getPOSEAS () {
					return this.POSEAS;
				}

				public Boolean POSEASIsNullable(){
				    return true;
				}
				public Boolean POSEASIsKey(){
				    return false;
				}
				public Integer POSEASLength(){
				    return null;
				}
				public Integer POSEASPrecision(){
				    return null;
				}
				public String POSEASDefault(){
				
					return null;
				
				}
				public String POSEASComment(){
				
				    return "";
				
				}
				public String POSEASPattern(){
				
					return "";
				
				}
				public String POSEASOriginalDbColumnName(){
				
					return "POSEAS";
				
				}

				
			    public Double POSCOL;

				public Double getPOSCOL () {
					return this.POSCOL;
				}

				public Boolean POSCOLIsNullable(){
				    return true;
				}
				public Boolean POSCOLIsKey(){
				    return false;
				}
				public Integer POSCOLLength(){
				    return null;
				}
				public Integer POSCOLPrecision(){
				    return null;
				}
				public String POSCOLDefault(){
				
					return "";
				
				}
				public String POSCOLComment(){
				
				    return "";
				
				}
				public String POSCOLPattern(){
				
					return "";
				
				}
				public String POSCOLOriginalDbColumnName(){
				
					return "POSCOL";
				
				}

				
			    public String POSSIZ;

				public String getPOSSIZ () {
					return this.POSSIZ;
				}

				public Boolean POSSIZIsNullable(){
				    return true;
				}
				public Boolean POSSIZIsKey(){
				    return false;
				}
				public Integer POSSIZLength(){
				    return null;
				}
				public Integer POSSIZPrecision(){
				    return null;
				}
				public String POSSIZDefault(){
				
					return null;
				
				}
				public String POSSIZComment(){
				
				    return "";
				
				}
				public String POSSIZPattern(){
				
					return "";
				
				}
				public String POSSIZOriginalDbColumnName(){
				
					return "POSSIZ";
				
				}

				
			    public String POSDIM;

				public String getPOSDIM () {
					return this.POSDIM;
				}

				public Boolean POSDIMIsNullable(){
				    return true;
				}
				public Boolean POSDIMIsKey(){
				    return false;
				}
				public Integer POSDIMLength(){
				    return null;
				}
				public Integer POSDIMPrecision(){
				    return null;
				}
				public String POSDIMDefault(){
				
					return null;
				
				}
				public String POSDIMComment(){
				
				    return "";
				
				}
				public String POSDIMPattern(){
				
					return "";
				
				}
				public String POSDIMOriginalDbColumnName(){
				
					return "POSDIM";
				
				}

				
			    public BigDecimal POBQTY;

				public BigDecimal getPOBQTY () {
					return this.POBQTY;
				}

				public Boolean POBQTYIsNullable(){
				    return true;
				}
				public Boolean POBQTYIsKey(){
				    return false;
				}
				public Integer POBQTYLength(){
				    return null;
				}
				public Integer POBQTYPrecision(){
				    return null;
				}
				public String POBQTYDefault(){
				
					return "";
				
				}
				public String POBQTYComment(){
				
				    return "";
				
				}
				public String POBQTYPattern(){
				
					return "";
				
				}
				public String POBQTYOriginalDbColumnName(){
				
					return "POBQTY";
				
				}

				
			    public BigDecimal POBCST;

				public BigDecimal getPOBCST () {
					return this.POBCST;
				}

				public Boolean POBCSTIsNullable(){
				    return true;
				}
				public Boolean POBCSTIsKey(){
				    return false;
				}
				public Integer POBCSTLength(){
				    return null;
				}
				public Integer POBCSTPrecision(){
				    return null;
				}
				public String POBCSTDefault(){
				
					return "";
				
				}
				public String POBCSTComment(){
				
				    return "";
				
				}
				public String POBCSTPattern(){
				
					return "";
				
				}
				public String POBCSTOriginalDbColumnName(){
				
					return "POBCST";
				
				}

				
			    public BigDecimal POBALW;

				public BigDecimal getPOBALW () {
					return this.POBALW;
				}

				public Boolean POBALWIsNullable(){
				    return true;
				}
				public Boolean POBALWIsKey(){
				    return false;
				}
				public Integer POBALWLength(){
				    return null;
				}
				public Integer POBALWPrecision(){
				    return null;
				}
				public String POBALWDefault(){
				
					return "";
				
				}
				public String POBALWComment(){
				
				    return "";
				
				}
				public String POBALWPattern(){
				
					return "";
				
				}
				public String POBALWOriginalDbColumnName(){
				
					return "POBALW";
				
				}

				
			    public java.util.Date LOAD_DATE;

				public java.util.Date getLOAD_DATE () {
					return this.LOAD_DATE;
				}

				public Boolean LOAD_DATEIsNullable(){
				    return true;
				}
				public Boolean LOAD_DATEIsKey(){
				    return false;
				}
				public Integer LOAD_DATELength(){
				    return null;
				}
				public Integer LOAD_DATEPrecision(){
				    return null;
				}
				public String LOAD_DATEDefault(){
				
					return null;
				
				}
				public String LOAD_DATEComment(){
				
				    return "";
				
				}
				public String LOAD_DATEPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String LOAD_DATEOriginalDbColumnName(){
				
					return "LOAD_DATE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PONUMB = null;
           				} else {
           			    	this.PONUMB = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBON = null;
           				} else {
           			    	this.POBON = dis.readDouble();
           				}
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.PODEST = readString(dis);
					
						this.POLOC = (BigDecimal) dis.readObject();
					
						this.ISLOC1 = (BigDecimal) dis.readObject();
					
					this.ISLOC2 = readString(dis);
					
					this.ISLOC3 = readString(dis);
					
					this.POMUM = readString(dis);
					
						this.POMBSF = (BigDecimal) dis.readObject();
					
						this.POMPK = (BigDecimal) dis.readObject();
					
						this.POMCST = (BigDecimal) dis.readObject();
					
						this.POMVAT = (BigDecimal) dis.readObject();
					
						this.POMRET = (BigDecimal) dis.readObject();
					
						this.POMQTY = (BigDecimal) dis.readObject();
					
						this.POMREC = (BigDecimal) dis.readObject();
					
					this.PVNDPN = readString(dis);
					
						this.POMORG = (BigDecimal) dis.readObject();
					
						this.POFREE = (BigDecimal) dis.readObject();
					
						this.POMRES = (BigDecimal) dis.readObject();
					
						this.POTALW = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSVND = null;
           				} else {
           			    	this.POSVND = dis.readDouble();
           				}
					
					this.POSTYL = readString(dis);
					
					this.POMFLG = readString(dis);
					
					this.POSEAS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSCOL = null;
           				} else {
           			    	this.POSCOL = dis.readDouble();
           				}
					
					this.POSSIZ = readString(dis);
					
					this.POSDIM = readString(dis);
					
						this.POBQTY = (BigDecimal) dis.readObject();
					
						this.POBCST = (BigDecimal) dis.readObject();
					
						this.POBALW = (BigDecimal) dis.readObject();
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PONUMB = null;
           				} else {
           			    	this.PONUMB = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBON = null;
           				} else {
           			    	this.POBON = dis.readDouble();
           				}
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.PODEST = readString(dis);
					
						this.POLOC = (BigDecimal) dis.readObject();
					
						this.ISLOC1 = (BigDecimal) dis.readObject();
					
					this.ISLOC2 = readString(dis);
					
					this.ISLOC3 = readString(dis);
					
					this.POMUM = readString(dis);
					
						this.POMBSF = (BigDecimal) dis.readObject();
					
						this.POMPK = (BigDecimal) dis.readObject();
					
						this.POMCST = (BigDecimal) dis.readObject();
					
						this.POMVAT = (BigDecimal) dis.readObject();
					
						this.POMRET = (BigDecimal) dis.readObject();
					
						this.POMQTY = (BigDecimal) dis.readObject();
					
						this.POMREC = (BigDecimal) dis.readObject();
					
					this.PVNDPN = readString(dis);
					
						this.POMORG = (BigDecimal) dis.readObject();
					
						this.POFREE = (BigDecimal) dis.readObject();
					
						this.POMRES = (BigDecimal) dis.readObject();
					
						this.POTALW = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSVND = null;
           				} else {
           			    	this.POSVND = dis.readDouble();
           				}
					
					this.POSTYL = readString(dis);
					
					this.POMFLG = readString(dis);
					
					this.POSEAS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSCOL = null;
           				} else {
           			    	this.POSCOL = dis.readDouble();
           				}
					
					this.POSSIZ = readString(dis);
					
					this.POSDIM = readString(dis);
					
						this.POBQTY = (BigDecimal) dis.readObject();
					
						this.POBCST = (BigDecimal) dis.readObject();
					
						this.POBALW = (BigDecimal) dis.readObject();
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PONUMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PONUMB);
		            	}
					
					// Double
				
						if(this.POBON == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBON);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISLOC1);
					
					// String
				
						writeString(this.ISLOC2,dos);
					
					// String
				
						writeString(this.ISLOC3,dos);
					
					// String
				
						writeString(this.POMUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMBSF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMPK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMREC);
					
					// String
				
						writeString(this.PVNDPN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMORG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POFREE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTALW);
					
					// Double
				
						if(this.POSVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSVND);
		            	}
					
					// String
				
						writeString(this.POSTYL,dos);
					
					// String
				
						writeString(this.POMFLG,dos);
					
					// String
				
						writeString(this.POSEAS,dos);
					
					// Double
				
						if(this.POSCOL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSCOL);
		            	}
					
					// String
				
						writeString(this.POSSIZ,dos);
					
					// String
				
						writeString(this.POSDIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBALW);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PONUMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PONUMB);
		            	}
					
					// Double
				
						if(this.POBON == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBON);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISLOC1);
					
					// String
				
						writeString(this.ISLOC2,dos);
					
					// String
				
						writeString(this.ISLOC3,dos);
					
					// String
				
						writeString(this.POMUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMBSF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMPK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMREC);
					
					// String
				
						writeString(this.PVNDPN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMORG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POFREE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTALW);
					
					// Double
				
						if(this.POSVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSVND);
		            	}
					
					// String
				
						writeString(this.POSTYL,dos);
					
					// String
				
						writeString(this.POMFLG,dos);
					
					// String
				
						writeString(this.POSEAS,dos);
					
					// Double
				
						if(this.POSCOL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSCOL);
		            	}
					
					// String
				
						writeString(this.POSSIZ,dos);
					
					// String
				
						writeString(this.POSDIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBALW);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PONUMB="+String.valueOf(PONUMB));
		sb.append(",POBON="+String.valueOf(POBON));
		sb.append(",INUMBR="+String.valueOf(INUMBR));
		sb.append(",PODEST="+PODEST);
		sb.append(",POLOC="+String.valueOf(POLOC));
		sb.append(",ISLOC1="+String.valueOf(ISLOC1));
		sb.append(",ISLOC2="+ISLOC2);
		sb.append(",ISLOC3="+ISLOC3);
		sb.append(",POMUM="+POMUM);
		sb.append(",POMBSF="+String.valueOf(POMBSF));
		sb.append(",POMPK="+String.valueOf(POMPK));
		sb.append(",POMCST="+String.valueOf(POMCST));
		sb.append(",POMVAT="+String.valueOf(POMVAT));
		sb.append(",POMRET="+String.valueOf(POMRET));
		sb.append(",POMQTY="+String.valueOf(POMQTY));
		sb.append(",POMREC="+String.valueOf(POMREC));
		sb.append(",PVNDPN="+PVNDPN);
		sb.append(",POMORG="+String.valueOf(POMORG));
		sb.append(",POFREE="+String.valueOf(POFREE));
		sb.append(",POMRES="+String.valueOf(POMRES));
		sb.append(",POTALW="+String.valueOf(POTALW));
		sb.append(",POSVND="+String.valueOf(POSVND));
		sb.append(",POSTYL="+POSTYL);
		sb.append(",POMFLG="+POMFLG);
		sb.append(",POSEAS="+POSEAS);
		sb.append(",POSCOL="+String.valueOf(POSCOL));
		sb.append(",POSSIZ="+POSSIZ);
		sb.append(",POSDIM="+POSDIM);
		sb.append(",POBQTY="+String.valueOf(POBQTY));
		sb.append(",POBCST="+String.valueOf(POBCST));
		sb.append(",POBALW="+String.valueOf(POBALW));
		sb.append(",LOAD_DATE="+String.valueOf(LOAD_DATE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(PONUMB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONUMB);
            			}
            		
        			sb.append("|");
        		
        				if(POBON == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBON);
            			}
            		
        			sb.append("|");
        		
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(PODEST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODEST);
            			}
            		
        			sb.append("|");
        		
        				if(POLOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLOC);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC1);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC2);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC3);
            			}
            		
        			sb.append("|");
        		
        				if(POMUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMUM);
            			}
            		
        			sb.append("|");
        		
        				if(POMBSF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMBSF);
            			}
            		
        			sb.append("|");
        		
        				if(POMPK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMPK);
            			}
            		
        			sb.append("|");
        		
        				if(POMCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCST);
            			}
            		
        			sb.append("|");
        		
        				if(POMVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMVAT);
            			}
            		
        			sb.append("|");
        		
        				if(POMRET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMRET);
            			}
            		
        			sb.append("|");
        		
        				if(POMQTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMQTY);
            			}
            		
        			sb.append("|");
        		
        				if(POMREC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMREC);
            			}
            		
        			sb.append("|");
        		
        				if(PVNDPN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PVNDPN);
            			}
            		
        			sb.append("|");
        		
        				if(POMORG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMORG);
            			}
            		
        			sb.append("|");
        		
        				if(POFREE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFREE);
            			}
            		
        			sb.append("|");
        		
        				if(POMRES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMRES);
            			}
            		
        			sb.append("|");
        		
        				if(POTALW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTALW);
            			}
            		
        			sb.append("|");
        		
        				if(POSVND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSVND);
            			}
            		
        			sb.append("|");
        		
        				if(POSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(POMFLG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMFLG);
            			}
            		
        			sb.append("|");
        		
        				if(POSEAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSEAS);
            			}
            		
        			sb.append("|");
        		
        				if(POSCOL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSCOL);
            			}
            		
        			sb.append("|");
        		
        				if(POSSIZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSSIZ);
            			}
            		
        			sb.append("|");
        		
        				if(POSDIM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSDIM);
            			}
            		
        			sb.append("|");
        		
        				if(POBQTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBQTY);
            			}
            		
        			sb.append("|");
        		
        				if(POBCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBCST);
            			}
            		
        			sb.append("|");
        		
        				if(POBALW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBALW);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_DATE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(tmap_POMDTLStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[0];

	
			    public Double PONUMB;

				public Double getPONUMB () {
					return this.PONUMB;
				}

				public Boolean PONUMBIsNullable(){
				    return true;
				}
				public Boolean PONUMBIsKey(){
				    return false;
				}
				public Integer PONUMBLength(){
				    return null;
				}
				public Integer PONUMBPrecision(){
				    return null;
				}
				public String PONUMBDefault(){
				
					return "";
				
				}
				public String PONUMBComment(){
				
				    return "";
				
				}
				public String PONUMBPattern(){
				
					return "";
				
				}
				public String PONUMBOriginalDbColumnName(){
				
					return "PONUMB";
				
				}

				
			    public Double POBON;

				public Double getPOBON () {
					return this.POBON;
				}

				public Boolean POBONIsNullable(){
				    return true;
				}
				public Boolean POBONIsKey(){
				    return false;
				}
				public Integer POBONLength(){
				    return null;
				}
				public Integer POBONPrecision(){
				    return null;
				}
				public String POBONDefault(){
				
					return "";
				
				}
				public String POBONComment(){
				
				    return "";
				
				}
				public String POBONPattern(){
				
					return "";
				
				}
				public String POBONOriginalDbColumnName(){
				
					return "POBON";
				
				}

				
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public String PODEST;

				public String getPODEST () {
					return this.PODEST;
				}

				public Boolean PODESTIsNullable(){
				    return true;
				}
				public Boolean PODESTIsKey(){
				    return false;
				}
				public Integer PODESTLength(){
				    return null;
				}
				public Integer PODESTPrecision(){
				    return null;
				}
				public String PODESTDefault(){
				
					return null;
				
				}
				public String PODESTComment(){
				
				    return "";
				
				}
				public String PODESTPattern(){
				
					return "";
				
				}
				public String PODESTOriginalDbColumnName(){
				
					return "PODEST";
				
				}

				
			    public BigDecimal POLOC;

				public BigDecimal getPOLOC () {
					return this.POLOC;
				}

				public Boolean POLOCIsNullable(){
				    return true;
				}
				public Boolean POLOCIsKey(){
				    return false;
				}
				public Integer POLOCLength(){
				    return null;
				}
				public Integer POLOCPrecision(){
				    return null;
				}
				public String POLOCDefault(){
				
					return "";
				
				}
				public String POLOCComment(){
				
				    return "";
				
				}
				public String POLOCPattern(){
				
					return "";
				
				}
				public String POLOCOriginalDbColumnName(){
				
					return "POLOC";
				
				}

				
			    public BigDecimal ISLOC1;

				public BigDecimal getISLOC1 () {
					return this.ISLOC1;
				}

				public Boolean ISLOC1IsNullable(){
				    return true;
				}
				public Boolean ISLOC1IsKey(){
				    return false;
				}
				public Integer ISLOC1Length(){
				    return null;
				}
				public Integer ISLOC1Precision(){
				    return null;
				}
				public String ISLOC1Default(){
				
					return "";
				
				}
				public String ISLOC1Comment(){
				
				    return "";
				
				}
				public String ISLOC1Pattern(){
				
					return "";
				
				}
				public String ISLOC1OriginalDbColumnName(){
				
					return "ISLOC1";
				
				}

				
			    public String ISLOC2;

				public String getISLOC2 () {
					return this.ISLOC2;
				}

				public Boolean ISLOC2IsNullable(){
				    return true;
				}
				public Boolean ISLOC2IsKey(){
				    return false;
				}
				public Integer ISLOC2Length(){
				    return null;
				}
				public Integer ISLOC2Precision(){
				    return null;
				}
				public String ISLOC2Default(){
				
					return null;
				
				}
				public String ISLOC2Comment(){
				
				    return "";
				
				}
				public String ISLOC2Pattern(){
				
					return "";
				
				}
				public String ISLOC2OriginalDbColumnName(){
				
					return "ISLOC2";
				
				}

				
			    public String ISLOC3;

				public String getISLOC3 () {
					return this.ISLOC3;
				}

				public Boolean ISLOC3IsNullable(){
				    return true;
				}
				public Boolean ISLOC3IsKey(){
				    return false;
				}
				public Integer ISLOC3Length(){
				    return null;
				}
				public Integer ISLOC3Precision(){
				    return null;
				}
				public String ISLOC3Default(){
				
					return null;
				
				}
				public String ISLOC3Comment(){
				
				    return "";
				
				}
				public String ISLOC3Pattern(){
				
					return "";
				
				}
				public String ISLOC3OriginalDbColumnName(){
				
					return "ISLOC3";
				
				}

				
			    public String POMUM;

				public String getPOMUM () {
					return this.POMUM;
				}

				public Boolean POMUMIsNullable(){
				    return true;
				}
				public Boolean POMUMIsKey(){
				    return false;
				}
				public Integer POMUMLength(){
				    return null;
				}
				public Integer POMUMPrecision(){
				    return null;
				}
				public String POMUMDefault(){
				
					return null;
				
				}
				public String POMUMComment(){
				
				    return "";
				
				}
				public String POMUMPattern(){
				
					return "";
				
				}
				public String POMUMOriginalDbColumnName(){
				
					return "POMUM";
				
				}

				
			    public BigDecimal POMBSF;

				public BigDecimal getPOMBSF () {
					return this.POMBSF;
				}

				public Boolean POMBSFIsNullable(){
				    return true;
				}
				public Boolean POMBSFIsKey(){
				    return false;
				}
				public Integer POMBSFLength(){
				    return null;
				}
				public Integer POMBSFPrecision(){
				    return null;
				}
				public String POMBSFDefault(){
				
					return "";
				
				}
				public String POMBSFComment(){
				
				    return "";
				
				}
				public String POMBSFPattern(){
				
					return "";
				
				}
				public String POMBSFOriginalDbColumnName(){
				
					return "POMBSF";
				
				}

				
			    public BigDecimal POMPK;

				public BigDecimal getPOMPK () {
					return this.POMPK;
				}

				public Boolean POMPKIsNullable(){
				    return true;
				}
				public Boolean POMPKIsKey(){
				    return false;
				}
				public Integer POMPKLength(){
				    return null;
				}
				public Integer POMPKPrecision(){
				    return null;
				}
				public String POMPKDefault(){
				
					return "";
				
				}
				public String POMPKComment(){
				
				    return "";
				
				}
				public String POMPKPattern(){
				
					return "";
				
				}
				public String POMPKOriginalDbColumnName(){
				
					return "POMPK";
				
				}

				
			    public BigDecimal POMCST;

				public BigDecimal getPOMCST () {
					return this.POMCST;
				}

				public Boolean POMCSTIsNullable(){
				    return true;
				}
				public Boolean POMCSTIsKey(){
				    return false;
				}
				public Integer POMCSTLength(){
				    return null;
				}
				public Integer POMCSTPrecision(){
				    return null;
				}
				public String POMCSTDefault(){
				
					return "";
				
				}
				public String POMCSTComment(){
				
				    return "";
				
				}
				public String POMCSTPattern(){
				
					return "";
				
				}
				public String POMCSTOriginalDbColumnName(){
				
					return "POMCST";
				
				}

				
			    public BigDecimal POMVAT;

				public BigDecimal getPOMVAT () {
					return this.POMVAT;
				}

				public Boolean POMVATIsNullable(){
				    return true;
				}
				public Boolean POMVATIsKey(){
				    return false;
				}
				public Integer POMVATLength(){
				    return null;
				}
				public Integer POMVATPrecision(){
				    return null;
				}
				public String POMVATDefault(){
				
					return "";
				
				}
				public String POMVATComment(){
				
				    return "";
				
				}
				public String POMVATPattern(){
				
					return "";
				
				}
				public String POMVATOriginalDbColumnName(){
				
					return "POMVAT";
				
				}

				
			    public BigDecimal POMRET;

				public BigDecimal getPOMRET () {
					return this.POMRET;
				}

				public Boolean POMRETIsNullable(){
				    return true;
				}
				public Boolean POMRETIsKey(){
				    return false;
				}
				public Integer POMRETLength(){
				    return null;
				}
				public Integer POMRETPrecision(){
				    return null;
				}
				public String POMRETDefault(){
				
					return "";
				
				}
				public String POMRETComment(){
				
				    return "";
				
				}
				public String POMRETPattern(){
				
					return "";
				
				}
				public String POMRETOriginalDbColumnName(){
				
					return "POMRET";
				
				}

				
			    public BigDecimal POMQTY;

				public BigDecimal getPOMQTY () {
					return this.POMQTY;
				}

				public Boolean POMQTYIsNullable(){
				    return true;
				}
				public Boolean POMQTYIsKey(){
				    return false;
				}
				public Integer POMQTYLength(){
				    return null;
				}
				public Integer POMQTYPrecision(){
				    return null;
				}
				public String POMQTYDefault(){
				
					return "";
				
				}
				public String POMQTYComment(){
				
				    return "";
				
				}
				public String POMQTYPattern(){
				
					return "";
				
				}
				public String POMQTYOriginalDbColumnName(){
				
					return "POMQTY";
				
				}

				
			    public BigDecimal POMREC;

				public BigDecimal getPOMREC () {
					return this.POMREC;
				}

				public Boolean POMRECIsNullable(){
				    return true;
				}
				public Boolean POMRECIsKey(){
				    return false;
				}
				public Integer POMRECLength(){
				    return null;
				}
				public Integer POMRECPrecision(){
				    return null;
				}
				public String POMRECDefault(){
				
					return "";
				
				}
				public String POMRECComment(){
				
				    return "";
				
				}
				public String POMRECPattern(){
				
					return "";
				
				}
				public String POMRECOriginalDbColumnName(){
				
					return "POMREC";
				
				}

				
			    public String PVNDPN;

				public String getPVNDPN () {
					return this.PVNDPN;
				}

				public Boolean PVNDPNIsNullable(){
				    return true;
				}
				public Boolean PVNDPNIsKey(){
				    return false;
				}
				public Integer PVNDPNLength(){
				    return null;
				}
				public Integer PVNDPNPrecision(){
				    return null;
				}
				public String PVNDPNDefault(){
				
					return null;
				
				}
				public String PVNDPNComment(){
				
				    return "";
				
				}
				public String PVNDPNPattern(){
				
					return "";
				
				}
				public String PVNDPNOriginalDbColumnName(){
				
					return "PVNDPN";
				
				}

				
			    public BigDecimal POMORG;

				public BigDecimal getPOMORG () {
					return this.POMORG;
				}

				public Boolean POMORGIsNullable(){
				    return true;
				}
				public Boolean POMORGIsKey(){
				    return false;
				}
				public Integer POMORGLength(){
				    return null;
				}
				public Integer POMORGPrecision(){
				    return null;
				}
				public String POMORGDefault(){
				
					return "";
				
				}
				public String POMORGComment(){
				
				    return "";
				
				}
				public String POMORGPattern(){
				
					return "";
				
				}
				public String POMORGOriginalDbColumnName(){
				
					return "POMORG";
				
				}

				
			    public BigDecimal POFREE;

				public BigDecimal getPOFREE () {
					return this.POFREE;
				}

				public Boolean POFREEIsNullable(){
				    return true;
				}
				public Boolean POFREEIsKey(){
				    return false;
				}
				public Integer POFREELength(){
				    return null;
				}
				public Integer POFREEPrecision(){
				    return null;
				}
				public String POFREEDefault(){
				
					return "";
				
				}
				public String POFREEComment(){
				
				    return "";
				
				}
				public String POFREEPattern(){
				
					return "";
				
				}
				public String POFREEOriginalDbColumnName(){
				
					return "POFREE";
				
				}

				
			    public BigDecimal POMRES;

				public BigDecimal getPOMRES () {
					return this.POMRES;
				}

				public Boolean POMRESIsNullable(){
				    return true;
				}
				public Boolean POMRESIsKey(){
				    return false;
				}
				public Integer POMRESLength(){
				    return null;
				}
				public Integer POMRESPrecision(){
				    return null;
				}
				public String POMRESDefault(){
				
					return "";
				
				}
				public String POMRESComment(){
				
				    return "";
				
				}
				public String POMRESPattern(){
				
					return "";
				
				}
				public String POMRESOriginalDbColumnName(){
				
					return "POMRES";
				
				}

				
			    public BigDecimal POTALW;

				public BigDecimal getPOTALW () {
					return this.POTALW;
				}

				public Boolean POTALWIsNullable(){
				    return true;
				}
				public Boolean POTALWIsKey(){
				    return false;
				}
				public Integer POTALWLength(){
				    return null;
				}
				public Integer POTALWPrecision(){
				    return null;
				}
				public String POTALWDefault(){
				
					return "";
				
				}
				public String POTALWComment(){
				
				    return "";
				
				}
				public String POTALWPattern(){
				
					return "";
				
				}
				public String POTALWOriginalDbColumnName(){
				
					return "POTALW";
				
				}

				
			    public Double POSVND;

				public Double getPOSVND () {
					return this.POSVND;
				}

				public Boolean POSVNDIsNullable(){
				    return true;
				}
				public Boolean POSVNDIsKey(){
				    return false;
				}
				public Integer POSVNDLength(){
				    return null;
				}
				public Integer POSVNDPrecision(){
				    return null;
				}
				public String POSVNDDefault(){
				
					return "";
				
				}
				public String POSVNDComment(){
				
				    return "";
				
				}
				public String POSVNDPattern(){
				
					return "";
				
				}
				public String POSVNDOriginalDbColumnName(){
				
					return "POSVND";
				
				}

				
			    public String POSTYL;

				public String getPOSTYL () {
					return this.POSTYL;
				}

				public Boolean POSTYLIsNullable(){
				    return true;
				}
				public Boolean POSTYLIsKey(){
				    return false;
				}
				public Integer POSTYLLength(){
				    return null;
				}
				public Integer POSTYLPrecision(){
				    return null;
				}
				public String POSTYLDefault(){
				
					return null;
				
				}
				public String POSTYLComment(){
				
				    return "";
				
				}
				public String POSTYLPattern(){
				
					return "";
				
				}
				public String POSTYLOriginalDbColumnName(){
				
					return "POSTYL";
				
				}

				
			    public String POMFLG;

				public String getPOMFLG () {
					return this.POMFLG;
				}

				public Boolean POMFLGIsNullable(){
				    return true;
				}
				public Boolean POMFLGIsKey(){
				    return false;
				}
				public Integer POMFLGLength(){
				    return null;
				}
				public Integer POMFLGPrecision(){
				    return null;
				}
				public String POMFLGDefault(){
				
					return null;
				
				}
				public String POMFLGComment(){
				
				    return "";
				
				}
				public String POMFLGPattern(){
				
					return "";
				
				}
				public String POMFLGOriginalDbColumnName(){
				
					return "POMFLG";
				
				}

				
			    public String POSEAS;

				public String getPOSEAS () {
					return this.POSEAS;
				}

				public Boolean POSEASIsNullable(){
				    return true;
				}
				public Boolean POSEASIsKey(){
				    return false;
				}
				public Integer POSEASLength(){
				    return null;
				}
				public Integer POSEASPrecision(){
				    return null;
				}
				public String POSEASDefault(){
				
					return null;
				
				}
				public String POSEASComment(){
				
				    return "";
				
				}
				public String POSEASPattern(){
				
					return "";
				
				}
				public String POSEASOriginalDbColumnName(){
				
					return "POSEAS";
				
				}

				
			    public Double POSCOL;

				public Double getPOSCOL () {
					return this.POSCOL;
				}

				public Boolean POSCOLIsNullable(){
				    return true;
				}
				public Boolean POSCOLIsKey(){
				    return false;
				}
				public Integer POSCOLLength(){
				    return null;
				}
				public Integer POSCOLPrecision(){
				    return null;
				}
				public String POSCOLDefault(){
				
					return "";
				
				}
				public String POSCOLComment(){
				
				    return "";
				
				}
				public String POSCOLPattern(){
				
					return "";
				
				}
				public String POSCOLOriginalDbColumnName(){
				
					return "POSCOL";
				
				}

				
			    public String POSSIZ;

				public String getPOSSIZ () {
					return this.POSSIZ;
				}

				public Boolean POSSIZIsNullable(){
				    return true;
				}
				public Boolean POSSIZIsKey(){
				    return false;
				}
				public Integer POSSIZLength(){
				    return null;
				}
				public Integer POSSIZPrecision(){
				    return null;
				}
				public String POSSIZDefault(){
				
					return null;
				
				}
				public String POSSIZComment(){
				
				    return "";
				
				}
				public String POSSIZPattern(){
				
					return "";
				
				}
				public String POSSIZOriginalDbColumnName(){
				
					return "POSSIZ";
				
				}

				
			    public String POSDIM;

				public String getPOSDIM () {
					return this.POSDIM;
				}

				public Boolean POSDIMIsNullable(){
				    return true;
				}
				public Boolean POSDIMIsKey(){
				    return false;
				}
				public Integer POSDIMLength(){
				    return null;
				}
				public Integer POSDIMPrecision(){
				    return null;
				}
				public String POSDIMDefault(){
				
					return null;
				
				}
				public String POSDIMComment(){
				
				    return "";
				
				}
				public String POSDIMPattern(){
				
					return "";
				
				}
				public String POSDIMOriginalDbColumnName(){
				
					return "POSDIM";
				
				}

				
			    public BigDecimal POBQTY;

				public BigDecimal getPOBQTY () {
					return this.POBQTY;
				}

				public Boolean POBQTYIsNullable(){
				    return true;
				}
				public Boolean POBQTYIsKey(){
				    return false;
				}
				public Integer POBQTYLength(){
				    return null;
				}
				public Integer POBQTYPrecision(){
				    return null;
				}
				public String POBQTYDefault(){
				
					return "";
				
				}
				public String POBQTYComment(){
				
				    return "";
				
				}
				public String POBQTYPattern(){
				
					return "";
				
				}
				public String POBQTYOriginalDbColumnName(){
				
					return "POBQTY";
				
				}

				
			    public BigDecimal POBCST;

				public BigDecimal getPOBCST () {
					return this.POBCST;
				}

				public Boolean POBCSTIsNullable(){
				    return true;
				}
				public Boolean POBCSTIsKey(){
				    return false;
				}
				public Integer POBCSTLength(){
				    return null;
				}
				public Integer POBCSTPrecision(){
				    return null;
				}
				public String POBCSTDefault(){
				
					return "";
				
				}
				public String POBCSTComment(){
				
				    return "";
				
				}
				public String POBCSTPattern(){
				
					return "";
				
				}
				public String POBCSTOriginalDbColumnName(){
				
					return "POBCST";
				
				}

				
			    public BigDecimal POBALW;

				public BigDecimal getPOBALW () {
					return this.POBALW;
				}

				public Boolean POBALWIsNullable(){
				    return true;
				}
				public Boolean POBALWIsKey(){
				    return false;
				}
				public Integer POBALWLength(){
				    return null;
				}
				public Integer POBALWPrecision(){
				    return null;
				}
				public String POBALWDefault(){
				
					return "";
				
				}
				public String POBALWComment(){
				
				    return "";
				
				}
				public String POBALWPattern(){
				
					return "";
				
				}
				public String POBALWOriginalDbColumnName(){
				
					return "POBALW";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTEALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTEALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTEALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PONUMB = null;
           				} else {
           			    	this.PONUMB = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBON = null;
           				} else {
           			    	this.POBON = dis.readDouble();
           				}
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.PODEST = readString(dis);
					
						this.POLOC = (BigDecimal) dis.readObject();
					
						this.ISLOC1 = (BigDecimal) dis.readObject();
					
					this.ISLOC2 = readString(dis);
					
					this.ISLOC3 = readString(dis);
					
					this.POMUM = readString(dis);
					
						this.POMBSF = (BigDecimal) dis.readObject();
					
						this.POMPK = (BigDecimal) dis.readObject();
					
						this.POMCST = (BigDecimal) dis.readObject();
					
						this.POMVAT = (BigDecimal) dis.readObject();
					
						this.POMRET = (BigDecimal) dis.readObject();
					
						this.POMQTY = (BigDecimal) dis.readObject();
					
						this.POMREC = (BigDecimal) dis.readObject();
					
					this.PVNDPN = readString(dis);
					
						this.POMORG = (BigDecimal) dis.readObject();
					
						this.POFREE = (BigDecimal) dis.readObject();
					
						this.POMRES = (BigDecimal) dis.readObject();
					
						this.POTALW = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSVND = null;
           				} else {
           			    	this.POSVND = dis.readDouble();
           				}
					
					this.POSTYL = readString(dis);
					
					this.POMFLG = readString(dis);
					
					this.POSEAS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSCOL = null;
           				} else {
           			    	this.POSCOL = dis.readDouble();
           				}
					
					this.POSSIZ = readString(dis);
					
					this.POSDIM = readString(dis);
					
						this.POBQTY = (BigDecimal) dis.readObject();
					
						this.POBCST = (BigDecimal) dis.readObject();
					
						this.POBALW = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTEALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PONUMB = null;
           				} else {
           			    	this.PONUMB = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POBON = null;
           				} else {
           			    	this.POBON = dis.readDouble();
           				}
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.PODEST = readString(dis);
					
						this.POLOC = (BigDecimal) dis.readObject();
					
						this.ISLOC1 = (BigDecimal) dis.readObject();
					
					this.ISLOC2 = readString(dis);
					
					this.ISLOC3 = readString(dis);
					
					this.POMUM = readString(dis);
					
						this.POMBSF = (BigDecimal) dis.readObject();
					
						this.POMPK = (BigDecimal) dis.readObject();
					
						this.POMCST = (BigDecimal) dis.readObject();
					
						this.POMVAT = (BigDecimal) dis.readObject();
					
						this.POMRET = (BigDecimal) dis.readObject();
					
						this.POMQTY = (BigDecimal) dis.readObject();
					
						this.POMREC = (BigDecimal) dis.readObject();
					
					this.PVNDPN = readString(dis);
					
						this.POMORG = (BigDecimal) dis.readObject();
					
						this.POFREE = (BigDecimal) dis.readObject();
					
						this.POMRES = (BigDecimal) dis.readObject();
					
						this.POTALW = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSVND = null;
           				} else {
           			    	this.POSVND = dis.readDouble();
           				}
					
					this.POSTYL = readString(dis);
					
					this.POMFLG = readString(dis);
					
					this.POSEAS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSCOL = null;
           				} else {
           			    	this.POSCOL = dis.readDouble();
           				}
					
					this.POSSIZ = readString(dis);
					
					this.POSDIM = readString(dis);
					
						this.POBQTY = (BigDecimal) dis.readObject();
					
						this.POBCST = (BigDecimal) dis.readObject();
					
						this.POBALW = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PONUMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PONUMB);
		            	}
					
					// Double
				
						if(this.POBON == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBON);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISLOC1);
					
					// String
				
						writeString(this.ISLOC2,dos);
					
					// String
				
						writeString(this.ISLOC3,dos);
					
					// String
				
						writeString(this.POMUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMBSF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMPK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMREC);
					
					// String
				
						writeString(this.PVNDPN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMORG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POFREE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTALW);
					
					// Double
				
						if(this.POSVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSVND);
		            	}
					
					// String
				
						writeString(this.POSTYL,dos);
					
					// String
				
						writeString(this.POMFLG,dos);
					
					// String
				
						writeString(this.POSEAS,dos);
					
					// Double
				
						if(this.POSCOL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSCOL);
		            	}
					
					// String
				
						writeString(this.POSSIZ,dos);
					
					// String
				
						writeString(this.POSDIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBALW);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PONUMB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PONUMB);
		            	}
					
					// Double
				
						if(this.POBON == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POBON);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.PODEST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POLOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ISLOC1);
					
					// String
				
						writeString(this.ISLOC2,dos);
					
					// String
				
						writeString(this.ISLOC3,dos);
					
					// String
				
						writeString(this.POMUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMBSF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMPK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMVAT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMREC);
					
					// String
				
						writeString(this.PVNDPN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMORG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POFREE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POMRES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POTALW);
					
					// Double
				
						if(this.POSVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSVND);
		            	}
					
					// String
				
						writeString(this.POSTYL,dos);
					
					// String
				
						writeString(this.POMFLG,dos);
					
					// String
				
						writeString(this.POSEAS,dos);
					
					// Double
				
						if(this.POSCOL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSCOL);
		            	}
					
					// String
				
						writeString(this.POSSIZ,dos);
					
					// String
				
						writeString(this.POSDIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBQTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBCST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBALW);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PONUMB="+String.valueOf(PONUMB));
		sb.append(",POBON="+String.valueOf(POBON));
		sb.append(",INUMBR="+String.valueOf(INUMBR));
		sb.append(",PODEST="+PODEST);
		sb.append(",POLOC="+String.valueOf(POLOC));
		sb.append(",ISLOC1="+String.valueOf(ISLOC1));
		sb.append(",ISLOC2="+ISLOC2);
		sb.append(",ISLOC3="+ISLOC3);
		sb.append(",POMUM="+POMUM);
		sb.append(",POMBSF="+String.valueOf(POMBSF));
		sb.append(",POMPK="+String.valueOf(POMPK));
		sb.append(",POMCST="+String.valueOf(POMCST));
		sb.append(",POMVAT="+String.valueOf(POMVAT));
		sb.append(",POMRET="+String.valueOf(POMRET));
		sb.append(",POMQTY="+String.valueOf(POMQTY));
		sb.append(",POMREC="+String.valueOf(POMREC));
		sb.append(",PVNDPN="+PVNDPN);
		sb.append(",POMORG="+String.valueOf(POMORG));
		sb.append(",POFREE="+String.valueOf(POFREE));
		sb.append(",POMRES="+String.valueOf(POMRES));
		sb.append(",POTALW="+String.valueOf(POTALW));
		sb.append(",POSVND="+String.valueOf(POSVND));
		sb.append(",POSTYL="+POSTYL);
		sb.append(",POMFLG="+POMFLG);
		sb.append(",POSEAS="+POSEAS);
		sb.append(",POSCOL="+String.valueOf(POSCOL));
		sb.append(",POSSIZ="+POSSIZ);
		sb.append(",POSDIM="+POSDIM);
		sb.append(",POBQTY="+String.valueOf(POBQTY));
		sb.append(",POBCST="+String.valueOf(POBCST));
		sb.append(",POBALW="+String.valueOf(POBALW));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(PONUMB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONUMB);
            			}
            		
        			sb.append("|");
        		
        				if(POBON == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBON);
            			}
            		
        			sb.append("|");
        		
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(PODEST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PODEST);
            			}
            		
        			sb.append("|");
        		
        				if(POLOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POLOC);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC1);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC2);
            			}
            		
        			sb.append("|");
        		
        				if(ISLOC3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISLOC3);
            			}
            		
        			sb.append("|");
        		
        				if(POMUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMUM);
            			}
            		
        			sb.append("|");
        		
        				if(POMBSF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMBSF);
            			}
            		
        			sb.append("|");
        		
        				if(POMPK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMPK);
            			}
            		
        			sb.append("|");
        		
        				if(POMCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMCST);
            			}
            		
        			sb.append("|");
        		
        				if(POMVAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMVAT);
            			}
            		
        			sb.append("|");
        		
        				if(POMRET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMRET);
            			}
            		
        			sb.append("|");
        		
        				if(POMQTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMQTY);
            			}
            		
        			sb.append("|");
        		
        				if(POMREC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMREC);
            			}
            		
        			sb.append("|");
        		
        				if(PVNDPN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PVNDPN);
            			}
            		
        			sb.append("|");
        		
        				if(POMORG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMORG);
            			}
            		
        			sb.append("|");
        		
        				if(POFREE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POFREE);
            			}
            		
        			sb.append("|");
        		
        				if(POMRES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMRES);
            			}
            		
        			sb.append("|");
        		
        				if(POTALW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POTALW);
            			}
            		
        			sb.append("|");
        		
        				if(POSVND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSVND);
            			}
            		
        			sb.append("|");
        		
        				if(POSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(POMFLG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POMFLG);
            			}
            		
        			sb.append("|");
        		
        				if(POSEAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSEAS);
            			}
            		
        			sb.append("|");
        		
        				if(POSCOL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSCOL);
            			}
            		
        			sb.append("|");
        		
        				if(POSSIZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSSIZ);
            			}
            		
        			sb.append("|");
        		
        				if(POSDIM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POSDIM);
            			}
            		
        			sb.append("|");
        		
        				if(POBQTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBQTY);
            			}
            		
        			sb.append("|");
        		
        				if(POBCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBCST);
            			}
            		
        			sb.append("|");
        		
        				if(POBALW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(POBALW);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
tmap_POMDTLStruct tmap_POMDTL = new tmap_POMDTLStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"tmap_POMDTL");
			
		int tos_count_tDBOutput_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_1", "tDBOutput_1", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_1 = (String)(restRequest_tDBOutput_1 != null ? restRequest_tDBOutput_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_1 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_1 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_1 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_1.createRuntimeProperties();
 		                    props_tDBOutput_1.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_1.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_1.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_1.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_1_1_fisrt sst_tDBOutput_1_1_fisrt = new SchemaSettingTool_tDBOutput_1_1_fisrt();
 		                    
 		                    props_tDBOutput_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_1.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_1.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_1.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_1.table.setValue("tableName",
 		                    "OPEN_PO_DETAIL_POMDTL");
 		                    
 		                    props_tDBOutput_1.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_1.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_1.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_1.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_1.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_1.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_1_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"OPEN_PO_DETAIL_POMDTL\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"PONUMB\",\"type\":\"double\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"PONUMB\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBON\",\"type\":\"double\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"POBON\"},{",s);
     		                    						
     		                    						a("\"name\":\"INUMBR\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"INUMBR\"},{",s);
     		                    						
     		                    						a("\"name\":\"PODEST\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"PODEST\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POLOC\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"POLOC\"},{",s);
     		                    						
     		                    						a("\"name\":\"ISLOC1\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ISLOC1\"},{",s);
     		                    						
     		                    						a("\"name\":\"ISLOC2\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISLOC2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ISLOC3\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISLOC3\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMUM\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"POMUM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMBSF\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":11,\"talend.field.scale\":5,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMBSF\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMPK\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMPK\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMCST\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMCST\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMVAT\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMVAT\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMRET\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMRET\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMQTY\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMQTY\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMREC\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMREC\"},{",s);
     		                    						
     		                    						a("\"name\":\"PVNDPN\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":15,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"PVNDPN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMORG\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMORG\"},{",s);
     		                    						
     		                    						a("\"name\":\"POFREE\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POFREE\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMRES\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POMRES\"},{",s);
     		                    						
     		                    						a("\"name\":\"POTALW\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POTALW\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSVND\",\"type\":\"double\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"POSVND\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSTYL\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":15,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"POSTYL\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POMFLG\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"POMFLG\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSEAS\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"POSEAS\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSCOL\",\"type\":\"double\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"POSCOL\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSSIZ\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"POSSIZ\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POSDIM\",\"type\":\"string\",\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"POSDIM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBQTY\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POBQTY\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBCST\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POBCST\"},{",s);
     		                    						
     		                    						a("\"name\":\"POBALW\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"talend.field.precision\":9,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"POBALW\"},{",s);
     		                    						
     		                    						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"talend.field.dbType\":91,\"talend.field.dbColumnName\":\"LOAD_DATE\",\"talend.field.default\":\"\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_1_2_fisrt sst_tDBOutput_1_2_fisrt = new SchemaSettingTool_tDBOutput_1_2_fisrt();
 		                    
 		                    props_tDBOutput_1.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_1.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_1.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_1);
        }
    }
globalMap.put("tDBOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_1_MAPPINGS_URL", mappings_url_tDBOutput_1);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_1 = null;
topology_tDBOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_1 = def_tDBOutput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_1, topology_tDBOutput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_1 = def_tDBOutput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_1 = componentRuntime_tDBOutput_1.initialize(container_tDBOutput_1, props_tDBOutput_1);

if (initVr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_1.getMessage());
}

if(componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_1;
	compDriverInitialization_tDBOutput_1.runAtDriver(container_tDBOutput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_1 = null;
if(componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_1;
	if (doesNodeBelongToRequest_tDBOutput_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_1 = sourceOrSink_tDBOutput_1.validate(container_tDBOutput_1);
        if (vr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_1.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_1 = null;
    if (sourceOrSink_tDBOutput_1 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_1 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_1;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_1 = sink_tDBOutput_1.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_1) {
            writeOperation_tDBOutput_1.initialize(container_tDBOutput_1);
        }
        writer_tDBOutput_1 = writeOperation_tDBOutput_1.createWriter(container_tDBOutput_1);
        if (doesNodeBelongToRequest_tDBOutput_1) {
            writer_tDBOutput_1.open("tDBOutput_1");
        }

        resourceMap.put("writer_tDBOutput_1", writer_tDBOutput_1);
    } // end of "sourceOrSink_tDBOutput_1 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_1 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_1.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_1 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_1 = props_tDBOutput_1.getSchema(c_tDBOutput_1, false);
    incomingEnforcer_tDBOutput_1 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_1);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_1 = null;


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row7");
			
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_2", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row7_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	java.util.Date var1;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_tmap_POMDTL_tMap_2 = 0;
				
tmap_POMDTLStruct tmap_POMDTL_tmp = new tmap_POMDTLStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_1 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_1.append("Parameters:");
                            log4jParamters_tFileInputDelimited_1.append("FILENAME" + " = " + "\"/data/talend/data_repository/POMDTL.zip\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("PONUMB")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBON")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PODEST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POLOC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISLOC1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISLOC2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISLOC3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMBSF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMPK")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMCST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMVAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMRET")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMQTY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMREC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PVNDPN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMORG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POFREE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMRES")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POTALW")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSVND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSTYL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POMFLG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSEAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSCOL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSSIZ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POSDIM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBQTY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBCST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("POBALW")+"}]");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_1 - "  + (log4jParamters_tFileInputDelimited_1) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_1", "tFileInputDelimited_1", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "/data/talend/data_repository/POMDTL.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_1 = null;
						try {
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
								zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_1));
							}else{
								zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
									log.error("tFileInputDelimited_1 - " +e.getMessage());
								
								System.err.println(e.getMessage());
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_1 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_1 = zis_tFileInputDelimited_1.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_1 - " +e.getMessage());
									
									System.err.println(e.getMessage());
									break;
								
							}
							if(entry_tFileInputDelimited_1 == null) {
								break;
							}
							if(entry_tFileInputDelimited_1.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_1, "ISO-8859-15",",","\n",false,1,0,
								
									limit_tFileInputDelimited_1
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_1 - " +e.getMessage());
									
									System.err.println(e.getMessage());
								
							}
					
				    
				    	log.info("tFileInputDelimited_1 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row7 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row7 = new row7Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.PONUMB = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PONUMB", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.PONUMB = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POBON = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBON", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POBON = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.INUMBR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"INUMBR", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.INUMBR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row7.PODEST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POLOC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POLOC", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POLOC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.ISLOC1 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ISLOC1", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.ISLOC1 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row7.ISLOC2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row7.ISLOC3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row7.POMUM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMBSF = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMBSF", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMBSF = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMPK = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMPK", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMPK = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMCST = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMCST", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMCST = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMVAT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMVAT", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMVAT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMRET = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMRET", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMRET = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMQTY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMQTY", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMQTY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMREC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMREC", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMREC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row7.PVNDPN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMORG = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMORG", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMORG = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POFREE = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POFREE", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POFREE = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POMRES = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POMRES", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POMRES = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POTALW = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POTALW", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POTALW = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POSVND = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSVND", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POSVND = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row7.POSTYL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row7.POMFLG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row7.POSEAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POSCOL = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POSCOL", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POSCOL = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row7.POSSIZ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row7.POSDIM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POBQTY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBQTY", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POBQTY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POBCST = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBCST", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POBCST = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.POBALW = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"POBALW", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.POBALW = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
												log.error("tFileInputDelimited_1 - " +e.getMessage());
											
			                					System.err.println(e.getMessage());
			                					row7 = null;
			                				
										
			    					}
								
			log.debug("tFileInputDelimited_1 - Retrieving the record " + fid_tFileInputDelimited_1.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row7","tFileInputDelimited_1","tFileInputDelimited_1","tFileInputDelimited","tMap_2","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row7 - " + (row7==null? "": row7.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var1 = TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")) ;// ###############################
        // ###############################
        // # Output tables

tmap_POMDTL = null;


// # Output table : 'tmap_POMDTL'
count_tmap_POMDTL_tMap_2++;

tmap_POMDTL_tmp.PONUMB = row7.PONUMB;
tmap_POMDTL_tmp.POBON = row7.POBON;
tmap_POMDTL_tmp.INUMBR = row7.INUMBR;
tmap_POMDTL_tmp.PODEST = row7.PODEST;
tmap_POMDTL_tmp.POLOC = row7.POLOC;
tmap_POMDTL_tmp.ISLOC1 = row7.ISLOC1;
tmap_POMDTL_tmp.ISLOC2 = row7.ISLOC2;
tmap_POMDTL_tmp.ISLOC3 = row7.ISLOC3;
tmap_POMDTL_tmp.POMUM = row7.POMUM;
tmap_POMDTL_tmp.POMBSF = row7.POMBSF;
tmap_POMDTL_tmp.POMPK = row7.POMPK;
tmap_POMDTL_tmp.POMCST = row7.POMCST;
tmap_POMDTL_tmp.POMVAT = row7.POMVAT;
tmap_POMDTL_tmp.POMRET = row7.POMRET;
tmap_POMDTL_tmp.POMQTY = row7.POMQTY;
tmap_POMDTL_tmp.POMREC = row7.POMREC;
tmap_POMDTL_tmp.PVNDPN = row7.PVNDPN;
tmap_POMDTL_tmp.POMORG = row7.POMORG;
tmap_POMDTL_tmp.POFREE = row7.POFREE;
tmap_POMDTL_tmp.POMRES = row7.POMRES;
tmap_POMDTL_tmp.POTALW = row7.POTALW;
tmap_POMDTL_tmp.POSVND = row7.POSVND;
tmap_POMDTL_tmp.POSTYL = row7.POSTYL;
tmap_POMDTL_tmp.POMFLG = row7.POMFLG;
tmap_POMDTL_tmp.POSEAS = row7.POSEAS;
tmap_POMDTL_tmp.POSCOL = row7.POSCOL;
tmap_POMDTL_tmp.POSSIZ = row7.POSSIZ;
tmap_POMDTL_tmp.POSDIM = row7.POSDIM;
tmap_POMDTL_tmp.POBQTY = row7.POBQTY;
tmap_POMDTL_tmp.POBCST = row7.POBCST;
tmap_POMDTL_tmp.POBALW = row7.POBALW;
tmap_POMDTL_tmp.LOAD_DATE = Var.var1 ;
tmap_POMDTL = tmap_POMDTL_tmp;
log.debug("tMap_2 - Outputting the record " + count_tmap_POMDTL_tMap_2 + " of the output table 'tmap_POMDTL'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "tmap_POMDTL"
if(tmap_POMDTL != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"tmap_POMDTL","tMap_2","tMap_1","tMap","tDBOutput_1","tDBOutput_1","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("tmap_POMDTL - " + (tmap_POMDTL==null? "": tmap_POMDTL.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_1 != null) {
            incomingEnforcer_tDBOutput_1.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("PONUMB") != null){
                    incomingEnforcer_tDBOutput_1.put("PONUMB", tmap_POMDTL.PONUMB);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POBON") != null){
                    incomingEnforcer_tDBOutput_1.put("POBON", tmap_POMDTL.POBON);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("INUMBR") != null){
                    incomingEnforcer_tDBOutput_1.put("INUMBR", tmap_POMDTL.INUMBR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("PODEST") != null){
                    incomingEnforcer_tDBOutput_1.put("PODEST", tmap_POMDTL.PODEST);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POLOC") != null){
                    incomingEnforcer_tDBOutput_1.put("POLOC", tmap_POMDTL.POLOC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("ISLOC1") != null){
                    incomingEnforcer_tDBOutput_1.put("ISLOC1", tmap_POMDTL.ISLOC1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("ISLOC2") != null){
                    incomingEnforcer_tDBOutput_1.put("ISLOC2", tmap_POMDTL.ISLOC2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("ISLOC3") != null){
                    incomingEnforcer_tDBOutput_1.put("ISLOC3", tmap_POMDTL.ISLOC3);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMUM") != null){
                    incomingEnforcer_tDBOutput_1.put("POMUM", tmap_POMDTL.POMUM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMBSF") != null){
                    incomingEnforcer_tDBOutput_1.put("POMBSF", tmap_POMDTL.POMBSF);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMPK") != null){
                    incomingEnforcer_tDBOutput_1.put("POMPK", tmap_POMDTL.POMPK);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMCST") != null){
                    incomingEnforcer_tDBOutput_1.put("POMCST", tmap_POMDTL.POMCST);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMVAT") != null){
                    incomingEnforcer_tDBOutput_1.put("POMVAT", tmap_POMDTL.POMVAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMRET") != null){
                    incomingEnforcer_tDBOutput_1.put("POMRET", tmap_POMDTL.POMRET);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMQTY") != null){
                    incomingEnforcer_tDBOutput_1.put("POMQTY", tmap_POMDTL.POMQTY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMREC") != null){
                    incomingEnforcer_tDBOutput_1.put("POMREC", tmap_POMDTL.POMREC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("PVNDPN") != null){
                    incomingEnforcer_tDBOutput_1.put("PVNDPN", tmap_POMDTL.PVNDPN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMORG") != null){
                    incomingEnforcer_tDBOutput_1.put("POMORG", tmap_POMDTL.POMORG);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POFREE") != null){
                    incomingEnforcer_tDBOutput_1.put("POFREE", tmap_POMDTL.POFREE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMRES") != null){
                    incomingEnforcer_tDBOutput_1.put("POMRES", tmap_POMDTL.POMRES);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POTALW") != null){
                    incomingEnforcer_tDBOutput_1.put("POTALW", tmap_POMDTL.POTALW);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POSVND") != null){
                    incomingEnforcer_tDBOutput_1.put("POSVND", tmap_POMDTL.POSVND);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POSTYL") != null){
                    incomingEnforcer_tDBOutput_1.put("POSTYL", tmap_POMDTL.POSTYL);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POMFLG") != null){
                    incomingEnforcer_tDBOutput_1.put("POMFLG", tmap_POMDTL.POMFLG);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POSEAS") != null){
                    incomingEnforcer_tDBOutput_1.put("POSEAS", tmap_POMDTL.POSEAS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POSCOL") != null){
                    incomingEnforcer_tDBOutput_1.put("POSCOL", tmap_POMDTL.POSCOL);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POSSIZ") != null){
                    incomingEnforcer_tDBOutput_1.put("POSSIZ", tmap_POMDTL.POSSIZ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POSDIM") != null){
                    incomingEnforcer_tDBOutput_1.put("POSDIM", tmap_POMDTL.POSDIM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POBQTY") != null){
                    incomingEnforcer_tDBOutput_1.put("POBQTY", tmap_POMDTL.POBQTY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POBCST") != null){
                    incomingEnforcer_tDBOutput_1.put("POBCST", tmap_POMDTL.POBCST);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POBALW") != null){
                    incomingEnforcer_tDBOutput_1.put("POBALW", tmap_POMDTL.POBALW);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("LOAD_DATE") != null){
                    incomingEnforcer_tDBOutput_1.put("LOAD_DATE", tmap_POMDTL.LOAD_DATE);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_1 = null;
        if (incomingEnforcer_tDBOutput_1 != null) {
            data_tDBOutput_1 = incomingEnforcer_tDBOutput_1.getCurrentRecord();
        }
        
        if (writer_tDBOutput_1 != null && data_tDBOutput_1 != null) {
        	writer_tDBOutput_1.write(data_tDBOutput_1);
        }
        
        nb_line_tDBOutput_1++;

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	


 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	


 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "tmap_POMDTL"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	


				
            }
            nb_line_tFileInputDelimited_1+=fid_tFileInputDelimited_1.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/POMDTL.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_1!=null){
            		fid_tFileInputDelimited_1.close();
            	}
            }
            if(fid_tFileInputDelimited_1!=null){
            	globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
            }
					
						log.info("tFileInputDelimited_1- Retrieved records count: "+ nb_line_tFileInputDelimited_1 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_1 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'tmap_POMDTL': " + count_tmap_POMDTL_tMap_2 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row7",2,0,
			 			"tFileInputDelimited_1","tFileInputDelimited_1","tFileInputDelimited","tMap_2","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_1", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_1 = null;
    if (writer_tDBOutput_1 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_1 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_1.close();
        resultMap_tDBOutput_1 = writer_tDBOutput_1.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_1), container_tDBOutput_1);
    }
if(resultMap_tDBOutput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_1 : resultMap_tDBOutput_1.entrySet()) {
		switch(entry_tDBOutput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "ERROR_MESSAGE", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_LINE", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_SUCCESS", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_REJECT", entry_tDBOutput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_1 = new StringBuilder();
            for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < entry_tDBOutput_1.getKey().length(); i_tDBOutput_1++) {
                char ch_tDBOutput_1 = entry_tDBOutput_1.getKey().charAt(i_tDBOutput_1);
                if(Character.isUpperCase(ch_tDBOutput_1) && i_tDBOutput_1> 0) {
                	studio_key_tDBOutput_1.append('_');
                }
                studio_key_tDBOutput_1.append(ch_tDBOutput_1);
            }
			container_tDBOutput_1.setComponentData("tDBOutput_1", studio_key_tDBOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_1.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"tmap_POMDTL",2,0,
			 			"tMap_2","tMap_1","tMap","tDBOutput_1","tDBOutput_1","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFileDelete_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_1")==null){
    if(resourceMap.get("writer_tDBOutput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_1")).close();
		} catch (java.io.IOException e_tDBOutput_1) {
			String errorMessage_tDBOutput_1 = "failed to release the resource in tDBOutput_1 :" + e_tDBOutput_1.getMessage();
			System.err.println(errorMessage_tDBOutput_1);
		}
	}
}
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
		int tos_count_tFileDelete_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_1 = new StringBuilder();
                    log4jParamters_tFileDelete_1.append("Parameters:");
                            log4jParamters_tFileDelete_1.append("PATH" + " = " + "\"/data/talend/data_repository/POMDTL.zip\"");
                        log4jParamters_tFileDelete_1.append(" | ");
                            log4jParamters_tFileDelete_1.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_1.append(" | ");
                            log4jParamters_tFileDelete_1.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_1 - "  + (log4jParamters_tFileDelete_1) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_1", "tFileDelete_1", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

				final StringBuffer log4jSb_tFileDelete_1 = new StringBuffer();
			
class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_1=new java.io.File("/data/talend/data_repository/POMDTL.zip");
	if(path_tFileDelete_1.exists()){
		if(path_tFileDelete_1.isFile()){
	    	if(path_tFileDelete_1.delete()){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_1 - File : "+ path_tFileDelete_1.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_1.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_1.isDirectory()){ 
	    	DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
	    	if(dftFileDelete_1.delete(path_tFileDelete_1)){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_1 - Directory : "+ path_tFileDelete_1.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_1_DELETE_PATH","/data/talend/data_repository/POMDTL.zip");
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_1 - "  + ("Done.") );

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	

public void talendJobLogProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendJobLog_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "talendJobLog");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [talendJobLog begin ] start
	 */

	

	
		
		ok_Hash.put("talendJobLog", false);
		start_Hash.put("talendJobLog", System.currentTimeMillis());
		
	
	currentComponent="talendJobLog";
	
	
		int tos_count_talendJobLog = 0;
		

	for (JobStructureCatcherUtils.JobStructureCatcherMessage jcm : talendJobLog.getMessages()) {
		org.talend.job.audit.JobContextBuilder builder_talendJobLog = org.talend.job.audit.JobContextBuilder.create().jobName(jcm.job_name).jobId(jcm.job_id).jobVersion(jcm.job_version)
			.custom("process_id", jcm.pid).custom("thread_id", jcm.tid).custom("pid", pid).custom("father_pid", fatherPid).custom("root_pid", rootPid);
		org.talend.logging.audit.Context log_context_talendJobLog = null;
		
		
		if(jcm.log_type == JobStructureCatcherUtils.LogType.PERFORMANCE){
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.sourceId(jcm.sourceId).sourceLabel(jcm.sourceLabel).sourceConnectorType(jcm.sourceComponentName)
				.targetId(jcm.targetId).targetLabel(jcm.targetLabel).targetConnectorType(jcm.targetComponentName)
				.connectionName(jcm.current_connector).rows(jcm.row_count).duration(duration).build();
			auditLogger_talendJobLog.flowExecution(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBSTART) {
			log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment).build();
			auditLogger_talendJobLog.jobstart(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBEND) {
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
		
			log_context_talendJobLog = builder_talendJobLog
				.timestamp(jcm.moment).duration(duration).status(jcm.status).build();
			auditLogger_talendJobLog.jobstop(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.RUNCOMPONENT) {
			log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment)
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label).build();
			auditLogger_talendJobLog.runcomponent(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.FLOWINPUT) {//log current component input line
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label)
				.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
				.rows(jcm.total_row_number).duration(duration).build();
			auditLogger_talendJobLog.flowInput(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.FLOWOUTPUT) {//log current component output/reject line
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label)
				.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
				.rows(jcm.total_row_number).duration(duration).build();
			auditLogger_talendJobLog.flowOutput(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBERROR) {
			java.lang.Exception e_talendJobLog = jcm.exception;
			if(e_talendJobLog!=null) {
				try(java.io.StringWriter sw_talendJobLog = new java.io.StringWriter();java.io.PrintWriter pw_talendJobLog = new java.io.PrintWriter(sw_talendJobLog)) {
					e_talendJobLog.printStackTrace(pw_talendJobLog);
					builder_talendJobLog.custom("stacktrace", sw_talendJobLog.getBuffer().substring(0,java.lang.Math.min(sw_talendJobLog.getBuffer().length(), 512)));
				}
			}

			if(jcm.extra_info!=null) {
				builder_talendJobLog.connectorId(jcm.component_id).custom("extra_info", jcm.extra_info);
			}
				
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_id.substring(0, jcm.component_id.lastIndexOf('_')))
				.connectorId(jcm.component_id)
				.connectorLabel(jcm.component_label == null ? jcm.component_id : jcm.component_label).build();

			auditLogger_talendJobLog.exception(log_context_talendJobLog);
		}
		
		
		
	}

 



/**
 * [talendJobLog begin ] stop
 */
	
	/**
	 * [talendJobLog main ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 


	tos_count_talendJobLog++;

/**
 * [talendJobLog main ] stop
 */
	
	/**
	 * [talendJobLog process_data_begin ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog process_data_begin ] stop
 */
	
	/**
	 * [talendJobLog process_data_end ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog process_data_end ] stop
 */
	
	/**
	 * [talendJobLog end ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 

ok_Hash.put("talendJobLog", true);
end_Hash.put("talendJobLog", System.currentTimeMillis());




/**
 * [talendJobLog end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendJobLog finally ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendJobLog_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();

    public static void main(String[] args){
        final TTEALLCL1 TTEALLCL1Class = new TTEALLCL1();

        int exitCode = TTEALLCL1Class.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'TTEALLCL1' - Done.");
	        }

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                log.debug("Read jobInfo.properties file fail: " + e.getMessage());
                
            }
        }
		log.info(String.format("Project name: %s\tJob name: %s\tGIT Commit ID: %s\tTalend Version: %s",
				projectName,jobName,jobInfo.getProperty("gitCommitId"), "8.0.1.20230418_1502-patch"));
		
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
			}

	        getjobInfo();
			log.info("TalendJob: 'TTEALLCL1' - Start.");
		

                java.util.Set<Object> jobInfoKeys = jobInfo.keySet();
                for(Object jobInfoKey: jobInfoKeys) {
                    org.slf4j.MDC.put("_" + jobInfoKey.toString(), jobInfo.get(jobInfoKey).toString());
                }
                org.slf4j.MDC.put("_pid", pid);
                org.slf4j.MDC.put("_rootPid", rootPid);
                org.slf4j.MDC.put("_fatherPid", fatherPid);
                org.slf4j.MDC.put("_projectName", projectName);
                org.slf4j.MDC.put("_startTimestamp",java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC ).format( java.time.format.DateTimeFormatter.ISO_INSTANT ));
                org.slf4j.MDC.put("_jobRepositoryId","_1UEisDbzEeqrH7xApcIqKg");
                org.slf4j.MDC.put("_compiledAtTimestamp","2023-06-30T13:01:06.712884Z");

                java.lang.management.RuntimeMXBean mx = java.lang.management.ManagementFactory.getRuntimeMXBean();
                String[] mxNameTable = mx.getName().split("@"); //$NON-NLS-1$
                if (mxNameTable.length == 2) {
                    org.slf4j.MDC.put("_systemPid", mxNameTable[0]);
                } else {
                    org.slf4j.MDC.put("_systemPid", String.valueOf(java.lang.Thread.currentThread().getId()));
                }

		
		
			if(enableLogStash) {
				java.util.Properties properties_talendJobLog = new java.util.Properties();
				properties_talendJobLog.setProperty("root.logger", "audit");
				properties_talendJobLog.setProperty("encoding", "UTF-8");
				properties_talendJobLog.setProperty("application.name", "Talend Studio");
				properties_talendJobLog.setProperty("service.name", "Talend Studio Job");
				properties_talendJobLog.setProperty("instance.name", "Talend Studio Job Instance");
				properties_talendJobLog.setProperty("propagate.appender.exceptions", "none");
				properties_talendJobLog.setProperty("log.appender", "file");
				properties_talendJobLog.setProperty("appender.file.path", "audit.json");
				properties_talendJobLog.setProperty("appender.file.maxsize", "52428800");
				properties_talendJobLog.setProperty("appender.file.maxbackup", "20");
				properties_talendJobLog.setProperty("host", "false");

				System.getProperties().stringPropertyNames().stream()
					.filter(it -> it.startsWith("audit.logger."))
					.forEach(key -> properties_talendJobLog.setProperty(key.substring("audit.logger.".length()), System.getProperty(key)));

				
				
				
				org.apache.logging.log4j.core.config.Configurator.setLevel(properties_talendJobLog.getProperty("root.logger"), org.apache.logging.log4j.Level.DEBUG);
				
				auditLogger_talendJobLog = org.talend.job.audit.JobEventAuditLoggerFactory.createJobAuditLogger(properties_talendJobLog);
			}
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

            org.slf4j.MDC.put("_pid", pid);

        if (rootPid==null) {
            rootPid = pid;
        }

            org.slf4j.MDC.put("_rootPid", rootPid);

        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }
            org.slf4j.MDC.put("_fatherPid", fatherPid);

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = TTEALLCL1.class.getClassLoader().getResourceAsStream("at_talend_jobs/tteallcl1_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = TTEALLCL1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("jda_host_name", "id_String");
                        if(context.getStringValue("jda_host_name") == null) {
                            context.jda_host_name = null;
                        } else {
                            context.jda_host_name=(String) context.getProperty("jda_host_name");
                        }
                        context.setContextType("jda_mm_lib", "id_String");
                        if(context.getStringValue("jda_mm_lib") == null) {
                            context.jda_mm_lib = null;
                        } else {
                            context.jda_mm_lib=(String) context.getProperty("jda_mm_lib");
                        }
                        context.setContextType("jda_user_name", "id_String");
                        if(context.getStringValue("jda_user_name") == null) {
                            context.jda_user_name = null;
                        } else {
                            context.jda_user_name=(String) context.getProperty("jda_user_name");
                        }
                        context.setContextType("jda_password", "id_Password");
                        if(context.getStringValue("jda_password") == null) {
                            context.jda_password = null;
                        } else {
                            String pwd_jda_password_value = context.getProperty("jda_password");
                            context.jda_password = null;
                            if(pwd_jda_password_value!=null) {
                                if(context_param.containsKey("jda_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.jda_password = pwd_jda_password_value;
                                } else if (!pwd_jda_password_value.isEmpty()) {
                                    try {
                                        context.jda_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_jda_password_value);
                                        context.put("jda_password",context.jda_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SF_account", "id_String");
                        if(context.getStringValue("SF_account") == null) {
                            context.SF_account = null;
                        } else {
                            context.SF_account=(String) context.getProperty("SF_account");
                        }
                        context.setContextType("SF_prod_database", "id_String");
                        if(context.getStringValue("SF_prod_database") == null) {
                            context.SF_prod_database = null;
                        } else {
                            context.SF_prod_database=(String) context.getProperty("SF_prod_database");
                        }
                        context.setContextType("SF_password", "id_Password");
                        if(context.getStringValue("SF_password") == null) {
                            context.SF_password = null;
                        } else {
                            String pwd_SF_password_value = context.getProperty("SF_password");
                            context.SF_password = null;
                            if(pwd_SF_password_value!=null) {
                                if(context_param.containsKey("SF_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SF_password = pwd_SF_password_value;
                                } else if (!pwd_SF_password_value.isEmpty()) {
                                    try {
                                        context.SF_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SF_password_value);
                                        context.put("SF_password",context.SF_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SF_fin_schema", "id_String");
                        if(context.getStringValue("SF_fin_schema") == null) {
                            context.SF_fin_schema = null;
                        } else {
                            context.SF_fin_schema=(String) context.getProperty("SF_fin_schema");
                        }
                        context.setContextType("SF_user_id", "id_String");
                        if(context.getStringValue("SF_user_id") == null) {
                            context.SF_user_id = null;
                        } else {
                            context.SF_user_id=(String) context.getProperty("SF_user_id");
                        }
                        context.setContextType("SF_warehouse", "id_String");
                        if(context.getStringValue("SF_warehouse") == null) {
                            context.SF_warehouse = null;
                        } else {
                            context.SF_warehouse=(String) context.getProperty("SF_warehouse");
                        }
                        context.setContextType("sql_server_database", "id_String");
                        if(context.getStringValue("sql_server_database") == null) {
                            context.sql_server_database = null;
                        } else {
                            context.sql_server_database=(String) context.getProperty("sql_server_database");
                        }
                        context.setContextType("sql_server_host", "id_String");
                        if(context.getStringValue("sql_server_host") == null) {
                            context.sql_server_host = null;
                        } else {
                            context.sql_server_host=(String) context.getProperty("sql_server_host");
                        }
                        context.setContextType("sql_server_password", "id_Password");
                        if(context.getStringValue("sql_server_password") == null) {
                            context.sql_server_password = null;
                        } else {
                            String pwd_sql_server_password_value = context.getProperty("sql_server_password");
                            context.sql_server_password = null;
                            if(pwd_sql_server_password_value!=null) {
                                if(context_param.containsKey("sql_server_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.sql_server_password = pwd_sql_server_password_value;
                                } else if (!pwd_sql_server_password_value.isEmpty()) {
                                    try {
                                        context.sql_server_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_sql_server_password_value);
                                        context.put("sql_server_password",context.sql_server_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("sql_server_port", "id_String");
                        if(context.getStringValue("sql_server_port") == null) {
                            context.sql_server_port = null;
                        } else {
                            context.sql_server_port=(String) context.getProperty("sql_server_port");
                        }
                        context.setContextType("sql_server_schema", "id_String");
                        if(context.getStringValue("sql_server_schema") == null) {
                            context.sql_server_schema = null;
                        } else {
                            context.sql_server_schema=(String) context.getProperty("sql_server_schema");
                        }
                        context.setContextType("sql_server_user_id", "id_String");
                        if(context.getStringValue("sql_server_user_id") == null) {
                            context.sql_server_user_id = null;
                        } else {
                            context.sql_server_user_id=(String) context.getProperty("sql_server_user_id");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("jda_host_name")) {
                context.jda_host_name = (String) parentContextMap.get("jda_host_name");
            }if (parentContextMap.containsKey("jda_mm_lib")) {
                context.jda_mm_lib = (String) parentContextMap.get("jda_mm_lib");
            }if (parentContextMap.containsKey("jda_user_name")) {
                context.jda_user_name = (String) parentContextMap.get("jda_user_name");
            }if (parentContextMap.containsKey("jda_password")) {
                context.jda_password = (java.lang.String) parentContextMap.get("jda_password");
            }if (parentContextMap.containsKey("SF_account")) {
                context.SF_account = (String) parentContextMap.get("SF_account");
            }if (parentContextMap.containsKey("SF_prod_database")) {
                context.SF_prod_database = (String) parentContextMap.get("SF_prod_database");
            }if (parentContextMap.containsKey("SF_password")) {
                context.SF_password = (java.lang.String) parentContextMap.get("SF_password");
            }if (parentContextMap.containsKey("SF_fin_schema")) {
                context.SF_fin_schema = (String) parentContextMap.get("SF_fin_schema");
            }if (parentContextMap.containsKey("SF_user_id")) {
                context.SF_user_id = (String) parentContextMap.get("SF_user_id");
            }if (parentContextMap.containsKey("SF_warehouse")) {
                context.SF_warehouse = (String) parentContextMap.get("SF_warehouse");
            }if (parentContextMap.containsKey("sql_server_database")) {
                context.sql_server_database = (String) parentContextMap.get("sql_server_database");
            }if (parentContextMap.containsKey("sql_server_host")) {
                context.sql_server_host = (String) parentContextMap.get("sql_server_host");
            }if (parentContextMap.containsKey("sql_server_password")) {
                context.sql_server_password = (java.lang.String) parentContextMap.get("sql_server_password");
            }if (parentContextMap.containsKey("sql_server_port")) {
                context.sql_server_port = (String) parentContextMap.get("sql_server_port");
            }if (parentContextMap.containsKey("sql_server_schema")) {
                context.sql_server_schema = (String) parentContextMap.get("sql_server_schema");
            }if (parentContextMap.containsKey("sql_server_user_id")) {
                context.sql_server_user_id = (String) parentContextMap.get("sql_server_user_id");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("jda_password");
			parametersToEncrypt.add("SF_password");
			parametersToEncrypt.add("sql_server_password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));

            org.slf4j.MDC.put("_context", contextStr);
            log.info("TalendJob: 'TTEALLCL1' - Started.");
            mdcInfo.putAll(org.slf4j.MDC.getCopyOfContextMap());

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



		if(enableLogStash) {
	        talendJobLog.addJobStartMessage();
	        try {
	            talendJobLogProcess(globalMap);
	        } catch (java.lang.Exception e) {
	            e.printStackTrace();
	        }
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                    mdcInfo.forEach(org.slf4j.MDC::put);

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tParallelize_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tParallelize_1) {
globalMap.put("tParallelize_1_SUBPROCESS_STATE", -1);

e_tParallelize_1.printStackTrace();

}catch (java.lang.Error e_tParallelize_1) {
globalMap.put("tParallelize_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tParallelize_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : TTEALLCL1");
        }
		if(enableLogStash) {
	        talendJobLog.addJobEndMessage(startTime, end, status);
	        try {
	            talendJobLogProcess(globalMap);
	        } catch (java.lang.Exception e) {
	            e.printStackTrace();
	        }
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


        org.slf4j.MDC.remove("_subJobName");
        org.slf4j.MDC.remove("_subJobPid");
        org.slf4j.MDC.remove("_systemPid");
        log.info("TalendJob: 'TTEALLCL1' - Finished - status: " + status + " returnCode: " + returnCode );

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();




            connections.put("tDBConnection_1_connection", globalMap.get("tDBConnection_1_connection"));
            connections.put("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES", globalMap.get("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES"));


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1886381 characters generated by Talend Cloud Data Management Platform 
 *     on the June 30, 2023 at 9:01:06 AM EDT
 ************************************************************************************************/