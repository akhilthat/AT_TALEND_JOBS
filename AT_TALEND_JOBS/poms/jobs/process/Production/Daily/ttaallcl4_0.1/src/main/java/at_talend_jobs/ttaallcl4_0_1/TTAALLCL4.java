
package at_talend_jobs.ttaallcl4_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.DataQuality;
import routines.Relational;
import routines.DataQualityDependencies;
import routines.Mathematical;
import routines.SQLike;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.DQTechnical;
import routines.StringHandling;
import routines.DataMasking;
import routines.TalendDate;
import routines.DqStringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: TTAALLCL4 Purpose: <br>
 * Description: <br>
 * 
 * @author thati, akhil
 * @version 8.0.1.20230418_1502-patch
 * @status
 */
public class TTAALLCL4 implements TalendJob {
	static {
		System.setProperty("TalendJob.log", "TTAALLCL4.log");
	}

	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(TTAALLCL4.class);

	protected static void logIgnoredError(String message, Throwable cause) {
		log.error(message, cause);

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (jda_host_name != null) {

				this.setProperty("jda_host_name", jda_host_name.toString());

			}

			if (jda_mm_lib != null) {

				this.setProperty("jda_mm_lib", jda_mm_lib.toString());

			}

			if (jda_user_name != null) {

				this.setProperty("jda_user_name", jda_user_name.toString());

			}

			if (jda_password != null) {

				this.setProperty("jda_password", jda_password.toString());

			}

			if (SF_account != null) {

				this.setProperty("SF_account", SF_account.toString());

			}

			if (SF_prod_database != null) {

				this.setProperty("SF_prod_database", SF_prod_database.toString());

			}

			if (SF_password != null) {

				this.setProperty("SF_password", SF_password.toString());

			}

			if (SF_fin_schema != null) {

				this.setProperty("SF_fin_schema", SF_fin_schema.toString());

			}

			if (SF_user_id != null) {

				this.setProperty("SF_user_id", SF_user_id.toString());

			}

			if (SF_warehouse != null) {

				this.setProperty("SF_warehouse", SF_warehouse.toString());

			}

			if (sql_server_database != null) {

				this.setProperty("sql_server_database", sql_server_database.toString());

			}

			if (sql_server_host != null) {

				this.setProperty("sql_server_host", sql_server_host.toString());

			}

			if (sql_server_password != null) {

				this.setProperty("sql_server_password", sql_server_password.toString());

			}

			if (sql_server_port != null) {

				this.setProperty("sql_server_port", sql_server_port.toString());

			}

			if (sql_server_schema != null) {

				this.setProperty("sql_server_schema", sql_server_schema.toString());

			}

			if (sql_server_user_id != null) {

				this.setProperty("sql_server_user_id", sql_server_user_id.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String jda_host_name;

		public String getJda_host_name() {
			return this.jda_host_name;
		}

		public String jda_mm_lib;

		public String getJda_mm_lib() {
			return this.jda_mm_lib;
		}

		public String jda_user_name;

		public String getJda_user_name() {
			return this.jda_user_name;
		}

		public java.lang.String jda_password;

		public java.lang.String getJda_password() {
			return this.jda_password;
		}

		public String SF_account;

		public String getSF_account() {
			return this.SF_account;
		}

		public String SF_prod_database;

		public String getSF_prod_database() {
			return this.SF_prod_database;
		}

		public java.lang.String SF_password;

		public java.lang.String getSF_password() {
			return this.SF_password;
		}

		public String SF_fin_schema;

		public String getSF_fin_schema() {
			return this.SF_fin_schema;
		}

		public String SF_user_id;

		public String getSF_user_id() {
			return this.SF_user_id;
		}

		public String SF_warehouse;

		public String getSF_warehouse() {
			return this.SF_warehouse;
		}

		public String sql_server_database;

		public String getSql_server_database() {
			return this.sql_server_database;
		}

		public String sql_server_host;

		public String getSql_server_host() {
			return this.sql_server_host;
		}

		public java.lang.String sql_server_password;

		public java.lang.String getSql_server_password() {
			return this.sql_server_password;
		}

		public String sql_server_port;

		public String getSql_server_port() {
			return this.sql_server_port;
		}

		public String sql_server_schema;

		public String getSql_server_schema() {
			return this.sql_server_schema;
		}

		public String sql_server_user_id;

		public String getSql_server_user_id() {
			return this.sql_server_user_id;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TTAALLCL4";
	private final String projectName = "AT_TALEND_JOBS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private String cLabel = null;

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private final JobStructureCatcherUtils talendJobLog = new JobStructureCatcherUtils(jobName,
			"_daEeYAV0Eeqgh6rCafRRhA", "0.1");
	private org.talend.job.audit.JobAuditLogger auditLogger_talendJobLog = null;

	private RunStat runStat = new RunStat(talendJobLog, System.getProperty("audit.interval"));

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;

		private String currentComponent = null;
		private String cLabel = null;

		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		private TalendException(Exception e, String errorComponent, String errorComponentLabel,
				final java.util.Map<String, Object> globalMap) {
			this(e, errorComponent, globalMap);
			this.cLabel = errorComponentLabel;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TTAALLCL4.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TTAALLCL4.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						if (enableLogStash) {
							talendJobLog.addJobExceptionMessage(currentComponent, cLabel, null, e);
							talendJobLogProcess(globalMap);
						}
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tParallelize_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tParallelize_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileDelete_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendJobLog_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		talendJobLog_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tParallelize_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_18_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_17_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_19_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendJobLog_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tParallelize_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tParallelize_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tParallelize_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tParallelize_1 begin ] start
				 */

				ok_Hash.put("tParallelize_1", false);
				start_Hash.put("tParallelize_1", System.currentTimeMillis());

				currentComponent = "tParallelize_1";

				int tos_count_tParallelize_1 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tParallelize_1", "tParallelize_1", "tParallelize");
					talendJobLogProcess(globalMap);
				}

// call parallelized subjobs
				java.util.Map<String, Thread> mt_tParallelize_1 = new java.util.HashMap<String, Thread>();

// clear the temporary values in the globalMap
				globalMap.remove("tDBRow_1_SUBPROCESS_STATE");
				globalMap.remove("tDBRow_2_SUBPROCESS_STATE");
				globalMap.remove("tDBRow_10_SUBPROCESS_STATE");
				globalMap.remove("tDBRow_12_SUBPROCESS_STATE");

				java.util.Map concurrentMap_temp_tParallelize_1;
				if (globalMap instanceof java.util.HashMap) {
					concurrentMap_temp_tParallelize_1 = java.util.Collections.synchronizedMap(globalMap);
				} else {
					concurrentMap_temp_tParallelize_1 = globalMap;
				}
				final java.util.Map concurrentMap_tParallelize_1 = concurrentMap_temp_tParallelize_1;

				runningThreadCount.add(1);
				String name_tDBRow_1 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
				Thread thread_tDBRow_1 = new Thread(new ThreadGroup(name_tDBRow_1), name_tDBRow_1) {
					public void run() {
						java.util.Map threadRunResultMap = new java.util.HashMap();
						threadRunResultMap.put("errorCode", null);
						threadRunResultMap.put("status", "");
						threadLocal.set(threadRunResultMap);

						try {

							mdcInfo.forEach(org.slf4j.MDC::put);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_1' starts.");

							tDBRow_1Process(concurrentMap_tParallelize_1);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_1' is done.");

						} catch (TalendException e) {

							log.error("tParallelize_1 - " + e.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_1_SUBPROCESS_STATE", -1);
							e.printStackTrace();
						} catch (java.lang.Error error) {

							log.error("tParallelize_1 - " + error.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_1_SUBPROCESS_STATE", -1);
							error.printStackTrace();
						} finally {
							runningThreadCount.add(-1);
						}
					}
				};
				thread_tDBRow_1.start();
				mt_tParallelize_1.put("tDBRow_1", thread_tDBRow_1);
				runningThreadCount.add(1);
				String name_tDBRow_2 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
				Thread thread_tDBRow_2 = new Thread(new ThreadGroup(name_tDBRow_2), name_tDBRow_2) {
					public void run() {
						java.util.Map threadRunResultMap = new java.util.HashMap();
						threadRunResultMap.put("errorCode", null);
						threadRunResultMap.put("status", "");
						threadLocal.set(threadRunResultMap);

						try {

							mdcInfo.forEach(org.slf4j.MDC::put);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_2' starts.");

							tDBRow_2Process(concurrentMap_tParallelize_1);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_2' is done.");

						} catch (TalendException e) {

							log.error("tParallelize_1 - " + e.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_2_SUBPROCESS_STATE", -1);
							e.printStackTrace();
						} catch (java.lang.Error error) {

							log.error("tParallelize_1 - " + error.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_2_SUBPROCESS_STATE", -1);
							error.printStackTrace();
						} finally {
							runningThreadCount.add(-1);
						}
					}
				};
				thread_tDBRow_2.start();
				mt_tParallelize_1.put("tDBRow_2", thread_tDBRow_2);
				runningThreadCount.add(1);
				String name_tDBRow_10 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
				Thread thread_tDBRow_10 = new Thread(new ThreadGroup(name_tDBRow_10), name_tDBRow_10) {
					public void run() {
						java.util.Map threadRunResultMap = new java.util.HashMap();
						threadRunResultMap.put("errorCode", null);
						threadRunResultMap.put("status", "");
						threadLocal.set(threadRunResultMap);

						try {

							mdcInfo.forEach(org.slf4j.MDC::put);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_10' starts.");

							tDBRow_10Process(concurrentMap_tParallelize_1);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_10' is done.");

						} catch (TalendException e) {

							log.error("tParallelize_1 - " + e.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_10_SUBPROCESS_STATE", -1);
							e.printStackTrace();
						} catch (java.lang.Error error) {

							log.error("tParallelize_1 - " + error.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_10_SUBPROCESS_STATE", -1);
							error.printStackTrace();
						} finally {
							runningThreadCount.add(-1);
						}
					}
				};
				thread_tDBRow_10.start();
				mt_tParallelize_1.put("tDBRow_10", thread_tDBRow_10);
				runningThreadCount.add(1);
				String name_tDBRow_12 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
				Thread thread_tDBRow_12 = new Thread(new ThreadGroup(name_tDBRow_12), name_tDBRow_12) {
					public void run() {
						java.util.Map threadRunResultMap = new java.util.HashMap();
						threadRunResultMap.put("errorCode", null);
						threadRunResultMap.put("status", "");
						threadLocal.set(threadRunResultMap);

						try {

							mdcInfo.forEach(org.slf4j.MDC::put);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_12' starts.");

							tDBRow_12Process(concurrentMap_tParallelize_1);

							log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_12' is done.");

						} catch (TalendException e) {

							log.error("tParallelize_1 - " + e.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_12_SUBPROCESS_STATE", -1);
							e.printStackTrace();
						} catch (java.lang.Error error) {

							log.error("tParallelize_1 - " + error.getMessage());

							concurrentMap_tParallelize_1.put("tDBRow_12_SUBPROCESS_STATE", -1);
							error.printStackTrace();
						} finally {
							runningThreadCount.add(-1);
						}
					}
				};
				thread_tDBRow_12.start();
				mt_tParallelize_1.put("tDBRow_12", thread_tDBRow_12);
				while ((((globalMap.get("tDBRow_1_SUBPROCESS_STATE") == null) ? true
						: ((Integer) globalMap.get("tDBRow_1_SUBPROCESS_STATE") == 0))
						|| ((globalMap.get("tDBRow_2_SUBPROCESS_STATE") == null) ? true
								: ((Integer) globalMap.get("tDBRow_2_SUBPROCESS_STATE") == 0))
						|| ((globalMap.get("tDBRow_10_SUBPROCESS_STATE") == null) ? true
								: ((Integer) globalMap.get("tDBRow_10_SUBPROCESS_STATE") == 0))
						|| ((globalMap.get("tDBRow_12_SUBPROCESS_STATE") == null) ? true
								: ((Integer) globalMap.get("tDBRow_12_SUBPROCESS_STATE") == 0))
						|| false)) {
					Thread.sleep(100);
				}

// call next subprocesses

				/**
				 * [tParallelize_1 begin ] stop
				 */

				/**
				 * [tParallelize_1 main ] start
				 */

				currentComponent = "tParallelize_1";

				tos_count_tParallelize_1++;

				/**
				 * [tParallelize_1 main ] stop
				 */

				/**
				 * [tParallelize_1 process_data_begin ] start
				 */

				currentComponent = "tParallelize_1";

				/**
				 * [tParallelize_1 process_data_begin ] stop
				 */

				/**
				 * [tParallelize_1 process_data_end ] start
				 */

				currentComponent = "tParallelize_1";

				/**
				 * [tParallelize_1 process_data_end ] stop
				 */

				/**
				 * [tParallelize_1 end ] start
				 */

				currentComponent = "tParallelize_1";

				ok_Hash.put("tParallelize_1", true);
				end_Hash.put("tParallelize_1", System.currentTimeMillis());

				/**
				 * [tParallelize_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tParallelize_1 finally ] start
				 */

				currentComponent = "tParallelize_1";

				/**
				 * [tParallelize_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tParallelize_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_1", "tDBRow_1", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_1 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_1 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_1 = (String) (restRequest_tDBRow_1 != null
						? restRequest_tDBRow_1.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_1 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_1 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_1 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_1 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_1
						.createRuntimeProperties();
				props_tDBRow_1.setValue("query",
						"DELETE from INVENTORY_MASTER_INVMST\nWHERE DATELOADED= CURRENT_DATE() - 1");

				props_tDBRow_1.setValue("dieOnError", true);

				props_tDBRow_1.setValue("usePreparedStatement", false);

				props_tDBRow_1.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_1_1_fisrt sst_tDBRow_1_1_fisrt = new SchemaSettingTool_tDBRow_1_1_fisrt();

				props_tDBRow_1.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_1_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_1_2_fisrt sst_tDBRow_1_2_fisrt = new SchemaSettingTool_tDBRow_1_2_fisrt();

				props_tDBRow_1.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_2_fisrt.getSchemaValue()));

				props_tDBRow_1.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_1.connection.setValue("useCustomRegion", false);

				props_tDBRow_1.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_1.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_1.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_1.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_1.table.setValue("tableName", "");

				props_tDBRow_1.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_1.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_1.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_1.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_1.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_1.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_1_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_1_3_fisrt sst_tDBRow_1_3_fisrt = new SchemaSettingTool_tDBRow_1_3_fisrt();

				props_tDBRow_1.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_1.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_1);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_1.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_1);
					}
				}
				globalMap.put("tDBRow_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_1_MAPPINGS_URL", mappings_url_tDBRow_1);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_1 = null;
				topology_tDBRow_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_1 = def_tDBRow_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_1,
						topology_tDBRow_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_1 = def_tDBRow_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_1 = componentRuntime_tDBRow_1
						.initialize(container_tDBRow_1, props_tDBRow_1);

				if (initVr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_1.getMessage());
				}

				if (componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_1;
					compDriverInitialization_tDBRow_1.runAtDriver(container_tDBRow_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_1 = null;
				if (componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_1;
					if (doesNodeBelongToRequest_tDBRow_1) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_1 = sourceOrSink_tDBRow_1
								.validate(container_tDBRow_1);
						if (vr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_1.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

// end of generic

				resourceMap.put("finish_tDBRow_1", Boolean.TRUE);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBRow_18Process(globalMap);

				/**
				 * [tDBRow_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

// finally of generic

				if (resourceMap.get("finish_tDBRow_1") == null) {
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_18");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_18 begin ] start
				 */

				ok_Hash.put("tDBRow_18", false);
				start_Hash.put("tDBRow_18", System.currentTimeMillis());

				currentComponent = "tDBRow_18";

				int tos_count_tDBRow_18 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_18", "tDBRow_18", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_18 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_18 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_18 = (String) (restRequest_tDBRow_18 != null
						? restRequest_tDBRow_18.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_18 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_18 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_18 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_18 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_18
						.createRuntimeProperties();
				props_tDBRow_18.setValue("query",
						"create or replace TABLE INVMST (\n	INUMBR NUMBER(9,0),\n	ICHECK FLOAT,\n	IDESCR VARCHAR(30),\n	IDSCCD VARCHAR(1),\n	ISO"
								+ "RT VARCHAR(10),\n	ISTYLN VARCHAR(15),\n	ASNUM FLOAT,\n	IVNDPN VARCHAR(15),\n	IMFGR FLOAT,\n	IMFGNO VARCHAR(15),\n	IDEPT "
								+ "FLOAT,\n	ISDEPT FLOAT,\n	ICLAS FLOAT,\n	ISCLAS FLOAT,\n	BYRNUM VARCHAR(3),\n	IASPAC NUMBER(2,0),\n	IADVYN VARCHAR(1),\n	"
								+ "IBUYCD VARCHAR(1),\n	ISET VARCHAR(1),\n	IWARNT VARCHAR(1),\n	IPRMPT VARCHAR(1),\n	IPRVNT VARCHAR(1),\n	ITKTTR VARCHAR(1)"
								+ ",\n	ITKTTA VARCHAR(1),\n	ITKTN NUMBER(2,0),\n	ILBLTR VARCHAR(1),\n	ILBLTA VARCHAR(1),\n	IFINLN VARCHAR(5),\n	IPROFL VARC"
								+ "HAR(5),\n	IMODUL VARCHAR(5),\n	ISTYPE VARCHAR(2),\n	ISCOLR FLOAT,\n	ISSIZE VARCHAR(4),\n	IHAZCD VARCHAR(2),\n	MCHNUM VAR"
								+ "CHAR(3),\n	ISUBST NUMBER(9,0),\n	ICORE NUMBER(9,0),\n	IREPL NUMBER(9,0),\n	ISLUM VARCHAR(3),\n	IUMCV2 NUMBER(10,5),\n	IB"
								+ "YUM VARCHAR(3),\n	IMINPK NUMBER(9,2),\n	ISTDPK NUMBER(9,2),\n	IHLDOR VARCHAR(1),\n	IMOQTY NUMBER(7,0),\n	IMNSTK NUMBER(7"
								+ ",0),\n	IMXSTK NUMBER(7,0),\n	IMDSTK NUMBER(7,0),\n	IDSPLY NUMBER(7,0),\n	IOMULT NUMBER(7,0),\n	IRPLCD VARCHAR(1),\n	IMFP"
								+ "RC NUMBER(9,2),\n	IWGHT NUMBER(7,3),\n	ICUBE NUMBER(9,3),\n	IDLGTH NUMBER(5,1),\n	IDWDTH NUMBER(5,1),\n	IDHGHT NUMBER(5,"
								+ "1),\n	IMDATE NUMBER(6,0),\n	IMCENT NUMBER(1,0),\n	IVPLTI NUMBER(3,0),\n	IVPLHI NUMBER(3,0),\n	SHPNUM FLOAT,\n	IDISTM VAR"
								+ "CHAR(1),\n	IHLDWO VARCHAR(1),\n	IIGNUM FLOAT,\n	ISDIM VARCHAR(4),\n	IVATCD VARCHAR(2),\n	IPLAN FLOAT,\n	IVLRK1 VARCHAR(1"
								+ "),\n	IVLRK2 VARCHAR(1),\n	IVLRK3 VARCHAR(1),\n	IVLRK4 VARCHAR(1),\n	IRPLCN NUMBER(1,0),\n	IRPLDT NUMBER(6,0),\n	ISEASN V"
								+ "ARCHAR(3),\n	IDEADC NUMBER(1,0),\n	IDEADD NUMBER(6,0),\n	INLRTL NUMBER(9,2),\n	IHANDL VARCHAR(1),\n	IATRB1 VARCHAR(2),\n"
								+ "	IATRB2 VARCHAR(2),\n	IATRB3 VARCHAR(2),\n	IATRB4 VARCHAR(2),\n	IATRB5 VARCHAR(2),\n	IPRCCH VARCHAR(1),\n	IPRCZN VARCHAR"
								+ "(1),\n	IPRCST VARCHAR(1),\n	IASNUM FLOAT,\n	ICORGP VARCHAR(5),\n	ILEAD NUMBER(3,0),\n	IHZCOD VARCHAR(4),\n	IFRACT VARCHA"
								+ "R(1),\n	LOAD_DATE DATE\n);");

				props_tDBRow_18.setValue("dieOnError", true);

				props_tDBRow_18.setValue("usePreparedStatement", false);

				props_tDBRow_18.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_18_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_18_1_fisrt sst_tDBRow_18_1_fisrt = new SchemaSettingTool_tDBRow_18_1_fisrt();

				props_tDBRow_18.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_18_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_18_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_18_2_fisrt sst_tDBRow_18_2_fisrt = new SchemaSettingTool_tDBRow_18_2_fisrt();

				props_tDBRow_18.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_18_2_fisrt.getSchemaValue()));

				props_tDBRow_18.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_18.connection.setValue("useCustomRegion", false);

				props_tDBRow_18.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_18.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_18.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_18.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_18.table.setValue("tableName", "");

				props_tDBRow_18.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_18.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_18.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_18.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_18.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_18.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_18_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_18_3_fisrt sst_tDBRow_18_3_fisrt = new SchemaSettingTool_tDBRow_18_3_fisrt();

				props_tDBRow_18.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_18_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_18.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_18 = props_tDBRow_18.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_18 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_18 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_18 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_18.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_18);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_18.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_18 = props_tDBRow_18.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_18 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_18 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_18 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_18.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_18);
					}
				}
				globalMap.put("tDBRow_18_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_18);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_18 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_18_MAPPINGS_URL", mappings_url_tDBRow_18);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_18 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_18";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_18 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_18 = null;
				topology_tDBRow_18 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_18 = def_tDBRow_18.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_18,
						topology_tDBRow_18);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_18 = def_tDBRow_18
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_18 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_18.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_18 = componentRuntime_tDBRow_18
						.initialize(container_tDBRow_18, props_tDBRow_18);

				if (initVr_tDBRow_18.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_18.getMessage());
				}

				if (componentRuntime_tDBRow_18 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_18 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_18;
					compDriverInitialization_tDBRow_18.runAtDriver(container_tDBRow_18);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_18 = null;
				if (componentRuntime_tDBRow_18 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_18 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_18;
					if (doesNodeBelongToRequest_tDBRow_18) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_18 = sourceOrSink_tDBRow_18
								.validate(container_tDBRow_18);
						if (vr_tDBRow_18.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_18.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_18 begin ] stop
				 */

				/**
				 * [tDBRow_18 main ] start
				 */

				currentComponent = "tDBRow_18";

				tos_count_tDBRow_18++;

				/**
				 * [tDBRow_18 main ] stop
				 */

				/**
				 * [tDBRow_18 process_data_begin ] start
				 */

				currentComponent = "tDBRow_18";

				/**
				 * [tDBRow_18 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_18 process_data_end ] start
				 */

				currentComponent = "tDBRow_18";

				/**
				 * [tDBRow_18 process_data_end ] stop
				 */

				/**
				 * [tDBRow_18 end ] start
				 */

				currentComponent = "tDBRow_18";

// end of generic

				resourceMap.put("finish_tDBRow_18", Boolean.TRUE);

				ok_Hash.put("tDBRow_18", true);
				end_Hash.put("tDBRow_18", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_5Process(globalMap);

				/**
				 * [tDBRow_18 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_18 finally ] start
				 */

				currentComponent = "tDBRow_18";

// finally of generic

				if (resourceMap.get("finish_tDBRow_18") == null) {
				}

				/**
				 * [tDBRow_18 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_18_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal INUMBR;

		public BigDecimal getINUMBR() {
			return this.INUMBR;
		}

		public Boolean INUMBRIsNullable() {
			return false;
		}

		public Boolean INUMBRIsKey() {
			return false;
		}

		public Integer INUMBRLength() {
			return 9;
		}

		public Integer INUMBRPrecision() {
			return 0;
		}

		public String INUMBRDefault() {

			return "";

		}

		public String INUMBRComment() {

			return "";

		}

		public String INUMBRPattern() {

			return "";

		}

		public String INUMBROriginalDbColumnName() {

			return "INUMBR";

		}

		public float ICHECK;

		public float getICHECK() {
			return this.ICHECK;
		}

		public Boolean ICHECKIsNullable() {
			return false;
		}

		public Boolean ICHECKIsKey() {
			return false;
		}

		public Integer ICHECKLength() {
			return 1;
		}

		public Integer ICHECKPrecision() {
			return 0;
		}

		public String ICHECKDefault() {

			return "";

		}

		public String ICHECKComment() {

			return "";

		}

		public String ICHECKPattern() {

			return "";

		}

		public String ICHECKOriginalDbColumnName() {

			return "ICHECK";

		}

		public String IDESCR;

		public String getIDESCR() {
			return this.IDESCR;
		}

		public Boolean IDESCRIsNullable() {
			return false;
		}

		public Boolean IDESCRIsKey() {
			return false;
		}

		public Integer IDESCRLength() {
			return 30;
		}

		public Integer IDESCRPrecision() {
			return 0;
		}

		public String IDESCRDefault() {

			return null;

		}

		public String IDESCRComment() {

			return "";

		}

		public String IDESCRPattern() {

			return "";

		}

		public String IDESCROriginalDbColumnName() {

			return "IDESCR";

		}

		public String IDSCCD;

		public String getIDSCCD() {
			return this.IDSCCD;
		}

		public Boolean IDSCCDIsNullable() {
			return false;
		}

		public Boolean IDSCCDIsKey() {
			return false;
		}

		public Integer IDSCCDLength() {
			return 1;
		}

		public Integer IDSCCDPrecision() {
			return 0;
		}

		public String IDSCCDDefault() {

			return null;

		}

		public String IDSCCDComment() {

			return "";

		}

		public String IDSCCDPattern() {

			return "";

		}

		public String IDSCCDOriginalDbColumnName() {

			return "IDSCCD";

		}

		public String ISORT;

		public String getISORT() {
			return this.ISORT;
		}

		public Boolean ISORTIsNullable() {
			return false;
		}

		public Boolean ISORTIsKey() {
			return false;
		}

		public Integer ISORTLength() {
			return 10;
		}

		public Integer ISORTPrecision() {
			return 0;
		}

		public String ISORTDefault() {

			return null;

		}

		public String ISORTComment() {

			return "";

		}

		public String ISORTPattern() {

			return "";

		}

		public String ISORTOriginalDbColumnName() {

			return "ISORT";

		}

		public String ISTYLN;

		public String getISTYLN() {
			return this.ISTYLN;
		}

		public Boolean ISTYLNIsNullable() {
			return false;
		}

		public Boolean ISTYLNIsKey() {
			return false;
		}

		public Integer ISTYLNLength() {
			return 15;
		}

		public Integer ISTYLNPrecision() {
			return 0;
		}

		public String ISTYLNDefault() {

			return null;

		}

		public String ISTYLNComment() {

			return "";

		}

		public String ISTYLNPattern() {

			return "";

		}

		public String ISTYLNOriginalDbColumnName() {

			return "ISTYLN";

		}

		public float ASNUM;

		public float getASNUM() {
			return this.ASNUM;
		}

		public Boolean ASNUMIsNullable() {
			return false;
		}

		public Boolean ASNUMIsKey() {
			return false;
		}

		public Integer ASNUMLength() {
			return 6;
		}

		public Integer ASNUMPrecision() {
			return 0;
		}

		public String ASNUMDefault() {

			return "";

		}

		public String ASNUMComment() {

			return "";

		}

		public String ASNUMPattern() {

			return "";

		}

		public String ASNUMOriginalDbColumnName() {

			return "ASNUM";

		}

		public String IVNDPN;

		public String getIVNDPN() {
			return this.IVNDPN;
		}

		public Boolean IVNDPNIsNullable() {
			return false;
		}

		public Boolean IVNDPNIsKey() {
			return false;
		}

		public Integer IVNDPNLength() {
			return 15;
		}

		public Integer IVNDPNPrecision() {
			return 0;
		}

		public String IVNDPNDefault() {

			return null;

		}

		public String IVNDPNComment() {

			return "";

		}

		public String IVNDPNPattern() {

			return "";

		}

		public String IVNDPNOriginalDbColumnName() {

			return "IVNDPN";

		}

		public float IMFGR;

		public float getIMFGR() {
			return this.IMFGR;
		}

		public Boolean IMFGRIsNullable() {
			return false;
		}

		public Boolean IMFGRIsKey() {
			return false;
		}

		public Integer IMFGRLength() {
			return 6;
		}

		public Integer IMFGRPrecision() {
			return 0;
		}

		public String IMFGRDefault() {

			return "";

		}

		public String IMFGRComment() {

			return "";

		}

		public String IMFGRPattern() {

			return "";

		}

		public String IMFGROriginalDbColumnName() {

			return "IMFGR";

		}

		public String IMFGNO;

		public String getIMFGNO() {
			return this.IMFGNO;
		}

		public Boolean IMFGNOIsNullable() {
			return false;
		}

		public Boolean IMFGNOIsKey() {
			return false;
		}

		public Integer IMFGNOLength() {
			return 15;
		}

		public Integer IMFGNOPrecision() {
			return 0;
		}

		public String IMFGNODefault() {

			return null;

		}

		public String IMFGNOComment() {

			return "";

		}

		public String IMFGNOPattern() {

			return "";

		}

		public String IMFGNOOriginalDbColumnName() {

			return "IMFGNO";

		}

		public float IDEPT;

		public float getIDEPT() {
			return this.IDEPT;
		}

		public Boolean IDEPTIsNullable() {
			return false;
		}

		public Boolean IDEPTIsKey() {
			return false;
		}

		public Integer IDEPTLength() {
			return 3;
		}

		public Integer IDEPTPrecision() {
			return 0;
		}

		public String IDEPTDefault() {

			return "";

		}

		public String IDEPTComment() {

			return "";

		}

		public String IDEPTPattern() {

			return "";

		}

		public String IDEPTOriginalDbColumnName() {

			return "IDEPT";

		}

		public float ISDEPT;

		public float getISDEPT() {
			return this.ISDEPT;
		}

		public Boolean ISDEPTIsNullable() {
			return false;
		}

		public Boolean ISDEPTIsKey() {
			return false;
		}

		public Integer ISDEPTLength() {
			return 3;
		}

		public Integer ISDEPTPrecision() {
			return 0;
		}

		public String ISDEPTDefault() {

			return "";

		}

		public String ISDEPTComment() {

			return "";

		}

		public String ISDEPTPattern() {

			return "";

		}

		public String ISDEPTOriginalDbColumnName() {

			return "ISDEPT";

		}

		public float ICLAS;

		public float getICLAS() {
			return this.ICLAS;
		}

		public Boolean ICLASIsNullable() {
			return false;
		}

		public Boolean ICLASIsKey() {
			return false;
		}

		public Integer ICLASLength() {
			return 3;
		}

		public Integer ICLASPrecision() {
			return 0;
		}

		public String ICLASDefault() {

			return "";

		}

		public String ICLASComment() {

			return "";

		}

		public String ICLASPattern() {

			return "";

		}

		public String ICLASOriginalDbColumnName() {

			return "ICLAS";

		}

		public float ISCLAS;

		public float getISCLAS() {
			return this.ISCLAS;
		}

		public Boolean ISCLASIsNullable() {
			return false;
		}

		public Boolean ISCLASIsKey() {
			return false;
		}

		public Integer ISCLASLength() {
			return 3;
		}

		public Integer ISCLASPrecision() {
			return 0;
		}

		public String ISCLASDefault() {

			return "";

		}

		public String ISCLASComment() {

			return "";

		}

		public String ISCLASPattern() {

			return "";

		}

		public String ISCLASOriginalDbColumnName() {

			return "ISCLAS";

		}

		public String BYRNUM;

		public String getBYRNUM() {
			return this.BYRNUM;
		}

		public Boolean BYRNUMIsNullable() {
			return false;
		}

		public Boolean BYRNUMIsKey() {
			return false;
		}

		public Integer BYRNUMLength() {
			return 3;
		}

		public Integer BYRNUMPrecision() {
			return 0;
		}

		public String BYRNUMDefault() {

			return "";

		}

		public String BYRNUMComment() {

			return "";

		}

		public String BYRNUMPattern() {

			return "";

		}

		public String BYRNUMOriginalDbColumnName() {

			return "BYRNUM";

		}

		public BigDecimal IASPAC;

		public BigDecimal getIASPAC() {
			return this.IASPAC;
		}

		public Boolean IASPACIsNullable() {
			return false;
		}

		public Boolean IASPACIsKey() {
			return false;
		}

		public Integer IASPACLength() {
			return 2;
		}

		public Integer IASPACPrecision() {
			return 0;
		}

		public String IASPACDefault() {

			return "";

		}

		public String IASPACComment() {

			return "";

		}

		public String IASPACPattern() {

			return "";

		}

		public String IASPACOriginalDbColumnName() {

			return "IASPAC";

		}

		public String IADVYN;

		public String getIADVYN() {
			return this.IADVYN;
		}

		public Boolean IADVYNIsNullable() {
			return false;
		}

		public Boolean IADVYNIsKey() {
			return false;
		}

		public Integer IADVYNLength() {
			return 1;
		}

		public Integer IADVYNPrecision() {
			return 0;
		}

		public String IADVYNDefault() {

			return "";

		}

		public String IADVYNComment() {

			return "";

		}

		public String IADVYNPattern() {

			return "";

		}

		public String IADVYNOriginalDbColumnName() {

			return "IADVYN";

		}

		public String IBUYCD;

		public String getIBUYCD() {
			return this.IBUYCD;
		}

		public Boolean IBUYCDIsNullable() {
			return false;
		}

		public Boolean IBUYCDIsKey() {
			return false;
		}

		public Integer IBUYCDLength() {
			return 1;
		}

		public Integer IBUYCDPrecision() {
			return 0;
		}

		public String IBUYCDDefault() {

			return "";

		}

		public String IBUYCDComment() {

			return "";

		}

		public String IBUYCDPattern() {

			return "";

		}

		public String IBUYCDOriginalDbColumnName() {

			return "IBUYCD";

		}

		public String ISET;

		public String getISET() {
			return this.ISET;
		}

		public Boolean ISETIsNullable() {
			return false;
		}

		public Boolean ISETIsKey() {
			return false;
		}

		public Integer ISETLength() {
			return 1;
		}

		public Integer ISETPrecision() {
			return 0;
		}

		public String ISETDefault() {

			return "";

		}

		public String ISETComment() {

			return "";

		}

		public String ISETPattern() {

			return "";

		}

		public String ISETOriginalDbColumnName() {

			return "ISET";

		}

		public String IWARNT;

		public String getIWARNT() {
			return this.IWARNT;
		}

		public Boolean IWARNTIsNullable() {
			return false;
		}

		public Boolean IWARNTIsKey() {
			return false;
		}

		public Integer IWARNTLength() {
			return 1;
		}

		public Integer IWARNTPrecision() {
			return 0;
		}

		public String IWARNTDefault() {

			return "";

		}

		public String IWARNTComment() {

			return "";

		}

		public String IWARNTPattern() {

			return "";

		}

		public String IWARNTOriginalDbColumnName() {

			return "IWARNT";

		}

		public String IPRMPT;

		public String getIPRMPT() {
			return this.IPRMPT;
		}

		public Boolean IPRMPTIsNullable() {
			return false;
		}

		public Boolean IPRMPTIsKey() {
			return false;
		}

		public Integer IPRMPTLength() {
			return 1;
		}

		public Integer IPRMPTPrecision() {
			return 0;
		}

		public String IPRMPTDefault() {

			return "";

		}

		public String IPRMPTComment() {

			return "";

		}

		public String IPRMPTPattern() {

			return "";

		}

		public String IPRMPTOriginalDbColumnName() {

			return "IPRMPT";

		}

		public String IPRVNT;

		public String getIPRVNT() {
			return this.IPRVNT;
		}

		public Boolean IPRVNTIsNullable() {
			return false;
		}

		public Boolean IPRVNTIsKey() {
			return false;
		}

		public Integer IPRVNTLength() {
			return 1;
		}

		public Integer IPRVNTPrecision() {
			return 0;
		}

		public String IPRVNTDefault() {

			return "";

		}

		public String IPRVNTComment() {

			return "";

		}

		public String IPRVNTPattern() {

			return "";

		}

		public String IPRVNTOriginalDbColumnName() {

			return "IPRVNT";

		}

		public String ITKTTR;

		public String getITKTTR() {
			return this.ITKTTR;
		}

		public Boolean ITKTTRIsNullable() {
			return false;
		}

		public Boolean ITKTTRIsKey() {
			return false;
		}

		public Integer ITKTTRLength() {
			return 1;
		}

		public Integer ITKTTRPrecision() {
			return 0;
		}

		public String ITKTTRDefault() {

			return "";

		}

		public String ITKTTRComment() {

			return "";

		}

		public String ITKTTRPattern() {

			return "";

		}

		public String ITKTTROriginalDbColumnName() {

			return "ITKTTR";

		}

		public String ITKTTA;

		public String getITKTTA() {
			return this.ITKTTA;
		}

		public Boolean ITKTTAIsNullable() {
			return false;
		}

		public Boolean ITKTTAIsKey() {
			return false;
		}

		public Integer ITKTTALength() {
			return 1;
		}

		public Integer ITKTTAPrecision() {
			return 0;
		}

		public String ITKTTADefault() {

			return "";

		}

		public String ITKTTAComment() {

			return "";

		}

		public String ITKTTAPattern() {

			return "";

		}

		public String ITKTTAOriginalDbColumnName() {

			return "ITKTTA";

		}

		public BigDecimal ITKTN;

		public BigDecimal getITKTN() {
			return this.ITKTN;
		}

		public Boolean ITKTNIsNullable() {
			return false;
		}

		public Boolean ITKTNIsKey() {
			return false;
		}

		public Integer ITKTNLength() {
			return 2;
		}

		public Integer ITKTNPrecision() {
			return 0;
		}

		public String ITKTNDefault() {

			return "";

		}

		public String ITKTNComment() {

			return "";

		}

		public String ITKTNPattern() {

			return "";

		}

		public String ITKTNOriginalDbColumnName() {

			return "ITKTN";

		}

		public String ILBLTR;

		public String getILBLTR() {
			return this.ILBLTR;
		}

		public Boolean ILBLTRIsNullable() {
			return false;
		}

		public Boolean ILBLTRIsKey() {
			return false;
		}

		public Integer ILBLTRLength() {
			return 1;
		}

		public Integer ILBLTRPrecision() {
			return 0;
		}

		public String ILBLTRDefault() {

			return "";

		}

		public String ILBLTRComment() {

			return "";

		}

		public String ILBLTRPattern() {

			return "";

		}

		public String ILBLTROriginalDbColumnName() {

			return "ILBLTR";

		}

		public String ILBLTA;

		public String getILBLTA() {
			return this.ILBLTA;
		}

		public Boolean ILBLTAIsNullable() {
			return false;
		}

		public Boolean ILBLTAIsKey() {
			return false;
		}

		public Integer ILBLTALength() {
			return 1;
		}

		public Integer ILBLTAPrecision() {
			return 0;
		}

		public String ILBLTADefault() {

			return "";

		}

		public String ILBLTAComment() {

			return "";

		}

		public String ILBLTAPattern() {

			return "";

		}

		public String ILBLTAOriginalDbColumnName() {

			return "ILBLTA";

		}

		public String IFINLN;

		public String getIFINLN() {
			return this.IFINLN;
		}

		public Boolean IFINLNIsNullable() {
			return false;
		}

		public Boolean IFINLNIsKey() {
			return false;
		}

		public Integer IFINLNLength() {
			return 5;
		}

		public Integer IFINLNPrecision() {
			return 0;
		}

		public String IFINLNDefault() {

			return "";

		}

		public String IFINLNComment() {

			return "";

		}

		public String IFINLNPattern() {

			return "";

		}

		public String IFINLNOriginalDbColumnName() {

			return "IFINLN";

		}

		public String IPROFL;

		public String getIPROFL() {
			return this.IPROFL;
		}

		public Boolean IPROFLIsNullable() {
			return false;
		}

		public Boolean IPROFLIsKey() {
			return false;
		}

		public Integer IPROFLLength() {
			return 5;
		}

		public Integer IPROFLPrecision() {
			return 0;
		}

		public String IPROFLDefault() {

			return "";

		}

		public String IPROFLComment() {

			return "";

		}

		public String IPROFLPattern() {

			return "";

		}

		public String IPROFLOriginalDbColumnName() {

			return "IPROFL";

		}

		public String IMODUL;

		public String getIMODUL() {
			return this.IMODUL;
		}

		public Boolean IMODULIsNullable() {
			return false;
		}

		public Boolean IMODULIsKey() {
			return false;
		}

		public Integer IMODULLength() {
			return 5;
		}

		public Integer IMODULPrecision() {
			return 0;
		}

		public String IMODULDefault() {

			return "";

		}

		public String IMODULComment() {

			return "";

		}

		public String IMODULPattern() {

			return "";

		}

		public String IMODULOriginalDbColumnName() {

			return "IMODUL";

		}

		public String ISTYPE;

		public String getISTYPE() {
			return this.ISTYPE;
		}

		public Boolean ISTYPEIsNullable() {
			return false;
		}

		public Boolean ISTYPEIsKey() {
			return false;
		}

		public Integer ISTYPELength() {
			return 2;
		}

		public Integer ISTYPEPrecision() {
			return 0;
		}

		public String ISTYPEDefault() {

			return "";

		}

		public String ISTYPEComment() {

			return "";

		}

		public String ISTYPEPattern() {

			return "";

		}

		public String ISTYPEOriginalDbColumnName() {

			return "ISTYPE";

		}

		public float ISCOLR;

		public float getISCOLR() {
			return this.ISCOLR;
		}

		public Boolean ISCOLRIsNullable() {
			return false;
		}

		public Boolean ISCOLRIsKey() {
			return false;
		}

		public Integer ISCOLRLength() {
			return 4;
		}

		public Integer ISCOLRPrecision() {
			return 0;
		}

		public String ISCOLRDefault() {

			return "";

		}

		public String ISCOLRComment() {

			return "";

		}

		public String ISCOLRPattern() {

			return "";

		}

		public String ISCOLROriginalDbColumnName() {

			return "ISCOLR";

		}

		public String ISSIZE;

		public String getISSIZE() {
			return this.ISSIZE;
		}

		public Boolean ISSIZEIsNullable() {
			return false;
		}

		public Boolean ISSIZEIsKey() {
			return false;
		}

		public Integer ISSIZELength() {
			return 4;
		}

		public Integer ISSIZEPrecision() {
			return 0;
		}

		public String ISSIZEDefault() {

			return "";

		}

		public String ISSIZEComment() {

			return "";

		}

		public String ISSIZEPattern() {

			return "";

		}

		public String ISSIZEOriginalDbColumnName() {

			return "ISSIZE";

		}

		public String IHAZCD;

		public String getIHAZCD() {
			return this.IHAZCD;
		}

		public Boolean IHAZCDIsNullable() {
			return false;
		}

		public Boolean IHAZCDIsKey() {
			return false;
		}

		public Integer IHAZCDLength() {
			return 2;
		}

		public Integer IHAZCDPrecision() {
			return 0;
		}

		public String IHAZCDDefault() {

			return "";

		}

		public String IHAZCDComment() {

			return "";

		}

		public String IHAZCDPattern() {

			return "";

		}

		public String IHAZCDOriginalDbColumnName() {

			return "IHAZCD";

		}

		public String MCHNUM;

		public String getMCHNUM() {
			return this.MCHNUM;
		}

		public Boolean MCHNUMIsNullable() {
			return false;
		}

		public Boolean MCHNUMIsKey() {
			return false;
		}

		public Integer MCHNUMLength() {
			return 3;
		}

		public Integer MCHNUMPrecision() {
			return 0;
		}

		public String MCHNUMDefault() {

			return "";

		}

		public String MCHNUMComment() {

			return "";

		}

		public String MCHNUMPattern() {

			return "";

		}

		public String MCHNUMOriginalDbColumnName() {

			return "MCHNUM";

		}

		public BigDecimal ISUBST;

		public BigDecimal getISUBST() {
			return this.ISUBST;
		}

		public Boolean ISUBSTIsNullable() {
			return false;
		}

		public Boolean ISUBSTIsKey() {
			return false;
		}

		public Integer ISUBSTLength() {
			return 9;
		}

		public Integer ISUBSTPrecision() {
			return 0;
		}

		public String ISUBSTDefault() {

			return "";

		}

		public String ISUBSTComment() {

			return "";

		}

		public String ISUBSTPattern() {

			return "";

		}

		public String ISUBSTOriginalDbColumnName() {

			return "ISUBST";

		}

		public BigDecimal ICORE;

		public BigDecimal getICORE() {
			return this.ICORE;
		}

		public Boolean ICOREIsNullable() {
			return false;
		}

		public Boolean ICOREIsKey() {
			return false;
		}

		public Integer ICORELength() {
			return 9;
		}

		public Integer ICOREPrecision() {
			return 0;
		}

		public String ICOREDefault() {

			return "";

		}

		public String ICOREComment() {

			return "";

		}

		public String ICOREPattern() {

			return "";

		}

		public String ICOREOriginalDbColumnName() {

			return "ICORE";

		}

		public BigDecimal IREPL;

		public BigDecimal getIREPL() {
			return this.IREPL;
		}

		public Boolean IREPLIsNullable() {
			return false;
		}

		public Boolean IREPLIsKey() {
			return false;
		}

		public Integer IREPLLength() {
			return 9;
		}

		public Integer IREPLPrecision() {
			return 0;
		}

		public String IREPLDefault() {

			return "";

		}

		public String IREPLComment() {

			return "";

		}

		public String IREPLPattern() {

			return "";

		}

		public String IREPLOriginalDbColumnName() {

			return "IREPL";

		}

		public String ISLUM;

		public String getISLUM() {
			return this.ISLUM;
		}

		public Boolean ISLUMIsNullable() {
			return false;
		}

		public Boolean ISLUMIsKey() {
			return false;
		}

		public Integer ISLUMLength() {
			return 3;
		}

		public Integer ISLUMPrecision() {
			return 0;
		}

		public String ISLUMDefault() {

			return "";

		}

		public String ISLUMComment() {

			return "";

		}

		public String ISLUMPattern() {

			return "";

		}

		public String ISLUMOriginalDbColumnName() {

			return "ISLUM";

		}

		public BigDecimal IUMCV2;

		public BigDecimal getIUMCV2() {
			return this.IUMCV2;
		}

		public Boolean IUMCV2IsNullable() {
			return false;
		}

		public Boolean IUMCV2IsKey() {
			return false;
		}

		public Integer IUMCV2Length() {
			return 10;
		}

		public Integer IUMCV2Precision() {
			return 5;
		}

		public String IUMCV2Default() {

			return "";

		}

		public String IUMCV2Comment() {

			return "";

		}

		public String IUMCV2Pattern() {

			return "";

		}

		public String IUMCV2OriginalDbColumnName() {

			return "IUMCV2";

		}

		public String IBYUM;

		public String getIBYUM() {
			return this.IBYUM;
		}

		public Boolean IBYUMIsNullable() {
			return false;
		}

		public Boolean IBYUMIsKey() {
			return false;
		}

		public Integer IBYUMLength() {
			return 3;
		}

		public Integer IBYUMPrecision() {
			return 0;
		}

		public String IBYUMDefault() {

			return "";

		}

		public String IBYUMComment() {

			return "";

		}

		public String IBYUMPattern() {

			return "";

		}

		public String IBYUMOriginalDbColumnName() {

			return "IBYUM";

		}

		public BigDecimal IMINPK;

		public BigDecimal getIMINPK() {
			return this.IMINPK;
		}

		public Boolean IMINPKIsNullable() {
			return false;
		}

		public Boolean IMINPKIsKey() {
			return false;
		}

		public Integer IMINPKLength() {
			return 9;
		}

		public Integer IMINPKPrecision() {
			return 2;
		}

		public String IMINPKDefault() {

			return "";

		}

		public String IMINPKComment() {

			return "";

		}

		public String IMINPKPattern() {

			return "";

		}

		public String IMINPKOriginalDbColumnName() {

			return "IMINPK";

		}

		public BigDecimal ISTDPK;

		public BigDecimal getISTDPK() {
			return this.ISTDPK;
		}

		public Boolean ISTDPKIsNullable() {
			return false;
		}

		public Boolean ISTDPKIsKey() {
			return false;
		}

		public Integer ISTDPKLength() {
			return 9;
		}

		public Integer ISTDPKPrecision() {
			return 2;
		}

		public String ISTDPKDefault() {

			return "";

		}

		public String ISTDPKComment() {

			return "";

		}

		public String ISTDPKPattern() {

			return "";

		}

		public String ISTDPKOriginalDbColumnName() {

			return "ISTDPK";

		}

		public String IHLDOR;

		public String getIHLDOR() {
			return this.IHLDOR;
		}

		public Boolean IHLDORIsNullable() {
			return false;
		}

		public Boolean IHLDORIsKey() {
			return false;
		}

		public Integer IHLDORLength() {
			return 1;
		}

		public Integer IHLDORPrecision() {
			return 0;
		}

		public String IHLDORDefault() {

			return "";

		}

		public String IHLDORComment() {

			return "";

		}

		public String IHLDORPattern() {

			return "";

		}

		public String IHLDOROriginalDbColumnName() {

			return "IHLDOR";

		}

		public BigDecimal IMOQTY;

		public BigDecimal getIMOQTY() {
			return this.IMOQTY;
		}

		public Boolean IMOQTYIsNullable() {
			return false;
		}

		public Boolean IMOQTYIsKey() {
			return false;
		}

		public Integer IMOQTYLength() {
			return 7;
		}

		public Integer IMOQTYPrecision() {
			return 0;
		}

		public String IMOQTYDefault() {

			return "";

		}

		public String IMOQTYComment() {

			return "";

		}

		public String IMOQTYPattern() {

			return "";

		}

		public String IMOQTYOriginalDbColumnName() {

			return "IMOQTY";

		}

		public BigDecimal IMNSTK;

		public BigDecimal getIMNSTK() {
			return this.IMNSTK;
		}

		public Boolean IMNSTKIsNullable() {
			return false;
		}

		public Boolean IMNSTKIsKey() {
			return false;
		}

		public Integer IMNSTKLength() {
			return 7;
		}

		public Integer IMNSTKPrecision() {
			return 0;
		}

		public String IMNSTKDefault() {

			return "";

		}

		public String IMNSTKComment() {

			return "";

		}

		public String IMNSTKPattern() {

			return "";

		}

		public String IMNSTKOriginalDbColumnName() {

			return "IMNSTK";

		}

		public BigDecimal IMXSTK;

		public BigDecimal getIMXSTK() {
			return this.IMXSTK;
		}

		public Boolean IMXSTKIsNullable() {
			return false;
		}

		public Boolean IMXSTKIsKey() {
			return false;
		}

		public Integer IMXSTKLength() {
			return 7;
		}

		public Integer IMXSTKPrecision() {
			return 0;
		}

		public String IMXSTKDefault() {

			return "";

		}

		public String IMXSTKComment() {

			return "";

		}

		public String IMXSTKPattern() {

			return "";

		}

		public String IMXSTKOriginalDbColumnName() {

			return "IMXSTK";

		}

		public BigDecimal IMDSTK;

		public BigDecimal getIMDSTK() {
			return this.IMDSTK;
		}

		public Boolean IMDSTKIsNullable() {
			return false;
		}

		public Boolean IMDSTKIsKey() {
			return false;
		}

		public Integer IMDSTKLength() {
			return 7;
		}

		public Integer IMDSTKPrecision() {
			return 0;
		}

		public String IMDSTKDefault() {

			return "";

		}

		public String IMDSTKComment() {

			return "";

		}

		public String IMDSTKPattern() {

			return "";

		}

		public String IMDSTKOriginalDbColumnName() {

			return "IMDSTK";

		}

		public BigDecimal IDSPLY;

		public BigDecimal getIDSPLY() {
			return this.IDSPLY;
		}

		public Boolean IDSPLYIsNullable() {
			return false;
		}

		public Boolean IDSPLYIsKey() {
			return false;
		}

		public Integer IDSPLYLength() {
			return 7;
		}

		public Integer IDSPLYPrecision() {
			return 0;
		}

		public String IDSPLYDefault() {

			return "";

		}

		public String IDSPLYComment() {

			return "";

		}

		public String IDSPLYPattern() {

			return "";

		}

		public String IDSPLYOriginalDbColumnName() {

			return "IDSPLY";

		}

		public BigDecimal IOMULT;

		public BigDecimal getIOMULT() {
			return this.IOMULT;
		}

		public Boolean IOMULTIsNullable() {
			return false;
		}

		public Boolean IOMULTIsKey() {
			return false;
		}

		public Integer IOMULTLength() {
			return 7;
		}

		public Integer IOMULTPrecision() {
			return 0;
		}

		public String IOMULTDefault() {

			return "";

		}

		public String IOMULTComment() {

			return "";

		}

		public String IOMULTPattern() {

			return "";

		}

		public String IOMULTOriginalDbColumnName() {

			return "IOMULT";

		}

		public String IRPLCD;

		public String getIRPLCD() {
			return this.IRPLCD;
		}

		public Boolean IRPLCDIsNullable() {
			return false;
		}

		public Boolean IRPLCDIsKey() {
			return false;
		}

		public Integer IRPLCDLength() {
			return 1;
		}

		public Integer IRPLCDPrecision() {
			return 0;
		}

		public String IRPLCDDefault() {

			return "";

		}

		public String IRPLCDComment() {

			return "";

		}

		public String IRPLCDPattern() {

			return "";

		}

		public String IRPLCDOriginalDbColumnName() {

			return "IRPLCD";

		}

		public BigDecimal IMFPRC;

		public BigDecimal getIMFPRC() {
			return this.IMFPRC;
		}

		public Boolean IMFPRCIsNullable() {
			return false;
		}

		public Boolean IMFPRCIsKey() {
			return false;
		}

		public Integer IMFPRCLength() {
			return 9;
		}

		public Integer IMFPRCPrecision() {
			return 2;
		}

		public String IMFPRCDefault() {

			return "";

		}

		public String IMFPRCComment() {

			return "";

		}

		public String IMFPRCPattern() {

			return "";

		}

		public String IMFPRCOriginalDbColumnName() {

			return "IMFPRC";

		}

		public BigDecimal IWGHT;

		public BigDecimal getIWGHT() {
			return this.IWGHT;
		}

		public Boolean IWGHTIsNullable() {
			return false;
		}

		public Boolean IWGHTIsKey() {
			return false;
		}

		public Integer IWGHTLength() {
			return 7;
		}

		public Integer IWGHTPrecision() {
			return 3;
		}

		public String IWGHTDefault() {

			return "";

		}

		public String IWGHTComment() {

			return "";

		}

		public String IWGHTPattern() {

			return "";

		}

		public String IWGHTOriginalDbColumnName() {

			return "IWGHT";

		}

		public BigDecimal ICUBE;

		public BigDecimal getICUBE() {
			return this.ICUBE;
		}

		public Boolean ICUBEIsNullable() {
			return false;
		}

		public Boolean ICUBEIsKey() {
			return false;
		}

		public Integer ICUBELength() {
			return 9;
		}

		public Integer ICUBEPrecision() {
			return 3;
		}

		public String ICUBEDefault() {

			return "";

		}

		public String ICUBEComment() {

			return "";

		}

		public String ICUBEPattern() {

			return "";

		}

		public String ICUBEOriginalDbColumnName() {

			return "ICUBE";

		}

		public BigDecimal IDLGTH;

		public BigDecimal getIDLGTH() {
			return this.IDLGTH;
		}

		public Boolean IDLGTHIsNullable() {
			return false;
		}

		public Boolean IDLGTHIsKey() {
			return false;
		}

		public Integer IDLGTHLength() {
			return 5;
		}

		public Integer IDLGTHPrecision() {
			return 1;
		}

		public String IDLGTHDefault() {

			return "";

		}

		public String IDLGTHComment() {

			return "";

		}

		public String IDLGTHPattern() {

			return "";

		}

		public String IDLGTHOriginalDbColumnName() {

			return "IDLGTH";

		}

		public BigDecimal IDWDTH;

		public BigDecimal getIDWDTH() {
			return this.IDWDTH;
		}

		public Boolean IDWDTHIsNullable() {
			return false;
		}

		public Boolean IDWDTHIsKey() {
			return false;
		}

		public Integer IDWDTHLength() {
			return 5;
		}

		public Integer IDWDTHPrecision() {
			return 1;
		}

		public String IDWDTHDefault() {

			return "";

		}

		public String IDWDTHComment() {

			return "";

		}

		public String IDWDTHPattern() {

			return "";

		}

		public String IDWDTHOriginalDbColumnName() {

			return "IDWDTH";

		}

		public BigDecimal IDHGHT;

		public BigDecimal getIDHGHT() {
			return this.IDHGHT;
		}

		public Boolean IDHGHTIsNullable() {
			return false;
		}

		public Boolean IDHGHTIsKey() {
			return false;
		}

		public Integer IDHGHTLength() {
			return 5;
		}

		public Integer IDHGHTPrecision() {
			return 1;
		}

		public String IDHGHTDefault() {

			return "";

		}

		public String IDHGHTComment() {

			return "";

		}

		public String IDHGHTPattern() {

			return "";

		}

		public String IDHGHTOriginalDbColumnName() {

			return "IDHGHT";

		}

		public BigDecimal IMDATE;

		public BigDecimal getIMDATE() {
			return this.IMDATE;
		}

		public Boolean IMDATEIsNullable() {
			return false;
		}

		public Boolean IMDATEIsKey() {
			return false;
		}

		public Integer IMDATELength() {
			return 6;
		}

		public Integer IMDATEPrecision() {
			return 0;
		}

		public String IMDATEDefault() {

			return "";

		}

		public String IMDATEComment() {

			return "";

		}

		public String IMDATEPattern() {

			return "";

		}

		public String IMDATEOriginalDbColumnName() {

			return "IMDATE";

		}

		public BigDecimal IMCENT;

		public BigDecimal getIMCENT() {
			return this.IMCENT;
		}

		public Boolean IMCENTIsNullable() {
			return false;
		}

		public Boolean IMCENTIsKey() {
			return false;
		}

		public Integer IMCENTLength() {
			return 1;
		}

		public Integer IMCENTPrecision() {
			return 0;
		}

		public String IMCENTDefault() {

			return "";

		}

		public String IMCENTComment() {

			return "";

		}

		public String IMCENTPattern() {

			return "";

		}

		public String IMCENTOriginalDbColumnName() {

			return "IMCENT";

		}

		public BigDecimal IVPLTI;

		public BigDecimal getIVPLTI() {
			return this.IVPLTI;
		}

		public Boolean IVPLTIIsNullable() {
			return false;
		}

		public Boolean IVPLTIIsKey() {
			return false;
		}

		public Integer IVPLTILength() {
			return 3;
		}

		public Integer IVPLTIPrecision() {
			return 0;
		}

		public String IVPLTIDefault() {

			return "";

		}

		public String IVPLTIComment() {

			return "";

		}

		public String IVPLTIPattern() {

			return "";

		}

		public String IVPLTIOriginalDbColumnName() {

			return "IVPLTI";

		}

		public BigDecimal IVPLHI;

		public BigDecimal getIVPLHI() {
			return this.IVPLHI;
		}

		public Boolean IVPLHIIsNullable() {
			return false;
		}

		public Boolean IVPLHIIsKey() {
			return false;
		}

		public Integer IVPLHILength() {
			return 3;
		}

		public Integer IVPLHIPrecision() {
			return 0;
		}

		public String IVPLHIDefault() {

			return "";

		}

		public String IVPLHIComment() {

			return "";

		}

		public String IVPLHIPattern() {

			return "";

		}

		public String IVPLHIOriginalDbColumnName() {

			return "IVPLHI";

		}

		public float SHPNUM;

		public float getSHPNUM() {
			return this.SHPNUM;
		}

		public Boolean SHPNUMIsNullable() {
			return false;
		}

		public Boolean SHPNUMIsKey() {
			return false;
		}

		public Integer SHPNUMLength() {
			return 2;
		}

		public Integer SHPNUMPrecision() {
			return 0;
		}

		public String SHPNUMDefault() {

			return "";

		}

		public String SHPNUMComment() {

			return "";

		}

		public String SHPNUMPattern() {

			return "";

		}

		public String SHPNUMOriginalDbColumnName() {

			return "SHPNUM";

		}

		public String IDISTM;

		public String getIDISTM() {
			return this.IDISTM;
		}

		public Boolean IDISTMIsNullable() {
			return false;
		}

		public Boolean IDISTMIsKey() {
			return false;
		}

		public Integer IDISTMLength() {
			return 1;
		}

		public Integer IDISTMPrecision() {
			return 0;
		}

		public String IDISTMDefault() {

			return "";

		}

		public String IDISTMComment() {

			return "";

		}

		public String IDISTMPattern() {

			return "";

		}

		public String IDISTMOriginalDbColumnName() {

			return "IDISTM";

		}

		public String IHLDWO;

		public String getIHLDWO() {
			return this.IHLDWO;
		}

		public Boolean IHLDWOIsNullable() {
			return false;
		}

		public Boolean IHLDWOIsKey() {
			return false;
		}

		public Integer IHLDWOLength() {
			return 1;
		}

		public Integer IHLDWOPrecision() {
			return 0;
		}

		public String IHLDWODefault() {

			return "";

		}

		public String IHLDWOComment() {

			return "";

		}

		public String IHLDWOPattern() {

			return "";

		}

		public String IHLDWOOriginalDbColumnName() {

			return "IHLDWO";

		}

		public float IIGNUM;

		public float getIIGNUM() {
			return this.IIGNUM;
		}

		public Boolean IIGNUMIsNullable() {
			return false;
		}

		public Boolean IIGNUMIsKey() {
			return false;
		}

		public Integer IIGNUMLength() {
			return 3;
		}

		public Integer IIGNUMPrecision() {
			return 0;
		}

		public String IIGNUMDefault() {

			return "";

		}

		public String IIGNUMComment() {

			return "";

		}

		public String IIGNUMPattern() {

			return "";

		}

		public String IIGNUMOriginalDbColumnName() {

			return "IIGNUM";

		}

		public String ISDIM;

		public String getISDIM() {
			return this.ISDIM;
		}

		public Boolean ISDIMIsNullable() {
			return false;
		}

		public Boolean ISDIMIsKey() {
			return false;
		}

		public Integer ISDIMLength() {
			return 4;
		}

		public Integer ISDIMPrecision() {
			return 0;
		}

		public String ISDIMDefault() {

			return "";

		}

		public String ISDIMComment() {

			return "";

		}

		public String ISDIMPattern() {

			return "";

		}

		public String ISDIMOriginalDbColumnName() {

			return "ISDIM";

		}

		public String IVATCD;

		public String getIVATCD() {
			return this.IVATCD;
		}

		public Boolean IVATCDIsNullable() {
			return false;
		}

		public Boolean IVATCDIsKey() {
			return false;
		}

		public Integer IVATCDLength() {
			return 2;
		}

		public Integer IVATCDPrecision() {
			return 0;
		}

		public String IVATCDDefault() {

			return "";

		}

		public String IVATCDComment() {

			return "";

		}

		public String IVATCDPattern() {

			return "";

		}

		public String IVATCDOriginalDbColumnName() {

			return "IVATCD";

		}

		public float IPLAN;

		public float getIPLAN() {
			return this.IPLAN;
		}

		public Boolean IPLANIsNullable() {
			return false;
		}

		public Boolean IPLANIsKey() {
			return false;
		}

		public Integer IPLANLength() {
			return 5;
		}

		public Integer IPLANPrecision() {
			return 0;
		}

		public String IPLANDefault() {

			return "";

		}

		public String IPLANComment() {

			return "";

		}

		public String IPLANPattern() {

			return "";

		}

		public String IPLANOriginalDbColumnName() {

			return "IPLAN";

		}

		public String IVLRK1;

		public String getIVLRK1() {
			return this.IVLRK1;
		}

		public Boolean IVLRK1IsNullable() {
			return false;
		}

		public Boolean IVLRK1IsKey() {
			return false;
		}

		public Integer IVLRK1Length() {
			return 1;
		}

		public Integer IVLRK1Precision() {
			return 0;
		}

		public String IVLRK1Default() {

			return "";

		}

		public String IVLRK1Comment() {

			return "";

		}

		public String IVLRK1Pattern() {

			return "";

		}

		public String IVLRK1OriginalDbColumnName() {

			return "IVLRK1";

		}

		public String IVLRK2;

		public String getIVLRK2() {
			return this.IVLRK2;
		}

		public Boolean IVLRK2IsNullable() {
			return false;
		}

		public Boolean IVLRK2IsKey() {
			return false;
		}

		public Integer IVLRK2Length() {
			return 1;
		}

		public Integer IVLRK2Precision() {
			return 0;
		}

		public String IVLRK2Default() {

			return "";

		}

		public String IVLRK2Comment() {

			return "";

		}

		public String IVLRK2Pattern() {

			return "";

		}

		public String IVLRK2OriginalDbColumnName() {

			return "IVLRK2";

		}

		public String IVLRK3;

		public String getIVLRK3() {
			return this.IVLRK3;
		}

		public Boolean IVLRK3IsNullable() {
			return false;
		}

		public Boolean IVLRK3IsKey() {
			return false;
		}

		public Integer IVLRK3Length() {
			return 1;
		}

		public Integer IVLRK3Precision() {
			return 0;
		}

		public String IVLRK3Default() {

			return "";

		}

		public String IVLRK3Comment() {

			return "";

		}

		public String IVLRK3Pattern() {

			return "";

		}

		public String IVLRK3OriginalDbColumnName() {

			return "IVLRK3";

		}

		public String IVLRK4;

		public String getIVLRK4() {
			return this.IVLRK4;
		}

		public Boolean IVLRK4IsNullable() {
			return false;
		}

		public Boolean IVLRK4IsKey() {
			return false;
		}

		public Integer IVLRK4Length() {
			return 1;
		}

		public Integer IVLRK4Precision() {
			return 0;
		}

		public String IVLRK4Default() {

			return "";

		}

		public String IVLRK4Comment() {

			return "";

		}

		public String IVLRK4Pattern() {

			return "";

		}

		public String IVLRK4OriginalDbColumnName() {

			return "IVLRK4";

		}

		public BigDecimal IRPLCN;

		public BigDecimal getIRPLCN() {
			return this.IRPLCN;
		}

		public Boolean IRPLCNIsNullable() {
			return false;
		}

		public Boolean IRPLCNIsKey() {
			return false;
		}

		public Integer IRPLCNLength() {
			return 1;
		}

		public Integer IRPLCNPrecision() {
			return 0;
		}

		public String IRPLCNDefault() {

			return "";

		}

		public String IRPLCNComment() {

			return "";

		}

		public String IRPLCNPattern() {

			return "";

		}

		public String IRPLCNOriginalDbColumnName() {

			return "IRPLCN";

		}

		public BigDecimal IRPLDT;

		public BigDecimal getIRPLDT() {
			return this.IRPLDT;
		}

		public Boolean IRPLDTIsNullable() {
			return false;
		}

		public Boolean IRPLDTIsKey() {
			return false;
		}

		public Integer IRPLDTLength() {
			return 6;
		}

		public Integer IRPLDTPrecision() {
			return 0;
		}

		public String IRPLDTDefault() {

			return "";

		}

		public String IRPLDTComment() {

			return "";

		}

		public String IRPLDTPattern() {

			return "";

		}

		public String IRPLDTOriginalDbColumnName() {

			return "IRPLDT";

		}

		public String ISEASN;

		public String getISEASN() {
			return this.ISEASN;
		}

		public Boolean ISEASNIsNullable() {
			return false;
		}

		public Boolean ISEASNIsKey() {
			return false;
		}

		public Integer ISEASNLength() {
			return 3;
		}

		public Integer ISEASNPrecision() {
			return 0;
		}

		public String ISEASNDefault() {

			return "";

		}

		public String ISEASNComment() {

			return "";

		}

		public String ISEASNPattern() {

			return "";

		}

		public String ISEASNOriginalDbColumnName() {

			return "ISEASN";

		}

		public BigDecimal IDEADC;

		public BigDecimal getIDEADC() {
			return this.IDEADC;
		}

		public Boolean IDEADCIsNullable() {
			return false;
		}

		public Boolean IDEADCIsKey() {
			return false;
		}

		public Integer IDEADCLength() {
			return 1;
		}

		public Integer IDEADCPrecision() {
			return 0;
		}

		public String IDEADCDefault() {

			return "";

		}

		public String IDEADCComment() {

			return "";

		}

		public String IDEADCPattern() {

			return "";

		}

		public String IDEADCOriginalDbColumnName() {

			return "IDEADC";

		}

		public BigDecimal IDEADD;

		public BigDecimal getIDEADD() {
			return this.IDEADD;
		}

		public Boolean IDEADDIsNullable() {
			return false;
		}

		public Boolean IDEADDIsKey() {
			return false;
		}

		public Integer IDEADDLength() {
			return 6;
		}

		public Integer IDEADDPrecision() {
			return 0;
		}

		public String IDEADDDefault() {

			return "";

		}

		public String IDEADDComment() {

			return "";

		}

		public String IDEADDPattern() {

			return "";

		}

		public String IDEADDOriginalDbColumnName() {

			return "IDEADD";

		}

		public BigDecimal INLRTL;

		public BigDecimal getINLRTL() {
			return this.INLRTL;
		}

		public Boolean INLRTLIsNullable() {
			return false;
		}

		public Boolean INLRTLIsKey() {
			return false;
		}

		public Integer INLRTLLength() {
			return 9;
		}

		public Integer INLRTLPrecision() {
			return 2;
		}

		public String INLRTLDefault() {

			return "";

		}

		public String INLRTLComment() {

			return "";

		}

		public String INLRTLPattern() {

			return "";

		}

		public String INLRTLOriginalDbColumnName() {

			return "INLRTL";

		}

		public String IHANDL;

		public String getIHANDL() {
			return this.IHANDL;
		}

		public Boolean IHANDLIsNullable() {
			return false;
		}

		public Boolean IHANDLIsKey() {
			return false;
		}

		public Integer IHANDLLength() {
			return 1;
		}

		public Integer IHANDLPrecision() {
			return 0;
		}

		public String IHANDLDefault() {

			return "";

		}

		public String IHANDLComment() {

			return "";

		}

		public String IHANDLPattern() {

			return "";

		}

		public String IHANDLOriginalDbColumnName() {

			return "IHANDL";

		}

		public String IATRB1;

		public String getIATRB1() {
			return this.IATRB1;
		}

		public Boolean IATRB1IsNullable() {
			return false;
		}

		public Boolean IATRB1IsKey() {
			return false;
		}

		public Integer IATRB1Length() {
			return 2;
		}

		public Integer IATRB1Precision() {
			return 0;
		}

		public String IATRB1Default() {

			return "";

		}

		public String IATRB1Comment() {

			return "";

		}

		public String IATRB1Pattern() {

			return "";

		}

		public String IATRB1OriginalDbColumnName() {

			return "IATRB1";

		}

		public String IATRB2;

		public String getIATRB2() {
			return this.IATRB2;
		}

		public Boolean IATRB2IsNullable() {
			return false;
		}

		public Boolean IATRB2IsKey() {
			return false;
		}

		public Integer IATRB2Length() {
			return 2;
		}

		public Integer IATRB2Precision() {
			return 0;
		}

		public String IATRB2Default() {

			return "";

		}

		public String IATRB2Comment() {

			return "";

		}

		public String IATRB2Pattern() {

			return "";

		}

		public String IATRB2OriginalDbColumnName() {

			return "IATRB2";

		}

		public String IATRB3;

		public String getIATRB3() {
			return this.IATRB3;
		}

		public Boolean IATRB3IsNullable() {
			return false;
		}

		public Boolean IATRB3IsKey() {
			return false;
		}

		public Integer IATRB3Length() {
			return 2;
		}

		public Integer IATRB3Precision() {
			return 0;
		}

		public String IATRB3Default() {

			return "";

		}

		public String IATRB3Comment() {

			return "";

		}

		public String IATRB3Pattern() {

			return "";

		}

		public String IATRB3OriginalDbColumnName() {

			return "IATRB3";

		}

		public String IATRB4;

		public String getIATRB4() {
			return this.IATRB4;
		}

		public Boolean IATRB4IsNullable() {
			return false;
		}

		public Boolean IATRB4IsKey() {
			return false;
		}

		public Integer IATRB4Length() {
			return 2;
		}

		public Integer IATRB4Precision() {
			return 0;
		}

		public String IATRB4Default() {

			return "";

		}

		public String IATRB4Comment() {

			return "";

		}

		public String IATRB4Pattern() {

			return "";

		}

		public String IATRB4OriginalDbColumnName() {

			return "IATRB4";

		}

		public String IATRB5;

		public String getIATRB5() {
			return this.IATRB5;
		}

		public Boolean IATRB5IsNullable() {
			return false;
		}

		public Boolean IATRB5IsKey() {
			return false;
		}

		public Integer IATRB5Length() {
			return 2;
		}

		public Integer IATRB5Precision() {
			return 0;
		}

		public String IATRB5Default() {

			return "";

		}

		public String IATRB5Comment() {

			return "";

		}

		public String IATRB5Pattern() {

			return "";

		}

		public String IATRB5OriginalDbColumnName() {

			return "IATRB5";

		}

		public String IPRCCH;

		public String getIPRCCH() {
			return this.IPRCCH;
		}

		public Boolean IPRCCHIsNullable() {
			return false;
		}

		public Boolean IPRCCHIsKey() {
			return false;
		}

		public Integer IPRCCHLength() {
			return 1;
		}

		public Integer IPRCCHPrecision() {
			return 0;
		}

		public String IPRCCHDefault() {

			return "";

		}

		public String IPRCCHComment() {

			return "";

		}

		public String IPRCCHPattern() {

			return "";

		}

		public String IPRCCHOriginalDbColumnName() {

			return "IPRCCH";

		}

		public String IPRCZN;

		public String getIPRCZN() {
			return this.IPRCZN;
		}

		public Boolean IPRCZNIsNullable() {
			return false;
		}

		public Boolean IPRCZNIsKey() {
			return false;
		}

		public Integer IPRCZNLength() {
			return 1;
		}

		public Integer IPRCZNPrecision() {
			return 0;
		}

		public String IPRCZNDefault() {

			return "";

		}

		public String IPRCZNComment() {

			return "";

		}

		public String IPRCZNPattern() {

			return "";

		}

		public String IPRCZNOriginalDbColumnName() {

			return "IPRCZN";

		}

		public String IPRCST;

		public String getIPRCST() {
			return this.IPRCST;
		}

		public Boolean IPRCSTIsNullable() {
			return false;
		}

		public Boolean IPRCSTIsKey() {
			return false;
		}

		public Integer IPRCSTLength() {
			return 1;
		}

		public Integer IPRCSTPrecision() {
			return 0;
		}

		public String IPRCSTDefault() {

			return "";

		}

		public String IPRCSTComment() {

			return "";

		}

		public String IPRCSTPattern() {

			return "";

		}

		public String IPRCSTOriginalDbColumnName() {

			return "IPRCST";

		}

		public float IASNUM;

		public float getIASNUM() {
			return this.IASNUM;
		}

		public Boolean IASNUMIsNullable() {
			return false;
		}

		public Boolean IASNUMIsKey() {
			return false;
		}

		public Integer IASNUMLength() {
			return 6;
		}

		public Integer IASNUMPrecision() {
			return 0;
		}

		public String IASNUMDefault() {

			return "";

		}

		public String IASNUMComment() {

			return "";

		}

		public String IASNUMPattern() {

			return "";

		}

		public String IASNUMOriginalDbColumnName() {

			return "IASNUM";

		}

		public String ICORGP;

		public String getICORGP() {
			return this.ICORGP;
		}

		public Boolean ICORGPIsNullable() {
			return false;
		}

		public Boolean ICORGPIsKey() {
			return false;
		}

		public Integer ICORGPLength() {
			return 5;
		}

		public Integer ICORGPPrecision() {
			return 0;
		}

		public String ICORGPDefault() {

			return "";

		}

		public String ICORGPComment() {

			return "";

		}

		public String ICORGPPattern() {

			return "";

		}

		public String ICORGPOriginalDbColumnName() {

			return "ICORGP";

		}

		public BigDecimal ILEAD;

		public BigDecimal getILEAD() {
			return this.ILEAD;
		}

		public Boolean ILEADIsNullable() {
			return false;
		}

		public Boolean ILEADIsKey() {
			return false;
		}

		public Integer ILEADLength() {
			return 3;
		}

		public Integer ILEADPrecision() {
			return 0;
		}

		public String ILEADDefault() {

			return "";

		}

		public String ILEADComment() {

			return "";

		}

		public String ILEADPattern() {

			return "";

		}

		public String ILEADOriginalDbColumnName() {

			return "ILEAD";

		}

		public String IHZCOD;

		public String getIHZCOD() {
			return this.IHZCOD;
		}

		public Boolean IHZCODIsNullable() {
			return false;
		}

		public Boolean IHZCODIsKey() {
			return false;
		}

		public Integer IHZCODLength() {
			return 4;
		}

		public Integer IHZCODPrecision() {
			return 0;
		}

		public String IHZCODDefault() {

			return "";

		}

		public String IHZCODComment() {

			return "";

		}

		public String IHZCODPattern() {

			return "";

		}

		public String IHZCODOriginalDbColumnName() {

			return "IHZCOD";

		}

		public String IFRACT;

		public String getIFRACT() {
			return this.IFRACT;
		}

		public Boolean IFRACTIsNullable() {
			return false;
		}

		public Boolean IFRACTIsKey() {
			return false;
		}

		public Integer IFRACTLength() {
			return 1;
		}

		public Integer IFRACTPrecision() {
			return 0;
		}

		public String IFRACTDefault() {

			return "";

		}

		public String IFRACTComment() {

			return "";

		}

		public String IFRACTPattern() {

			return "";

		}

		public String IFRACTOriginalDbColumnName() {

			return "IFRACT";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.INUMBR = (BigDecimal) dis.readObject();

					this.ICHECK = dis.readFloat();

					this.IDESCR = readString(dis);

					this.IDSCCD = readString(dis);

					this.ISORT = readString(dis);

					this.ISTYLN = readString(dis);

					this.ASNUM = dis.readFloat();

					this.IVNDPN = readString(dis);

					this.IMFGR = dis.readFloat();

					this.IMFGNO = readString(dis);

					this.IDEPT = dis.readFloat();

					this.ISDEPT = dis.readFloat();

					this.ICLAS = dis.readFloat();

					this.ISCLAS = dis.readFloat();

					this.BYRNUM = readString(dis);

					this.IASPAC = (BigDecimal) dis.readObject();

					this.IADVYN = readString(dis);

					this.IBUYCD = readString(dis);

					this.ISET = readString(dis);

					this.IWARNT = readString(dis);

					this.IPRMPT = readString(dis);

					this.IPRVNT = readString(dis);

					this.ITKTTR = readString(dis);

					this.ITKTTA = readString(dis);

					this.ITKTN = (BigDecimal) dis.readObject();

					this.ILBLTR = readString(dis);

					this.ILBLTA = readString(dis);

					this.IFINLN = readString(dis);

					this.IPROFL = readString(dis);

					this.IMODUL = readString(dis);

					this.ISTYPE = readString(dis);

					this.ISCOLR = dis.readFloat();

					this.ISSIZE = readString(dis);

					this.IHAZCD = readString(dis);

					this.MCHNUM = readString(dis);

					this.ISUBST = (BigDecimal) dis.readObject();

					this.ICORE = (BigDecimal) dis.readObject();

					this.IREPL = (BigDecimal) dis.readObject();

					this.ISLUM = readString(dis);

					this.IUMCV2 = (BigDecimal) dis.readObject();

					this.IBYUM = readString(dis);

					this.IMINPK = (BigDecimal) dis.readObject();

					this.ISTDPK = (BigDecimal) dis.readObject();

					this.IHLDOR = readString(dis);

					this.IMOQTY = (BigDecimal) dis.readObject();

					this.IMNSTK = (BigDecimal) dis.readObject();

					this.IMXSTK = (BigDecimal) dis.readObject();

					this.IMDSTK = (BigDecimal) dis.readObject();

					this.IDSPLY = (BigDecimal) dis.readObject();

					this.IOMULT = (BigDecimal) dis.readObject();

					this.IRPLCD = readString(dis);

					this.IMFPRC = (BigDecimal) dis.readObject();

					this.IWGHT = (BigDecimal) dis.readObject();

					this.ICUBE = (BigDecimal) dis.readObject();

					this.IDLGTH = (BigDecimal) dis.readObject();

					this.IDWDTH = (BigDecimal) dis.readObject();

					this.IDHGHT = (BigDecimal) dis.readObject();

					this.IMDATE = (BigDecimal) dis.readObject();

					this.IMCENT = (BigDecimal) dis.readObject();

					this.IVPLTI = (BigDecimal) dis.readObject();

					this.IVPLHI = (BigDecimal) dis.readObject();

					this.SHPNUM = dis.readFloat();

					this.IDISTM = readString(dis);

					this.IHLDWO = readString(dis);

					this.IIGNUM = dis.readFloat();

					this.ISDIM = readString(dis);

					this.IVATCD = readString(dis);

					this.IPLAN = dis.readFloat();

					this.IVLRK1 = readString(dis);

					this.IVLRK2 = readString(dis);

					this.IVLRK3 = readString(dis);

					this.IVLRK4 = readString(dis);

					this.IRPLCN = (BigDecimal) dis.readObject();

					this.IRPLDT = (BigDecimal) dis.readObject();

					this.ISEASN = readString(dis);

					this.IDEADC = (BigDecimal) dis.readObject();

					this.IDEADD = (BigDecimal) dis.readObject();

					this.INLRTL = (BigDecimal) dis.readObject();

					this.IHANDL = readString(dis);

					this.IATRB1 = readString(dis);

					this.IATRB2 = readString(dis);

					this.IATRB3 = readString(dis);

					this.IATRB4 = readString(dis);

					this.IATRB5 = readString(dis);

					this.IPRCCH = readString(dis);

					this.IPRCZN = readString(dis);

					this.IPRCST = readString(dis);

					this.IASNUM = dis.readFloat();

					this.ICORGP = readString(dis);

					this.ILEAD = (BigDecimal) dis.readObject();

					this.IHZCOD = readString(dis);

					this.IFRACT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.INUMBR = (BigDecimal) dis.readObject();

					this.ICHECK = dis.readFloat();

					this.IDESCR = readString(dis);

					this.IDSCCD = readString(dis);

					this.ISORT = readString(dis);

					this.ISTYLN = readString(dis);

					this.ASNUM = dis.readFloat();

					this.IVNDPN = readString(dis);

					this.IMFGR = dis.readFloat();

					this.IMFGNO = readString(dis);

					this.IDEPT = dis.readFloat();

					this.ISDEPT = dis.readFloat();

					this.ICLAS = dis.readFloat();

					this.ISCLAS = dis.readFloat();

					this.BYRNUM = readString(dis);

					this.IASPAC = (BigDecimal) dis.readObject();

					this.IADVYN = readString(dis);

					this.IBUYCD = readString(dis);

					this.ISET = readString(dis);

					this.IWARNT = readString(dis);

					this.IPRMPT = readString(dis);

					this.IPRVNT = readString(dis);

					this.ITKTTR = readString(dis);

					this.ITKTTA = readString(dis);

					this.ITKTN = (BigDecimal) dis.readObject();

					this.ILBLTR = readString(dis);

					this.ILBLTA = readString(dis);

					this.IFINLN = readString(dis);

					this.IPROFL = readString(dis);

					this.IMODUL = readString(dis);

					this.ISTYPE = readString(dis);

					this.ISCOLR = dis.readFloat();

					this.ISSIZE = readString(dis);

					this.IHAZCD = readString(dis);

					this.MCHNUM = readString(dis);

					this.ISUBST = (BigDecimal) dis.readObject();

					this.ICORE = (BigDecimal) dis.readObject();

					this.IREPL = (BigDecimal) dis.readObject();

					this.ISLUM = readString(dis);

					this.IUMCV2 = (BigDecimal) dis.readObject();

					this.IBYUM = readString(dis);

					this.IMINPK = (BigDecimal) dis.readObject();

					this.ISTDPK = (BigDecimal) dis.readObject();

					this.IHLDOR = readString(dis);

					this.IMOQTY = (BigDecimal) dis.readObject();

					this.IMNSTK = (BigDecimal) dis.readObject();

					this.IMXSTK = (BigDecimal) dis.readObject();

					this.IMDSTK = (BigDecimal) dis.readObject();

					this.IDSPLY = (BigDecimal) dis.readObject();

					this.IOMULT = (BigDecimal) dis.readObject();

					this.IRPLCD = readString(dis);

					this.IMFPRC = (BigDecimal) dis.readObject();

					this.IWGHT = (BigDecimal) dis.readObject();

					this.ICUBE = (BigDecimal) dis.readObject();

					this.IDLGTH = (BigDecimal) dis.readObject();

					this.IDWDTH = (BigDecimal) dis.readObject();

					this.IDHGHT = (BigDecimal) dis.readObject();

					this.IMDATE = (BigDecimal) dis.readObject();

					this.IMCENT = (BigDecimal) dis.readObject();

					this.IVPLTI = (BigDecimal) dis.readObject();

					this.IVPLHI = (BigDecimal) dis.readObject();

					this.SHPNUM = dis.readFloat();

					this.IDISTM = readString(dis);

					this.IHLDWO = readString(dis);

					this.IIGNUM = dis.readFloat();

					this.ISDIM = readString(dis);

					this.IVATCD = readString(dis);

					this.IPLAN = dis.readFloat();

					this.IVLRK1 = readString(dis);

					this.IVLRK2 = readString(dis);

					this.IVLRK3 = readString(dis);

					this.IVLRK4 = readString(dis);

					this.IRPLCN = (BigDecimal) dis.readObject();

					this.IRPLDT = (BigDecimal) dis.readObject();

					this.ISEASN = readString(dis);

					this.IDEADC = (BigDecimal) dis.readObject();

					this.IDEADD = (BigDecimal) dis.readObject();

					this.INLRTL = (BigDecimal) dis.readObject();

					this.IHANDL = readString(dis);

					this.IATRB1 = readString(dis);

					this.IATRB2 = readString(dis);

					this.IATRB3 = readString(dis);

					this.IATRB4 = readString(dis);

					this.IATRB5 = readString(dis);

					this.IPRCCH = readString(dis);

					this.IPRCZN = readString(dis);

					this.IPRCST = readString(dis);

					this.IASNUM = dis.readFloat();

					this.ICORGP = readString(dis);

					this.ILEAD = (BigDecimal) dis.readObject();

					this.IHZCOD = readString(dis);

					this.IFRACT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.INUMBR);

				// float

				dos.writeFloat(this.ICHECK);

				// String

				writeString(this.IDESCR, dos);

				// String

				writeString(this.IDSCCD, dos);

				// String

				writeString(this.ISORT, dos);

				// String

				writeString(this.ISTYLN, dos);

				// float

				dos.writeFloat(this.ASNUM);

				// String

				writeString(this.IVNDPN, dos);

				// float

				dos.writeFloat(this.IMFGR);

				// String

				writeString(this.IMFGNO, dos);

				// float

				dos.writeFloat(this.IDEPT);

				// float

				dos.writeFloat(this.ISDEPT);

				// float

				dos.writeFloat(this.ICLAS);

				// float

				dos.writeFloat(this.ISCLAS);

				// String

				writeString(this.BYRNUM, dos);

				// BigDecimal

				dos.writeObject(this.IASPAC);

				// String

				writeString(this.IADVYN, dos);

				// String

				writeString(this.IBUYCD, dos);

				// String

				writeString(this.ISET, dos);

				// String

				writeString(this.IWARNT, dos);

				// String

				writeString(this.IPRMPT, dos);

				// String

				writeString(this.IPRVNT, dos);

				// String

				writeString(this.ITKTTR, dos);

				// String

				writeString(this.ITKTTA, dos);

				// BigDecimal

				dos.writeObject(this.ITKTN);

				// String

				writeString(this.ILBLTR, dos);

				// String

				writeString(this.ILBLTA, dos);

				// String

				writeString(this.IFINLN, dos);

				// String

				writeString(this.IPROFL, dos);

				// String

				writeString(this.IMODUL, dos);

				// String

				writeString(this.ISTYPE, dos);

				// float

				dos.writeFloat(this.ISCOLR);

				// String

				writeString(this.ISSIZE, dos);

				// String

				writeString(this.IHAZCD, dos);

				// String

				writeString(this.MCHNUM, dos);

				// BigDecimal

				dos.writeObject(this.ISUBST);

				// BigDecimal

				dos.writeObject(this.ICORE);

				// BigDecimal

				dos.writeObject(this.IREPL);

				// String

				writeString(this.ISLUM, dos);

				// BigDecimal

				dos.writeObject(this.IUMCV2);

				// String

				writeString(this.IBYUM, dos);

				// BigDecimal

				dos.writeObject(this.IMINPK);

				// BigDecimal

				dos.writeObject(this.ISTDPK);

				// String

				writeString(this.IHLDOR, dos);

				// BigDecimal

				dos.writeObject(this.IMOQTY);

				// BigDecimal

				dos.writeObject(this.IMNSTK);

				// BigDecimal

				dos.writeObject(this.IMXSTK);

				// BigDecimal

				dos.writeObject(this.IMDSTK);

				// BigDecimal

				dos.writeObject(this.IDSPLY);

				// BigDecimal

				dos.writeObject(this.IOMULT);

				// String

				writeString(this.IRPLCD, dos);

				// BigDecimal

				dos.writeObject(this.IMFPRC);

				// BigDecimal

				dos.writeObject(this.IWGHT);

				// BigDecimal

				dos.writeObject(this.ICUBE);

				// BigDecimal

				dos.writeObject(this.IDLGTH);

				// BigDecimal

				dos.writeObject(this.IDWDTH);

				// BigDecimal

				dos.writeObject(this.IDHGHT);

				// BigDecimal

				dos.writeObject(this.IMDATE);

				// BigDecimal

				dos.writeObject(this.IMCENT);

				// BigDecimal

				dos.writeObject(this.IVPLTI);

				// BigDecimal

				dos.writeObject(this.IVPLHI);

				// float

				dos.writeFloat(this.SHPNUM);

				// String

				writeString(this.IDISTM, dos);

				// String

				writeString(this.IHLDWO, dos);

				// float

				dos.writeFloat(this.IIGNUM);

				// String

				writeString(this.ISDIM, dos);

				// String

				writeString(this.IVATCD, dos);

				// float

				dos.writeFloat(this.IPLAN);

				// String

				writeString(this.IVLRK1, dos);

				// String

				writeString(this.IVLRK2, dos);

				// String

				writeString(this.IVLRK3, dos);

				// String

				writeString(this.IVLRK4, dos);

				// BigDecimal

				dos.writeObject(this.IRPLCN);

				// BigDecimal

				dos.writeObject(this.IRPLDT);

				// String

				writeString(this.ISEASN, dos);

				// BigDecimal

				dos.writeObject(this.IDEADC);

				// BigDecimal

				dos.writeObject(this.IDEADD);

				// BigDecimal

				dos.writeObject(this.INLRTL);

				// String

				writeString(this.IHANDL, dos);

				// String

				writeString(this.IATRB1, dos);

				// String

				writeString(this.IATRB2, dos);

				// String

				writeString(this.IATRB3, dos);

				// String

				writeString(this.IATRB4, dos);

				// String

				writeString(this.IATRB5, dos);

				// String

				writeString(this.IPRCCH, dos);

				// String

				writeString(this.IPRCZN, dos);

				// String

				writeString(this.IPRCST, dos);

				// float

				dos.writeFloat(this.IASNUM);

				// String

				writeString(this.ICORGP, dos);

				// BigDecimal

				dos.writeObject(this.ILEAD);

				// String

				writeString(this.IHZCOD, dos);

				// String

				writeString(this.IFRACT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.INUMBR);

				// float

				dos.writeFloat(this.ICHECK);

				// String

				writeString(this.IDESCR, dos);

				// String

				writeString(this.IDSCCD, dos);

				// String

				writeString(this.ISORT, dos);

				// String

				writeString(this.ISTYLN, dos);

				// float

				dos.writeFloat(this.ASNUM);

				// String

				writeString(this.IVNDPN, dos);

				// float

				dos.writeFloat(this.IMFGR);

				// String

				writeString(this.IMFGNO, dos);

				// float

				dos.writeFloat(this.IDEPT);

				// float

				dos.writeFloat(this.ISDEPT);

				// float

				dos.writeFloat(this.ICLAS);

				// float

				dos.writeFloat(this.ISCLAS);

				// String

				writeString(this.BYRNUM, dos);

				// BigDecimal

				dos.writeObject(this.IASPAC);

				// String

				writeString(this.IADVYN, dos);

				// String

				writeString(this.IBUYCD, dos);

				// String

				writeString(this.ISET, dos);

				// String

				writeString(this.IWARNT, dos);

				// String

				writeString(this.IPRMPT, dos);

				// String

				writeString(this.IPRVNT, dos);

				// String

				writeString(this.ITKTTR, dos);

				// String

				writeString(this.ITKTTA, dos);

				// BigDecimal

				dos.writeObject(this.ITKTN);

				// String

				writeString(this.ILBLTR, dos);

				// String

				writeString(this.ILBLTA, dos);

				// String

				writeString(this.IFINLN, dos);

				// String

				writeString(this.IPROFL, dos);

				// String

				writeString(this.IMODUL, dos);

				// String

				writeString(this.ISTYPE, dos);

				// float

				dos.writeFloat(this.ISCOLR);

				// String

				writeString(this.ISSIZE, dos);

				// String

				writeString(this.IHAZCD, dos);

				// String

				writeString(this.MCHNUM, dos);

				// BigDecimal

				dos.writeObject(this.ISUBST);

				// BigDecimal

				dos.writeObject(this.ICORE);

				// BigDecimal

				dos.writeObject(this.IREPL);

				// String

				writeString(this.ISLUM, dos);

				// BigDecimal

				dos.writeObject(this.IUMCV2);

				// String

				writeString(this.IBYUM, dos);

				// BigDecimal

				dos.writeObject(this.IMINPK);

				// BigDecimal

				dos.writeObject(this.ISTDPK);

				// String

				writeString(this.IHLDOR, dos);

				// BigDecimal

				dos.writeObject(this.IMOQTY);

				// BigDecimal

				dos.writeObject(this.IMNSTK);

				// BigDecimal

				dos.writeObject(this.IMXSTK);

				// BigDecimal

				dos.writeObject(this.IMDSTK);

				// BigDecimal

				dos.writeObject(this.IDSPLY);

				// BigDecimal

				dos.writeObject(this.IOMULT);

				// String

				writeString(this.IRPLCD, dos);

				// BigDecimal

				dos.writeObject(this.IMFPRC);

				// BigDecimal

				dos.writeObject(this.IWGHT);

				// BigDecimal

				dos.writeObject(this.ICUBE);

				// BigDecimal

				dos.writeObject(this.IDLGTH);

				// BigDecimal

				dos.writeObject(this.IDWDTH);

				// BigDecimal

				dos.writeObject(this.IDHGHT);

				// BigDecimal

				dos.writeObject(this.IMDATE);

				// BigDecimal

				dos.writeObject(this.IMCENT);

				// BigDecimal

				dos.writeObject(this.IVPLTI);

				// BigDecimal

				dos.writeObject(this.IVPLHI);

				// float

				dos.writeFloat(this.SHPNUM);

				// String

				writeString(this.IDISTM, dos);

				// String

				writeString(this.IHLDWO, dos);

				// float

				dos.writeFloat(this.IIGNUM);

				// String

				writeString(this.ISDIM, dos);

				// String

				writeString(this.IVATCD, dos);

				// float

				dos.writeFloat(this.IPLAN);

				// String

				writeString(this.IVLRK1, dos);

				// String

				writeString(this.IVLRK2, dos);

				// String

				writeString(this.IVLRK3, dos);

				// String

				writeString(this.IVLRK4, dos);

				// BigDecimal

				dos.writeObject(this.IRPLCN);

				// BigDecimal

				dos.writeObject(this.IRPLDT);

				// String

				writeString(this.ISEASN, dos);

				// BigDecimal

				dos.writeObject(this.IDEADC);

				// BigDecimal

				dos.writeObject(this.IDEADD);

				// BigDecimal

				dos.writeObject(this.INLRTL);

				// String

				writeString(this.IHANDL, dos);

				// String

				writeString(this.IATRB1, dos);

				// String

				writeString(this.IATRB2, dos);

				// String

				writeString(this.IATRB3, dos);

				// String

				writeString(this.IATRB4, dos);

				// String

				writeString(this.IATRB5, dos);

				// String

				writeString(this.IPRCCH, dos);

				// String

				writeString(this.IPRCZN, dos);

				// String

				writeString(this.IPRCST, dos);

				// float

				dos.writeFloat(this.IASNUM);

				// String

				writeString(this.ICORGP, dos);

				// BigDecimal

				dos.writeObject(this.ILEAD);

				// String

				writeString(this.IHZCOD, dos);

				// String

				writeString(this.IFRACT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("INUMBR=" + String.valueOf(INUMBR));
			sb.append(",ICHECK=" + String.valueOf(ICHECK));
			sb.append(",IDESCR=" + IDESCR);
			sb.append(",IDSCCD=" + IDSCCD);
			sb.append(",ISORT=" + ISORT);
			sb.append(",ISTYLN=" + ISTYLN);
			sb.append(",ASNUM=" + String.valueOf(ASNUM));
			sb.append(",IVNDPN=" + IVNDPN);
			sb.append(",IMFGR=" + String.valueOf(IMFGR));
			sb.append(",IMFGNO=" + IMFGNO);
			sb.append(",IDEPT=" + String.valueOf(IDEPT));
			sb.append(",ISDEPT=" + String.valueOf(ISDEPT));
			sb.append(",ICLAS=" + String.valueOf(ICLAS));
			sb.append(",ISCLAS=" + String.valueOf(ISCLAS));
			sb.append(",BYRNUM=" + BYRNUM);
			sb.append(",IASPAC=" + String.valueOf(IASPAC));
			sb.append(",IADVYN=" + IADVYN);
			sb.append(",IBUYCD=" + IBUYCD);
			sb.append(",ISET=" + ISET);
			sb.append(",IWARNT=" + IWARNT);
			sb.append(",IPRMPT=" + IPRMPT);
			sb.append(",IPRVNT=" + IPRVNT);
			sb.append(",ITKTTR=" + ITKTTR);
			sb.append(",ITKTTA=" + ITKTTA);
			sb.append(",ITKTN=" + String.valueOf(ITKTN));
			sb.append(",ILBLTR=" + ILBLTR);
			sb.append(",ILBLTA=" + ILBLTA);
			sb.append(",IFINLN=" + IFINLN);
			sb.append(",IPROFL=" + IPROFL);
			sb.append(",IMODUL=" + IMODUL);
			sb.append(",ISTYPE=" + ISTYPE);
			sb.append(",ISCOLR=" + String.valueOf(ISCOLR));
			sb.append(",ISSIZE=" + ISSIZE);
			sb.append(",IHAZCD=" + IHAZCD);
			sb.append(",MCHNUM=" + MCHNUM);
			sb.append(",ISUBST=" + String.valueOf(ISUBST));
			sb.append(",ICORE=" + String.valueOf(ICORE));
			sb.append(",IREPL=" + String.valueOf(IREPL));
			sb.append(",ISLUM=" + ISLUM);
			sb.append(",IUMCV2=" + String.valueOf(IUMCV2));
			sb.append(",IBYUM=" + IBYUM);
			sb.append(",IMINPK=" + String.valueOf(IMINPK));
			sb.append(",ISTDPK=" + String.valueOf(ISTDPK));
			sb.append(",IHLDOR=" + IHLDOR);
			sb.append(",IMOQTY=" + String.valueOf(IMOQTY));
			sb.append(",IMNSTK=" + String.valueOf(IMNSTK));
			sb.append(",IMXSTK=" + String.valueOf(IMXSTK));
			sb.append(",IMDSTK=" + String.valueOf(IMDSTK));
			sb.append(",IDSPLY=" + String.valueOf(IDSPLY));
			sb.append(",IOMULT=" + String.valueOf(IOMULT));
			sb.append(",IRPLCD=" + IRPLCD);
			sb.append(",IMFPRC=" + String.valueOf(IMFPRC));
			sb.append(",IWGHT=" + String.valueOf(IWGHT));
			sb.append(",ICUBE=" + String.valueOf(ICUBE));
			sb.append(",IDLGTH=" + String.valueOf(IDLGTH));
			sb.append(",IDWDTH=" + String.valueOf(IDWDTH));
			sb.append(",IDHGHT=" + String.valueOf(IDHGHT));
			sb.append(",IMDATE=" + String.valueOf(IMDATE));
			sb.append(",IMCENT=" + String.valueOf(IMCENT));
			sb.append(",IVPLTI=" + String.valueOf(IVPLTI));
			sb.append(",IVPLHI=" + String.valueOf(IVPLHI));
			sb.append(",SHPNUM=" + String.valueOf(SHPNUM));
			sb.append(",IDISTM=" + IDISTM);
			sb.append(",IHLDWO=" + IHLDWO);
			sb.append(",IIGNUM=" + String.valueOf(IIGNUM));
			sb.append(",ISDIM=" + ISDIM);
			sb.append(",IVATCD=" + IVATCD);
			sb.append(",IPLAN=" + String.valueOf(IPLAN));
			sb.append(",IVLRK1=" + IVLRK1);
			sb.append(",IVLRK2=" + IVLRK2);
			sb.append(",IVLRK3=" + IVLRK3);
			sb.append(",IVLRK4=" + IVLRK4);
			sb.append(",IRPLCN=" + String.valueOf(IRPLCN));
			sb.append(",IRPLDT=" + String.valueOf(IRPLDT));
			sb.append(",ISEASN=" + ISEASN);
			sb.append(",IDEADC=" + String.valueOf(IDEADC));
			sb.append(",IDEADD=" + String.valueOf(IDEADD));
			sb.append(",INLRTL=" + String.valueOf(INLRTL));
			sb.append(",IHANDL=" + IHANDL);
			sb.append(",IATRB1=" + IATRB1);
			sb.append(",IATRB2=" + IATRB2);
			sb.append(",IATRB3=" + IATRB3);
			sb.append(",IATRB4=" + IATRB4);
			sb.append(",IATRB5=" + IATRB5);
			sb.append(",IPRCCH=" + IPRCCH);
			sb.append(",IPRCZN=" + IPRCZN);
			sb.append(",IPRCST=" + IPRCST);
			sb.append(",IASNUM=" + String.valueOf(IASNUM));
			sb.append(",ICORGP=" + ICORGP);
			sb.append(",ILEAD=" + String.valueOf(ILEAD));
			sb.append(",IHZCOD=" + IHZCOD);
			sb.append(",IFRACT=" + IFRACT);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (INUMBR == null) {
				sb.append("<null>");
			} else {
				sb.append(INUMBR);
			}

			sb.append("|");

			sb.append(ICHECK);

			sb.append("|");

			if (IDESCR == null) {
				sb.append("<null>");
			} else {
				sb.append(IDESCR);
			}

			sb.append("|");

			if (IDSCCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IDSCCD);
			}

			sb.append("|");

			if (ISORT == null) {
				sb.append("<null>");
			} else {
				sb.append(ISORT);
			}

			sb.append("|");

			if (ISTYLN == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTYLN);
			}

			sb.append("|");

			sb.append(ASNUM);

			sb.append("|");

			if (IVNDPN == null) {
				sb.append("<null>");
			} else {
				sb.append(IVNDPN);
			}

			sb.append("|");

			sb.append(IMFGR);

			sb.append("|");

			if (IMFGNO == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFGNO);
			}

			sb.append("|");

			sb.append(IDEPT);

			sb.append("|");

			sb.append(ISDEPT);

			sb.append("|");

			sb.append(ICLAS);

			sb.append("|");

			sb.append(ISCLAS);

			sb.append("|");

			if (BYRNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(BYRNUM);
			}

			sb.append("|");

			if (IASPAC == null) {
				sb.append("<null>");
			} else {
				sb.append(IASPAC);
			}

			sb.append("|");

			if (IADVYN == null) {
				sb.append("<null>");
			} else {
				sb.append(IADVYN);
			}

			sb.append("|");

			if (IBUYCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IBUYCD);
			}

			sb.append("|");

			if (ISET == null) {
				sb.append("<null>");
			} else {
				sb.append(ISET);
			}

			sb.append("|");

			if (IWARNT == null) {
				sb.append("<null>");
			} else {
				sb.append(IWARNT);
			}

			sb.append("|");

			if (IPRMPT == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRMPT);
			}

			sb.append("|");

			if (IPRVNT == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRVNT);
			}

			sb.append("|");

			if (ITKTTR == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTTR);
			}

			sb.append("|");

			if (ITKTTA == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTTA);
			}

			sb.append("|");

			if (ITKTN == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTN);
			}

			sb.append("|");

			if (ILBLTR == null) {
				sb.append("<null>");
			} else {
				sb.append(ILBLTR);
			}

			sb.append("|");

			if (ILBLTA == null) {
				sb.append("<null>");
			} else {
				sb.append(ILBLTA);
			}

			sb.append("|");

			if (IFINLN == null) {
				sb.append("<null>");
			} else {
				sb.append(IFINLN);
			}

			sb.append("|");

			if (IPROFL == null) {
				sb.append("<null>");
			} else {
				sb.append(IPROFL);
			}

			sb.append("|");

			if (IMODUL == null) {
				sb.append("<null>");
			} else {
				sb.append(IMODUL);
			}

			sb.append("|");

			if (ISTYPE == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTYPE);
			}

			sb.append("|");

			sb.append(ISCOLR);

			sb.append("|");

			if (ISSIZE == null) {
				sb.append("<null>");
			} else {
				sb.append(ISSIZE);
			}

			sb.append("|");

			if (IHAZCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IHAZCD);
			}

			sb.append("|");

			if (MCHNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(MCHNUM);
			}

			sb.append("|");

			if (ISUBST == null) {
				sb.append("<null>");
			} else {
				sb.append(ISUBST);
			}

			sb.append("|");

			if (ICORE == null) {
				sb.append("<null>");
			} else {
				sb.append(ICORE);
			}

			sb.append("|");

			if (IREPL == null) {
				sb.append("<null>");
			} else {
				sb.append(IREPL);
			}

			sb.append("|");

			if (ISLUM == null) {
				sb.append("<null>");
			} else {
				sb.append(ISLUM);
			}

			sb.append("|");

			if (IUMCV2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IUMCV2);
			}

			sb.append("|");

			if (IBYUM == null) {
				sb.append("<null>");
			} else {
				sb.append(IBYUM);
			}

			sb.append("|");

			if (IMINPK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMINPK);
			}

			sb.append("|");

			if (ISTDPK == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTDPK);
			}

			sb.append("|");

			if (IHLDOR == null) {
				sb.append("<null>");
			} else {
				sb.append(IHLDOR);
			}

			sb.append("|");

			if (IMOQTY == null) {
				sb.append("<null>");
			} else {
				sb.append(IMOQTY);
			}

			sb.append("|");

			if (IMNSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMNSTK);
			}

			sb.append("|");

			if (IMXSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMXSTK);
			}

			sb.append("|");

			if (IMDSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMDSTK);
			}

			sb.append("|");

			if (IDSPLY == null) {
				sb.append("<null>");
			} else {
				sb.append(IDSPLY);
			}

			sb.append("|");

			if (IOMULT == null) {
				sb.append("<null>");
			} else {
				sb.append(IOMULT);
			}

			sb.append("|");

			if (IRPLCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLCD);
			}

			sb.append("|");

			if (IMFPRC == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFPRC);
			}

			sb.append("|");

			if (IWGHT == null) {
				sb.append("<null>");
			} else {
				sb.append(IWGHT);
			}

			sb.append("|");

			if (ICUBE == null) {
				sb.append("<null>");
			} else {
				sb.append(ICUBE);
			}

			sb.append("|");

			if (IDLGTH == null) {
				sb.append("<null>");
			} else {
				sb.append(IDLGTH);
			}

			sb.append("|");

			if (IDWDTH == null) {
				sb.append("<null>");
			} else {
				sb.append(IDWDTH);
			}

			sb.append("|");

			if (IDHGHT == null) {
				sb.append("<null>");
			} else {
				sb.append(IDHGHT);
			}

			sb.append("|");

			if (IMDATE == null) {
				sb.append("<null>");
			} else {
				sb.append(IMDATE);
			}

			sb.append("|");

			if (IMCENT == null) {
				sb.append("<null>");
			} else {
				sb.append(IMCENT);
			}

			sb.append("|");

			if (IVPLTI == null) {
				sb.append("<null>");
			} else {
				sb.append(IVPLTI);
			}

			sb.append("|");

			if (IVPLHI == null) {
				sb.append("<null>");
			} else {
				sb.append(IVPLHI);
			}

			sb.append("|");

			sb.append(SHPNUM);

			sb.append("|");

			if (IDISTM == null) {
				sb.append("<null>");
			} else {
				sb.append(IDISTM);
			}

			sb.append("|");

			if (IHLDWO == null) {
				sb.append("<null>");
			} else {
				sb.append(IHLDWO);
			}

			sb.append("|");

			sb.append(IIGNUM);

			sb.append("|");

			if (ISDIM == null) {
				sb.append("<null>");
			} else {
				sb.append(ISDIM);
			}

			sb.append("|");

			if (IVATCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IVATCD);
			}

			sb.append("|");

			sb.append(IPLAN);

			sb.append("|");

			if (IVLRK1 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK1);
			}

			sb.append("|");

			if (IVLRK2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK2);
			}

			sb.append("|");

			if (IVLRK3 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK3);
			}

			sb.append("|");

			if (IVLRK4 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK4);
			}

			sb.append("|");

			if (IRPLCN == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLCN);
			}

			sb.append("|");

			if (IRPLDT == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLDT);
			}

			sb.append("|");

			if (ISEASN == null) {
				sb.append("<null>");
			} else {
				sb.append(ISEASN);
			}

			sb.append("|");

			if (IDEADC == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEADC);
			}

			sb.append("|");

			if (IDEADD == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEADD);
			}

			sb.append("|");

			if (INLRTL == null) {
				sb.append("<null>");
			} else {
				sb.append(INLRTL);
			}

			sb.append("|");

			if (IHANDL == null) {
				sb.append("<null>");
			} else {
				sb.append(IHANDL);
			}

			sb.append("|");

			if (IATRB1 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB1);
			}

			sb.append("|");

			if (IATRB2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB2);
			}

			sb.append("|");

			if (IATRB3 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB3);
			}

			sb.append("|");

			if (IATRB4 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB4);
			}

			sb.append("|");

			if (IATRB5 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB5);
			}

			sb.append("|");

			if (IPRCCH == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCCH);
			}

			sb.append("|");

			if (IPRCZN == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCZN);
			}

			sb.append("|");

			if (IPRCST == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCST);
			}

			sb.append("|");

			sb.append(IASNUM);

			sb.append("|");

			if (ICORGP == null) {
				sb.append("<null>");
			} else {
				sb.append(ICORGP);
			}

			sb.append("|");

			if (ILEAD == null) {
				sb.append("<null>");
			} else {
				sb.append(ILEAD);
			}

			sb.append("|");

			if (IHZCOD == null) {
				sb.append("<null>");
			} else {
				sb.append(IHZCOD);
			}

			sb.append("|");

			if (IFRACT == null) {
				sb.append("<null>");
			} else {
				sb.append(IFRACT);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_5");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "row5");

				int tos_count_tFileOutputDelimited_5 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileOutputDelimited_5 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileOutputDelimited_5 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileOutputDelimited_5 = new StringBuilder();
							log4jParamters_tFileOutputDelimited_5.append("Parameters:");
							log4jParamters_tFileOutputDelimited_5.append("USESTREAM" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5
									.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVMST.csv\"");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("ROWSEPARATOR" + " = " + "\"\\n\"");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("FIELDSEPARATOR" + " = " + "\"|\"");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("APPEND" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("INCLUDEHEADER" + " = " + "true");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("COMPRESS" + " = " + "true");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("ADVANCED_SEPARATOR" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("CSV_OPTION" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("CREATE" + " = " + "true");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("SPLIT" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("FLUSHONROW" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("ROW_MODE" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("ENCODING" + " = " + "\"ISO-8859-15\"");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("DELETE_EMPTYFILE" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							log4jParamters_tFileOutputDelimited_5.append("FILE_EXIST_EXCEPTION" + " = " + "false");
							log4jParamters_tFileOutputDelimited_5.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileOutputDelimited_5 - " + (log4jParamters_tFileOutputDelimited_5));
						}
					}
					new BytesLimit65535_tFileOutputDelimited_5().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileOutputDelimited_5", "tFileOutputDelimited_5", "tFileOutputDelimited");
					talendJobLogProcess(globalMap);
				}

				String fileName_tFileOutputDelimited_5 = "";
				class FileOutputDelimitedUtil_tFileOutputDelimited_5 {
					public void putHeaderValue_0(java.io.Writer outtFileOutputDelimited_5,
							final String OUT_DELIM_tFileOutputDelimited_5) throws java.lang.Exception {
						outtFileOutputDelimited_5.write("INUMBR");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ICHECK");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDESCR");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDSCCD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISORT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISTYLN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ASNUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVNDPN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMFGR");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMFGNO");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDEPT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISDEPT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ICLAS");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISCLAS");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("BYRNUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IASPAC");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IADVYN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IBUYCD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISET");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IWARNT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IPRMPT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IPRVNT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ITKTTR");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ITKTTA");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ITKTN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ILBLTR");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ILBLTA");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IFINLN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IPROFL");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMODUL");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISTYPE");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISCOLR");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISSIZE");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IHAZCD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("MCHNUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISUBST");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ICORE");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IREPL");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISLUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IUMCV2");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IBYUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMINPK");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISTDPK");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IHLDOR");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMOQTY");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMNSTK");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMXSTK");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMDSTK");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDSPLY");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IOMULT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IRPLCD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMFPRC");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IWGHT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ICUBE");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDLGTH");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDWDTH");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDHGHT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMDATE");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IMCENT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVPLTI");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVPLHI");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("SHPNUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDISTM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IHLDWO");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IIGNUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISDIM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVATCD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IPLAN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVLRK1");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVLRK2");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVLRK3");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IVLRK4");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IRPLCN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IRPLDT");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ISEASN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDEADC");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IDEADD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("INLRTL");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IHANDL");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IATRB1");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IATRB2");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IATRB3");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IATRB4");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IATRB5");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IPRCCH");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IPRCZN");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IPRCST");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IASNUM");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ICORGP");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("ILEAD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					}

					public void putHeaderValue_1(java.io.Writer outtFileOutputDelimited_5,
							final String OUT_DELIM_tFileOutputDelimited_5) throws java.lang.Exception {
						outtFileOutputDelimited_5.write("IHZCOD");
						outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("IFRACT");
					}

					public void putValue_0(final row5Struct row5, StringBuilder sb_tFileOutputDelimited_5,
							final String OUT_DELIM_tFileOutputDelimited_5) throws java.lang.Exception {
						if (row5.INUMBR != null) {
							sb_tFileOutputDelimited_5
									.append(row5.INUMBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.ICHECK);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDESCR != null) {
							sb_tFileOutputDelimited_5.append(row5.IDESCR);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDSCCD != null) {
							sb_tFileOutputDelimited_5.append(row5.IDSCCD);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISORT != null) {
							sb_tFileOutputDelimited_5.append(row5.ISORT);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISTYLN != null) {
							sb_tFileOutputDelimited_5.append(row5.ISTYLN);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.ASNUM);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVNDPN != null) {
							sb_tFileOutputDelimited_5.append(row5.IVNDPN);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.IMFGR);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMFGNO != null) {
							sb_tFileOutputDelimited_5.append(row5.IMFGNO);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.IDEPT);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.ISDEPT);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.ICLAS);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.ISCLAS);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.BYRNUM != null) {
							sb_tFileOutputDelimited_5.append(row5.BYRNUM);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IASPAC != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IASPAC.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IADVYN != null) {
							sb_tFileOutputDelimited_5.append(row5.IADVYN);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IBUYCD != null) {
							sb_tFileOutputDelimited_5.append(row5.IBUYCD);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISET != null) {
							sb_tFileOutputDelimited_5.append(row5.ISET);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IWARNT != null) {
							sb_tFileOutputDelimited_5.append(row5.IWARNT);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IPRMPT != null) {
							sb_tFileOutputDelimited_5.append(row5.IPRMPT);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IPRVNT != null) {
							sb_tFileOutputDelimited_5.append(row5.IPRVNT);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ITKTTR != null) {
							sb_tFileOutputDelimited_5.append(row5.ITKTTR);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ITKTTA != null) {
							sb_tFileOutputDelimited_5.append(row5.ITKTTA);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ITKTN != null) {
							sb_tFileOutputDelimited_5
									.append(row5.ITKTN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ILBLTR != null) {
							sb_tFileOutputDelimited_5.append(row5.ILBLTR);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ILBLTA != null) {
							sb_tFileOutputDelimited_5.append(row5.ILBLTA);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IFINLN != null) {
							sb_tFileOutputDelimited_5.append(row5.IFINLN);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IPROFL != null) {
							sb_tFileOutputDelimited_5.append(row5.IPROFL);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMODUL != null) {
							sb_tFileOutputDelimited_5.append(row5.IMODUL);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISTYPE != null) {
							sb_tFileOutputDelimited_5.append(row5.ISTYPE);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.ISCOLR);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISSIZE != null) {
							sb_tFileOutputDelimited_5.append(row5.ISSIZE);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IHAZCD != null) {
							sb_tFileOutputDelimited_5.append(row5.IHAZCD);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.MCHNUM != null) {
							sb_tFileOutputDelimited_5.append(row5.MCHNUM);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISUBST != null) {
							sb_tFileOutputDelimited_5
									.append(row5.ISUBST.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ICORE != null) {
							sb_tFileOutputDelimited_5
									.append(row5.ICORE.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IREPL != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IREPL.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISLUM != null) {
							sb_tFileOutputDelimited_5.append(row5.ISLUM);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IUMCV2 != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IUMCV2.setScale(5, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IBYUM != null) {
							sb_tFileOutputDelimited_5.append(row5.IBYUM);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMINPK != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMINPK.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISTDPK != null) {
							sb_tFileOutputDelimited_5
									.append(row5.ISTDPK.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IHLDOR != null) {
							sb_tFileOutputDelimited_5.append(row5.IHLDOR);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMOQTY != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMOQTY.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMNSTK != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMNSTK.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMXSTK != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMXSTK.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMDSTK != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMDSTK.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDSPLY != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IDSPLY.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IOMULT != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IOMULT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IRPLCD != null) {
							sb_tFileOutputDelimited_5.append(row5.IRPLCD);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMFPRC != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMFPRC.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IWGHT != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IWGHT.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ICUBE != null) {
							sb_tFileOutputDelimited_5
									.append(row5.ICUBE.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDLGTH != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IDLGTH.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDWDTH != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IDWDTH.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDHGHT != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IDHGHT.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMDATE != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMDATE.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IMCENT != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IMCENT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVPLTI != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IVPLTI.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVPLHI != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IVPLHI.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.SHPNUM);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDISTM != null) {
							sb_tFileOutputDelimited_5.append(row5.IDISTM);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IHLDWO != null) {
							sb_tFileOutputDelimited_5.append(row5.IHLDWO);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.IIGNUM);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISDIM != null) {
							sb_tFileOutputDelimited_5.append(row5.ISDIM);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVATCD != null) {
							sb_tFileOutputDelimited_5.append(row5.IVATCD);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.IPLAN);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVLRK1 != null) {
							sb_tFileOutputDelimited_5.append(row5.IVLRK1);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVLRK2 != null) {
							sb_tFileOutputDelimited_5.append(row5.IVLRK2);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVLRK3 != null) {
							sb_tFileOutputDelimited_5.append(row5.IVLRK3);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IVLRK4 != null) {
							sb_tFileOutputDelimited_5.append(row5.IVLRK4);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IRPLCN != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IRPLCN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IRPLDT != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IRPLDT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ISEASN != null) {
							sb_tFileOutputDelimited_5.append(row5.ISEASN);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDEADC != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IDEADC.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IDEADD != null) {
							sb_tFileOutputDelimited_5
									.append(row5.IDEADD.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.INLRTL != null) {
							sb_tFileOutputDelimited_5
									.append(row5.INLRTL.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IHANDL != null) {
							sb_tFileOutputDelimited_5.append(row5.IHANDL);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IATRB1 != null) {
							sb_tFileOutputDelimited_5.append(row5.IATRB1);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IATRB2 != null) {
							sb_tFileOutputDelimited_5.append(row5.IATRB2);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IATRB3 != null) {
							sb_tFileOutputDelimited_5.append(row5.IATRB3);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IATRB4 != null) {
							sb_tFileOutputDelimited_5.append(row5.IATRB4);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IATRB5 != null) {
							sb_tFileOutputDelimited_5.append(row5.IATRB5);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IPRCCH != null) {
							sb_tFileOutputDelimited_5.append(row5.IPRCCH);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IPRCZN != null) {
							sb_tFileOutputDelimited_5.append(row5.IPRCZN);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IPRCST != null) {
							sb_tFileOutputDelimited_5.append(row5.IPRCST);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(row5.IASNUM);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ICORGP != null) {
							sb_tFileOutputDelimited_5.append(row5.ICORGP);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.ILEAD != null) {
							sb_tFileOutputDelimited_5
									.append(row5.ILEAD.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					}

					public void putValue_1(final row5Struct row5, StringBuilder sb_tFileOutputDelimited_5,
							final String OUT_DELIM_tFileOutputDelimited_5) throws java.lang.Exception {
						if (row5.IHZCOD != null) {
							sb_tFileOutputDelimited_5.append(row5.IHZCOD);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row5.IFRACT != null) {
							sb_tFileOutputDelimited_5.append(row5.IFRACT);
						}
					}
				}
				FileOutputDelimitedUtil_tFileOutputDelimited_5 fileOutputDelimitedUtil_tFileOutputDelimited_5 = new FileOutputDelimitedUtil_tFileOutputDelimited_5();
				fileName_tFileOutputDelimited_5 = (new java.io.File("/data/talend/data_repository/INVMST.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						"|"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						log.info("tFileOutputDelimited_5 - Creating directory '"
								+ dir_tFileOutputDelimited_5.getCanonicalPath() + "'.");
						dir_tFileOutputDelimited_5.mkdirs();
						log.info("tFileOutputDelimited_5 - The directory '"
								+ dir_tFileOutputDelimited_5.getCanonicalPath() + "' has been created successfully.");
					}
				}

				filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				String zipName_tFileOutputDelimited_5 = fullName_tFileOutputDelimited_5 + ".zip";
				java.io.File file_tFileOutputDelimited_5 = new java.io.File(zipName_tFileOutputDelimited_5);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_5 = null;
				java.io.Writer outtFileOutputDelimited_5 = null;

				if (file_tFileOutputDelimited_5.exists()) {
					file_tFileOutputDelimited_5.delete();
				}
				zipOut_tFileOutputDelimited_5 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_5)));
				zipOut_tFileOutputDelimited_5
						.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_5.getName()));
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_5, "ISO-8859-15"));
				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_5.length() == 0) {
						fileOutputDelimitedUtil_tFileOutputDelimited_5.putHeaderValue_0(outtFileOutputDelimited_5,
								OUT_DELIM_tFileOutputDelimited_5);
						fileOutputDelimitedUtil_tFileOutputDelimited_5.putHeaderValue_1(outtFileOutputDelimited_5,
								OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.flush();
					}
				}

				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBInput_5 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBInput_5 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBInput_5 = new StringBuilder();
							log4jParamters_tDBInput_5.append("Parameters:");
							log4jParamters_tDBInput_5.append("USE_EXISTING_CONNECTION" + " = " + "false");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("DB_VERSION" + " = " + "jt400-9.8.jar");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("HOST" + " = " + "context.jda_host_name");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("DBNAME" + " = " + "context.jda_mm_lib");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("USER" + " = " + "context.jda_user_name");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("PASS" + " = "
									+ String.valueOf(
											routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password))
											.substring(0, 4)
									+ "...");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("TABLE" + " = " + "\"\"");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("QUERYSTORE" + " = " + "\"\"");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("QUERY" + " = " + "\"select * from MM4R5LIB.INVMST\"");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("PROPERTIES" + " = " + "\"prompt=false\"");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("TRIM_ALL_COLUMN" + " = " + "false");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("TRIM_COLUMN" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("INUMBR") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ICHECK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDESCR")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDSCCD") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ISORT") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISTYLN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ASNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IVNDPN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMFGR") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMFGNO") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IDEPT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISDEPT")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICLAS") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISCLAS") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("BYRNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IASPAC")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IADVYN") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IBUYCD") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISET") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IWARNT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IPRMPT")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IPRVNT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ITKTTR") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ITKTTA") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ITKTN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ILBLTR")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ILBLTA") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IFINLN") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IPROFL") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IMODUL") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISTYPE")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISCOLR") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ISSIZE") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IHAZCD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("MCHNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISUBST")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICORE") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IREPL") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ISLUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IUMCV2")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IBYUM") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMINPK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ISTDPK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IHLDOR")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMOQTY") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IMNSTK") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMXSTK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IMDSTK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDSPLY")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IOMULT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IRPLCD") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMFPRC") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IWGHT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICUBE") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IDLGTH") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IDWDTH") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IDHGHT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMDATE")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMCENT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IVPLTI") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IVPLHI") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("SHPNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDISTM")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IHLDWO") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IIGNUM") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISDIM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IVATCD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IPLAN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IVLRK1") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IVLRK2") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IVLRK3") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IVLRK4") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IRPLCN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IRPLDT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ISEASN") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IDEADC") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IDEADD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("INLRTL")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IHANDL") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IATRB1") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IATRB2") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IATRB3") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IATRB4")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IATRB5") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IPRCCH") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IPRCZN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IPRCST") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IASNUM")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICORGP") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ILEAD") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IHZCOD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IFRACT") + "}]");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("SET_QUERY_TIMEOUT" + " = " + "false");
							log4jParamters_tDBInput_5.append(" | ");
							log4jParamters_tDBInput_5.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
							log4jParamters_tDBInput_5.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBInput_5 - " + (log4jParamters_tDBInput_5));
						}
					}
					new BytesLimit65535_tDBInput_5().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tDBInput_5", "tDBInput_5", "tAS400Input");
					talendJobLogProcess(globalMap);
				}

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.jda_user_name;

				final String decryptedPassword_tDBInput_5 = context.jda_password;

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";"
						+ "prompt=false";

				log.debug("tDBInput_5 - Driver ClassName: " + driverClass_tDBInput_5 + ".");

				log.debug("tDBInput_5 - Connection attempt to '" + url_tDBInput_5 + "' with the username '"
						+ dbUser_tDBInput_5 + "'.");

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);
				log.debug("tDBInput_5 - Connection to '" + url_tDBInput_5 + "' has succeeded.");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "select * from MM4R5LIB.INVMST";

				log.debug("tDBInput_5 - Executing the query: '" + dbquery_tDBInput_5 + "'.");

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					log.debug("tDBInput_5 - Retrieving records from the database.");

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.INUMBR = null;
						} else {

							row5.INUMBR = rs_tDBInput_5.getBigDecimal(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.ICHECK = 0;
						} else {

							row5.ICHECK = rs_tDBInput_5.getFloat(2);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.IDESCR = null;
						} else {

							row5.IDESCR = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.IDSCCD = null;
						} else {

							row5.IDSCCD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row5.ISORT = null;
						} else {

							row5.ISORT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row5.ISTYLN = null;
						} else {

							row5.ISTYLN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, false);
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row5.ASNUM = 0;
						} else {

							row5.ASNUM = rs_tDBInput_5.getFloat(7);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row5.IVNDPN = null;
						} else {

							row5.IVNDPN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, false);
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row5.IMFGR = 0;
						} else {

							row5.IMFGR = rs_tDBInput_5.getFloat(9);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row5.IMFGNO = null;
						} else {

							row5.IMFGNO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 10, false);
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row5.IDEPT = 0;
						} else {

							row5.IDEPT = rs_tDBInput_5.getFloat(11);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row5.ISDEPT = 0;
						} else {

							row5.ISDEPT = rs_tDBInput_5.getFloat(12);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row5.ICLAS = 0;
						} else {

							row5.ICLAS = rs_tDBInput_5.getFloat(13);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row5.ISCLAS = 0;
						} else {

							row5.ISCLAS = rs_tDBInput_5.getFloat(14);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row5.BYRNUM = null;
						} else {

							row5.BYRNUM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 15, false);
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row5.IASPAC = null;
						} else {

							row5.IASPAC = rs_tDBInput_5.getBigDecimal(16);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row5.IADVYN = null;
						} else {

							row5.IADVYN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 17, false);
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row5.IBUYCD = null;
						} else {

							row5.IBUYCD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 18, false);
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row5.ISET = null;
						} else {

							row5.ISET = routines.system.JDBCUtil.getString(rs_tDBInput_5, 19, false);
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row5.IWARNT = null;
						} else {

							row5.IWARNT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 20, false);
						}
						if (colQtyInRs_tDBInput_5 < 21) {
							row5.IPRMPT = null;
						} else {

							row5.IPRMPT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 21, false);
						}
						if (colQtyInRs_tDBInput_5 < 22) {
							row5.IPRVNT = null;
						} else {

							row5.IPRVNT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 22, false);
						}
						if (colQtyInRs_tDBInput_5 < 23) {
							row5.ITKTTR = null;
						} else {

							row5.ITKTTR = routines.system.JDBCUtil.getString(rs_tDBInput_5, 23, false);
						}
						if (colQtyInRs_tDBInput_5 < 24) {
							row5.ITKTTA = null;
						} else {

							row5.ITKTTA = routines.system.JDBCUtil.getString(rs_tDBInput_5, 24, false);
						}
						if (colQtyInRs_tDBInput_5 < 25) {
							row5.ITKTN = null;
						} else {

							row5.ITKTN = rs_tDBInput_5.getBigDecimal(25);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 26) {
							row5.ILBLTR = null;
						} else {

							row5.ILBLTR = routines.system.JDBCUtil.getString(rs_tDBInput_5, 26, false);
						}
						if (colQtyInRs_tDBInput_5 < 27) {
							row5.ILBLTA = null;
						} else {

							row5.ILBLTA = routines.system.JDBCUtil.getString(rs_tDBInput_5, 27, false);
						}
						if (colQtyInRs_tDBInput_5 < 28) {
							row5.IFINLN = null;
						} else {

							row5.IFINLN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 28, false);
						}
						if (colQtyInRs_tDBInput_5 < 29) {
							row5.IPROFL = null;
						} else {

							row5.IPROFL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 29, false);
						}
						if (colQtyInRs_tDBInput_5 < 30) {
							row5.IMODUL = null;
						} else {

							row5.IMODUL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 30, false);
						}
						if (colQtyInRs_tDBInput_5 < 31) {
							row5.ISTYPE = null;
						} else {

							row5.ISTYPE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 31, false);
						}
						if (colQtyInRs_tDBInput_5 < 32) {
							row5.ISCOLR = 0;
						} else {

							row5.ISCOLR = rs_tDBInput_5.getFloat(32);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 33) {
							row5.ISSIZE = null;
						} else {

							row5.ISSIZE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 33, false);
						}
						if (colQtyInRs_tDBInput_5 < 34) {
							row5.IHAZCD = null;
						} else {

							row5.IHAZCD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 34, false);
						}
						if (colQtyInRs_tDBInput_5 < 35) {
							row5.MCHNUM = null;
						} else {

							row5.MCHNUM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 35, false);
						}
						if (colQtyInRs_tDBInput_5 < 36) {
							row5.ISUBST = null;
						} else {

							row5.ISUBST = rs_tDBInput_5.getBigDecimal(36);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 37) {
							row5.ICORE = null;
						} else {

							row5.ICORE = rs_tDBInput_5.getBigDecimal(37);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 38) {
							row5.IREPL = null;
						} else {

							row5.IREPL = rs_tDBInput_5.getBigDecimal(38);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 39) {
							row5.ISLUM = null;
						} else {

							row5.ISLUM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 39, false);
						}
						if (colQtyInRs_tDBInput_5 < 40) {
							row5.IUMCV2 = null;
						} else {

							row5.IUMCV2 = rs_tDBInput_5.getBigDecimal(40);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 41) {
							row5.IBYUM = null;
						} else {

							row5.IBYUM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 41, false);
						}
						if (colQtyInRs_tDBInput_5 < 42) {
							row5.IMINPK = null;
						} else {

							row5.IMINPK = rs_tDBInput_5.getBigDecimal(42);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 43) {
							row5.ISTDPK = null;
						} else {

							row5.ISTDPK = rs_tDBInput_5.getBigDecimal(43);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 44) {
							row5.IHLDOR = null;
						} else {

							row5.IHLDOR = routines.system.JDBCUtil.getString(rs_tDBInput_5, 44, false);
						}
						if (colQtyInRs_tDBInput_5 < 45) {
							row5.IMOQTY = null;
						} else {

							row5.IMOQTY = rs_tDBInput_5.getBigDecimal(45);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 46) {
							row5.IMNSTK = null;
						} else {

							row5.IMNSTK = rs_tDBInput_5.getBigDecimal(46);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 47) {
							row5.IMXSTK = null;
						} else {

							row5.IMXSTK = rs_tDBInput_5.getBigDecimal(47);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 48) {
							row5.IMDSTK = null;
						} else {

							row5.IMDSTK = rs_tDBInput_5.getBigDecimal(48);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 49) {
							row5.IDSPLY = null;
						} else {

							row5.IDSPLY = rs_tDBInput_5.getBigDecimal(49);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 50) {
							row5.IOMULT = null;
						} else {

							row5.IOMULT = rs_tDBInput_5.getBigDecimal(50);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 51) {
							row5.IRPLCD = null;
						} else {

							row5.IRPLCD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 51, false);
						}
						if (colQtyInRs_tDBInput_5 < 52) {
							row5.IMFPRC = null;
						} else {

							row5.IMFPRC = rs_tDBInput_5.getBigDecimal(52);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 53) {
							row5.IWGHT = null;
						} else {

							row5.IWGHT = rs_tDBInput_5.getBigDecimal(53);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 54) {
							row5.ICUBE = null;
						} else {

							row5.ICUBE = rs_tDBInput_5.getBigDecimal(54);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 55) {
							row5.IDLGTH = null;
						} else {

							row5.IDLGTH = rs_tDBInput_5.getBigDecimal(55);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 56) {
							row5.IDWDTH = null;
						} else {

							row5.IDWDTH = rs_tDBInput_5.getBigDecimal(56);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 57) {
							row5.IDHGHT = null;
						} else {

							row5.IDHGHT = rs_tDBInput_5.getBigDecimal(57);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 58) {
							row5.IMDATE = null;
						} else {

							row5.IMDATE = rs_tDBInput_5.getBigDecimal(58);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 59) {
							row5.IMCENT = null;
						} else {

							row5.IMCENT = rs_tDBInput_5.getBigDecimal(59);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 60) {
							row5.IVPLTI = null;
						} else {

							row5.IVPLTI = rs_tDBInput_5.getBigDecimal(60);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 61) {
							row5.IVPLHI = null;
						} else {

							row5.IVPLHI = rs_tDBInput_5.getBigDecimal(61);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 62) {
							row5.SHPNUM = 0;
						} else {

							row5.SHPNUM = rs_tDBInput_5.getFloat(62);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 63) {
							row5.IDISTM = null;
						} else {

							row5.IDISTM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 63, false);
						}
						if (colQtyInRs_tDBInput_5 < 64) {
							row5.IHLDWO = null;
						} else {

							row5.IHLDWO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 64, false);
						}
						if (colQtyInRs_tDBInput_5 < 65) {
							row5.IIGNUM = 0;
						} else {

							row5.IIGNUM = rs_tDBInput_5.getFloat(65);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 66) {
							row5.ISDIM = null;
						} else {

							row5.ISDIM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 66, false);
						}
						if (colQtyInRs_tDBInput_5 < 67) {
							row5.IVATCD = null;
						} else {

							row5.IVATCD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 67, false);
						}
						if (colQtyInRs_tDBInput_5 < 68) {
							row5.IPLAN = 0;
						} else {

							row5.IPLAN = rs_tDBInput_5.getFloat(68);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 69) {
							row5.IVLRK1 = null;
						} else {

							row5.IVLRK1 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 69, false);
						}
						if (colQtyInRs_tDBInput_5 < 70) {
							row5.IVLRK2 = null;
						} else {

							row5.IVLRK2 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 70, false);
						}
						if (colQtyInRs_tDBInput_5 < 71) {
							row5.IVLRK3 = null;
						} else {

							row5.IVLRK3 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 71, false);
						}
						if (colQtyInRs_tDBInput_5 < 72) {
							row5.IVLRK4 = null;
						} else {

							row5.IVLRK4 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 72, false);
						}
						if (colQtyInRs_tDBInput_5 < 73) {
							row5.IRPLCN = null;
						} else {

							row5.IRPLCN = rs_tDBInput_5.getBigDecimal(73);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 74) {
							row5.IRPLDT = null;
						} else {

							row5.IRPLDT = rs_tDBInput_5.getBigDecimal(74);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 75) {
							row5.ISEASN = null;
						} else {

							row5.ISEASN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 75, false);
						}
						if (colQtyInRs_tDBInput_5 < 76) {
							row5.IDEADC = null;
						} else {

							row5.IDEADC = rs_tDBInput_5.getBigDecimal(76);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 77) {
							row5.IDEADD = null;
						} else {

							row5.IDEADD = rs_tDBInput_5.getBigDecimal(77);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 78) {
							row5.INLRTL = null;
						} else {

							row5.INLRTL = rs_tDBInput_5.getBigDecimal(78);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 79) {
							row5.IHANDL = null;
						} else {

							row5.IHANDL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 79, false);
						}
						if (colQtyInRs_tDBInput_5 < 80) {
							row5.IATRB1 = null;
						} else {

							row5.IATRB1 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 80, false);
						}
						if (colQtyInRs_tDBInput_5 < 81) {
							row5.IATRB2 = null;
						} else {

							row5.IATRB2 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 81, false);
						}
						if (colQtyInRs_tDBInput_5 < 82) {
							row5.IATRB3 = null;
						} else {

							row5.IATRB3 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 82, false);
						}
						if (colQtyInRs_tDBInput_5 < 83) {
							row5.IATRB4 = null;
						} else {

							row5.IATRB4 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 83, false);
						}
						if (colQtyInRs_tDBInput_5 < 84) {
							row5.IATRB5 = null;
						} else {

							row5.IATRB5 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 84, false);
						}
						if (colQtyInRs_tDBInput_5 < 85) {
							row5.IPRCCH = null;
						} else {

							row5.IPRCCH = routines.system.JDBCUtil.getString(rs_tDBInput_5, 85, false);
						}
						if (colQtyInRs_tDBInput_5 < 86) {
							row5.IPRCZN = null;
						} else {

							row5.IPRCZN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 86, false);
						}
						if (colQtyInRs_tDBInput_5 < 87) {
							row5.IPRCST = null;
						} else {

							row5.IPRCST = routines.system.JDBCUtil.getString(rs_tDBInput_5, 87, false);
						}
						if (colQtyInRs_tDBInput_5 < 88) {
							row5.IASNUM = 0;
						} else {

							row5.IASNUM = rs_tDBInput_5.getFloat(88);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 89) {
							row5.ICORGP = null;
						} else {

							row5.ICORGP = routines.system.JDBCUtil.getString(rs_tDBInput_5, 89, false);
						}
						if (colQtyInRs_tDBInput_5 < 90) {
							row5.ILEAD = null;
						} else {

							row5.ILEAD = rs_tDBInput_5.getBigDecimal(90);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 91) {
							row5.IHZCOD = null;
						} else {

							row5.IHZCOD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 91, false);
						}
						if (colQtyInRs_tDBInput_5 < 92) {
							row5.IFRACT = null;
						} else {

							row5.IFRACT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 92, false);
						}

						log.debug("tDBInput_5 - Retrieving the record " + nb_line_tDBInput_5 + ".");

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 main ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

								, "row5", "tDBInput_5", "tDBInput_5", "tAS400Input", "tFileOutputDelimited_5",
								"tFileOutputDelimited_5", "tFileOutputDelimited"

						)) {
							talendJobLogProcess(globalMap);
						}

						if (log.isTraceEnabled()) {
							log.trace("row5 - " + (row5 == null ? "" : row5.toLogString()));
						}

						StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
						fileOutputDelimitedUtil_tFileOutputDelimited_5.putValue_0(row5, sb_tFileOutputDelimited_5,
								OUT_DELIM_tFileOutputDelimited_5);
						fileOutputDelimitedUtil_tFileOutputDelimited_5.putValue_1(row5, sb_tFileOutputDelimited_5,
								OUT_DELIM_tFileOutputDelimited_5);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_5++;
							resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());
							log.debug("tFileOutputDelimited_5 - Writing the record " + nb_line_tFileOutputDelimited_5
									+ ".");

						}

						tos_count_tFileOutputDelimited_5++;

						/**
						 * [tFileOutputDelimited_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						log.debug("tDBInput_5 - Closing the connection to the database.");

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

						log.debug("tDBInput_5 - Connection to the database closed.");

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);
				log.debug("tDBInput_5 - Retrieved records count: " + nb_line_tDBInput_5 + " .");

				if (log.isDebugEnabled())
					log.debug("tDBInput_5 - " + ("Done."));

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

					globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
					globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				}

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				log.debug("tFileOutputDelimited_5 - Written records count: " + nb_line_tFileOutputDelimited_5 + " .");

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "row5", 2, 0,
						"tDBInput_5", "tDBInput_5", "tAS400Input", "tFileOutputDelimited_5", "tFileOutputDelimited_5",
						"tFileOutputDelimited", "output")) {
					talendJobLogProcess(globalMap);
				}

				if (log.isDebugEnabled())
					log.debug("tFileOutputDelimited_5 - " + ("Done."));

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_5");
						if (outtFileOutputDelimited_5 != null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class INVMSTStruct implements routines.system.IPersistableRow<INVMSTStruct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal INUMBR;

		public BigDecimal getINUMBR() {
			return this.INUMBR;
		}

		public Boolean INUMBRIsNullable() {
			return true;
		}

		public Boolean INUMBRIsKey() {
			return false;
		}

		public Integer INUMBRLength() {
			return null;
		}

		public Integer INUMBRPrecision() {
			return null;
		}

		public String INUMBRDefault() {

			return "";

		}

		public String INUMBRComment() {

			return "";

		}

		public String INUMBRPattern() {

			return "";

		}

		public String INUMBROriginalDbColumnName() {

			return "INUMBR";

		}

		public Double ICHECK;

		public Double getICHECK() {
			return this.ICHECK;
		}

		public Boolean ICHECKIsNullable() {
			return true;
		}

		public Boolean ICHECKIsKey() {
			return false;
		}

		public Integer ICHECKLength() {
			return null;
		}

		public Integer ICHECKPrecision() {
			return null;
		}

		public String ICHECKDefault() {

			return "";

		}

		public String ICHECKComment() {

			return "";

		}

		public String ICHECKPattern() {

			return "";

		}

		public String ICHECKOriginalDbColumnName() {

			return "ICHECK";

		}

		public String IDESCR;

		public String getIDESCR() {
			return this.IDESCR;
		}

		public Boolean IDESCRIsNullable() {
			return true;
		}

		public Boolean IDESCRIsKey() {
			return false;
		}

		public Integer IDESCRLength() {
			return null;
		}

		public Integer IDESCRPrecision() {
			return null;
		}

		public String IDESCRDefault() {

			return null;

		}

		public String IDESCRComment() {

			return "";

		}

		public String IDESCRPattern() {

			return "";

		}

		public String IDESCROriginalDbColumnName() {

			return "IDESCR";

		}

		public String IDSCCD;

		public String getIDSCCD() {
			return this.IDSCCD;
		}

		public Boolean IDSCCDIsNullable() {
			return true;
		}

		public Boolean IDSCCDIsKey() {
			return false;
		}

		public Integer IDSCCDLength() {
			return null;
		}

		public Integer IDSCCDPrecision() {
			return null;
		}

		public String IDSCCDDefault() {

			return null;

		}

		public String IDSCCDComment() {

			return "";

		}

		public String IDSCCDPattern() {

			return "";

		}

		public String IDSCCDOriginalDbColumnName() {

			return "IDSCCD";

		}

		public String ISORT;

		public String getISORT() {
			return this.ISORT;
		}

		public Boolean ISORTIsNullable() {
			return true;
		}

		public Boolean ISORTIsKey() {
			return false;
		}

		public Integer ISORTLength() {
			return null;
		}

		public Integer ISORTPrecision() {
			return null;
		}

		public String ISORTDefault() {

			return null;

		}

		public String ISORTComment() {

			return "";

		}

		public String ISORTPattern() {

			return "";

		}

		public String ISORTOriginalDbColumnName() {

			return "ISORT";

		}

		public String ISTYLN;

		public String getISTYLN() {
			return this.ISTYLN;
		}

		public Boolean ISTYLNIsNullable() {
			return true;
		}

		public Boolean ISTYLNIsKey() {
			return false;
		}

		public Integer ISTYLNLength() {
			return null;
		}

		public Integer ISTYLNPrecision() {
			return null;
		}

		public String ISTYLNDefault() {

			return null;

		}

		public String ISTYLNComment() {

			return "";

		}

		public String ISTYLNPattern() {

			return "";

		}

		public String ISTYLNOriginalDbColumnName() {

			return "ISTYLN";

		}

		public Double ASNUM;

		public Double getASNUM() {
			return this.ASNUM;
		}

		public Boolean ASNUMIsNullable() {
			return true;
		}

		public Boolean ASNUMIsKey() {
			return false;
		}

		public Integer ASNUMLength() {
			return null;
		}

		public Integer ASNUMPrecision() {
			return null;
		}

		public String ASNUMDefault() {

			return "";

		}

		public String ASNUMComment() {

			return "";

		}

		public String ASNUMPattern() {

			return "";

		}

		public String ASNUMOriginalDbColumnName() {

			return "ASNUM";

		}

		public String IVNDPN;

		public String getIVNDPN() {
			return this.IVNDPN;
		}

		public Boolean IVNDPNIsNullable() {
			return true;
		}

		public Boolean IVNDPNIsKey() {
			return false;
		}

		public Integer IVNDPNLength() {
			return null;
		}

		public Integer IVNDPNPrecision() {
			return null;
		}

		public String IVNDPNDefault() {

			return null;

		}

		public String IVNDPNComment() {

			return "";

		}

		public String IVNDPNPattern() {

			return "";

		}

		public String IVNDPNOriginalDbColumnName() {

			return "IVNDPN";

		}

		public Double IMFGR;

		public Double getIMFGR() {
			return this.IMFGR;
		}

		public Boolean IMFGRIsNullable() {
			return true;
		}

		public Boolean IMFGRIsKey() {
			return false;
		}

		public Integer IMFGRLength() {
			return null;
		}

		public Integer IMFGRPrecision() {
			return null;
		}

		public String IMFGRDefault() {

			return "";

		}

		public String IMFGRComment() {

			return "";

		}

		public String IMFGRPattern() {

			return "";

		}

		public String IMFGROriginalDbColumnName() {

			return "IMFGR";

		}

		public String IMFGNO;

		public String getIMFGNO() {
			return this.IMFGNO;
		}

		public Boolean IMFGNOIsNullable() {
			return true;
		}

		public Boolean IMFGNOIsKey() {
			return false;
		}

		public Integer IMFGNOLength() {
			return null;
		}

		public Integer IMFGNOPrecision() {
			return null;
		}

		public String IMFGNODefault() {

			return null;

		}

		public String IMFGNOComment() {

			return "";

		}

		public String IMFGNOPattern() {

			return "";

		}

		public String IMFGNOOriginalDbColumnName() {

			return "IMFGNO";

		}

		public Double IDEPT;

		public Double getIDEPT() {
			return this.IDEPT;
		}

		public Boolean IDEPTIsNullable() {
			return true;
		}

		public Boolean IDEPTIsKey() {
			return false;
		}

		public Integer IDEPTLength() {
			return null;
		}

		public Integer IDEPTPrecision() {
			return null;
		}

		public String IDEPTDefault() {

			return "";

		}

		public String IDEPTComment() {

			return "";

		}

		public String IDEPTPattern() {

			return "";

		}

		public String IDEPTOriginalDbColumnName() {

			return "IDEPT";

		}

		public Double ISDEPT;

		public Double getISDEPT() {
			return this.ISDEPT;
		}

		public Boolean ISDEPTIsNullable() {
			return true;
		}

		public Boolean ISDEPTIsKey() {
			return false;
		}

		public Integer ISDEPTLength() {
			return null;
		}

		public Integer ISDEPTPrecision() {
			return null;
		}

		public String ISDEPTDefault() {

			return "";

		}

		public String ISDEPTComment() {

			return "";

		}

		public String ISDEPTPattern() {

			return "";

		}

		public String ISDEPTOriginalDbColumnName() {

			return "ISDEPT";

		}

		public Double ICLAS;

		public Double getICLAS() {
			return this.ICLAS;
		}

		public Boolean ICLASIsNullable() {
			return true;
		}

		public Boolean ICLASIsKey() {
			return false;
		}

		public Integer ICLASLength() {
			return null;
		}

		public Integer ICLASPrecision() {
			return null;
		}

		public String ICLASDefault() {

			return "";

		}

		public String ICLASComment() {

			return "";

		}

		public String ICLASPattern() {

			return "";

		}

		public String ICLASOriginalDbColumnName() {

			return "ICLAS";

		}

		public Double ISCLAS;

		public Double getISCLAS() {
			return this.ISCLAS;
		}

		public Boolean ISCLASIsNullable() {
			return true;
		}

		public Boolean ISCLASIsKey() {
			return false;
		}

		public Integer ISCLASLength() {
			return null;
		}

		public Integer ISCLASPrecision() {
			return null;
		}

		public String ISCLASDefault() {

			return "";

		}

		public String ISCLASComment() {

			return "";

		}

		public String ISCLASPattern() {

			return "";

		}

		public String ISCLASOriginalDbColumnName() {

			return "ISCLAS";

		}

		public String BYRNUM;

		public String getBYRNUM() {
			return this.BYRNUM;
		}

		public Boolean BYRNUMIsNullable() {
			return true;
		}

		public Boolean BYRNUMIsKey() {
			return false;
		}

		public Integer BYRNUMLength() {
			return null;
		}

		public Integer BYRNUMPrecision() {
			return null;
		}

		public String BYRNUMDefault() {

			return "";

		}

		public String BYRNUMComment() {

			return "";

		}

		public String BYRNUMPattern() {

			return "";

		}

		public String BYRNUMOriginalDbColumnName() {

			return "BYRNUM";

		}

		public BigDecimal IASPAC;

		public BigDecimal getIASPAC() {
			return this.IASPAC;
		}

		public Boolean IASPACIsNullable() {
			return true;
		}

		public Boolean IASPACIsKey() {
			return false;
		}

		public Integer IASPACLength() {
			return null;
		}

		public Integer IASPACPrecision() {
			return null;
		}

		public String IASPACDefault() {

			return "";

		}

		public String IASPACComment() {

			return "";

		}

		public String IASPACPattern() {

			return "";

		}

		public String IASPACOriginalDbColumnName() {

			return "IASPAC";

		}

		public String IADVYN;

		public String getIADVYN() {
			return this.IADVYN;
		}

		public Boolean IADVYNIsNullable() {
			return true;
		}

		public Boolean IADVYNIsKey() {
			return false;
		}

		public Integer IADVYNLength() {
			return null;
		}

		public Integer IADVYNPrecision() {
			return null;
		}

		public String IADVYNDefault() {

			return "";

		}

		public String IADVYNComment() {

			return "";

		}

		public String IADVYNPattern() {

			return "";

		}

		public String IADVYNOriginalDbColumnName() {

			return "IADVYN";

		}

		public String IBUYCD;

		public String getIBUYCD() {
			return this.IBUYCD;
		}

		public Boolean IBUYCDIsNullable() {
			return true;
		}

		public Boolean IBUYCDIsKey() {
			return false;
		}

		public Integer IBUYCDLength() {
			return null;
		}

		public Integer IBUYCDPrecision() {
			return null;
		}

		public String IBUYCDDefault() {

			return "";

		}

		public String IBUYCDComment() {

			return "";

		}

		public String IBUYCDPattern() {

			return "";

		}

		public String IBUYCDOriginalDbColumnName() {

			return "IBUYCD";

		}

		public String ISET;

		public String getISET() {
			return this.ISET;
		}

		public Boolean ISETIsNullable() {
			return true;
		}

		public Boolean ISETIsKey() {
			return false;
		}

		public Integer ISETLength() {
			return null;
		}

		public Integer ISETPrecision() {
			return null;
		}

		public String ISETDefault() {

			return "";

		}

		public String ISETComment() {

			return "";

		}

		public String ISETPattern() {

			return "";

		}

		public String ISETOriginalDbColumnName() {

			return "ISET";

		}

		public String IWARNT;

		public String getIWARNT() {
			return this.IWARNT;
		}

		public Boolean IWARNTIsNullable() {
			return true;
		}

		public Boolean IWARNTIsKey() {
			return false;
		}

		public Integer IWARNTLength() {
			return null;
		}

		public Integer IWARNTPrecision() {
			return null;
		}

		public String IWARNTDefault() {

			return "";

		}

		public String IWARNTComment() {

			return "";

		}

		public String IWARNTPattern() {

			return "";

		}

		public String IWARNTOriginalDbColumnName() {

			return "IWARNT";

		}

		public String IPRMPT;

		public String getIPRMPT() {
			return this.IPRMPT;
		}

		public Boolean IPRMPTIsNullable() {
			return true;
		}

		public Boolean IPRMPTIsKey() {
			return false;
		}

		public Integer IPRMPTLength() {
			return null;
		}

		public Integer IPRMPTPrecision() {
			return null;
		}

		public String IPRMPTDefault() {

			return "";

		}

		public String IPRMPTComment() {

			return "";

		}

		public String IPRMPTPattern() {

			return "";

		}

		public String IPRMPTOriginalDbColumnName() {

			return "IPRMPT";

		}

		public String IPRVNT;

		public String getIPRVNT() {
			return this.IPRVNT;
		}

		public Boolean IPRVNTIsNullable() {
			return true;
		}

		public Boolean IPRVNTIsKey() {
			return false;
		}

		public Integer IPRVNTLength() {
			return null;
		}

		public Integer IPRVNTPrecision() {
			return null;
		}

		public String IPRVNTDefault() {

			return "";

		}

		public String IPRVNTComment() {

			return "";

		}

		public String IPRVNTPattern() {

			return "";

		}

		public String IPRVNTOriginalDbColumnName() {

			return "IPRVNT";

		}

		public String ITKTTR;

		public String getITKTTR() {
			return this.ITKTTR;
		}

		public Boolean ITKTTRIsNullable() {
			return true;
		}

		public Boolean ITKTTRIsKey() {
			return false;
		}

		public Integer ITKTTRLength() {
			return null;
		}

		public Integer ITKTTRPrecision() {
			return null;
		}

		public String ITKTTRDefault() {

			return "";

		}

		public String ITKTTRComment() {

			return "";

		}

		public String ITKTTRPattern() {

			return "";

		}

		public String ITKTTROriginalDbColumnName() {

			return "ITKTTR";

		}

		public String ITKTTA;

		public String getITKTTA() {
			return this.ITKTTA;
		}

		public Boolean ITKTTAIsNullable() {
			return true;
		}

		public Boolean ITKTTAIsKey() {
			return false;
		}

		public Integer ITKTTALength() {
			return null;
		}

		public Integer ITKTTAPrecision() {
			return null;
		}

		public String ITKTTADefault() {

			return "";

		}

		public String ITKTTAComment() {

			return "";

		}

		public String ITKTTAPattern() {

			return "";

		}

		public String ITKTTAOriginalDbColumnName() {

			return "ITKTTA";

		}

		public BigDecimal ITKTN;

		public BigDecimal getITKTN() {
			return this.ITKTN;
		}

		public Boolean ITKTNIsNullable() {
			return true;
		}

		public Boolean ITKTNIsKey() {
			return false;
		}

		public Integer ITKTNLength() {
			return null;
		}

		public Integer ITKTNPrecision() {
			return null;
		}

		public String ITKTNDefault() {

			return "";

		}

		public String ITKTNComment() {

			return "";

		}

		public String ITKTNPattern() {

			return "";

		}

		public String ITKTNOriginalDbColumnName() {

			return "ITKTN";

		}

		public String ILBLTR;

		public String getILBLTR() {
			return this.ILBLTR;
		}

		public Boolean ILBLTRIsNullable() {
			return true;
		}

		public Boolean ILBLTRIsKey() {
			return false;
		}

		public Integer ILBLTRLength() {
			return null;
		}

		public Integer ILBLTRPrecision() {
			return null;
		}

		public String ILBLTRDefault() {

			return "";

		}

		public String ILBLTRComment() {

			return "";

		}

		public String ILBLTRPattern() {

			return "";

		}

		public String ILBLTROriginalDbColumnName() {

			return "ILBLTR";

		}

		public String ILBLTA;

		public String getILBLTA() {
			return this.ILBLTA;
		}

		public Boolean ILBLTAIsNullable() {
			return true;
		}

		public Boolean ILBLTAIsKey() {
			return false;
		}

		public Integer ILBLTALength() {
			return null;
		}

		public Integer ILBLTAPrecision() {
			return null;
		}

		public String ILBLTADefault() {

			return "";

		}

		public String ILBLTAComment() {

			return "";

		}

		public String ILBLTAPattern() {

			return "";

		}

		public String ILBLTAOriginalDbColumnName() {

			return "ILBLTA";

		}

		public String IFINLN;

		public String getIFINLN() {
			return this.IFINLN;
		}

		public Boolean IFINLNIsNullable() {
			return true;
		}

		public Boolean IFINLNIsKey() {
			return false;
		}

		public Integer IFINLNLength() {
			return null;
		}

		public Integer IFINLNPrecision() {
			return null;
		}

		public String IFINLNDefault() {

			return "";

		}

		public String IFINLNComment() {

			return "";

		}

		public String IFINLNPattern() {

			return "";

		}

		public String IFINLNOriginalDbColumnName() {

			return "IFINLN";

		}

		public String IPROFL;

		public String getIPROFL() {
			return this.IPROFL;
		}

		public Boolean IPROFLIsNullable() {
			return true;
		}

		public Boolean IPROFLIsKey() {
			return false;
		}

		public Integer IPROFLLength() {
			return null;
		}

		public Integer IPROFLPrecision() {
			return null;
		}

		public String IPROFLDefault() {

			return "";

		}

		public String IPROFLComment() {

			return "";

		}

		public String IPROFLPattern() {

			return "";

		}

		public String IPROFLOriginalDbColumnName() {

			return "IPROFL";

		}

		public String IMODUL;

		public String getIMODUL() {
			return this.IMODUL;
		}

		public Boolean IMODULIsNullable() {
			return true;
		}

		public Boolean IMODULIsKey() {
			return false;
		}

		public Integer IMODULLength() {
			return null;
		}

		public Integer IMODULPrecision() {
			return null;
		}

		public String IMODULDefault() {

			return "";

		}

		public String IMODULComment() {

			return "";

		}

		public String IMODULPattern() {

			return "";

		}

		public String IMODULOriginalDbColumnName() {

			return "IMODUL";

		}

		public String ISTYPE;

		public String getISTYPE() {
			return this.ISTYPE;
		}

		public Boolean ISTYPEIsNullable() {
			return true;
		}

		public Boolean ISTYPEIsKey() {
			return false;
		}

		public Integer ISTYPELength() {
			return null;
		}

		public Integer ISTYPEPrecision() {
			return null;
		}

		public String ISTYPEDefault() {

			return "";

		}

		public String ISTYPEComment() {

			return "";

		}

		public String ISTYPEPattern() {

			return "";

		}

		public String ISTYPEOriginalDbColumnName() {

			return "ISTYPE";

		}

		public Double ISCOLR;

		public Double getISCOLR() {
			return this.ISCOLR;
		}

		public Boolean ISCOLRIsNullable() {
			return true;
		}

		public Boolean ISCOLRIsKey() {
			return false;
		}

		public Integer ISCOLRLength() {
			return null;
		}

		public Integer ISCOLRPrecision() {
			return null;
		}

		public String ISCOLRDefault() {

			return "";

		}

		public String ISCOLRComment() {

			return "";

		}

		public String ISCOLRPattern() {

			return "";

		}

		public String ISCOLROriginalDbColumnName() {

			return "ISCOLR";

		}

		public String ISSIZE;

		public String getISSIZE() {
			return this.ISSIZE;
		}

		public Boolean ISSIZEIsNullable() {
			return true;
		}

		public Boolean ISSIZEIsKey() {
			return false;
		}

		public Integer ISSIZELength() {
			return null;
		}

		public Integer ISSIZEPrecision() {
			return null;
		}

		public String ISSIZEDefault() {

			return "";

		}

		public String ISSIZEComment() {

			return "";

		}

		public String ISSIZEPattern() {

			return "";

		}

		public String ISSIZEOriginalDbColumnName() {

			return "ISSIZE";

		}

		public String IHAZCD;

		public String getIHAZCD() {
			return this.IHAZCD;
		}

		public Boolean IHAZCDIsNullable() {
			return true;
		}

		public Boolean IHAZCDIsKey() {
			return false;
		}

		public Integer IHAZCDLength() {
			return null;
		}

		public Integer IHAZCDPrecision() {
			return null;
		}

		public String IHAZCDDefault() {

			return "";

		}

		public String IHAZCDComment() {

			return "";

		}

		public String IHAZCDPattern() {

			return "";

		}

		public String IHAZCDOriginalDbColumnName() {

			return "IHAZCD";

		}

		public String MCHNUM;

		public String getMCHNUM() {
			return this.MCHNUM;
		}

		public Boolean MCHNUMIsNullable() {
			return true;
		}

		public Boolean MCHNUMIsKey() {
			return false;
		}

		public Integer MCHNUMLength() {
			return null;
		}

		public Integer MCHNUMPrecision() {
			return null;
		}

		public String MCHNUMDefault() {

			return "";

		}

		public String MCHNUMComment() {

			return "";

		}

		public String MCHNUMPattern() {

			return "";

		}

		public String MCHNUMOriginalDbColumnName() {

			return "MCHNUM";

		}

		public BigDecimal ISUBST;

		public BigDecimal getISUBST() {
			return this.ISUBST;
		}

		public Boolean ISUBSTIsNullable() {
			return true;
		}

		public Boolean ISUBSTIsKey() {
			return false;
		}

		public Integer ISUBSTLength() {
			return null;
		}

		public Integer ISUBSTPrecision() {
			return null;
		}

		public String ISUBSTDefault() {

			return "";

		}

		public String ISUBSTComment() {

			return "";

		}

		public String ISUBSTPattern() {

			return "";

		}

		public String ISUBSTOriginalDbColumnName() {

			return "ISUBST";

		}

		public BigDecimal ICORE;

		public BigDecimal getICORE() {
			return this.ICORE;
		}

		public Boolean ICOREIsNullable() {
			return true;
		}

		public Boolean ICOREIsKey() {
			return false;
		}

		public Integer ICORELength() {
			return null;
		}

		public Integer ICOREPrecision() {
			return null;
		}

		public String ICOREDefault() {

			return "";

		}

		public String ICOREComment() {

			return "";

		}

		public String ICOREPattern() {

			return "";

		}

		public String ICOREOriginalDbColumnName() {

			return "ICORE";

		}

		public BigDecimal IREPL;

		public BigDecimal getIREPL() {
			return this.IREPL;
		}

		public Boolean IREPLIsNullable() {
			return true;
		}

		public Boolean IREPLIsKey() {
			return false;
		}

		public Integer IREPLLength() {
			return null;
		}

		public Integer IREPLPrecision() {
			return null;
		}

		public String IREPLDefault() {

			return "";

		}

		public String IREPLComment() {

			return "";

		}

		public String IREPLPattern() {

			return "";

		}

		public String IREPLOriginalDbColumnName() {

			return "IREPL";

		}

		public String ISLUM;

		public String getISLUM() {
			return this.ISLUM;
		}

		public Boolean ISLUMIsNullable() {
			return true;
		}

		public Boolean ISLUMIsKey() {
			return false;
		}

		public Integer ISLUMLength() {
			return null;
		}

		public Integer ISLUMPrecision() {
			return null;
		}

		public String ISLUMDefault() {

			return "";

		}

		public String ISLUMComment() {

			return "";

		}

		public String ISLUMPattern() {

			return "";

		}

		public String ISLUMOriginalDbColumnName() {

			return "ISLUM";

		}

		public BigDecimal IUMCV2;

		public BigDecimal getIUMCV2() {
			return this.IUMCV2;
		}

		public Boolean IUMCV2IsNullable() {
			return true;
		}

		public Boolean IUMCV2IsKey() {
			return false;
		}

		public Integer IUMCV2Length() {
			return null;
		}

		public Integer IUMCV2Precision() {
			return null;
		}

		public String IUMCV2Default() {

			return "";

		}

		public String IUMCV2Comment() {

			return "";

		}

		public String IUMCV2Pattern() {

			return "";

		}

		public String IUMCV2OriginalDbColumnName() {

			return "IUMCV2";

		}

		public String IBYUM;

		public String getIBYUM() {
			return this.IBYUM;
		}

		public Boolean IBYUMIsNullable() {
			return true;
		}

		public Boolean IBYUMIsKey() {
			return false;
		}

		public Integer IBYUMLength() {
			return null;
		}

		public Integer IBYUMPrecision() {
			return null;
		}

		public String IBYUMDefault() {

			return "";

		}

		public String IBYUMComment() {

			return "";

		}

		public String IBYUMPattern() {

			return "";

		}

		public String IBYUMOriginalDbColumnName() {

			return "IBYUM";

		}

		public BigDecimal IMINPK;

		public BigDecimal getIMINPK() {
			return this.IMINPK;
		}

		public Boolean IMINPKIsNullable() {
			return true;
		}

		public Boolean IMINPKIsKey() {
			return false;
		}

		public Integer IMINPKLength() {
			return null;
		}

		public Integer IMINPKPrecision() {
			return null;
		}

		public String IMINPKDefault() {

			return "";

		}

		public String IMINPKComment() {

			return "";

		}

		public String IMINPKPattern() {

			return "";

		}

		public String IMINPKOriginalDbColumnName() {

			return "IMINPK";

		}

		public BigDecimal ISTDPK;

		public BigDecimal getISTDPK() {
			return this.ISTDPK;
		}

		public Boolean ISTDPKIsNullable() {
			return true;
		}

		public Boolean ISTDPKIsKey() {
			return false;
		}

		public Integer ISTDPKLength() {
			return null;
		}

		public Integer ISTDPKPrecision() {
			return null;
		}

		public String ISTDPKDefault() {

			return "";

		}

		public String ISTDPKComment() {

			return "";

		}

		public String ISTDPKPattern() {

			return "";

		}

		public String ISTDPKOriginalDbColumnName() {

			return "ISTDPK";

		}

		public String IHLDOR;

		public String getIHLDOR() {
			return this.IHLDOR;
		}

		public Boolean IHLDORIsNullable() {
			return true;
		}

		public Boolean IHLDORIsKey() {
			return false;
		}

		public Integer IHLDORLength() {
			return null;
		}

		public Integer IHLDORPrecision() {
			return null;
		}

		public String IHLDORDefault() {

			return "";

		}

		public String IHLDORComment() {

			return "";

		}

		public String IHLDORPattern() {

			return "";

		}

		public String IHLDOROriginalDbColumnName() {

			return "IHLDOR";

		}

		public BigDecimal IMOQTY;

		public BigDecimal getIMOQTY() {
			return this.IMOQTY;
		}

		public Boolean IMOQTYIsNullable() {
			return true;
		}

		public Boolean IMOQTYIsKey() {
			return false;
		}

		public Integer IMOQTYLength() {
			return null;
		}

		public Integer IMOQTYPrecision() {
			return null;
		}

		public String IMOQTYDefault() {

			return "";

		}

		public String IMOQTYComment() {

			return "";

		}

		public String IMOQTYPattern() {

			return "";

		}

		public String IMOQTYOriginalDbColumnName() {

			return "IMOQTY";

		}

		public BigDecimal IMNSTK;

		public BigDecimal getIMNSTK() {
			return this.IMNSTK;
		}

		public Boolean IMNSTKIsNullable() {
			return true;
		}

		public Boolean IMNSTKIsKey() {
			return false;
		}

		public Integer IMNSTKLength() {
			return null;
		}

		public Integer IMNSTKPrecision() {
			return null;
		}

		public String IMNSTKDefault() {

			return "";

		}

		public String IMNSTKComment() {

			return "";

		}

		public String IMNSTKPattern() {

			return "";

		}

		public String IMNSTKOriginalDbColumnName() {

			return "IMNSTK";

		}

		public BigDecimal IMXSTK;

		public BigDecimal getIMXSTK() {
			return this.IMXSTK;
		}

		public Boolean IMXSTKIsNullable() {
			return true;
		}

		public Boolean IMXSTKIsKey() {
			return false;
		}

		public Integer IMXSTKLength() {
			return null;
		}

		public Integer IMXSTKPrecision() {
			return null;
		}

		public String IMXSTKDefault() {

			return "";

		}

		public String IMXSTKComment() {

			return "";

		}

		public String IMXSTKPattern() {

			return "";

		}

		public String IMXSTKOriginalDbColumnName() {

			return "IMXSTK";

		}

		public BigDecimal IMDSTK;

		public BigDecimal getIMDSTK() {
			return this.IMDSTK;
		}

		public Boolean IMDSTKIsNullable() {
			return true;
		}

		public Boolean IMDSTKIsKey() {
			return false;
		}

		public Integer IMDSTKLength() {
			return null;
		}

		public Integer IMDSTKPrecision() {
			return null;
		}

		public String IMDSTKDefault() {

			return "";

		}

		public String IMDSTKComment() {

			return "";

		}

		public String IMDSTKPattern() {

			return "";

		}

		public String IMDSTKOriginalDbColumnName() {

			return "IMDSTK";

		}

		public BigDecimal IDSPLY;

		public BigDecimal getIDSPLY() {
			return this.IDSPLY;
		}

		public Boolean IDSPLYIsNullable() {
			return true;
		}

		public Boolean IDSPLYIsKey() {
			return false;
		}

		public Integer IDSPLYLength() {
			return null;
		}

		public Integer IDSPLYPrecision() {
			return null;
		}

		public String IDSPLYDefault() {

			return "";

		}

		public String IDSPLYComment() {

			return "";

		}

		public String IDSPLYPattern() {

			return "";

		}

		public String IDSPLYOriginalDbColumnName() {

			return "IDSPLY";

		}

		public BigDecimal IOMULT;

		public BigDecimal getIOMULT() {
			return this.IOMULT;
		}

		public Boolean IOMULTIsNullable() {
			return true;
		}

		public Boolean IOMULTIsKey() {
			return false;
		}

		public Integer IOMULTLength() {
			return null;
		}

		public Integer IOMULTPrecision() {
			return null;
		}

		public String IOMULTDefault() {

			return "";

		}

		public String IOMULTComment() {

			return "";

		}

		public String IOMULTPattern() {

			return "";

		}

		public String IOMULTOriginalDbColumnName() {

			return "IOMULT";

		}

		public String IRPLCD;

		public String getIRPLCD() {
			return this.IRPLCD;
		}

		public Boolean IRPLCDIsNullable() {
			return true;
		}

		public Boolean IRPLCDIsKey() {
			return false;
		}

		public Integer IRPLCDLength() {
			return null;
		}

		public Integer IRPLCDPrecision() {
			return null;
		}

		public String IRPLCDDefault() {

			return "";

		}

		public String IRPLCDComment() {

			return "";

		}

		public String IRPLCDPattern() {

			return "";

		}

		public String IRPLCDOriginalDbColumnName() {

			return "IRPLCD";

		}

		public BigDecimal IMFPRC;

		public BigDecimal getIMFPRC() {
			return this.IMFPRC;
		}

		public Boolean IMFPRCIsNullable() {
			return true;
		}

		public Boolean IMFPRCIsKey() {
			return false;
		}

		public Integer IMFPRCLength() {
			return null;
		}

		public Integer IMFPRCPrecision() {
			return null;
		}

		public String IMFPRCDefault() {

			return "";

		}

		public String IMFPRCComment() {

			return "";

		}

		public String IMFPRCPattern() {

			return "";

		}

		public String IMFPRCOriginalDbColumnName() {

			return "IMFPRC";

		}

		public BigDecimal IWGHT;

		public BigDecimal getIWGHT() {
			return this.IWGHT;
		}

		public Boolean IWGHTIsNullable() {
			return true;
		}

		public Boolean IWGHTIsKey() {
			return false;
		}

		public Integer IWGHTLength() {
			return null;
		}

		public Integer IWGHTPrecision() {
			return null;
		}

		public String IWGHTDefault() {

			return "";

		}

		public String IWGHTComment() {

			return "";

		}

		public String IWGHTPattern() {

			return "";

		}

		public String IWGHTOriginalDbColumnName() {

			return "IWGHT";

		}

		public BigDecimal ICUBE;

		public BigDecimal getICUBE() {
			return this.ICUBE;
		}

		public Boolean ICUBEIsNullable() {
			return true;
		}

		public Boolean ICUBEIsKey() {
			return false;
		}

		public Integer ICUBELength() {
			return null;
		}

		public Integer ICUBEPrecision() {
			return null;
		}

		public String ICUBEDefault() {

			return "";

		}

		public String ICUBEComment() {

			return "";

		}

		public String ICUBEPattern() {

			return "";

		}

		public String ICUBEOriginalDbColumnName() {

			return "ICUBE";

		}

		public BigDecimal IDLGTH;

		public BigDecimal getIDLGTH() {
			return this.IDLGTH;
		}

		public Boolean IDLGTHIsNullable() {
			return true;
		}

		public Boolean IDLGTHIsKey() {
			return false;
		}

		public Integer IDLGTHLength() {
			return null;
		}

		public Integer IDLGTHPrecision() {
			return null;
		}

		public String IDLGTHDefault() {

			return "";

		}

		public String IDLGTHComment() {

			return "";

		}

		public String IDLGTHPattern() {

			return "";

		}

		public String IDLGTHOriginalDbColumnName() {

			return "IDLGTH";

		}

		public BigDecimal IDWDTH;

		public BigDecimal getIDWDTH() {
			return this.IDWDTH;
		}

		public Boolean IDWDTHIsNullable() {
			return true;
		}

		public Boolean IDWDTHIsKey() {
			return false;
		}

		public Integer IDWDTHLength() {
			return null;
		}

		public Integer IDWDTHPrecision() {
			return null;
		}

		public String IDWDTHDefault() {

			return "";

		}

		public String IDWDTHComment() {

			return "";

		}

		public String IDWDTHPattern() {

			return "";

		}

		public String IDWDTHOriginalDbColumnName() {

			return "IDWDTH";

		}

		public BigDecimal IDHGHT;

		public BigDecimal getIDHGHT() {
			return this.IDHGHT;
		}

		public Boolean IDHGHTIsNullable() {
			return true;
		}

		public Boolean IDHGHTIsKey() {
			return false;
		}

		public Integer IDHGHTLength() {
			return null;
		}

		public Integer IDHGHTPrecision() {
			return null;
		}

		public String IDHGHTDefault() {

			return "";

		}

		public String IDHGHTComment() {

			return "";

		}

		public String IDHGHTPattern() {

			return "";

		}

		public String IDHGHTOriginalDbColumnName() {

			return "IDHGHT";

		}

		public BigDecimal IMDATE;

		public BigDecimal getIMDATE() {
			return this.IMDATE;
		}

		public Boolean IMDATEIsNullable() {
			return true;
		}

		public Boolean IMDATEIsKey() {
			return false;
		}

		public Integer IMDATELength() {
			return null;
		}

		public Integer IMDATEPrecision() {
			return null;
		}

		public String IMDATEDefault() {

			return "";

		}

		public String IMDATEComment() {

			return "";

		}

		public String IMDATEPattern() {

			return "";

		}

		public String IMDATEOriginalDbColumnName() {

			return "IMDATE";

		}

		public BigDecimal IMCENT;

		public BigDecimal getIMCENT() {
			return this.IMCENT;
		}

		public Boolean IMCENTIsNullable() {
			return true;
		}

		public Boolean IMCENTIsKey() {
			return false;
		}

		public Integer IMCENTLength() {
			return null;
		}

		public Integer IMCENTPrecision() {
			return null;
		}

		public String IMCENTDefault() {

			return "";

		}

		public String IMCENTComment() {

			return "";

		}

		public String IMCENTPattern() {

			return "";

		}

		public String IMCENTOriginalDbColumnName() {

			return "IMCENT";

		}

		public BigDecimal IVPLTI;

		public BigDecimal getIVPLTI() {
			return this.IVPLTI;
		}

		public Boolean IVPLTIIsNullable() {
			return true;
		}

		public Boolean IVPLTIIsKey() {
			return false;
		}

		public Integer IVPLTILength() {
			return null;
		}

		public Integer IVPLTIPrecision() {
			return null;
		}

		public String IVPLTIDefault() {

			return "";

		}

		public String IVPLTIComment() {

			return "";

		}

		public String IVPLTIPattern() {

			return "";

		}

		public String IVPLTIOriginalDbColumnName() {

			return "IVPLTI";

		}

		public BigDecimal IVPLHI;

		public BigDecimal getIVPLHI() {
			return this.IVPLHI;
		}

		public Boolean IVPLHIIsNullable() {
			return true;
		}

		public Boolean IVPLHIIsKey() {
			return false;
		}

		public Integer IVPLHILength() {
			return null;
		}

		public Integer IVPLHIPrecision() {
			return null;
		}

		public String IVPLHIDefault() {

			return "";

		}

		public String IVPLHIComment() {

			return "";

		}

		public String IVPLHIPattern() {

			return "";

		}

		public String IVPLHIOriginalDbColumnName() {

			return "IVPLHI";

		}

		public Double SHPNUM;

		public Double getSHPNUM() {
			return this.SHPNUM;
		}

		public Boolean SHPNUMIsNullable() {
			return true;
		}

		public Boolean SHPNUMIsKey() {
			return false;
		}

		public Integer SHPNUMLength() {
			return null;
		}

		public Integer SHPNUMPrecision() {
			return null;
		}

		public String SHPNUMDefault() {

			return "";

		}

		public String SHPNUMComment() {

			return "";

		}

		public String SHPNUMPattern() {

			return "";

		}

		public String SHPNUMOriginalDbColumnName() {

			return "SHPNUM";

		}

		public String IDISTM;

		public String getIDISTM() {
			return this.IDISTM;
		}

		public Boolean IDISTMIsNullable() {
			return true;
		}

		public Boolean IDISTMIsKey() {
			return false;
		}

		public Integer IDISTMLength() {
			return null;
		}

		public Integer IDISTMPrecision() {
			return null;
		}

		public String IDISTMDefault() {

			return "";

		}

		public String IDISTMComment() {

			return "";

		}

		public String IDISTMPattern() {

			return "";

		}

		public String IDISTMOriginalDbColumnName() {

			return "IDISTM";

		}

		public String IHLDWO;

		public String getIHLDWO() {
			return this.IHLDWO;
		}

		public Boolean IHLDWOIsNullable() {
			return true;
		}

		public Boolean IHLDWOIsKey() {
			return false;
		}

		public Integer IHLDWOLength() {
			return null;
		}

		public Integer IHLDWOPrecision() {
			return null;
		}

		public String IHLDWODefault() {

			return "";

		}

		public String IHLDWOComment() {

			return "";

		}

		public String IHLDWOPattern() {

			return "";

		}

		public String IHLDWOOriginalDbColumnName() {

			return "IHLDWO";

		}

		public Double IIGNUM;

		public Double getIIGNUM() {
			return this.IIGNUM;
		}

		public Boolean IIGNUMIsNullable() {
			return true;
		}

		public Boolean IIGNUMIsKey() {
			return false;
		}

		public Integer IIGNUMLength() {
			return null;
		}

		public Integer IIGNUMPrecision() {
			return null;
		}

		public String IIGNUMDefault() {

			return "";

		}

		public String IIGNUMComment() {

			return "";

		}

		public String IIGNUMPattern() {

			return "";

		}

		public String IIGNUMOriginalDbColumnName() {

			return "IIGNUM";

		}

		public String ISDIM;

		public String getISDIM() {
			return this.ISDIM;
		}

		public Boolean ISDIMIsNullable() {
			return true;
		}

		public Boolean ISDIMIsKey() {
			return false;
		}

		public Integer ISDIMLength() {
			return null;
		}

		public Integer ISDIMPrecision() {
			return null;
		}

		public String ISDIMDefault() {

			return "";

		}

		public String ISDIMComment() {

			return "";

		}

		public String ISDIMPattern() {

			return "";

		}

		public String ISDIMOriginalDbColumnName() {

			return "ISDIM";

		}

		public String IVATCD;

		public String getIVATCD() {
			return this.IVATCD;
		}

		public Boolean IVATCDIsNullable() {
			return true;
		}

		public Boolean IVATCDIsKey() {
			return false;
		}

		public Integer IVATCDLength() {
			return null;
		}

		public Integer IVATCDPrecision() {
			return null;
		}

		public String IVATCDDefault() {

			return "";

		}

		public String IVATCDComment() {

			return "";

		}

		public String IVATCDPattern() {

			return "";

		}

		public String IVATCDOriginalDbColumnName() {

			return "IVATCD";

		}

		public Double IPLAN;

		public Double getIPLAN() {
			return this.IPLAN;
		}

		public Boolean IPLANIsNullable() {
			return true;
		}

		public Boolean IPLANIsKey() {
			return false;
		}

		public Integer IPLANLength() {
			return null;
		}

		public Integer IPLANPrecision() {
			return null;
		}

		public String IPLANDefault() {

			return "";

		}

		public String IPLANComment() {

			return "";

		}

		public String IPLANPattern() {

			return "";

		}

		public String IPLANOriginalDbColumnName() {

			return "IPLAN";

		}

		public String IVLRK1;

		public String getIVLRK1() {
			return this.IVLRK1;
		}

		public Boolean IVLRK1IsNullable() {
			return true;
		}

		public Boolean IVLRK1IsKey() {
			return false;
		}

		public Integer IVLRK1Length() {
			return null;
		}

		public Integer IVLRK1Precision() {
			return null;
		}

		public String IVLRK1Default() {

			return "";

		}

		public String IVLRK1Comment() {

			return "";

		}

		public String IVLRK1Pattern() {

			return "";

		}

		public String IVLRK1OriginalDbColumnName() {

			return "IVLRK1";

		}

		public String IVLRK2;

		public String getIVLRK2() {
			return this.IVLRK2;
		}

		public Boolean IVLRK2IsNullable() {
			return true;
		}

		public Boolean IVLRK2IsKey() {
			return false;
		}

		public Integer IVLRK2Length() {
			return null;
		}

		public Integer IVLRK2Precision() {
			return null;
		}

		public String IVLRK2Default() {

			return "";

		}

		public String IVLRK2Comment() {

			return "";

		}

		public String IVLRK2Pattern() {

			return "";

		}

		public String IVLRK2OriginalDbColumnName() {

			return "IVLRK2";

		}

		public String IVLRK3;

		public String getIVLRK3() {
			return this.IVLRK3;
		}

		public Boolean IVLRK3IsNullable() {
			return true;
		}

		public Boolean IVLRK3IsKey() {
			return false;
		}

		public Integer IVLRK3Length() {
			return null;
		}

		public Integer IVLRK3Precision() {
			return null;
		}

		public String IVLRK3Default() {

			return "";

		}

		public String IVLRK3Comment() {

			return "";

		}

		public String IVLRK3Pattern() {

			return "";

		}

		public String IVLRK3OriginalDbColumnName() {

			return "IVLRK3";

		}

		public String IVLRK4;

		public String getIVLRK4() {
			return this.IVLRK4;
		}

		public Boolean IVLRK4IsNullable() {
			return true;
		}

		public Boolean IVLRK4IsKey() {
			return false;
		}

		public Integer IVLRK4Length() {
			return null;
		}

		public Integer IVLRK4Precision() {
			return null;
		}

		public String IVLRK4Default() {

			return "";

		}

		public String IVLRK4Comment() {

			return "";

		}

		public String IVLRK4Pattern() {

			return "";

		}

		public String IVLRK4OriginalDbColumnName() {

			return "IVLRK4";

		}

		public BigDecimal IRPLCN;

		public BigDecimal getIRPLCN() {
			return this.IRPLCN;
		}

		public Boolean IRPLCNIsNullable() {
			return true;
		}

		public Boolean IRPLCNIsKey() {
			return false;
		}

		public Integer IRPLCNLength() {
			return null;
		}

		public Integer IRPLCNPrecision() {
			return null;
		}

		public String IRPLCNDefault() {

			return "";

		}

		public String IRPLCNComment() {

			return "";

		}

		public String IRPLCNPattern() {

			return "";

		}

		public String IRPLCNOriginalDbColumnName() {

			return "IRPLCN";

		}

		public BigDecimal IRPLDT;

		public BigDecimal getIRPLDT() {
			return this.IRPLDT;
		}

		public Boolean IRPLDTIsNullable() {
			return true;
		}

		public Boolean IRPLDTIsKey() {
			return false;
		}

		public Integer IRPLDTLength() {
			return null;
		}

		public Integer IRPLDTPrecision() {
			return null;
		}

		public String IRPLDTDefault() {

			return "";

		}

		public String IRPLDTComment() {

			return "";

		}

		public String IRPLDTPattern() {

			return "";

		}

		public String IRPLDTOriginalDbColumnName() {

			return "IRPLDT";

		}

		public String ISEASN;

		public String getISEASN() {
			return this.ISEASN;
		}

		public Boolean ISEASNIsNullable() {
			return true;
		}

		public Boolean ISEASNIsKey() {
			return false;
		}

		public Integer ISEASNLength() {
			return null;
		}

		public Integer ISEASNPrecision() {
			return null;
		}

		public String ISEASNDefault() {

			return "";

		}

		public String ISEASNComment() {

			return "";

		}

		public String ISEASNPattern() {

			return "";

		}

		public String ISEASNOriginalDbColumnName() {

			return "ISEASN";

		}

		public BigDecimal IDEADC;

		public BigDecimal getIDEADC() {
			return this.IDEADC;
		}

		public Boolean IDEADCIsNullable() {
			return true;
		}

		public Boolean IDEADCIsKey() {
			return false;
		}

		public Integer IDEADCLength() {
			return null;
		}

		public Integer IDEADCPrecision() {
			return null;
		}

		public String IDEADCDefault() {

			return "";

		}

		public String IDEADCComment() {

			return "";

		}

		public String IDEADCPattern() {

			return "";

		}

		public String IDEADCOriginalDbColumnName() {

			return "IDEADC";

		}

		public BigDecimal IDEADD;

		public BigDecimal getIDEADD() {
			return this.IDEADD;
		}

		public Boolean IDEADDIsNullable() {
			return true;
		}

		public Boolean IDEADDIsKey() {
			return false;
		}

		public Integer IDEADDLength() {
			return null;
		}

		public Integer IDEADDPrecision() {
			return null;
		}

		public String IDEADDDefault() {

			return "";

		}

		public String IDEADDComment() {

			return "";

		}

		public String IDEADDPattern() {

			return "";

		}

		public String IDEADDOriginalDbColumnName() {

			return "IDEADD";

		}

		public BigDecimal INLRTL;

		public BigDecimal getINLRTL() {
			return this.INLRTL;
		}

		public Boolean INLRTLIsNullable() {
			return true;
		}

		public Boolean INLRTLIsKey() {
			return false;
		}

		public Integer INLRTLLength() {
			return null;
		}

		public Integer INLRTLPrecision() {
			return null;
		}

		public String INLRTLDefault() {

			return "";

		}

		public String INLRTLComment() {

			return "";

		}

		public String INLRTLPattern() {

			return "";

		}

		public String INLRTLOriginalDbColumnName() {

			return "INLRTL";

		}

		public String IHANDL;

		public String getIHANDL() {
			return this.IHANDL;
		}

		public Boolean IHANDLIsNullable() {
			return true;
		}

		public Boolean IHANDLIsKey() {
			return false;
		}

		public Integer IHANDLLength() {
			return null;
		}

		public Integer IHANDLPrecision() {
			return null;
		}

		public String IHANDLDefault() {

			return "";

		}

		public String IHANDLComment() {

			return "";

		}

		public String IHANDLPattern() {

			return "";

		}

		public String IHANDLOriginalDbColumnName() {

			return "IHANDL";

		}

		public String IATRB1;

		public String getIATRB1() {
			return this.IATRB1;
		}

		public Boolean IATRB1IsNullable() {
			return true;
		}

		public Boolean IATRB1IsKey() {
			return false;
		}

		public Integer IATRB1Length() {
			return null;
		}

		public Integer IATRB1Precision() {
			return null;
		}

		public String IATRB1Default() {

			return "";

		}

		public String IATRB1Comment() {

			return "";

		}

		public String IATRB1Pattern() {

			return "";

		}

		public String IATRB1OriginalDbColumnName() {

			return "IATRB1";

		}

		public String IATRB2;

		public String getIATRB2() {
			return this.IATRB2;
		}

		public Boolean IATRB2IsNullable() {
			return true;
		}

		public Boolean IATRB2IsKey() {
			return false;
		}

		public Integer IATRB2Length() {
			return null;
		}

		public Integer IATRB2Precision() {
			return null;
		}

		public String IATRB2Default() {

			return "";

		}

		public String IATRB2Comment() {

			return "";

		}

		public String IATRB2Pattern() {

			return "";

		}

		public String IATRB2OriginalDbColumnName() {

			return "IATRB2";

		}

		public String IATRB3;

		public String getIATRB3() {
			return this.IATRB3;
		}

		public Boolean IATRB3IsNullable() {
			return true;
		}

		public Boolean IATRB3IsKey() {
			return false;
		}

		public Integer IATRB3Length() {
			return null;
		}

		public Integer IATRB3Precision() {
			return null;
		}

		public String IATRB3Default() {

			return "";

		}

		public String IATRB3Comment() {

			return "";

		}

		public String IATRB3Pattern() {

			return "";

		}

		public String IATRB3OriginalDbColumnName() {

			return "IATRB3";

		}

		public String IATRB4;

		public String getIATRB4() {
			return this.IATRB4;
		}

		public Boolean IATRB4IsNullable() {
			return true;
		}

		public Boolean IATRB4IsKey() {
			return false;
		}

		public Integer IATRB4Length() {
			return null;
		}

		public Integer IATRB4Precision() {
			return null;
		}

		public String IATRB4Default() {

			return "";

		}

		public String IATRB4Comment() {

			return "";

		}

		public String IATRB4Pattern() {

			return "";

		}

		public String IATRB4OriginalDbColumnName() {

			return "IATRB4";

		}

		public String IATRB5;

		public String getIATRB5() {
			return this.IATRB5;
		}

		public Boolean IATRB5IsNullable() {
			return true;
		}

		public Boolean IATRB5IsKey() {
			return false;
		}

		public Integer IATRB5Length() {
			return null;
		}

		public Integer IATRB5Precision() {
			return null;
		}

		public String IATRB5Default() {

			return "";

		}

		public String IATRB5Comment() {

			return "";

		}

		public String IATRB5Pattern() {

			return "";

		}

		public String IATRB5OriginalDbColumnName() {

			return "IATRB5";

		}

		public String IPRCCH;

		public String getIPRCCH() {
			return this.IPRCCH;
		}

		public Boolean IPRCCHIsNullable() {
			return true;
		}

		public Boolean IPRCCHIsKey() {
			return false;
		}

		public Integer IPRCCHLength() {
			return null;
		}

		public Integer IPRCCHPrecision() {
			return null;
		}

		public String IPRCCHDefault() {

			return "";

		}

		public String IPRCCHComment() {

			return "";

		}

		public String IPRCCHPattern() {

			return "";

		}

		public String IPRCCHOriginalDbColumnName() {

			return "IPRCCH";

		}

		public String IPRCZN;

		public String getIPRCZN() {
			return this.IPRCZN;
		}

		public Boolean IPRCZNIsNullable() {
			return true;
		}

		public Boolean IPRCZNIsKey() {
			return false;
		}

		public Integer IPRCZNLength() {
			return null;
		}

		public Integer IPRCZNPrecision() {
			return null;
		}

		public String IPRCZNDefault() {

			return "";

		}

		public String IPRCZNComment() {

			return "";

		}

		public String IPRCZNPattern() {

			return "";

		}

		public String IPRCZNOriginalDbColumnName() {

			return "IPRCZN";

		}

		public String IPRCST;

		public String getIPRCST() {
			return this.IPRCST;
		}

		public Boolean IPRCSTIsNullable() {
			return true;
		}

		public Boolean IPRCSTIsKey() {
			return false;
		}

		public Integer IPRCSTLength() {
			return null;
		}

		public Integer IPRCSTPrecision() {
			return null;
		}

		public String IPRCSTDefault() {

			return "";

		}

		public String IPRCSTComment() {

			return "";

		}

		public String IPRCSTPattern() {

			return "";

		}

		public String IPRCSTOriginalDbColumnName() {

			return "IPRCST";

		}

		public Double IASNUM;

		public Double getIASNUM() {
			return this.IASNUM;
		}

		public Boolean IASNUMIsNullable() {
			return true;
		}

		public Boolean IASNUMIsKey() {
			return false;
		}

		public Integer IASNUMLength() {
			return null;
		}

		public Integer IASNUMPrecision() {
			return null;
		}

		public String IASNUMDefault() {

			return "";

		}

		public String IASNUMComment() {

			return "";

		}

		public String IASNUMPattern() {

			return "";

		}

		public String IASNUMOriginalDbColumnName() {

			return "IASNUM";

		}

		public String ICORGP;

		public String getICORGP() {
			return this.ICORGP;
		}

		public Boolean ICORGPIsNullable() {
			return true;
		}

		public Boolean ICORGPIsKey() {
			return false;
		}

		public Integer ICORGPLength() {
			return null;
		}

		public Integer ICORGPPrecision() {
			return null;
		}

		public String ICORGPDefault() {

			return "";

		}

		public String ICORGPComment() {

			return "";

		}

		public String ICORGPPattern() {

			return "";

		}

		public String ICORGPOriginalDbColumnName() {

			return "ICORGP";

		}

		public BigDecimal ILEAD;

		public BigDecimal getILEAD() {
			return this.ILEAD;
		}

		public Boolean ILEADIsNullable() {
			return true;
		}

		public Boolean ILEADIsKey() {
			return false;
		}

		public Integer ILEADLength() {
			return null;
		}

		public Integer ILEADPrecision() {
			return null;
		}

		public String ILEADDefault() {

			return "";

		}

		public String ILEADComment() {

			return "";

		}

		public String ILEADPattern() {

			return "";

		}

		public String ILEADOriginalDbColumnName() {

			return "ILEAD";

		}

		public String IHZCOD;

		public String getIHZCOD() {
			return this.IHZCOD;
		}

		public Boolean IHZCODIsNullable() {
			return true;
		}

		public Boolean IHZCODIsKey() {
			return false;
		}

		public Integer IHZCODLength() {
			return null;
		}

		public Integer IHZCODPrecision() {
			return null;
		}

		public String IHZCODDefault() {

			return "";

		}

		public String IHZCODComment() {

			return "";

		}

		public String IHZCODPattern() {

			return "";

		}

		public String IHZCODOriginalDbColumnName() {

			return "IHZCOD";

		}

		public String IFRACT;

		public String getIFRACT() {
			return this.IFRACT;
		}

		public Boolean IFRACTIsNullable() {
			return true;
		}

		public Boolean IFRACTIsKey() {
			return false;
		}

		public Integer IFRACTLength() {
			return null;
		}

		public Integer IFRACTPrecision() {
			return null;
		}

		public String IFRACTDefault() {

			return "";

		}

		public String IFRACTComment() {

			return "";

		}

		public String IFRACTPattern() {

			return "";

		}

		public String IFRACTOriginalDbColumnName() {

			return "IFRACT";

		}

		public java.util.Date LOAD_DATE;

		public java.util.Date getLOAD_DATE() {
			return this.LOAD_DATE;
		}

		public Boolean LOAD_DATEIsNullable() {
			return true;
		}

		public Boolean LOAD_DATEIsKey() {
			return false;
		}

		public Integer LOAD_DATELength() {
			return null;
		}

		public Integer LOAD_DATEPrecision() {
			return null;
		}

		public String LOAD_DATEDefault() {

			return "";

		}

		public String LOAD_DATEComment() {

			return "";

		}

		public String LOAD_DATEPattern() {

			return "yyyy-MM-dd";

		}

		public String LOAD_DATEOriginalDbColumnName() {

			return "LOAD_DATE";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.INUMBR = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.ICHECK = null;
					} else {
						this.ICHECK = dis.readDouble();
					}

					this.IDESCR = readString(dis);

					this.IDSCCD = readString(dis);

					this.ISORT = readString(dis);

					this.ISTYLN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ASNUM = null;
					} else {
						this.ASNUM = dis.readDouble();
					}

					this.IVNDPN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IMFGR = null;
					} else {
						this.IMFGR = dis.readDouble();
					}

					this.IMFGNO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IDEPT = null;
					} else {
						this.IDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISDEPT = null;
					} else {
						this.ISDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ICLAS = null;
					} else {
						this.ICLAS = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISCLAS = null;
					} else {
						this.ISCLAS = dis.readDouble();
					}

					this.BYRNUM = readString(dis);

					this.IASPAC = (BigDecimal) dis.readObject();

					this.IADVYN = readString(dis);

					this.IBUYCD = readString(dis);

					this.ISET = readString(dis);

					this.IWARNT = readString(dis);

					this.IPRMPT = readString(dis);

					this.IPRVNT = readString(dis);

					this.ITKTTR = readString(dis);

					this.ITKTTA = readString(dis);

					this.ITKTN = (BigDecimal) dis.readObject();

					this.ILBLTR = readString(dis);

					this.ILBLTA = readString(dis);

					this.IFINLN = readString(dis);

					this.IPROFL = readString(dis);

					this.IMODUL = readString(dis);

					this.ISTYPE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ISCOLR = null;
					} else {
						this.ISCOLR = dis.readDouble();
					}

					this.ISSIZE = readString(dis);

					this.IHAZCD = readString(dis);

					this.MCHNUM = readString(dis);

					this.ISUBST = (BigDecimal) dis.readObject();

					this.ICORE = (BigDecimal) dis.readObject();

					this.IREPL = (BigDecimal) dis.readObject();

					this.ISLUM = readString(dis);

					this.IUMCV2 = (BigDecimal) dis.readObject();

					this.IBYUM = readString(dis);

					this.IMINPK = (BigDecimal) dis.readObject();

					this.ISTDPK = (BigDecimal) dis.readObject();

					this.IHLDOR = readString(dis);

					this.IMOQTY = (BigDecimal) dis.readObject();

					this.IMNSTK = (BigDecimal) dis.readObject();

					this.IMXSTK = (BigDecimal) dis.readObject();

					this.IMDSTK = (BigDecimal) dis.readObject();

					this.IDSPLY = (BigDecimal) dis.readObject();

					this.IOMULT = (BigDecimal) dis.readObject();

					this.IRPLCD = readString(dis);

					this.IMFPRC = (BigDecimal) dis.readObject();

					this.IWGHT = (BigDecimal) dis.readObject();

					this.ICUBE = (BigDecimal) dis.readObject();

					this.IDLGTH = (BigDecimal) dis.readObject();

					this.IDWDTH = (BigDecimal) dis.readObject();

					this.IDHGHT = (BigDecimal) dis.readObject();

					this.IMDATE = (BigDecimal) dis.readObject();

					this.IMCENT = (BigDecimal) dis.readObject();

					this.IVPLTI = (BigDecimal) dis.readObject();

					this.IVPLHI = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.SHPNUM = null;
					} else {
						this.SHPNUM = dis.readDouble();
					}

					this.IDISTM = readString(dis);

					this.IHLDWO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IIGNUM = null;
					} else {
						this.IIGNUM = dis.readDouble();
					}

					this.ISDIM = readString(dis);

					this.IVATCD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IPLAN = null;
					} else {
						this.IPLAN = dis.readDouble();
					}

					this.IVLRK1 = readString(dis);

					this.IVLRK2 = readString(dis);

					this.IVLRK3 = readString(dis);

					this.IVLRK4 = readString(dis);

					this.IRPLCN = (BigDecimal) dis.readObject();

					this.IRPLDT = (BigDecimal) dis.readObject();

					this.ISEASN = readString(dis);

					this.IDEADC = (BigDecimal) dis.readObject();

					this.IDEADD = (BigDecimal) dis.readObject();

					this.INLRTL = (BigDecimal) dis.readObject();

					this.IHANDL = readString(dis);

					this.IATRB1 = readString(dis);

					this.IATRB2 = readString(dis);

					this.IATRB3 = readString(dis);

					this.IATRB4 = readString(dis);

					this.IATRB5 = readString(dis);

					this.IPRCCH = readString(dis);

					this.IPRCZN = readString(dis);

					this.IPRCST = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IASNUM = null;
					} else {
						this.IASNUM = dis.readDouble();
					}

					this.ICORGP = readString(dis);

					this.ILEAD = (BigDecimal) dis.readObject();

					this.IHZCOD = readString(dis);

					this.IFRACT = readString(dis);

					this.LOAD_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.INUMBR = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.ICHECK = null;
					} else {
						this.ICHECK = dis.readDouble();
					}

					this.IDESCR = readString(dis);

					this.IDSCCD = readString(dis);

					this.ISORT = readString(dis);

					this.ISTYLN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ASNUM = null;
					} else {
						this.ASNUM = dis.readDouble();
					}

					this.IVNDPN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IMFGR = null;
					} else {
						this.IMFGR = dis.readDouble();
					}

					this.IMFGNO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IDEPT = null;
					} else {
						this.IDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISDEPT = null;
					} else {
						this.ISDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ICLAS = null;
					} else {
						this.ICLAS = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISCLAS = null;
					} else {
						this.ISCLAS = dis.readDouble();
					}

					this.BYRNUM = readString(dis);

					this.IASPAC = (BigDecimal) dis.readObject();

					this.IADVYN = readString(dis);

					this.IBUYCD = readString(dis);

					this.ISET = readString(dis);

					this.IWARNT = readString(dis);

					this.IPRMPT = readString(dis);

					this.IPRVNT = readString(dis);

					this.ITKTTR = readString(dis);

					this.ITKTTA = readString(dis);

					this.ITKTN = (BigDecimal) dis.readObject();

					this.ILBLTR = readString(dis);

					this.ILBLTA = readString(dis);

					this.IFINLN = readString(dis);

					this.IPROFL = readString(dis);

					this.IMODUL = readString(dis);

					this.ISTYPE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ISCOLR = null;
					} else {
						this.ISCOLR = dis.readDouble();
					}

					this.ISSIZE = readString(dis);

					this.IHAZCD = readString(dis);

					this.MCHNUM = readString(dis);

					this.ISUBST = (BigDecimal) dis.readObject();

					this.ICORE = (BigDecimal) dis.readObject();

					this.IREPL = (BigDecimal) dis.readObject();

					this.ISLUM = readString(dis);

					this.IUMCV2 = (BigDecimal) dis.readObject();

					this.IBYUM = readString(dis);

					this.IMINPK = (BigDecimal) dis.readObject();

					this.ISTDPK = (BigDecimal) dis.readObject();

					this.IHLDOR = readString(dis);

					this.IMOQTY = (BigDecimal) dis.readObject();

					this.IMNSTK = (BigDecimal) dis.readObject();

					this.IMXSTK = (BigDecimal) dis.readObject();

					this.IMDSTK = (BigDecimal) dis.readObject();

					this.IDSPLY = (BigDecimal) dis.readObject();

					this.IOMULT = (BigDecimal) dis.readObject();

					this.IRPLCD = readString(dis);

					this.IMFPRC = (BigDecimal) dis.readObject();

					this.IWGHT = (BigDecimal) dis.readObject();

					this.ICUBE = (BigDecimal) dis.readObject();

					this.IDLGTH = (BigDecimal) dis.readObject();

					this.IDWDTH = (BigDecimal) dis.readObject();

					this.IDHGHT = (BigDecimal) dis.readObject();

					this.IMDATE = (BigDecimal) dis.readObject();

					this.IMCENT = (BigDecimal) dis.readObject();

					this.IVPLTI = (BigDecimal) dis.readObject();

					this.IVPLHI = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.SHPNUM = null;
					} else {
						this.SHPNUM = dis.readDouble();
					}

					this.IDISTM = readString(dis);

					this.IHLDWO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IIGNUM = null;
					} else {
						this.IIGNUM = dis.readDouble();
					}

					this.ISDIM = readString(dis);

					this.IVATCD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IPLAN = null;
					} else {
						this.IPLAN = dis.readDouble();
					}

					this.IVLRK1 = readString(dis);

					this.IVLRK2 = readString(dis);

					this.IVLRK3 = readString(dis);

					this.IVLRK4 = readString(dis);

					this.IRPLCN = (BigDecimal) dis.readObject();

					this.IRPLDT = (BigDecimal) dis.readObject();

					this.ISEASN = readString(dis);

					this.IDEADC = (BigDecimal) dis.readObject();

					this.IDEADD = (BigDecimal) dis.readObject();

					this.INLRTL = (BigDecimal) dis.readObject();

					this.IHANDL = readString(dis);

					this.IATRB1 = readString(dis);

					this.IATRB2 = readString(dis);

					this.IATRB3 = readString(dis);

					this.IATRB4 = readString(dis);

					this.IATRB5 = readString(dis);

					this.IPRCCH = readString(dis);

					this.IPRCZN = readString(dis);

					this.IPRCST = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IASNUM = null;
					} else {
						this.IASNUM = dis.readDouble();
					}

					this.ICORGP = readString(dis);

					this.ILEAD = (BigDecimal) dis.readObject();

					this.IHZCOD = readString(dis);

					this.IFRACT = readString(dis);

					this.LOAD_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.INUMBR);

				// Double

				if (this.ICHECK == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICHECK);
				}

				// String

				writeString(this.IDESCR, dos);

				// String

				writeString(this.IDSCCD, dos);

				// String

				writeString(this.ISORT, dos);

				// String

				writeString(this.ISTYLN, dos);

				// Double

				if (this.ASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ASNUM);
				}

				// String

				writeString(this.IVNDPN, dos);

				// Double

				if (this.IMFGR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IMFGR);
				}

				// String

				writeString(this.IMFGNO, dos);

				// Double

				if (this.IDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IDEPT);
				}

				// Double

				if (this.ISDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISDEPT);
				}

				// Double

				if (this.ICLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICLAS);
				}

				// Double

				if (this.ISCLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCLAS);
				}

				// String

				writeString(this.BYRNUM, dos);

				// BigDecimal

				dos.writeObject(this.IASPAC);

				// String

				writeString(this.IADVYN, dos);

				// String

				writeString(this.IBUYCD, dos);

				// String

				writeString(this.ISET, dos);

				// String

				writeString(this.IWARNT, dos);

				// String

				writeString(this.IPRMPT, dos);

				// String

				writeString(this.IPRVNT, dos);

				// String

				writeString(this.ITKTTR, dos);

				// String

				writeString(this.ITKTTA, dos);

				// BigDecimal

				dos.writeObject(this.ITKTN);

				// String

				writeString(this.ILBLTR, dos);

				// String

				writeString(this.ILBLTA, dos);

				// String

				writeString(this.IFINLN, dos);

				// String

				writeString(this.IPROFL, dos);

				// String

				writeString(this.IMODUL, dos);

				// String

				writeString(this.ISTYPE, dos);

				// Double

				if (this.ISCOLR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCOLR);
				}

				// String

				writeString(this.ISSIZE, dos);

				// String

				writeString(this.IHAZCD, dos);

				// String

				writeString(this.MCHNUM, dos);

				// BigDecimal

				dos.writeObject(this.ISUBST);

				// BigDecimal

				dos.writeObject(this.ICORE);

				// BigDecimal

				dos.writeObject(this.IREPL);

				// String

				writeString(this.ISLUM, dos);

				// BigDecimal

				dos.writeObject(this.IUMCV2);

				// String

				writeString(this.IBYUM, dos);

				// BigDecimal

				dos.writeObject(this.IMINPK);

				// BigDecimal

				dos.writeObject(this.ISTDPK);

				// String

				writeString(this.IHLDOR, dos);

				// BigDecimal

				dos.writeObject(this.IMOQTY);

				// BigDecimal

				dos.writeObject(this.IMNSTK);

				// BigDecimal

				dos.writeObject(this.IMXSTK);

				// BigDecimal

				dos.writeObject(this.IMDSTK);

				// BigDecimal

				dos.writeObject(this.IDSPLY);

				// BigDecimal

				dos.writeObject(this.IOMULT);

				// String

				writeString(this.IRPLCD, dos);

				// BigDecimal

				dos.writeObject(this.IMFPRC);

				// BigDecimal

				dos.writeObject(this.IWGHT);

				// BigDecimal

				dos.writeObject(this.ICUBE);

				// BigDecimal

				dos.writeObject(this.IDLGTH);

				// BigDecimal

				dos.writeObject(this.IDWDTH);

				// BigDecimal

				dos.writeObject(this.IDHGHT);

				// BigDecimal

				dos.writeObject(this.IMDATE);

				// BigDecimal

				dos.writeObject(this.IMCENT);

				// BigDecimal

				dos.writeObject(this.IVPLTI);

				// BigDecimal

				dos.writeObject(this.IVPLHI);

				// Double

				if (this.SHPNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SHPNUM);
				}

				// String

				writeString(this.IDISTM, dos);

				// String

				writeString(this.IHLDWO, dos);

				// Double

				if (this.IIGNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IIGNUM);
				}

				// String

				writeString(this.ISDIM, dos);

				// String

				writeString(this.IVATCD, dos);

				// Double

				if (this.IPLAN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IPLAN);
				}

				// String

				writeString(this.IVLRK1, dos);

				// String

				writeString(this.IVLRK2, dos);

				// String

				writeString(this.IVLRK3, dos);

				// String

				writeString(this.IVLRK4, dos);

				// BigDecimal

				dos.writeObject(this.IRPLCN);

				// BigDecimal

				dos.writeObject(this.IRPLDT);

				// String

				writeString(this.ISEASN, dos);

				// BigDecimal

				dos.writeObject(this.IDEADC);

				// BigDecimal

				dos.writeObject(this.IDEADD);

				// BigDecimal

				dos.writeObject(this.INLRTL);

				// String

				writeString(this.IHANDL, dos);

				// String

				writeString(this.IATRB1, dos);

				// String

				writeString(this.IATRB2, dos);

				// String

				writeString(this.IATRB3, dos);

				// String

				writeString(this.IATRB4, dos);

				// String

				writeString(this.IATRB5, dos);

				// String

				writeString(this.IPRCCH, dos);

				// String

				writeString(this.IPRCZN, dos);

				// String

				writeString(this.IPRCST, dos);

				// Double

				if (this.IASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IASNUM);
				}

				// String

				writeString(this.ICORGP, dos);

				// BigDecimal

				dos.writeObject(this.ILEAD);

				// String

				writeString(this.IHZCOD, dos);

				// String

				writeString(this.IFRACT, dos);

				// java.util.Date

				writeDate(this.LOAD_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.INUMBR);

				// Double

				if (this.ICHECK == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICHECK);
				}

				// String

				writeString(this.IDESCR, dos);

				// String

				writeString(this.IDSCCD, dos);

				// String

				writeString(this.ISORT, dos);

				// String

				writeString(this.ISTYLN, dos);

				// Double

				if (this.ASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ASNUM);
				}

				// String

				writeString(this.IVNDPN, dos);

				// Double

				if (this.IMFGR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IMFGR);
				}

				// String

				writeString(this.IMFGNO, dos);

				// Double

				if (this.IDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IDEPT);
				}

				// Double

				if (this.ISDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISDEPT);
				}

				// Double

				if (this.ICLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICLAS);
				}

				// Double

				if (this.ISCLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCLAS);
				}

				// String

				writeString(this.BYRNUM, dos);

				// BigDecimal

				dos.writeObject(this.IASPAC);

				// String

				writeString(this.IADVYN, dos);

				// String

				writeString(this.IBUYCD, dos);

				// String

				writeString(this.ISET, dos);

				// String

				writeString(this.IWARNT, dos);

				// String

				writeString(this.IPRMPT, dos);

				// String

				writeString(this.IPRVNT, dos);

				// String

				writeString(this.ITKTTR, dos);

				// String

				writeString(this.ITKTTA, dos);

				// BigDecimal

				dos.writeObject(this.ITKTN);

				// String

				writeString(this.ILBLTR, dos);

				// String

				writeString(this.ILBLTA, dos);

				// String

				writeString(this.IFINLN, dos);

				// String

				writeString(this.IPROFL, dos);

				// String

				writeString(this.IMODUL, dos);

				// String

				writeString(this.ISTYPE, dos);

				// Double

				if (this.ISCOLR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCOLR);
				}

				// String

				writeString(this.ISSIZE, dos);

				// String

				writeString(this.IHAZCD, dos);

				// String

				writeString(this.MCHNUM, dos);

				// BigDecimal

				dos.writeObject(this.ISUBST);

				// BigDecimal

				dos.writeObject(this.ICORE);

				// BigDecimal

				dos.writeObject(this.IREPL);

				// String

				writeString(this.ISLUM, dos);

				// BigDecimal

				dos.writeObject(this.IUMCV2);

				// String

				writeString(this.IBYUM, dos);

				// BigDecimal

				dos.writeObject(this.IMINPK);

				// BigDecimal

				dos.writeObject(this.ISTDPK);

				// String

				writeString(this.IHLDOR, dos);

				// BigDecimal

				dos.writeObject(this.IMOQTY);

				// BigDecimal

				dos.writeObject(this.IMNSTK);

				// BigDecimal

				dos.writeObject(this.IMXSTK);

				// BigDecimal

				dos.writeObject(this.IMDSTK);

				// BigDecimal

				dos.writeObject(this.IDSPLY);

				// BigDecimal

				dos.writeObject(this.IOMULT);

				// String

				writeString(this.IRPLCD, dos);

				// BigDecimal

				dos.writeObject(this.IMFPRC);

				// BigDecimal

				dos.writeObject(this.IWGHT);

				// BigDecimal

				dos.writeObject(this.ICUBE);

				// BigDecimal

				dos.writeObject(this.IDLGTH);

				// BigDecimal

				dos.writeObject(this.IDWDTH);

				// BigDecimal

				dos.writeObject(this.IDHGHT);

				// BigDecimal

				dos.writeObject(this.IMDATE);

				// BigDecimal

				dos.writeObject(this.IMCENT);

				// BigDecimal

				dos.writeObject(this.IVPLTI);

				// BigDecimal

				dos.writeObject(this.IVPLHI);

				// Double

				if (this.SHPNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SHPNUM);
				}

				// String

				writeString(this.IDISTM, dos);

				// String

				writeString(this.IHLDWO, dos);

				// Double

				if (this.IIGNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IIGNUM);
				}

				// String

				writeString(this.ISDIM, dos);

				// String

				writeString(this.IVATCD, dos);

				// Double

				if (this.IPLAN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IPLAN);
				}

				// String

				writeString(this.IVLRK1, dos);

				// String

				writeString(this.IVLRK2, dos);

				// String

				writeString(this.IVLRK3, dos);

				// String

				writeString(this.IVLRK4, dos);

				// BigDecimal

				dos.writeObject(this.IRPLCN);

				// BigDecimal

				dos.writeObject(this.IRPLDT);

				// String

				writeString(this.ISEASN, dos);

				// BigDecimal

				dos.writeObject(this.IDEADC);

				// BigDecimal

				dos.writeObject(this.IDEADD);

				// BigDecimal

				dos.writeObject(this.INLRTL);

				// String

				writeString(this.IHANDL, dos);

				// String

				writeString(this.IATRB1, dos);

				// String

				writeString(this.IATRB2, dos);

				// String

				writeString(this.IATRB3, dos);

				// String

				writeString(this.IATRB4, dos);

				// String

				writeString(this.IATRB5, dos);

				// String

				writeString(this.IPRCCH, dos);

				// String

				writeString(this.IPRCZN, dos);

				// String

				writeString(this.IPRCST, dos);

				// Double

				if (this.IASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IASNUM);
				}

				// String

				writeString(this.ICORGP, dos);

				// BigDecimal

				dos.writeObject(this.ILEAD);

				// String

				writeString(this.IHZCOD, dos);

				// String

				writeString(this.IFRACT, dos);

				// java.util.Date

				writeDate(this.LOAD_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("INUMBR=" + String.valueOf(INUMBR));
			sb.append(",ICHECK=" + String.valueOf(ICHECK));
			sb.append(",IDESCR=" + IDESCR);
			sb.append(",IDSCCD=" + IDSCCD);
			sb.append(",ISORT=" + ISORT);
			sb.append(",ISTYLN=" + ISTYLN);
			sb.append(",ASNUM=" + String.valueOf(ASNUM));
			sb.append(",IVNDPN=" + IVNDPN);
			sb.append(",IMFGR=" + String.valueOf(IMFGR));
			sb.append(",IMFGNO=" + IMFGNO);
			sb.append(",IDEPT=" + String.valueOf(IDEPT));
			sb.append(",ISDEPT=" + String.valueOf(ISDEPT));
			sb.append(",ICLAS=" + String.valueOf(ICLAS));
			sb.append(",ISCLAS=" + String.valueOf(ISCLAS));
			sb.append(",BYRNUM=" + BYRNUM);
			sb.append(",IASPAC=" + String.valueOf(IASPAC));
			sb.append(",IADVYN=" + IADVYN);
			sb.append(",IBUYCD=" + IBUYCD);
			sb.append(",ISET=" + ISET);
			sb.append(",IWARNT=" + IWARNT);
			sb.append(",IPRMPT=" + IPRMPT);
			sb.append(",IPRVNT=" + IPRVNT);
			sb.append(",ITKTTR=" + ITKTTR);
			sb.append(",ITKTTA=" + ITKTTA);
			sb.append(",ITKTN=" + String.valueOf(ITKTN));
			sb.append(",ILBLTR=" + ILBLTR);
			sb.append(",ILBLTA=" + ILBLTA);
			sb.append(",IFINLN=" + IFINLN);
			sb.append(",IPROFL=" + IPROFL);
			sb.append(",IMODUL=" + IMODUL);
			sb.append(",ISTYPE=" + ISTYPE);
			sb.append(",ISCOLR=" + String.valueOf(ISCOLR));
			sb.append(",ISSIZE=" + ISSIZE);
			sb.append(",IHAZCD=" + IHAZCD);
			sb.append(",MCHNUM=" + MCHNUM);
			sb.append(",ISUBST=" + String.valueOf(ISUBST));
			sb.append(",ICORE=" + String.valueOf(ICORE));
			sb.append(",IREPL=" + String.valueOf(IREPL));
			sb.append(",ISLUM=" + ISLUM);
			sb.append(",IUMCV2=" + String.valueOf(IUMCV2));
			sb.append(",IBYUM=" + IBYUM);
			sb.append(",IMINPK=" + String.valueOf(IMINPK));
			sb.append(",ISTDPK=" + String.valueOf(ISTDPK));
			sb.append(",IHLDOR=" + IHLDOR);
			sb.append(",IMOQTY=" + String.valueOf(IMOQTY));
			sb.append(",IMNSTK=" + String.valueOf(IMNSTK));
			sb.append(",IMXSTK=" + String.valueOf(IMXSTK));
			sb.append(",IMDSTK=" + String.valueOf(IMDSTK));
			sb.append(",IDSPLY=" + String.valueOf(IDSPLY));
			sb.append(",IOMULT=" + String.valueOf(IOMULT));
			sb.append(",IRPLCD=" + IRPLCD);
			sb.append(",IMFPRC=" + String.valueOf(IMFPRC));
			sb.append(",IWGHT=" + String.valueOf(IWGHT));
			sb.append(",ICUBE=" + String.valueOf(ICUBE));
			sb.append(",IDLGTH=" + String.valueOf(IDLGTH));
			sb.append(",IDWDTH=" + String.valueOf(IDWDTH));
			sb.append(",IDHGHT=" + String.valueOf(IDHGHT));
			sb.append(",IMDATE=" + String.valueOf(IMDATE));
			sb.append(",IMCENT=" + String.valueOf(IMCENT));
			sb.append(",IVPLTI=" + String.valueOf(IVPLTI));
			sb.append(",IVPLHI=" + String.valueOf(IVPLHI));
			sb.append(",SHPNUM=" + String.valueOf(SHPNUM));
			sb.append(",IDISTM=" + IDISTM);
			sb.append(",IHLDWO=" + IHLDWO);
			sb.append(",IIGNUM=" + String.valueOf(IIGNUM));
			sb.append(",ISDIM=" + ISDIM);
			sb.append(",IVATCD=" + IVATCD);
			sb.append(",IPLAN=" + String.valueOf(IPLAN));
			sb.append(",IVLRK1=" + IVLRK1);
			sb.append(",IVLRK2=" + IVLRK2);
			sb.append(",IVLRK3=" + IVLRK3);
			sb.append(",IVLRK4=" + IVLRK4);
			sb.append(",IRPLCN=" + String.valueOf(IRPLCN));
			sb.append(",IRPLDT=" + String.valueOf(IRPLDT));
			sb.append(",ISEASN=" + ISEASN);
			sb.append(",IDEADC=" + String.valueOf(IDEADC));
			sb.append(",IDEADD=" + String.valueOf(IDEADD));
			sb.append(",INLRTL=" + String.valueOf(INLRTL));
			sb.append(",IHANDL=" + IHANDL);
			sb.append(",IATRB1=" + IATRB1);
			sb.append(",IATRB2=" + IATRB2);
			sb.append(",IATRB3=" + IATRB3);
			sb.append(",IATRB4=" + IATRB4);
			sb.append(",IATRB5=" + IATRB5);
			sb.append(",IPRCCH=" + IPRCCH);
			sb.append(",IPRCZN=" + IPRCZN);
			sb.append(",IPRCST=" + IPRCST);
			sb.append(",IASNUM=" + String.valueOf(IASNUM));
			sb.append(",ICORGP=" + ICORGP);
			sb.append(",ILEAD=" + String.valueOf(ILEAD));
			sb.append(",IHZCOD=" + IHZCOD);
			sb.append(",IFRACT=" + IFRACT);
			sb.append(",LOAD_DATE=" + String.valueOf(LOAD_DATE));
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (INUMBR == null) {
				sb.append("<null>");
			} else {
				sb.append(INUMBR);
			}

			sb.append("|");

			if (ICHECK == null) {
				sb.append("<null>");
			} else {
				sb.append(ICHECK);
			}

			sb.append("|");

			if (IDESCR == null) {
				sb.append("<null>");
			} else {
				sb.append(IDESCR);
			}

			sb.append("|");

			if (IDSCCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IDSCCD);
			}

			sb.append("|");

			if (ISORT == null) {
				sb.append("<null>");
			} else {
				sb.append(ISORT);
			}

			sb.append("|");

			if (ISTYLN == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTYLN);
			}

			sb.append("|");

			if (ASNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(ASNUM);
			}

			sb.append("|");

			if (IVNDPN == null) {
				sb.append("<null>");
			} else {
				sb.append(IVNDPN);
			}

			sb.append("|");

			if (IMFGR == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFGR);
			}

			sb.append("|");

			if (IMFGNO == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFGNO);
			}

			sb.append("|");

			if (IDEPT == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEPT);
			}

			sb.append("|");

			if (ISDEPT == null) {
				sb.append("<null>");
			} else {
				sb.append(ISDEPT);
			}

			sb.append("|");

			if (ICLAS == null) {
				sb.append("<null>");
			} else {
				sb.append(ICLAS);
			}

			sb.append("|");

			if (ISCLAS == null) {
				sb.append("<null>");
			} else {
				sb.append(ISCLAS);
			}

			sb.append("|");

			if (BYRNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(BYRNUM);
			}

			sb.append("|");

			if (IASPAC == null) {
				sb.append("<null>");
			} else {
				sb.append(IASPAC);
			}

			sb.append("|");

			if (IADVYN == null) {
				sb.append("<null>");
			} else {
				sb.append(IADVYN);
			}

			sb.append("|");

			if (IBUYCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IBUYCD);
			}

			sb.append("|");

			if (ISET == null) {
				sb.append("<null>");
			} else {
				sb.append(ISET);
			}

			sb.append("|");

			if (IWARNT == null) {
				sb.append("<null>");
			} else {
				sb.append(IWARNT);
			}

			sb.append("|");

			if (IPRMPT == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRMPT);
			}

			sb.append("|");

			if (IPRVNT == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRVNT);
			}

			sb.append("|");

			if (ITKTTR == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTTR);
			}

			sb.append("|");

			if (ITKTTA == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTTA);
			}

			sb.append("|");

			if (ITKTN == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTN);
			}

			sb.append("|");

			if (ILBLTR == null) {
				sb.append("<null>");
			} else {
				sb.append(ILBLTR);
			}

			sb.append("|");

			if (ILBLTA == null) {
				sb.append("<null>");
			} else {
				sb.append(ILBLTA);
			}

			sb.append("|");

			if (IFINLN == null) {
				sb.append("<null>");
			} else {
				sb.append(IFINLN);
			}

			sb.append("|");

			if (IPROFL == null) {
				sb.append("<null>");
			} else {
				sb.append(IPROFL);
			}

			sb.append("|");

			if (IMODUL == null) {
				sb.append("<null>");
			} else {
				sb.append(IMODUL);
			}

			sb.append("|");

			if (ISTYPE == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTYPE);
			}

			sb.append("|");

			if (ISCOLR == null) {
				sb.append("<null>");
			} else {
				sb.append(ISCOLR);
			}

			sb.append("|");

			if (ISSIZE == null) {
				sb.append("<null>");
			} else {
				sb.append(ISSIZE);
			}

			sb.append("|");

			if (IHAZCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IHAZCD);
			}

			sb.append("|");

			if (MCHNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(MCHNUM);
			}

			sb.append("|");

			if (ISUBST == null) {
				sb.append("<null>");
			} else {
				sb.append(ISUBST);
			}

			sb.append("|");

			if (ICORE == null) {
				sb.append("<null>");
			} else {
				sb.append(ICORE);
			}

			sb.append("|");

			if (IREPL == null) {
				sb.append("<null>");
			} else {
				sb.append(IREPL);
			}

			sb.append("|");

			if (ISLUM == null) {
				sb.append("<null>");
			} else {
				sb.append(ISLUM);
			}

			sb.append("|");

			if (IUMCV2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IUMCV2);
			}

			sb.append("|");

			if (IBYUM == null) {
				sb.append("<null>");
			} else {
				sb.append(IBYUM);
			}

			sb.append("|");

			if (IMINPK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMINPK);
			}

			sb.append("|");

			if (ISTDPK == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTDPK);
			}

			sb.append("|");

			if (IHLDOR == null) {
				sb.append("<null>");
			} else {
				sb.append(IHLDOR);
			}

			sb.append("|");

			if (IMOQTY == null) {
				sb.append("<null>");
			} else {
				sb.append(IMOQTY);
			}

			sb.append("|");

			if (IMNSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMNSTK);
			}

			sb.append("|");

			if (IMXSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMXSTK);
			}

			sb.append("|");

			if (IMDSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMDSTK);
			}

			sb.append("|");

			if (IDSPLY == null) {
				sb.append("<null>");
			} else {
				sb.append(IDSPLY);
			}

			sb.append("|");

			if (IOMULT == null) {
				sb.append("<null>");
			} else {
				sb.append(IOMULT);
			}

			sb.append("|");

			if (IRPLCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLCD);
			}

			sb.append("|");

			if (IMFPRC == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFPRC);
			}

			sb.append("|");

			if (IWGHT == null) {
				sb.append("<null>");
			} else {
				sb.append(IWGHT);
			}

			sb.append("|");

			if (ICUBE == null) {
				sb.append("<null>");
			} else {
				sb.append(ICUBE);
			}

			sb.append("|");

			if (IDLGTH == null) {
				sb.append("<null>");
			} else {
				sb.append(IDLGTH);
			}

			sb.append("|");

			if (IDWDTH == null) {
				sb.append("<null>");
			} else {
				sb.append(IDWDTH);
			}

			sb.append("|");

			if (IDHGHT == null) {
				sb.append("<null>");
			} else {
				sb.append(IDHGHT);
			}

			sb.append("|");

			if (IMDATE == null) {
				sb.append("<null>");
			} else {
				sb.append(IMDATE);
			}

			sb.append("|");

			if (IMCENT == null) {
				sb.append("<null>");
			} else {
				sb.append(IMCENT);
			}

			sb.append("|");

			if (IVPLTI == null) {
				sb.append("<null>");
			} else {
				sb.append(IVPLTI);
			}

			sb.append("|");

			if (IVPLHI == null) {
				sb.append("<null>");
			} else {
				sb.append(IVPLHI);
			}

			sb.append("|");

			if (SHPNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(SHPNUM);
			}

			sb.append("|");

			if (IDISTM == null) {
				sb.append("<null>");
			} else {
				sb.append(IDISTM);
			}

			sb.append("|");

			if (IHLDWO == null) {
				sb.append("<null>");
			} else {
				sb.append(IHLDWO);
			}

			sb.append("|");

			if (IIGNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(IIGNUM);
			}

			sb.append("|");

			if (ISDIM == null) {
				sb.append("<null>");
			} else {
				sb.append(ISDIM);
			}

			sb.append("|");

			if (IVATCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IVATCD);
			}

			sb.append("|");

			if (IPLAN == null) {
				sb.append("<null>");
			} else {
				sb.append(IPLAN);
			}

			sb.append("|");

			if (IVLRK1 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK1);
			}

			sb.append("|");

			if (IVLRK2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK2);
			}

			sb.append("|");

			if (IVLRK3 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK3);
			}

			sb.append("|");

			if (IVLRK4 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK4);
			}

			sb.append("|");

			if (IRPLCN == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLCN);
			}

			sb.append("|");

			if (IRPLDT == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLDT);
			}

			sb.append("|");

			if (ISEASN == null) {
				sb.append("<null>");
			} else {
				sb.append(ISEASN);
			}

			sb.append("|");

			if (IDEADC == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEADC);
			}

			sb.append("|");

			if (IDEADD == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEADD);
			}

			sb.append("|");

			if (INLRTL == null) {
				sb.append("<null>");
			} else {
				sb.append(INLRTL);
			}

			sb.append("|");

			if (IHANDL == null) {
				sb.append("<null>");
			} else {
				sb.append(IHANDL);
			}

			sb.append("|");

			if (IATRB1 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB1);
			}

			sb.append("|");

			if (IATRB2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB2);
			}

			sb.append("|");

			if (IATRB3 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB3);
			}

			sb.append("|");

			if (IATRB4 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB4);
			}

			sb.append("|");

			if (IATRB5 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB5);
			}

			sb.append("|");

			if (IPRCCH == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCCH);
			}

			sb.append("|");

			if (IPRCZN == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCZN);
			}

			sb.append("|");

			if (IPRCST == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCST);
			}

			sb.append("|");

			if (IASNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(IASNUM);
			}

			sb.append("|");

			if (ICORGP == null) {
				sb.append("<null>");
			} else {
				sb.append(ICORGP);
			}

			sb.append("|");

			if (ILEAD == null) {
				sb.append("<null>");
			} else {
				sb.append(ILEAD);
			}

			sb.append("|");

			if (IHZCOD == null) {
				sb.append("<null>");
			} else {
				sb.append(IHZCOD);
			}

			sb.append("|");

			if (IFRACT == null) {
				sb.append("<null>");
			} else {
				sb.append(IFRACT);
			}

			sb.append("|");

			if (LOAD_DATE == null) {
				sb.append("<null>");
			} else {
				sb.append(LOAD_DATE);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(INVMSTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal INUMBR;

		public BigDecimal getINUMBR() {
			return this.INUMBR;
		}

		public Boolean INUMBRIsNullable() {
			return true;
		}

		public Boolean INUMBRIsKey() {
			return false;
		}

		public Integer INUMBRLength() {
			return null;
		}

		public Integer INUMBRPrecision() {
			return null;
		}

		public String INUMBRDefault() {

			return "";

		}

		public String INUMBRComment() {

			return "";

		}

		public String INUMBRPattern() {

			return "";

		}

		public String INUMBROriginalDbColumnName() {

			return "INUMBR";

		}

		public Double ICHECK;

		public Double getICHECK() {
			return this.ICHECK;
		}

		public Boolean ICHECKIsNullable() {
			return true;
		}

		public Boolean ICHECKIsKey() {
			return false;
		}

		public Integer ICHECKLength() {
			return null;
		}

		public Integer ICHECKPrecision() {
			return null;
		}

		public String ICHECKDefault() {

			return "";

		}

		public String ICHECKComment() {

			return "";

		}

		public String ICHECKPattern() {

			return "";

		}

		public String ICHECKOriginalDbColumnName() {

			return "ICHECK";

		}

		public String IDESCR;

		public String getIDESCR() {
			return this.IDESCR;
		}

		public Boolean IDESCRIsNullable() {
			return true;
		}

		public Boolean IDESCRIsKey() {
			return false;
		}

		public Integer IDESCRLength() {
			return null;
		}

		public Integer IDESCRPrecision() {
			return null;
		}

		public String IDESCRDefault() {

			return null;

		}

		public String IDESCRComment() {

			return "";

		}

		public String IDESCRPattern() {

			return "";

		}

		public String IDESCROriginalDbColumnName() {

			return "IDESCR";

		}

		public String IDSCCD;

		public String getIDSCCD() {
			return this.IDSCCD;
		}

		public Boolean IDSCCDIsNullable() {
			return true;
		}

		public Boolean IDSCCDIsKey() {
			return false;
		}

		public Integer IDSCCDLength() {
			return null;
		}

		public Integer IDSCCDPrecision() {
			return null;
		}

		public String IDSCCDDefault() {

			return null;

		}

		public String IDSCCDComment() {

			return "";

		}

		public String IDSCCDPattern() {

			return "";

		}

		public String IDSCCDOriginalDbColumnName() {

			return "IDSCCD";

		}

		public String ISORT;

		public String getISORT() {
			return this.ISORT;
		}

		public Boolean ISORTIsNullable() {
			return true;
		}

		public Boolean ISORTIsKey() {
			return false;
		}

		public Integer ISORTLength() {
			return null;
		}

		public Integer ISORTPrecision() {
			return null;
		}

		public String ISORTDefault() {

			return null;

		}

		public String ISORTComment() {

			return "";

		}

		public String ISORTPattern() {

			return "";

		}

		public String ISORTOriginalDbColumnName() {

			return "ISORT";

		}

		public String ISTYLN;

		public String getISTYLN() {
			return this.ISTYLN;
		}

		public Boolean ISTYLNIsNullable() {
			return true;
		}

		public Boolean ISTYLNIsKey() {
			return false;
		}

		public Integer ISTYLNLength() {
			return null;
		}

		public Integer ISTYLNPrecision() {
			return null;
		}

		public String ISTYLNDefault() {

			return null;

		}

		public String ISTYLNComment() {

			return "";

		}

		public String ISTYLNPattern() {

			return "";

		}

		public String ISTYLNOriginalDbColumnName() {

			return "ISTYLN";

		}

		public Double ASNUM;

		public Double getASNUM() {
			return this.ASNUM;
		}

		public Boolean ASNUMIsNullable() {
			return true;
		}

		public Boolean ASNUMIsKey() {
			return false;
		}

		public Integer ASNUMLength() {
			return null;
		}

		public Integer ASNUMPrecision() {
			return null;
		}

		public String ASNUMDefault() {

			return "";

		}

		public String ASNUMComment() {

			return "";

		}

		public String ASNUMPattern() {

			return "";

		}

		public String ASNUMOriginalDbColumnName() {

			return "ASNUM";

		}

		public String IVNDPN;

		public String getIVNDPN() {
			return this.IVNDPN;
		}

		public Boolean IVNDPNIsNullable() {
			return true;
		}

		public Boolean IVNDPNIsKey() {
			return false;
		}

		public Integer IVNDPNLength() {
			return null;
		}

		public Integer IVNDPNPrecision() {
			return null;
		}

		public String IVNDPNDefault() {

			return null;

		}

		public String IVNDPNComment() {

			return "";

		}

		public String IVNDPNPattern() {

			return "";

		}

		public String IVNDPNOriginalDbColumnName() {

			return "IVNDPN";

		}

		public Double IMFGR;

		public Double getIMFGR() {
			return this.IMFGR;
		}

		public Boolean IMFGRIsNullable() {
			return true;
		}

		public Boolean IMFGRIsKey() {
			return false;
		}

		public Integer IMFGRLength() {
			return null;
		}

		public Integer IMFGRPrecision() {
			return null;
		}

		public String IMFGRDefault() {

			return "";

		}

		public String IMFGRComment() {

			return "";

		}

		public String IMFGRPattern() {

			return "";

		}

		public String IMFGROriginalDbColumnName() {

			return "IMFGR";

		}

		public String IMFGNO;

		public String getIMFGNO() {
			return this.IMFGNO;
		}

		public Boolean IMFGNOIsNullable() {
			return true;
		}

		public Boolean IMFGNOIsKey() {
			return false;
		}

		public Integer IMFGNOLength() {
			return null;
		}

		public Integer IMFGNOPrecision() {
			return null;
		}

		public String IMFGNODefault() {

			return null;

		}

		public String IMFGNOComment() {

			return "";

		}

		public String IMFGNOPattern() {

			return "";

		}

		public String IMFGNOOriginalDbColumnName() {

			return "IMFGNO";

		}

		public Double IDEPT;

		public Double getIDEPT() {
			return this.IDEPT;
		}

		public Boolean IDEPTIsNullable() {
			return true;
		}

		public Boolean IDEPTIsKey() {
			return false;
		}

		public Integer IDEPTLength() {
			return null;
		}

		public Integer IDEPTPrecision() {
			return null;
		}

		public String IDEPTDefault() {

			return "";

		}

		public String IDEPTComment() {

			return "";

		}

		public String IDEPTPattern() {

			return "";

		}

		public String IDEPTOriginalDbColumnName() {

			return "IDEPT";

		}

		public Double ISDEPT;

		public Double getISDEPT() {
			return this.ISDEPT;
		}

		public Boolean ISDEPTIsNullable() {
			return true;
		}

		public Boolean ISDEPTIsKey() {
			return false;
		}

		public Integer ISDEPTLength() {
			return null;
		}

		public Integer ISDEPTPrecision() {
			return null;
		}

		public String ISDEPTDefault() {

			return "";

		}

		public String ISDEPTComment() {

			return "";

		}

		public String ISDEPTPattern() {

			return "";

		}

		public String ISDEPTOriginalDbColumnName() {

			return "ISDEPT";

		}

		public Double ICLAS;

		public Double getICLAS() {
			return this.ICLAS;
		}

		public Boolean ICLASIsNullable() {
			return true;
		}

		public Boolean ICLASIsKey() {
			return false;
		}

		public Integer ICLASLength() {
			return null;
		}

		public Integer ICLASPrecision() {
			return null;
		}

		public String ICLASDefault() {

			return "";

		}

		public String ICLASComment() {

			return "";

		}

		public String ICLASPattern() {

			return "";

		}

		public String ICLASOriginalDbColumnName() {

			return "ICLAS";

		}

		public Double ISCLAS;

		public Double getISCLAS() {
			return this.ISCLAS;
		}

		public Boolean ISCLASIsNullable() {
			return true;
		}

		public Boolean ISCLASIsKey() {
			return false;
		}

		public Integer ISCLASLength() {
			return null;
		}

		public Integer ISCLASPrecision() {
			return null;
		}

		public String ISCLASDefault() {

			return "";

		}

		public String ISCLASComment() {

			return "";

		}

		public String ISCLASPattern() {

			return "";

		}

		public String ISCLASOriginalDbColumnName() {

			return "ISCLAS";

		}

		public String BYRNUM;

		public String getBYRNUM() {
			return this.BYRNUM;
		}

		public Boolean BYRNUMIsNullable() {
			return true;
		}

		public Boolean BYRNUMIsKey() {
			return false;
		}

		public Integer BYRNUMLength() {
			return null;
		}

		public Integer BYRNUMPrecision() {
			return null;
		}

		public String BYRNUMDefault() {

			return "";

		}

		public String BYRNUMComment() {

			return "";

		}

		public String BYRNUMPattern() {

			return "";

		}

		public String BYRNUMOriginalDbColumnName() {

			return "BYRNUM";

		}

		public BigDecimal IASPAC;

		public BigDecimal getIASPAC() {
			return this.IASPAC;
		}

		public Boolean IASPACIsNullable() {
			return true;
		}

		public Boolean IASPACIsKey() {
			return false;
		}

		public Integer IASPACLength() {
			return null;
		}

		public Integer IASPACPrecision() {
			return null;
		}

		public String IASPACDefault() {

			return "";

		}

		public String IASPACComment() {

			return "";

		}

		public String IASPACPattern() {

			return "";

		}

		public String IASPACOriginalDbColumnName() {

			return "IASPAC";

		}

		public String IADVYN;

		public String getIADVYN() {
			return this.IADVYN;
		}

		public Boolean IADVYNIsNullable() {
			return true;
		}

		public Boolean IADVYNIsKey() {
			return false;
		}

		public Integer IADVYNLength() {
			return null;
		}

		public Integer IADVYNPrecision() {
			return null;
		}

		public String IADVYNDefault() {

			return "";

		}

		public String IADVYNComment() {

			return "";

		}

		public String IADVYNPattern() {

			return "";

		}

		public String IADVYNOriginalDbColumnName() {

			return "IADVYN";

		}

		public String IBUYCD;

		public String getIBUYCD() {
			return this.IBUYCD;
		}

		public Boolean IBUYCDIsNullable() {
			return true;
		}

		public Boolean IBUYCDIsKey() {
			return false;
		}

		public Integer IBUYCDLength() {
			return null;
		}

		public Integer IBUYCDPrecision() {
			return null;
		}

		public String IBUYCDDefault() {

			return "";

		}

		public String IBUYCDComment() {

			return "";

		}

		public String IBUYCDPattern() {

			return "";

		}

		public String IBUYCDOriginalDbColumnName() {

			return "IBUYCD";

		}

		public String ISET;

		public String getISET() {
			return this.ISET;
		}

		public Boolean ISETIsNullable() {
			return true;
		}

		public Boolean ISETIsKey() {
			return false;
		}

		public Integer ISETLength() {
			return null;
		}

		public Integer ISETPrecision() {
			return null;
		}

		public String ISETDefault() {

			return "";

		}

		public String ISETComment() {

			return "";

		}

		public String ISETPattern() {

			return "";

		}

		public String ISETOriginalDbColumnName() {

			return "ISET";

		}

		public String IWARNT;

		public String getIWARNT() {
			return this.IWARNT;
		}

		public Boolean IWARNTIsNullable() {
			return true;
		}

		public Boolean IWARNTIsKey() {
			return false;
		}

		public Integer IWARNTLength() {
			return null;
		}

		public Integer IWARNTPrecision() {
			return null;
		}

		public String IWARNTDefault() {

			return "";

		}

		public String IWARNTComment() {

			return "";

		}

		public String IWARNTPattern() {

			return "";

		}

		public String IWARNTOriginalDbColumnName() {

			return "IWARNT";

		}

		public String IPRMPT;

		public String getIPRMPT() {
			return this.IPRMPT;
		}

		public Boolean IPRMPTIsNullable() {
			return true;
		}

		public Boolean IPRMPTIsKey() {
			return false;
		}

		public Integer IPRMPTLength() {
			return null;
		}

		public Integer IPRMPTPrecision() {
			return null;
		}

		public String IPRMPTDefault() {

			return "";

		}

		public String IPRMPTComment() {

			return "";

		}

		public String IPRMPTPattern() {

			return "";

		}

		public String IPRMPTOriginalDbColumnName() {

			return "IPRMPT";

		}

		public String IPRVNT;

		public String getIPRVNT() {
			return this.IPRVNT;
		}

		public Boolean IPRVNTIsNullable() {
			return true;
		}

		public Boolean IPRVNTIsKey() {
			return false;
		}

		public Integer IPRVNTLength() {
			return null;
		}

		public Integer IPRVNTPrecision() {
			return null;
		}

		public String IPRVNTDefault() {

			return "";

		}

		public String IPRVNTComment() {

			return "";

		}

		public String IPRVNTPattern() {

			return "";

		}

		public String IPRVNTOriginalDbColumnName() {

			return "IPRVNT";

		}

		public String ITKTTR;

		public String getITKTTR() {
			return this.ITKTTR;
		}

		public Boolean ITKTTRIsNullable() {
			return true;
		}

		public Boolean ITKTTRIsKey() {
			return false;
		}

		public Integer ITKTTRLength() {
			return null;
		}

		public Integer ITKTTRPrecision() {
			return null;
		}

		public String ITKTTRDefault() {

			return "";

		}

		public String ITKTTRComment() {

			return "";

		}

		public String ITKTTRPattern() {

			return "";

		}

		public String ITKTTROriginalDbColumnName() {

			return "ITKTTR";

		}

		public String ITKTTA;

		public String getITKTTA() {
			return this.ITKTTA;
		}

		public Boolean ITKTTAIsNullable() {
			return true;
		}

		public Boolean ITKTTAIsKey() {
			return false;
		}

		public Integer ITKTTALength() {
			return null;
		}

		public Integer ITKTTAPrecision() {
			return null;
		}

		public String ITKTTADefault() {

			return "";

		}

		public String ITKTTAComment() {

			return "";

		}

		public String ITKTTAPattern() {

			return "";

		}

		public String ITKTTAOriginalDbColumnName() {

			return "ITKTTA";

		}

		public BigDecimal ITKTN;

		public BigDecimal getITKTN() {
			return this.ITKTN;
		}

		public Boolean ITKTNIsNullable() {
			return true;
		}

		public Boolean ITKTNIsKey() {
			return false;
		}

		public Integer ITKTNLength() {
			return null;
		}

		public Integer ITKTNPrecision() {
			return null;
		}

		public String ITKTNDefault() {

			return "";

		}

		public String ITKTNComment() {

			return "";

		}

		public String ITKTNPattern() {

			return "";

		}

		public String ITKTNOriginalDbColumnName() {

			return "ITKTN";

		}

		public String ILBLTR;

		public String getILBLTR() {
			return this.ILBLTR;
		}

		public Boolean ILBLTRIsNullable() {
			return true;
		}

		public Boolean ILBLTRIsKey() {
			return false;
		}

		public Integer ILBLTRLength() {
			return null;
		}

		public Integer ILBLTRPrecision() {
			return null;
		}

		public String ILBLTRDefault() {

			return "";

		}

		public String ILBLTRComment() {

			return "";

		}

		public String ILBLTRPattern() {

			return "";

		}

		public String ILBLTROriginalDbColumnName() {

			return "ILBLTR";

		}

		public String ILBLTA;

		public String getILBLTA() {
			return this.ILBLTA;
		}

		public Boolean ILBLTAIsNullable() {
			return true;
		}

		public Boolean ILBLTAIsKey() {
			return false;
		}

		public Integer ILBLTALength() {
			return null;
		}

		public Integer ILBLTAPrecision() {
			return null;
		}

		public String ILBLTADefault() {

			return "";

		}

		public String ILBLTAComment() {

			return "";

		}

		public String ILBLTAPattern() {

			return "";

		}

		public String ILBLTAOriginalDbColumnName() {

			return "ILBLTA";

		}

		public String IFINLN;

		public String getIFINLN() {
			return this.IFINLN;
		}

		public Boolean IFINLNIsNullable() {
			return true;
		}

		public Boolean IFINLNIsKey() {
			return false;
		}

		public Integer IFINLNLength() {
			return null;
		}

		public Integer IFINLNPrecision() {
			return null;
		}

		public String IFINLNDefault() {

			return "";

		}

		public String IFINLNComment() {

			return "";

		}

		public String IFINLNPattern() {

			return "";

		}

		public String IFINLNOriginalDbColumnName() {

			return "IFINLN";

		}

		public String IPROFL;

		public String getIPROFL() {
			return this.IPROFL;
		}

		public Boolean IPROFLIsNullable() {
			return true;
		}

		public Boolean IPROFLIsKey() {
			return false;
		}

		public Integer IPROFLLength() {
			return null;
		}

		public Integer IPROFLPrecision() {
			return null;
		}

		public String IPROFLDefault() {

			return "";

		}

		public String IPROFLComment() {

			return "";

		}

		public String IPROFLPattern() {

			return "";

		}

		public String IPROFLOriginalDbColumnName() {

			return "IPROFL";

		}

		public String IMODUL;

		public String getIMODUL() {
			return this.IMODUL;
		}

		public Boolean IMODULIsNullable() {
			return true;
		}

		public Boolean IMODULIsKey() {
			return false;
		}

		public Integer IMODULLength() {
			return null;
		}

		public Integer IMODULPrecision() {
			return null;
		}

		public String IMODULDefault() {

			return "";

		}

		public String IMODULComment() {

			return "";

		}

		public String IMODULPattern() {

			return "";

		}

		public String IMODULOriginalDbColumnName() {

			return "IMODUL";

		}

		public String ISTYPE;

		public String getISTYPE() {
			return this.ISTYPE;
		}

		public Boolean ISTYPEIsNullable() {
			return true;
		}

		public Boolean ISTYPEIsKey() {
			return false;
		}

		public Integer ISTYPELength() {
			return null;
		}

		public Integer ISTYPEPrecision() {
			return null;
		}

		public String ISTYPEDefault() {

			return "";

		}

		public String ISTYPEComment() {

			return "";

		}

		public String ISTYPEPattern() {

			return "";

		}

		public String ISTYPEOriginalDbColumnName() {

			return "ISTYPE";

		}

		public Double ISCOLR;

		public Double getISCOLR() {
			return this.ISCOLR;
		}

		public Boolean ISCOLRIsNullable() {
			return true;
		}

		public Boolean ISCOLRIsKey() {
			return false;
		}

		public Integer ISCOLRLength() {
			return null;
		}

		public Integer ISCOLRPrecision() {
			return null;
		}

		public String ISCOLRDefault() {

			return "";

		}

		public String ISCOLRComment() {

			return "";

		}

		public String ISCOLRPattern() {

			return "";

		}

		public String ISCOLROriginalDbColumnName() {

			return "ISCOLR";

		}

		public String ISSIZE;

		public String getISSIZE() {
			return this.ISSIZE;
		}

		public Boolean ISSIZEIsNullable() {
			return true;
		}

		public Boolean ISSIZEIsKey() {
			return false;
		}

		public Integer ISSIZELength() {
			return null;
		}

		public Integer ISSIZEPrecision() {
			return null;
		}

		public String ISSIZEDefault() {

			return "";

		}

		public String ISSIZEComment() {

			return "";

		}

		public String ISSIZEPattern() {

			return "";

		}

		public String ISSIZEOriginalDbColumnName() {

			return "ISSIZE";

		}

		public String IHAZCD;

		public String getIHAZCD() {
			return this.IHAZCD;
		}

		public Boolean IHAZCDIsNullable() {
			return true;
		}

		public Boolean IHAZCDIsKey() {
			return false;
		}

		public Integer IHAZCDLength() {
			return null;
		}

		public Integer IHAZCDPrecision() {
			return null;
		}

		public String IHAZCDDefault() {

			return "";

		}

		public String IHAZCDComment() {

			return "";

		}

		public String IHAZCDPattern() {

			return "";

		}

		public String IHAZCDOriginalDbColumnName() {

			return "IHAZCD";

		}

		public String MCHNUM;

		public String getMCHNUM() {
			return this.MCHNUM;
		}

		public Boolean MCHNUMIsNullable() {
			return true;
		}

		public Boolean MCHNUMIsKey() {
			return false;
		}

		public Integer MCHNUMLength() {
			return null;
		}

		public Integer MCHNUMPrecision() {
			return null;
		}

		public String MCHNUMDefault() {

			return "";

		}

		public String MCHNUMComment() {

			return "";

		}

		public String MCHNUMPattern() {

			return "";

		}

		public String MCHNUMOriginalDbColumnName() {

			return "MCHNUM";

		}

		public BigDecimal ISUBST;

		public BigDecimal getISUBST() {
			return this.ISUBST;
		}

		public Boolean ISUBSTIsNullable() {
			return true;
		}

		public Boolean ISUBSTIsKey() {
			return false;
		}

		public Integer ISUBSTLength() {
			return null;
		}

		public Integer ISUBSTPrecision() {
			return null;
		}

		public String ISUBSTDefault() {

			return "";

		}

		public String ISUBSTComment() {

			return "";

		}

		public String ISUBSTPattern() {

			return "";

		}

		public String ISUBSTOriginalDbColumnName() {

			return "ISUBST";

		}

		public BigDecimal ICORE;

		public BigDecimal getICORE() {
			return this.ICORE;
		}

		public Boolean ICOREIsNullable() {
			return true;
		}

		public Boolean ICOREIsKey() {
			return false;
		}

		public Integer ICORELength() {
			return null;
		}

		public Integer ICOREPrecision() {
			return null;
		}

		public String ICOREDefault() {

			return "";

		}

		public String ICOREComment() {

			return "";

		}

		public String ICOREPattern() {

			return "";

		}

		public String ICOREOriginalDbColumnName() {

			return "ICORE";

		}

		public BigDecimal IREPL;

		public BigDecimal getIREPL() {
			return this.IREPL;
		}

		public Boolean IREPLIsNullable() {
			return true;
		}

		public Boolean IREPLIsKey() {
			return false;
		}

		public Integer IREPLLength() {
			return null;
		}

		public Integer IREPLPrecision() {
			return null;
		}

		public String IREPLDefault() {

			return "";

		}

		public String IREPLComment() {

			return "";

		}

		public String IREPLPattern() {

			return "";

		}

		public String IREPLOriginalDbColumnName() {

			return "IREPL";

		}

		public String ISLUM;

		public String getISLUM() {
			return this.ISLUM;
		}

		public Boolean ISLUMIsNullable() {
			return true;
		}

		public Boolean ISLUMIsKey() {
			return false;
		}

		public Integer ISLUMLength() {
			return null;
		}

		public Integer ISLUMPrecision() {
			return null;
		}

		public String ISLUMDefault() {

			return "";

		}

		public String ISLUMComment() {

			return "";

		}

		public String ISLUMPattern() {

			return "";

		}

		public String ISLUMOriginalDbColumnName() {

			return "ISLUM";

		}

		public BigDecimal IUMCV2;

		public BigDecimal getIUMCV2() {
			return this.IUMCV2;
		}

		public Boolean IUMCV2IsNullable() {
			return true;
		}

		public Boolean IUMCV2IsKey() {
			return false;
		}

		public Integer IUMCV2Length() {
			return null;
		}

		public Integer IUMCV2Precision() {
			return null;
		}

		public String IUMCV2Default() {

			return "";

		}

		public String IUMCV2Comment() {

			return "";

		}

		public String IUMCV2Pattern() {

			return "";

		}

		public String IUMCV2OriginalDbColumnName() {

			return "IUMCV2";

		}

		public String IBYUM;

		public String getIBYUM() {
			return this.IBYUM;
		}

		public Boolean IBYUMIsNullable() {
			return true;
		}

		public Boolean IBYUMIsKey() {
			return false;
		}

		public Integer IBYUMLength() {
			return null;
		}

		public Integer IBYUMPrecision() {
			return null;
		}

		public String IBYUMDefault() {

			return "";

		}

		public String IBYUMComment() {

			return "";

		}

		public String IBYUMPattern() {

			return "";

		}

		public String IBYUMOriginalDbColumnName() {

			return "IBYUM";

		}

		public BigDecimal IMINPK;

		public BigDecimal getIMINPK() {
			return this.IMINPK;
		}

		public Boolean IMINPKIsNullable() {
			return true;
		}

		public Boolean IMINPKIsKey() {
			return false;
		}

		public Integer IMINPKLength() {
			return null;
		}

		public Integer IMINPKPrecision() {
			return null;
		}

		public String IMINPKDefault() {

			return "";

		}

		public String IMINPKComment() {

			return "";

		}

		public String IMINPKPattern() {

			return "";

		}

		public String IMINPKOriginalDbColumnName() {

			return "IMINPK";

		}

		public BigDecimal ISTDPK;

		public BigDecimal getISTDPK() {
			return this.ISTDPK;
		}

		public Boolean ISTDPKIsNullable() {
			return true;
		}

		public Boolean ISTDPKIsKey() {
			return false;
		}

		public Integer ISTDPKLength() {
			return null;
		}

		public Integer ISTDPKPrecision() {
			return null;
		}

		public String ISTDPKDefault() {

			return "";

		}

		public String ISTDPKComment() {

			return "";

		}

		public String ISTDPKPattern() {

			return "";

		}

		public String ISTDPKOriginalDbColumnName() {

			return "ISTDPK";

		}

		public String IHLDOR;

		public String getIHLDOR() {
			return this.IHLDOR;
		}

		public Boolean IHLDORIsNullable() {
			return true;
		}

		public Boolean IHLDORIsKey() {
			return false;
		}

		public Integer IHLDORLength() {
			return null;
		}

		public Integer IHLDORPrecision() {
			return null;
		}

		public String IHLDORDefault() {

			return "";

		}

		public String IHLDORComment() {

			return "";

		}

		public String IHLDORPattern() {

			return "";

		}

		public String IHLDOROriginalDbColumnName() {

			return "IHLDOR";

		}

		public BigDecimal IMOQTY;

		public BigDecimal getIMOQTY() {
			return this.IMOQTY;
		}

		public Boolean IMOQTYIsNullable() {
			return true;
		}

		public Boolean IMOQTYIsKey() {
			return false;
		}

		public Integer IMOQTYLength() {
			return null;
		}

		public Integer IMOQTYPrecision() {
			return null;
		}

		public String IMOQTYDefault() {

			return "";

		}

		public String IMOQTYComment() {

			return "";

		}

		public String IMOQTYPattern() {

			return "";

		}

		public String IMOQTYOriginalDbColumnName() {

			return "IMOQTY";

		}

		public BigDecimal IMNSTK;

		public BigDecimal getIMNSTK() {
			return this.IMNSTK;
		}

		public Boolean IMNSTKIsNullable() {
			return true;
		}

		public Boolean IMNSTKIsKey() {
			return false;
		}

		public Integer IMNSTKLength() {
			return null;
		}

		public Integer IMNSTKPrecision() {
			return null;
		}

		public String IMNSTKDefault() {

			return "";

		}

		public String IMNSTKComment() {

			return "";

		}

		public String IMNSTKPattern() {

			return "";

		}

		public String IMNSTKOriginalDbColumnName() {

			return "IMNSTK";

		}

		public BigDecimal IMXSTK;

		public BigDecimal getIMXSTK() {
			return this.IMXSTK;
		}

		public Boolean IMXSTKIsNullable() {
			return true;
		}

		public Boolean IMXSTKIsKey() {
			return false;
		}

		public Integer IMXSTKLength() {
			return null;
		}

		public Integer IMXSTKPrecision() {
			return null;
		}

		public String IMXSTKDefault() {

			return "";

		}

		public String IMXSTKComment() {

			return "";

		}

		public String IMXSTKPattern() {

			return "";

		}

		public String IMXSTKOriginalDbColumnName() {

			return "IMXSTK";

		}

		public BigDecimal IMDSTK;

		public BigDecimal getIMDSTK() {
			return this.IMDSTK;
		}

		public Boolean IMDSTKIsNullable() {
			return true;
		}

		public Boolean IMDSTKIsKey() {
			return false;
		}

		public Integer IMDSTKLength() {
			return null;
		}

		public Integer IMDSTKPrecision() {
			return null;
		}

		public String IMDSTKDefault() {

			return "";

		}

		public String IMDSTKComment() {

			return "";

		}

		public String IMDSTKPattern() {

			return "";

		}

		public String IMDSTKOriginalDbColumnName() {

			return "IMDSTK";

		}

		public BigDecimal IDSPLY;

		public BigDecimal getIDSPLY() {
			return this.IDSPLY;
		}

		public Boolean IDSPLYIsNullable() {
			return true;
		}

		public Boolean IDSPLYIsKey() {
			return false;
		}

		public Integer IDSPLYLength() {
			return null;
		}

		public Integer IDSPLYPrecision() {
			return null;
		}

		public String IDSPLYDefault() {

			return "";

		}

		public String IDSPLYComment() {

			return "";

		}

		public String IDSPLYPattern() {

			return "";

		}

		public String IDSPLYOriginalDbColumnName() {

			return "IDSPLY";

		}

		public BigDecimal IOMULT;

		public BigDecimal getIOMULT() {
			return this.IOMULT;
		}

		public Boolean IOMULTIsNullable() {
			return true;
		}

		public Boolean IOMULTIsKey() {
			return false;
		}

		public Integer IOMULTLength() {
			return null;
		}

		public Integer IOMULTPrecision() {
			return null;
		}

		public String IOMULTDefault() {

			return "";

		}

		public String IOMULTComment() {

			return "";

		}

		public String IOMULTPattern() {

			return "";

		}

		public String IOMULTOriginalDbColumnName() {

			return "IOMULT";

		}

		public String IRPLCD;

		public String getIRPLCD() {
			return this.IRPLCD;
		}

		public Boolean IRPLCDIsNullable() {
			return true;
		}

		public Boolean IRPLCDIsKey() {
			return false;
		}

		public Integer IRPLCDLength() {
			return null;
		}

		public Integer IRPLCDPrecision() {
			return null;
		}

		public String IRPLCDDefault() {

			return "";

		}

		public String IRPLCDComment() {

			return "";

		}

		public String IRPLCDPattern() {

			return "";

		}

		public String IRPLCDOriginalDbColumnName() {

			return "IRPLCD";

		}

		public BigDecimal IMFPRC;

		public BigDecimal getIMFPRC() {
			return this.IMFPRC;
		}

		public Boolean IMFPRCIsNullable() {
			return true;
		}

		public Boolean IMFPRCIsKey() {
			return false;
		}

		public Integer IMFPRCLength() {
			return null;
		}

		public Integer IMFPRCPrecision() {
			return null;
		}

		public String IMFPRCDefault() {

			return "";

		}

		public String IMFPRCComment() {

			return "";

		}

		public String IMFPRCPattern() {

			return "";

		}

		public String IMFPRCOriginalDbColumnName() {

			return "IMFPRC";

		}

		public BigDecimal IWGHT;

		public BigDecimal getIWGHT() {
			return this.IWGHT;
		}

		public Boolean IWGHTIsNullable() {
			return true;
		}

		public Boolean IWGHTIsKey() {
			return false;
		}

		public Integer IWGHTLength() {
			return null;
		}

		public Integer IWGHTPrecision() {
			return null;
		}

		public String IWGHTDefault() {

			return "";

		}

		public String IWGHTComment() {

			return "";

		}

		public String IWGHTPattern() {

			return "";

		}

		public String IWGHTOriginalDbColumnName() {

			return "IWGHT";

		}

		public BigDecimal ICUBE;

		public BigDecimal getICUBE() {
			return this.ICUBE;
		}

		public Boolean ICUBEIsNullable() {
			return true;
		}

		public Boolean ICUBEIsKey() {
			return false;
		}

		public Integer ICUBELength() {
			return null;
		}

		public Integer ICUBEPrecision() {
			return null;
		}

		public String ICUBEDefault() {

			return "";

		}

		public String ICUBEComment() {

			return "";

		}

		public String ICUBEPattern() {

			return "";

		}

		public String ICUBEOriginalDbColumnName() {

			return "ICUBE";

		}

		public BigDecimal IDLGTH;

		public BigDecimal getIDLGTH() {
			return this.IDLGTH;
		}

		public Boolean IDLGTHIsNullable() {
			return true;
		}

		public Boolean IDLGTHIsKey() {
			return false;
		}

		public Integer IDLGTHLength() {
			return null;
		}

		public Integer IDLGTHPrecision() {
			return null;
		}

		public String IDLGTHDefault() {

			return "";

		}

		public String IDLGTHComment() {

			return "";

		}

		public String IDLGTHPattern() {

			return "";

		}

		public String IDLGTHOriginalDbColumnName() {

			return "IDLGTH";

		}

		public BigDecimal IDWDTH;

		public BigDecimal getIDWDTH() {
			return this.IDWDTH;
		}

		public Boolean IDWDTHIsNullable() {
			return true;
		}

		public Boolean IDWDTHIsKey() {
			return false;
		}

		public Integer IDWDTHLength() {
			return null;
		}

		public Integer IDWDTHPrecision() {
			return null;
		}

		public String IDWDTHDefault() {

			return "";

		}

		public String IDWDTHComment() {

			return "";

		}

		public String IDWDTHPattern() {

			return "";

		}

		public String IDWDTHOriginalDbColumnName() {

			return "IDWDTH";

		}

		public BigDecimal IDHGHT;

		public BigDecimal getIDHGHT() {
			return this.IDHGHT;
		}

		public Boolean IDHGHTIsNullable() {
			return true;
		}

		public Boolean IDHGHTIsKey() {
			return false;
		}

		public Integer IDHGHTLength() {
			return null;
		}

		public Integer IDHGHTPrecision() {
			return null;
		}

		public String IDHGHTDefault() {

			return "";

		}

		public String IDHGHTComment() {

			return "";

		}

		public String IDHGHTPattern() {

			return "";

		}

		public String IDHGHTOriginalDbColumnName() {

			return "IDHGHT";

		}

		public BigDecimal IMDATE;

		public BigDecimal getIMDATE() {
			return this.IMDATE;
		}

		public Boolean IMDATEIsNullable() {
			return true;
		}

		public Boolean IMDATEIsKey() {
			return false;
		}

		public Integer IMDATELength() {
			return null;
		}

		public Integer IMDATEPrecision() {
			return null;
		}

		public String IMDATEDefault() {

			return "";

		}

		public String IMDATEComment() {

			return "";

		}

		public String IMDATEPattern() {

			return "";

		}

		public String IMDATEOriginalDbColumnName() {

			return "IMDATE";

		}

		public BigDecimal IMCENT;

		public BigDecimal getIMCENT() {
			return this.IMCENT;
		}

		public Boolean IMCENTIsNullable() {
			return true;
		}

		public Boolean IMCENTIsKey() {
			return false;
		}

		public Integer IMCENTLength() {
			return null;
		}

		public Integer IMCENTPrecision() {
			return null;
		}

		public String IMCENTDefault() {

			return "";

		}

		public String IMCENTComment() {

			return "";

		}

		public String IMCENTPattern() {

			return "";

		}

		public String IMCENTOriginalDbColumnName() {

			return "IMCENT";

		}

		public BigDecimal IVPLTI;

		public BigDecimal getIVPLTI() {
			return this.IVPLTI;
		}

		public Boolean IVPLTIIsNullable() {
			return true;
		}

		public Boolean IVPLTIIsKey() {
			return false;
		}

		public Integer IVPLTILength() {
			return null;
		}

		public Integer IVPLTIPrecision() {
			return null;
		}

		public String IVPLTIDefault() {

			return "";

		}

		public String IVPLTIComment() {

			return "";

		}

		public String IVPLTIPattern() {

			return "";

		}

		public String IVPLTIOriginalDbColumnName() {

			return "IVPLTI";

		}

		public BigDecimal IVPLHI;

		public BigDecimal getIVPLHI() {
			return this.IVPLHI;
		}

		public Boolean IVPLHIIsNullable() {
			return true;
		}

		public Boolean IVPLHIIsKey() {
			return false;
		}

		public Integer IVPLHILength() {
			return null;
		}

		public Integer IVPLHIPrecision() {
			return null;
		}

		public String IVPLHIDefault() {

			return "";

		}

		public String IVPLHIComment() {

			return "";

		}

		public String IVPLHIPattern() {

			return "";

		}

		public String IVPLHIOriginalDbColumnName() {

			return "IVPLHI";

		}

		public Double SHPNUM;

		public Double getSHPNUM() {
			return this.SHPNUM;
		}

		public Boolean SHPNUMIsNullable() {
			return true;
		}

		public Boolean SHPNUMIsKey() {
			return false;
		}

		public Integer SHPNUMLength() {
			return null;
		}

		public Integer SHPNUMPrecision() {
			return null;
		}

		public String SHPNUMDefault() {

			return "";

		}

		public String SHPNUMComment() {

			return "";

		}

		public String SHPNUMPattern() {

			return "";

		}

		public String SHPNUMOriginalDbColumnName() {

			return "SHPNUM";

		}

		public String IDISTM;

		public String getIDISTM() {
			return this.IDISTM;
		}

		public Boolean IDISTMIsNullable() {
			return true;
		}

		public Boolean IDISTMIsKey() {
			return false;
		}

		public Integer IDISTMLength() {
			return null;
		}

		public Integer IDISTMPrecision() {
			return null;
		}

		public String IDISTMDefault() {

			return "";

		}

		public String IDISTMComment() {

			return "";

		}

		public String IDISTMPattern() {

			return "";

		}

		public String IDISTMOriginalDbColumnName() {

			return "IDISTM";

		}

		public String IHLDWO;

		public String getIHLDWO() {
			return this.IHLDWO;
		}

		public Boolean IHLDWOIsNullable() {
			return true;
		}

		public Boolean IHLDWOIsKey() {
			return false;
		}

		public Integer IHLDWOLength() {
			return null;
		}

		public Integer IHLDWOPrecision() {
			return null;
		}

		public String IHLDWODefault() {

			return "";

		}

		public String IHLDWOComment() {

			return "";

		}

		public String IHLDWOPattern() {

			return "";

		}

		public String IHLDWOOriginalDbColumnName() {

			return "IHLDWO";

		}

		public Double IIGNUM;

		public Double getIIGNUM() {
			return this.IIGNUM;
		}

		public Boolean IIGNUMIsNullable() {
			return true;
		}

		public Boolean IIGNUMIsKey() {
			return false;
		}

		public Integer IIGNUMLength() {
			return null;
		}

		public Integer IIGNUMPrecision() {
			return null;
		}

		public String IIGNUMDefault() {

			return "";

		}

		public String IIGNUMComment() {

			return "";

		}

		public String IIGNUMPattern() {

			return "";

		}

		public String IIGNUMOriginalDbColumnName() {

			return "IIGNUM";

		}

		public String ISDIM;

		public String getISDIM() {
			return this.ISDIM;
		}

		public Boolean ISDIMIsNullable() {
			return true;
		}

		public Boolean ISDIMIsKey() {
			return false;
		}

		public Integer ISDIMLength() {
			return null;
		}

		public Integer ISDIMPrecision() {
			return null;
		}

		public String ISDIMDefault() {

			return "";

		}

		public String ISDIMComment() {

			return "";

		}

		public String ISDIMPattern() {

			return "";

		}

		public String ISDIMOriginalDbColumnName() {

			return "ISDIM";

		}

		public String IVATCD;

		public String getIVATCD() {
			return this.IVATCD;
		}

		public Boolean IVATCDIsNullable() {
			return true;
		}

		public Boolean IVATCDIsKey() {
			return false;
		}

		public Integer IVATCDLength() {
			return null;
		}

		public Integer IVATCDPrecision() {
			return null;
		}

		public String IVATCDDefault() {

			return "";

		}

		public String IVATCDComment() {

			return "";

		}

		public String IVATCDPattern() {

			return "";

		}

		public String IVATCDOriginalDbColumnName() {

			return "IVATCD";

		}

		public Double IPLAN;

		public Double getIPLAN() {
			return this.IPLAN;
		}

		public Boolean IPLANIsNullable() {
			return true;
		}

		public Boolean IPLANIsKey() {
			return false;
		}

		public Integer IPLANLength() {
			return null;
		}

		public Integer IPLANPrecision() {
			return null;
		}

		public String IPLANDefault() {

			return "";

		}

		public String IPLANComment() {

			return "";

		}

		public String IPLANPattern() {

			return "";

		}

		public String IPLANOriginalDbColumnName() {

			return "IPLAN";

		}

		public String IVLRK1;

		public String getIVLRK1() {
			return this.IVLRK1;
		}

		public Boolean IVLRK1IsNullable() {
			return true;
		}

		public Boolean IVLRK1IsKey() {
			return false;
		}

		public Integer IVLRK1Length() {
			return null;
		}

		public Integer IVLRK1Precision() {
			return null;
		}

		public String IVLRK1Default() {

			return "";

		}

		public String IVLRK1Comment() {

			return "";

		}

		public String IVLRK1Pattern() {

			return "";

		}

		public String IVLRK1OriginalDbColumnName() {

			return "IVLRK1";

		}

		public String IVLRK2;

		public String getIVLRK2() {
			return this.IVLRK2;
		}

		public Boolean IVLRK2IsNullable() {
			return true;
		}

		public Boolean IVLRK2IsKey() {
			return false;
		}

		public Integer IVLRK2Length() {
			return null;
		}

		public Integer IVLRK2Precision() {
			return null;
		}

		public String IVLRK2Default() {

			return "";

		}

		public String IVLRK2Comment() {

			return "";

		}

		public String IVLRK2Pattern() {

			return "";

		}

		public String IVLRK2OriginalDbColumnName() {

			return "IVLRK2";

		}

		public String IVLRK3;

		public String getIVLRK3() {
			return this.IVLRK3;
		}

		public Boolean IVLRK3IsNullable() {
			return true;
		}

		public Boolean IVLRK3IsKey() {
			return false;
		}

		public Integer IVLRK3Length() {
			return null;
		}

		public Integer IVLRK3Precision() {
			return null;
		}

		public String IVLRK3Default() {

			return "";

		}

		public String IVLRK3Comment() {

			return "";

		}

		public String IVLRK3Pattern() {

			return "";

		}

		public String IVLRK3OriginalDbColumnName() {

			return "IVLRK3";

		}

		public String IVLRK4;

		public String getIVLRK4() {
			return this.IVLRK4;
		}

		public Boolean IVLRK4IsNullable() {
			return true;
		}

		public Boolean IVLRK4IsKey() {
			return false;
		}

		public Integer IVLRK4Length() {
			return null;
		}

		public Integer IVLRK4Precision() {
			return null;
		}

		public String IVLRK4Default() {

			return "";

		}

		public String IVLRK4Comment() {

			return "";

		}

		public String IVLRK4Pattern() {

			return "";

		}

		public String IVLRK4OriginalDbColumnName() {

			return "IVLRK4";

		}

		public BigDecimal IRPLCN;

		public BigDecimal getIRPLCN() {
			return this.IRPLCN;
		}

		public Boolean IRPLCNIsNullable() {
			return true;
		}

		public Boolean IRPLCNIsKey() {
			return false;
		}

		public Integer IRPLCNLength() {
			return null;
		}

		public Integer IRPLCNPrecision() {
			return null;
		}

		public String IRPLCNDefault() {

			return "";

		}

		public String IRPLCNComment() {

			return "";

		}

		public String IRPLCNPattern() {

			return "";

		}

		public String IRPLCNOriginalDbColumnName() {

			return "IRPLCN";

		}

		public BigDecimal IRPLDT;

		public BigDecimal getIRPLDT() {
			return this.IRPLDT;
		}

		public Boolean IRPLDTIsNullable() {
			return true;
		}

		public Boolean IRPLDTIsKey() {
			return false;
		}

		public Integer IRPLDTLength() {
			return null;
		}

		public Integer IRPLDTPrecision() {
			return null;
		}

		public String IRPLDTDefault() {

			return "";

		}

		public String IRPLDTComment() {

			return "";

		}

		public String IRPLDTPattern() {

			return "";

		}

		public String IRPLDTOriginalDbColumnName() {

			return "IRPLDT";

		}

		public String ISEASN;

		public String getISEASN() {
			return this.ISEASN;
		}

		public Boolean ISEASNIsNullable() {
			return true;
		}

		public Boolean ISEASNIsKey() {
			return false;
		}

		public Integer ISEASNLength() {
			return null;
		}

		public Integer ISEASNPrecision() {
			return null;
		}

		public String ISEASNDefault() {

			return "";

		}

		public String ISEASNComment() {

			return "";

		}

		public String ISEASNPattern() {

			return "";

		}

		public String ISEASNOriginalDbColumnName() {

			return "ISEASN";

		}

		public BigDecimal IDEADC;

		public BigDecimal getIDEADC() {
			return this.IDEADC;
		}

		public Boolean IDEADCIsNullable() {
			return true;
		}

		public Boolean IDEADCIsKey() {
			return false;
		}

		public Integer IDEADCLength() {
			return null;
		}

		public Integer IDEADCPrecision() {
			return null;
		}

		public String IDEADCDefault() {

			return "";

		}

		public String IDEADCComment() {

			return "";

		}

		public String IDEADCPattern() {

			return "";

		}

		public String IDEADCOriginalDbColumnName() {

			return "IDEADC";

		}

		public BigDecimal IDEADD;

		public BigDecimal getIDEADD() {
			return this.IDEADD;
		}

		public Boolean IDEADDIsNullable() {
			return true;
		}

		public Boolean IDEADDIsKey() {
			return false;
		}

		public Integer IDEADDLength() {
			return null;
		}

		public Integer IDEADDPrecision() {
			return null;
		}

		public String IDEADDDefault() {

			return "";

		}

		public String IDEADDComment() {

			return "";

		}

		public String IDEADDPattern() {

			return "";

		}

		public String IDEADDOriginalDbColumnName() {

			return "IDEADD";

		}

		public BigDecimal INLRTL;

		public BigDecimal getINLRTL() {
			return this.INLRTL;
		}

		public Boolean INLRTLIsNullable() {
			return true;
		}

		public Boolean INLRTLIsKey() {
			return false;
		}

		public Integer INLRTLLength() {
			return null;
		}

		public Integer INLRTLPrecision() {
			return null;
		}

		public String INLRTLDefault() {

			return "";

		}

		public String INLRTLComment() {

			return "";

		}

		public String INLRTLPattern() {

			return "";

		}

		public String INLRTLOriginalDbColumnName() {

			return "INLRTL";

		}

		public String IHANDL;

		public String getIHANDL() {
			return this.IHANDL;
		}

		public Boolean IHANDLIsNullable() {
			return true;
		}

		public Boolean IHANDLIsKey() {
			return false;
		}

		public Integer IHANDLLength() {
			return null;
		}

		public Integer IHANDLPrecision() {
			return null;
		}

		public String IHANDLDefault() {

			return "";

		}

		public String IHANDLComment() {

			return "";

		}

		public String IHANDLPattern() {

			return "";

		}

		public String IHANDLOriginalDbColumnName() {

			return "IHANDL";

		}

		public String IATRB1;

		public String getIATRB1() {
			return this.IATRB1;
		}

		public Boolean IATRB1IsNullable() {
			return true;
		}

		public Boolean IATRB1IsKey() {
			return false;
		}

		public Integer IATRB1Length() {
			return null;
		}

		public Integer IATRB1Precision() {
			return null;
		}

		public String IATRB1Default() {

			return "";

		}

		public String IATRB1Comment() {

			return "";

		}

		public String IATRB1Pattern() {

			return "";

		}

		public String IATRB1OriginalDbColumnName() {

			return "IATRB1";

		}

		public String IATRB2;

		public String getIATRB2() {
			return this.IATRB2;
		}

		public Boolean IATRB2IsNullable() {
			return true;
		}

		public Boolean IATRB2IsKey() {
			return false;
		}

		public Integer IATRB2Length() {
			return null;
		}

		public Integer IATRB2Precision() {
			return null;
		}

		public String IATRB2Default() {

			return "";

		}

		public String IATRB2Comment() {

			return "";

		}

		public String IATRB2Pattern() {

			return "";

		}

		public String IATRB2OriginalDbColumnName() {

			return "IATRB2";

		}

		public String IATRB3;

		public String getIATRB3() {
			return this.IATRB3;
		}

		public Boolean IATRB3IsNullable() {
			return true;
		}

		public Boolean IATRB3IsKey() {
			return false;
		}

		public Integer IATRB3Length() {
			return null;
		}

		public Integer IATRB3Precision() {
			return null;
		}

		public String IATRB3Default() {

			return "";

		}

		public String IATRB3Comment() {

			return "";

		}

		public String IATRB3Pattern() {

			return "";

		}

		public String IATRB3OriginalDbColumnName() {

			return "IATRB3";

		}

		public String IATRB4;

		public String getIATRB4() {
			return this.IATRB4;
		}

		public Boolean IATRB4IsNullable() {
			return true;
		}

		public Boolean IATRB4IsKey() {
			return false;
		}

		public Integer IATRB4Length() {
			return null;
		}

		public Integer IATRB4Precision() {
			return null;
		}

		public String IATRB4Default() {

			return "";

		}

		public String IATRB4Comment() {

			return "";

		}

		public String IATRB4Pattern() {

			return "";

		}

		public String IATRB4OriginalDbColumnName() {

			return "IATRB4";

		}

		public String IATRB5;

		public String getIATRB5() {
			return this.IATRB5;
		}

		public Boolean IATRB5IsNullable() {
			return true;
		}

		public Boolean IATRB5IsKey() {
			return false;
		}

		public Integer IATRB5Length() {
			return null;
		}

		public Integer IATRB5Precision() {
			return null;
		}

		public String IATRB5Default() {

			return "";

		}

		public String IATRB5Comment() {

			return "";

		}

		public String IATRB5Pattern() {

			return "";

		}

		public String IATRB5OriginalDbColumnName() {

			return "IATRB5";

		}

		public String IPRCCH;

		public String getIPRCCH() {
			return this.IPRCCH;
		}

		public Boolean IPRCCHIsNullable() {
			return true;
		}

		public Boolean IPRCCHIsKey() {
			return false;
		}

		public Integer IPRCCHLength() {
			return null;
		}

		public Integer IPRCCHPrecision() {
			return null;
		}

		public String IPRCCHDefault() {

			return "";

		}

		public String IPRCCHComment() {

			return "";

		}

		public String IPRCCHPattern() {

			return "";

		}

		public String IPRCCHOriginalDbColumnName() {

			return "IPRCCH";

		}

		public String IPRCZN;

		public String getIPRCZN() {
			return this.IPRCZN;
		}

		public Boolean IPRCZNIsNullable() {
			return true;
		}

		public Boolean IPRCZNIsKey() {
			return false;
		}

		public Integer IPRCZNLength() {
			return null;
		}

		public Integer IPRCZNPrecision() {
			return null;
		}

		public String IPRCZNDefault() {

			return "";

		}

		public String IPRCZNComment() {

			return "";

		}

		public String IPRCZNPattern() {

			return "";

		}

		public String IPRCZNOriginalDbColumnName() {

			return "IPRCZN";

		}

		public String IPRCST;

		public String getIPRCST() {
			return this.IPRCST;
		}

		public Boolean IPRCSTIsNullable() {
			return true;
		}

		public Boolean IPRCSTIsKey() {
			return false;
		}

		public Integer IPRCSTLength() {
			return null;
		}

		public Integer IPRCSTPrecision() {
			return null;
		}

		public String IPRCSTDefault() {

			return "";

		}

		public String IPRCSTComment() {

			return "";

		}

		public String IPRCSTPattern() {

			return "";

		}

		public String IPRCSTOriginalDbColumnName() {

			return "IPRCST";

		}

		public Double IASNUM;

		public Double getIASNUM() {
			return this.IASNUM;
		}

		public Boolean IASNUMIsNullable() {
			return true;
		}

		public Boolean IASNUMIsKey() {
			return false;
		}

		public Integer IASNUMLength() {
			return null;
		}

		public Integer IASNUMPrecision() {
			return null;
		}

		public String IASNUMDefault() {

			return "";

		}

		public String IASNUMComment() {

			return "";

		}

		public String IASNUMPattern() {

			return "";

		}

		public String IASNUMOriginalDbColumnName() {

			return "IASNUM";

		}

		public String ICORGP;

		public String getICORGP() {
			return this.ICORGP;
		}

		public Boolean ICORGPIsNullable() {
			return true;
		}

		public Boolean ICORGPIsKey() {
			return false;
		}

		public Integer ICORGPLength() {
			return null;
		}

		public Integer ICORGPPrecision() {
			return null;
		}

		public String ICORGPDefault() {

			return "";

		}

		public String ICORGPComment() {

			return "";

		}

		public String ICORGPPattern() {

			return "";

		}

		public String ICORGPOriginalDbColumnName() {

			return "ICORGP";

		}

		public BigDecimal ILEAD;

		public BigDecimal getILEAD() {
			return this.ILEAD;
		}

		public Boolean ILEADIsNullable() {
			return true;
		}

		public Boolean ILEADIsKey() {
			return false;
		}

		public Integer ILEADLength() {
			return null;
		}

		public Integer ILEADPrecision() {
			return null;
		}

		public String ILEADDefault() {

			return "";

		}

		public String ILEADComment() {

			return "";

		}

		public String ILEADPattern() {

			return "";

		}

		public String ILEADOriginalDbColumnName() {

			return "ILEAD";

		}

		public String IHZCOD;

		public String getIHZCOD() {
			return this.IHZCOD;
		}

		public Boolean IHZCODIsNullable() {
			return true;
		}

		public Boolean IHZCODIsKey() {
			return false;
		}

		public Integer IHZCODLength() {
			return null;
		}

		public Integer IHZCODPrecision() {
			return null;
		}

		public String IHZCODDefault() {

			return "";

		}

		public String IHZCODComment() {

			return "";

		}

		public String IHZCODPattern() {

			return "";

		}

		public String IHZCODOriginalDbColumnName() {

			return "IHZCOD";

		}

		public String IFRACT;

		public String getIFRACT() {
			return this.IFRACT;
		}

		public Boolean IFRACTIsNullable() {
			return true;
		}

		public Boolean IFRACTIsKey() {
			return false;
		}

		public Integer IFRACTLength() {
			return null;
		}

		public Integer IFRACTPrecision() {
			return null;
		}

		public String IFRACTDefault() {

			return "";

		}

		public String IFRACTComment() {

			return "";

		}

		public String IFRACTPattern() {

			return "";

		}

		public String IFRACTOriginalDbColumnName() {

			return "IFRACT";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.INUMBR = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.ICHECK = null;
					} else {
						this.ICHECK = dis.readDouble();
					}

					this.IDESCR = readString(dis);

					this.IDSCCD = readString(dis);

					this.ISORT = readString(dis);

					this.ISTYLN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ASNUM = null;
					} else {
						this.ASNUM = dis.readDouble();
					}

					this.IVNDPN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IMFGR = null;
					} else {
						this.IMFGR = dis.readDouble();
					}

					this.IMFGNO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IDEPT = null;
					} else {
						this.IDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISDEPT = null;
					} else {
						this.ISDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ICLAS = null;
					} else {
						this.ICLAS = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISCLAS = null;
					} else {
						this.ISCLAS = dis.readDouble();
					}

					this.BYRNUM = readString(dis);

					this.IASPAC = (BigDecimal) dis.readObject();

					this.IADVYN = readString(dis);

					this.IBUYCD = readString(dis);

					this.ISET = readString(dis);

					this.IWARNT = readString(dis);

					this.IPRMPT = readString(dis);

					this.IPRVNT = readString(dis);

					this.ITKTTR = readString(dis);

					this.ITKTTA = readString(dis);

					this.ITKTN = (BigDecimal) dis.readObject();

					this.ILBLTR = readString(dis);

					this.ILBLTA = readString(dis);

					this.IFINLN = readString(dis);

					this.IPROFL = readString(dis);

					this.IMODUL = readString(dis);

					this.ISTYPE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ISCOLR = null;
					} else {
						this.ISCOLR = dis.readDouble();
					}

					this.ISSIZE = readString(dis);

					this.IHAZCD = readString(dis);

					this.MCHNUM = readString(dis);

					this.ISUBST = (BigDecimal) dis.readObject();

					this.ICORE = (BigDecimal) dis.readObject();

					this.IREPL = (BigDecimal) dis.readObject();

					this.ISLUM = readString(dis);

					this.IUMCV2 = (BigDecimal) dis.readObject();

					this.IBYUM = readString(dis);

					this.IMINPK = (BigDecimal) dis.readObject();

					this.ISTDPK = (BigDecimal) dis.readObject();

					this.IHLDOR = readString(dis);

					this.IMOQTY = (BigDecimal) dis.readObject();

					this.IMNSTK = (BigDecimal) dis.readObject();

					this.IMXSTK = (BigDecimal) dis.readObject();

					this.IMDSTK = (BigDecimal) dis.readObject();

					this.IDSPLY = (BigDecimal) dis.readObject();

					this.IOMULT = (BigDecimal) dis.readObject();

					this.IRPLCD = readString(dis);

					this.IMFPRC = (BigDecimal) dis.readObject();

					this.IWGHT = (BigDecimal) dis.readObject();

					this.ICUBE = (BigDecimal) dis.readObject();

					this.IDLGTH = (BigDecimal) dis.readObject();

					this.IDWDTH = (BigDecimal) dis.readObject();

					this.IDHGHT = (BigDecimal) dis.readObject();

					this.IMDATE = (BigDecimal) dis.readObject();

					this.IMCENT = (BigDecimal) dis.readObject();

					this.IVPLTI = (BigDecimal) dis.readObject();

					this.IVPLHI = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.SHPNUM = null;
					} else {
						this.SHPNUM = dis.readDouble();
					}

					this.IDISTM = readString(dis);

					this.IHLDWO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IIGNUM = null;
					} else {
						this.IIGNUM = dis.readDouble();
					}

					this.ISDIM = readString(dis);

					this.IVATCD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IPLAN = null;
					} else {
						this.IPLAN = dis.readDouble();
					}

					this.IVLRK1 = readString(dis);

					this.IVLRK2 = readString(dis);

					this.IVLRK3 = readString(dis);

					this.IVLRK4 = readString(dis);

					this.IRPLCN = (BigDecimal) dis.readObject();

					this.IRPLDT = (BigDecimal) dis.readObject();

					this.ISEASN = readString(dis);

					this.IDEADC = (BigDecimal) dis.readObject();

					this.IDEADD = (BigDecimal) dis.readObject();

					this.INLRTL = (BigDecimal) dis.readObject();

					this.IHANDL = readString(dis);

					this.IATRB1 = readString(dis);

					this.IATRB2 = readString(dis);

					this.IATRB3 = readString(dis);

					this.IATRB4 = readString(dis);

					this.IATRB5 = readString(dis);

					this.IPRCCH = readString(dis);

					this.IPRCZN = readString(dis);

					this.IPRCST = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IASNUM = null;
					} else {
						this.IASNUM = dis.readDouble();
					}

					this.ICORGP = readString(dis);

					this.ILEAD = (BigDecimal) dis.readObject();

					this.IHZCOD = readString(dis);

					this.IFRACT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.INUMBR = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.ICHECK = null;
					} else {
						this.ICHECK = dis.readDouble();
					}

					this.IDESCR = readString(dis);

					this.IDSCCD = readString(dis);

					this.ISORT = readString(dis);

					this.ISTYLN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ASNUM = null;
					} else {
						this.ASNUM = dis.readDouble();
					}

					this.IVNDPN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IMFGR = null;
					} else {
						this.IMFGR = dis.readDouble();
					}

					this.IMFGNO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IDEPT = null;
					} else {
						this.IDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISDEPT = null;
					} else {
						this.ISDEPT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ICLAS = null;
					} else {
						this.ICLAS = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ISCLAS = null;
					} else {
						this.ISCLAS = dis.readDouble();
					}

					this.BYRNUM = readString(dis);

					this.IASPAC = (BigDecimal) dis.readObject();

					this.IADVYN = readString(dis);

					this.IBUYCD = readString(dis);

					this.ISET = readString(dis);

					this.IWARNT = readString(dis);

					this.IPRMPT = readString(dis);

					this.IPRVNT = readString(dis);

					this.ITKTTR = readString(dis);

					this.ITKTTA = readString(dis);

					this.ITKTN = (BigDecimal) dis.readObject();

					this.ILBLTR = readString(dis);

					this.ILBLTA = readString(dis);

					this.IFINLN = readString(dis);

					this.IPROFL = readString(dis);

					this.IMODUL = readString(dis);

					this.ISTYPE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ISCOLR = null;
					} else {
						this.ISCOLR = dis.readDouble();
					}

					this.ISSIZE = readString(dis);

					this.IHAZCD = readString(dis);

					this.MCHNUM = readString(dis);

					this.ISUBST = (BigDecimal) dis.readObject();

					this.ICORE = (BigDecimal) dis.readObject();

					this.IREPL = (BigDecimal) dis.readObject();

					this.ISLUM = readString(dis);

					this.IUMCV2 = (BigDecimal) dis.readObject();

					this.IBYUM = readString(dis);

					this.IMINPK = (BigDecimal) dis.readObject();

					this.ISTDPK = (BigDecimal) dis.readObject();

					this.IHLDOR = readString(dis);

					this.IMOQTY = (BigDecimal) dis.readObject();

					this.IMNSTK = (BigDecimal) dis.readObject();

					this.IMXSTK = (BigDecimal) dis.readObject();

					this.IMDSTK = (BigDecimal) dis.readObject();

					this.IDSPLY = (BigDecimal) dis.readObject();

					this.IOMULT = (BigDecimal) dis.readObject();

					this.IRPLCD = readString(dis);

					this.IMFPRC = (BigDecimal) dis.readObject();

					this.IWGHT = (BigDecimal) dis.readObject();

					this.ICUBE = (BigDecimal) dis.readObject();

					this.IDLGTH = (BigDecimal) dis.readObject();

					this.IDWDTH = (BigDecimal) dis.readObject();

					this.IDHGHT = (BigDecimal) dis.readObject();

					this.IMDATE = (BigDecimal) dis.readObject();

					this.IMCENT = (BigDecimal) dis.readObject();

					this.IVPLTI = (BigDecimal) dis.readObject();

					this.IVPLHI = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.SHPNUM = null;
					} else {
						this.SHPNUM = dis.readDouble();
					}

					this.IDISTM = readString(dis);

					this.IHLDWO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IIGNUM = null;
					} else {
						this.IIGNUM = dis.readDouble();
					}

					this.ISDIM = readString(dis);

					this.IVATCD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IPLAN = null;
					} else {
						this.IPLAN = dis.readDouble();
					}

					this.IVLRK1 = readString(dis);

					this.IVLRK2 = readString(dis);

					this.IVLRK3 = readString(dis);

					this.IVLRK4 = readString(dis);

					this.IRPLCN = (BigDecimal) dis.readObject();

					this.IRPLDT = (BigDecimal) dis.readObject();

					this.ISEASN = readString(dis);

					this.IDEADC = (BigDecimal) dis.readObject();

					this.IDEADD = (BigDecimal) dis.readObject();

					this.INLRTL = (BigDecimal) dis.readObject();

					this.IHANDL = readString(dis);

					this.IATRB1 = readString(dis);

					this.IATRB2 = readString(dis);

					this.IATRB3 = readString(dis);

					this.IATRB4 = readString(dis);

					this.IATRB5 = readString(dis);

					this.IPRCCH = readString(dis);

					this.IPRCZN = readString(dis);

					this.IPRCST = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IASNUM = null;
					} else {
						this.IASNUM = dis.readDouble();
					}

					this.ICORGP = readString(dis);

					this.ILEAD = (BigDecimal) dis.readObject();

					this.IHZCOD = readString(dis);

					this.IFRACT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.INUMBR);

				// Double

				if (this.ICHECK == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICHECK);
				}

				// String

				writeString(this.IDESCR, dos);

				// String

				writeString(this.IDSCCD, dos);

				// String

				writeString(this.ISORT, dos);

				// String

				writeString(this.ISTYLN, dos);

				// Double

				if (this.ASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ASNUM);
				}

				// String

				writeString(this.IVNDPN, dos);

				// Double

				if (this.IMFGR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IMFGR);
				}

				// String

				writeString(this.IMFGNO, dos);

				// Double

				if (this.IDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IDEPT);
				}

				// Double

				if (this.ISDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISDEPT);
				}

				// Double

				if (this.ICLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICLAS);
				}

				// Double

				if (this.ISCLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCLAS);
				}

				// String

				writeString(this.BYRNUM, dos);

				// BigDecimal

				dos.writeObject(this.IASPAC);

				// String

				writeString(this.IADVYN, dos);

				// String

				writeString(this.IBUYCD, dos);

				// String

				writeString(this.ISET, dos);

				// String

				writeString(this.IWARNT, dos);

				// String

				writeString(this.IPRMPT, dos);

				// String

				writeString(this.IPRVNT, dos);

				// String

				writeString(this.ITKTTR, dos);

				// String

				writeString(this.ITKTTA, dos);

				// BigDecimal

				dos.writeObject(this.ITKTN);

				// String

				writeString(this.ILBLTR, dos);

				// String

				writeString(this.ILBLTA, dos);

				// String

				writeString(this.IFINLN, dos);

				// String

				writeString(this.IPROFL, dos);

				// String

				writeString(this.IMODUL, dos);

				// String

				writeString(this.ISTYPE, dos);

				// Double

				if (this.ISCOLR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCOLR);
				}

				// String

				writeString(this.ISSIZE, dos);

				// String

				writeString(this.IHAZCD, dos);

				// String

				writeString(this.MCHNUM, dos);

				// BigDecimal

				dos.writeObject(this.ISUBST);

				// BigDecimal

				dos.writeObject(this.ICORE);

				// BigDecimal

				dos.writeObject(this.IREPL);

				// String

				writeString(this.ISLUM, dos);

				// BigDecimal

				dos.writeObject(this.IUMCV2);

				// String

				writeString(this.IBYUM, dos);

				// BigDecimal

				dos.writeObject(this.IMINPK);

				// BigDecimal

				dos.writeObject(this.ISTDPK);

				// String

				writeString(this.IHLDOR, dos);

				// BigDecimal

				dos.writeObject(this.IMOQTY);

				// BigDecimal

				dos.writeObject(this.IMNSTK);

				// BigDecimal

				dos.writeObject(this.IMXSTK);

				// BigDecimal

				dos.writeObject(this.IMDSTK);

				// BigDecimal

				dos.writeObject(this.IDSPLY);

				// BigDecimal

				dos.writeObject(this.IOMULT);

				// String

				writeString(this.IRPLCD, dos);

				// BigDecimal

				dos.writeObject(this.IMFPRC);

				// BigDecimal

				dos.writeObject(this.IWGHT);

				// BigDecimal

				dos.writeObject(this.ICUBE);

				// BigDecimal

				dos.writeObject(this.IDLGTH);

				// BigDecimal

				dos.writeObject(this.IDWDTH);

				// BigDecimal

				dos.writeObject(this.IDHGHT);

				// BigDecimal

				dos.writeObject(this.IMDATE);

				// BigDecimal

				dos.writeObject(this.IMCENT);

				// BigDecimal

				dos.writeObject(this.IVPLTI);

				// BigDecimal

				dos.writeObject(this.IVPLHI);

				// Double

				if (this.SHPNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SHPNUM);
				}

				// String

				writeString(this.IDISTM, dos);

				// String

				writeString(this.IHLDWO, dos);

				// Double

				if (this.IIGNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IIGNUM);
				}

				// String

				writeString(this.ISDIM, dos);

				// String

				writeString(this.IVATCD, dos);

				// Double

				if (this.IPLAN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IPLAN);
				}

				// String

				writeString(this.IVLRK1, dos);

				// String

				writeString(this.IVLRK2, dos);

				// String

				writeString(this.IVLRK3, dos);

				// String

				writeString(this.IVLRK4, dos);

				// BigDecimal

				dos.writeObject(this.IRPLCN);

				// BigDecimal

				dos.writeObject(this.IRPLDT);

				// String

				writeString(this.ISEASN, dos);

				// BigDecimal

				dos.writeObject(this.IDEADC);

				// BigDecimal

				dos.writeObject(this.IDEADD);

				// BigDecimal

				dos.writeObject(this.INLRTL);

				// String

				writeString(this.IHANDL, dos);

				// String

				writeString(this.IATRB1, dos);

				// String

				writeString(this.IATRB2, dos);

				// String

				writeString(this.IATRB3, dos);

				// String

				writeString(this.IATRB4, dos);

				// String

				writeString(this.IATRB5, dos);

				// String

				writeString(this.IPRCCH, dos);

				// String

				writeString(this.IPRCZN, dos);

				// String

				writeString(this.IPRCST, dos);

				// Double

				if (this.IASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IASNUM);
				}

				// String

				writeString(this.ICORGP, dos);

				// BigDecimal

				dos.writeObject(this.ILEAD);

				// String

				writeString(this.IHZCOD, dos);

				// String

				writeString(this.IFRACT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.INUMBR);

				// Double

				if (this.ICHECK == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICHECK);
				}

				// String

				writeString(this.IDESCR, dos);

				// String

				writeString(this.IDSCCD, dos);

				// String

				writeString(this.ISORT, dos);

				// String

				writeString(this.ISTYLN, dos);

				// Double

				if (this.ASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ASNUM);
				}

				// String

				writeString(this.IVNDPN, dos);

				// Double

				if (this.IMFGR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IMFGR);
				}

				// String

				writeString(this.IMFGNO, dos);

				// Double

				if (this.IDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IDEPT);
				}

				// Double

				if (this.ISDEPT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISDEPT);
				}

				// Double

				if (this.ICLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ICLAS);
				}

				// Double

				if (this.ISCLAS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCLAS);
				}

				// String

				writeString(this.BYRNUM, dos);

				// BigDecimal

				dos.writeObject(this.IASPAC);

				// String

				writeString(this.IADVYN, dos);

				// String

				writeString(this.IBUYCD, dos);

				// String

				writeString(this.ISET, dos);

				// String

				writeString(this.IWARNT, dos);

				// String

				writeString(this.IPRMPT, dos);

				// String

				writeString(this.IPRVNT, dos);

				// String

				writeString(this.ITKTTR, dos);

				// String

				writeString(this.ITKTTA, dos);

				// BigDecimal

				dos.writeObject(this.ITKTN);

				// String

				writeString(this.ILBLTR, dos);

				// String

				writeString(this.ILBLTA, dos);

				// String

				writeString(this.IFINLN, dos);

				// String

				writeString(this.IPROFL, dos);

				// String

				writeString(this.IMODUL, dos);

				// String

				writeString(this.ISTYPE, dos);

				// Double

				if (this.ISCOLR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ISCOLR);
				}

				// String

				writeString(this.ISSIZE, dos);

				// String

				writeString(this.IHAZCD, dos);

				// String

				writeString(this.MCHNUM, dos);

				// BigDecimal

				dos.writeObject(this.ISUBST);

				// BigDecimal

				dos.writeObject(this.ICORE);

				// BigDecimal

				dos.writeObject(this.IREPL);

				// String

				writeString(this.ISLUM, dos);

				// BigDecimal

				dos.writeObject(this.IUMCV2);

				// String

				writeString(this.IBYUM, dos);

				// BigDecimal

				dos.writeObject(this.IMINPK);

				// BigDecimal

				dos.writeObject(this.ISTDPK);

				// String

				writeString(this.IHLDOR, dos);

				// BigDecimal

				dos.writeObject(this.IMOQTY);

				// BigDecimal

				dos.writeObject(this.IMNSTK);

				// BigDecimal

				dos.writeObject(this.IMXSTK);

				// BigDecimal

				dos.writeObject(this.IMDSTK);

				// BigDecimal

				dos.writeObject(this.IDSPLY);

				// BigDecimal

				dos.writeObject(this.IOMULT);

				// String

				writeString(this.IRPLCD, dos);

				// BigDecimal

				dos.writeObject(this.IMFPRC);

				// BigDecimal

				dos.writeObject(this.IWGHT);

				// BigDecimal

				dos.writeObject(this.ICUBE);

				// BigDecimal

				dos.writeObject(this.IDLGTH);

				// BigDecimal

				dos.writeObject(this.IDWDTH);

				// BigDecimal

				dos.writeObject(this.IDHGHT);

				// BigDecimal

				dos.writeObject(this.IMDATE);

				// BigDecimal

				dos.writeObject(this.IMCENT);

				// BigDecimal

				dos.writeObject(this.IVPLTI);

				// BigDecimal

				dos.writeObject(this.IVPLHI);

				// Double

				if (this.SHPNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SHPNUM);
				}

				// String

				writeString(this.IDISTM, dos);

				// String

				writeString(this.IHLDWO, dos);

				// Double

				if (this.IIGNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IIGNUM);
				}

				// String

				writeString(this.ISDIM, dos);

				// String

				writeString(this.IVATCD, dos);

				// Double

				if (this.IPLAN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IPLAN);
				}

				// String

				writeString(this.IVLRK1, dos);

				// String

				writeString(this.IVLRK2, dos);

				// String

				writeString(this.IVLRK3, dos);

				// String

				writeString(this.IVLRK4, dos);

				// BigDecimal

				dos.writeObject(this.IRPLCN);

				// BigDecimal

				dos.writeObject(this.IRPLDT);

				// String

				writeString(this.ISEASN, dos);

				// BigDecimal

				dos.writeObject(this.IDEADC);

				// BigDecimal

				dos.writeObject(this.IDEADD);

				// BigDecimal

				dos.writeObject(this.INLRTL);

				// String

				writeString(this.IHANDL, dos);

				// String

				writeString(this.IATRB1, dos);

				// String

				writeString(this.IATRB2, dos);

				// String

				writeString(this.IATRB3, dos);

				// String

				writeString(this.IATRB4, dos);

				// String

				writeString(this.IATRB5, dos);

				// String

				writeString(this.IPRCCH, dos);

				// String

				writeString(this.IPRCZN, dos);

				// String

				writeString(this.IPRCST, dos);

				// Double

				if (this.IASNUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.IASNUM);
				}

				// String

				writeString(this.ICORGP, dos);

				// BigDecimal

				dos.writeObject(this.ILEAD);

				// String

				writeString(this.IHZCOD, dos);

				// String

				writeString(this.IFRACT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("INUMBR=" + String.valueOf(INUMBR));
			sb.append(",ICHECK=" + String.valueOf(ICHECK));
			sb.append(",IDESCR=" + IDESCR);
			sb.append(",IDSCCD=" + IDSCCD);
			sb.append(",ISORT=" + ISORT);
			sb.append(",ISTYLN=" + ISTYLN);
			sb.append(",ASNUM=" + String.valueOf(ASNUM));
			sb.append(",IVNDPN=" + IVNDPN);
			sb.append(",IMFGR=" + String.valueOf(IMFGR));
			sb.append(",IMFGNO=" + IMFGNO);
			sb.append(",IDEPT=" + String.valueOf(IDEPT));
			sb.append(",ISDEPT=" + String.valueOf(ISDEPT));
			sb.append(",ICLAS=" + String.valueOf(ICLAS));
			sb.append(",ISCLAS=" + String.valueOf(ISCLAS));
			sb.append(",BYRNUM=" + BYRNUM);
			sb.append(",IASPAC=" + String.valueOf(IASPAC));
			sb.append(",IADVYN=" + IADVYN);
			sb.append(",IBUYCD=" + IBUYCD);
			sb.append(",ISET=" + ISET);
			sb.append(",IWARNT=" + IWARNT);
			sb.append(",IPRMPT=" + IPRMPT);
			sb.append(",IPRVNT=" + IPRVNT);
			sb.append(",ITKTTR=" + ITKTTR);
			sb.append(",ITKTTA=" + ITKTTA);
			sb.append(",ITKTN=" + String.valueOf(ITKTN));
			sb.append(",ILBLTR=" + ILBLTR);
			sb.append(",ILBLTA=" + ILBLTA);
			sb.append(",IFINLN=" + IFINLN);
			sb.append(",IPROFL=" + IPROFL);
			sb.append(",IMODUL=" + IMODUL);
			sb.append(",ISTYPE=" + ISTYPE);
			sb.append(",ISCOLR=" + String.valueOf(ISCOLR));
			sb.append(",ISSIZE=" + ISSIZE);
			sb.append(",IHAZCD=" + IHAZCD);
			sb.append(",MCHNUM=" + MCHNUM);
			sb.append(",ISUBST=" + String.valueOf(ISUBST));
			sb.append(",ICORE=" + String.valueOf(ICORE));
			sb.append(",IREPL=" + String.valueOf(IREPL));
			sb.append(",ISLUM=" + ISLUM);
			sb.append(",IUMCV2=" + String.valueOf(IUMCV2));
			sb.append(",IBYUM=" + IBYUM);
			sb.append(",IMINPK=" + String.valueOf(IMINPK));
			sb.append(",ISTDPK=" + String.valueOf(ISTDPK));
			sb.append(",IHLDOR=" + IHLDOR);
			sb.append(",IMOQTY=" + String.valueOf(IMOQTY));
			sb.append(",IMNSTK=" + String.valueOf(IMNSTK));
			sb.append(",IMXSTK=" + String.valueOf(IMXSTK));
			sb.append(",IMDSTK=" + String.valueOf(IMDSTK));
			sb.append(",IDSPLY=" + String.valueOf(IDSPLY));
			sb.append(",IOMULT=" + String.valueOf(IOMULT));
			sb.append(",IRPLCD=" + IRPLCD);
			sb.append(",IMFPRC=" + String.valueOf(IMFPRC));
			sb.append(",IWGHT=" + String.valueOf(IWGHT));
			sb.append(",ICUBE=" + String.valueOf(ICUBE));
			sb.append(",IDLGTH=" + String.valueOf(IDLGTH));
			sb.append(",IDWDTH=" + String.valueOf(IDWDTH));
			sb.append(",IDHGHT=" + String.valueOf(IDHGHT));
			sb.append(",IMDATE=" + String.valueOf(IMDATE));
			sb.append(",IMCENT=" + String.valueOf(IMCENT));
			sb.append(",IVPLTI=" + String.valueOf(IVPLTI));
			sb.append(",IVPLHI=" + String.valueOf(IVPLHI));
			sb.append(",SHPNUM=" + String.valueOf(SHPNUM));
			sb.append(",IDISTM=" + IDISTM);
			sb.append(",IHLDWO=" + IHLDWO);
			sb.append(",IIGNUM=" + String.valueOf(IIGNUM));
			sb.append(",ISDIM=" + ISDIM);
			sb.append(",IVATCD=" + IVATCD);
			sb.append(",IPLAN=" + String.valueOf(IPLAN));
			sb.append(",IVLRK1=" + IVLRK1);
			sb.append(",IVLRK2=" + IVLRK2);
			sb.append(",IVLRK3=" + IVLRK3);
			sb.append(",IVLRK4=" + IVLRK4);
			sb.append(",IRPLCN=" + String.valueOf(IRPLCN));
			sb.append(",IRPLDT=" + String.valueOf(IRPLDT));
			sb.append(",ISEASN=" + ISEASN);
			sb.append(",IDEADC=" + String.valueOf(IDEADC));
			sb.append(",IDEADD=" + String.valueOf(IDEADD));
			sb.append(",INLRTL=" + String.valueOf(INLRTL));
			sb.append(",IHANDL=" + IHANDL);
			sb.append(",IATRB1=" + IATRB1);
			sb.append(",IATRB2=" + IATRB2);
			sb.append(",IATRB3=" + IATRB3);
			sb.append(",IATRB4=" + IATRB4);
			sb.append(",IATRB5=" + IATRB5);
			sb.append(",IPRCCH=" + IPRCCH);
			sb.append(",IPRCZN=" + IPRCZN);
			sb.append(",IPRCST=" + IPRCST);
			sb.append(",IASNUM=" + String.valueOf(IASNUM));
			sb.append(",ICORGP=" + ICORGP);
			sb.append(",ILEAD=" + String.valueOf(ILEAD));
			sb.append(",IHZCOD=" + IHZCOD);
			sb.append(",IFRACT=" + IFRACT);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (INUMBR == null) {
				sb.append("<null>");
			} else {
				sb.append(INUMBR);
			}

			sb.append("|");

			if (ICHECK == null) {
				sb.append("<null>");
			} else {
				sb.append(ICHECK);
			}

			sb.append("|");

			if (IDESCR == null) {
				sb.append("<null>");
			} else {
				sb.append(IDESCR);
			}

			sb.append("|");

			if (IDSCCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IDSCCD);
			}

			sb.append("|");

			if (ISORT == null) {
				sb.append("<null>");
			} else {
				sb.append(ISORT);
			}

			sb.append("|");

			if (ISTYLN == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTYLN);
			}

			sb.append("|");

			if (ASNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(ASNUM);
			}

			sb.append("|");

			if (IVNDPN == null) {
				sb.append("<null>");
			} else {
				sb.append(IVNDPN);
			}

			sb.append("|");

			if (IMFGR == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFGR);
			}

			sb.append("|");

			if (IMFGNO == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFGNO);
			}

			sb.append("|");

			if (IDEPT == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEPT);
			}

			sb.append("|");

			if (ISDEPT == null) {
				sb.append("<null>");
			} else {
				sb.append(ISDEPT);
			}

			sb.append("|");

			if (ICLAS == null) {
				sb.append("<null>");
			} else {
				sb.append(ICLAS);
			}

			sb.append("|");

			if (ISCLAS == null) {
				sb.append("<null>");
			} else {
				sb.append(ISCLAS);
			}

			sb.append("|");

			if (BYRNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(BYRNUM);
			}

			sb.append("|");

			if (IASPAC == null) {
				sb.append("<null>");
			} else {
				sb.append(IASPAC);
			}

			sb.append("|");

			if (IADVYN == null) {
				sb.append("<null>");
			} else {
				sb.append(IADVYN);
			}

			sb.append("|");

			if (IBUYCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IBUYCD);
			}

			sb.append("|");

			if (ISET == null) {
				sb.append("<null>");
			} else {
				sb.append(ISET);
			}

			sb.append("|");

			if (IWARNT == null) {
				sb.append("<null>");
			} else {
				sb.append(IWARNT);
			}

			sb.append("|");

			if (IPRMPT == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRMPT);
			}

			sb.append("|");

			if (IPRVNT == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRVNT);
			}

			sb.append("|");

			if (ITKTTR == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTTR);
			}

			sb.append("|");

			if (ITKTTA == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTTA);
			}

			sb.append("|");

			if (ITKTN == null) {
				sb.append("<null>");
			} else {
				sb.append(ITKTN);
			}

			sb.append("|");

			if (ILBLTR == null) {
				sb.append("<null>");
			} else {
				sb.append(ILBLTR);
			}

			sb.append("|");

			if (ILBLTA == null) {
				sb.append("<null>");
			} else {
				sb.append(ILBLTA);
			}

			sb.append("|");

			if (IFINLN == null) {
				sb.append("<null>");
			} else {
				sb.append(IFINLN);
			}

			sb.append("|");

			if (IPROFL == null) {
				sb.append("<null>");
			} else {
				sb.append(IPROFL);
			}

			sb.append("|");

			if (IMODUL == null) {
				sb.append("<null>");
			} else {
				sb.append(IMODUL);
			}

			sb.append("|");

			if (ISTYPE == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTYPE);
			}

			sb.append("|");

			if (ISCOLR == null) {
				sb.append("<null>");
			} else {
				sb.append(ISCOLR);
			}

			sb.append("|");

			if (ISSIZE == null) {
				sb.append("<null>");
			} else {
				sb.append(ISSIZE);
			}

			sb.append("|");

			if (IHAZCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IHAZCD);
			}

			sb.append("|");

			if (MCHNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(MCHNUM);
			}

			sb.append("|");

			if (ISUBST == null) {
				sb.append("<null>");
			} else {
				sb.append(ISUBST);
			}

			sb.append("|");

			if (ICORE == null) {
				sb.append("<null>");
			} else {
				sb.append(ICORE);
			}

			sb.append("|");

			if (IREPL == null) {
				sb.append("<null>");
			} else {
				sb.append(IREPL);
			}

			sb.append("|");

			if (ISLUM == null) {
				sb.append("<null>");
			} else {
				sb.append(ISLUM);
			}

			sb.append("|");

			if (IUMCV2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IUMCV2);
			}

			sb.append("|");

			if (IBYUM == null) {
				sb.append("<null>");
			} else {
				sb.append(IBYUM);
			}

			sb.append("|");

			if (IMINPK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMINPK);
			}

			sb.append("|");

			if (ISTDPK == null) {
				sb.append("<null>");
			} else {
				sb.append(ISTDPK);
			}

			sb.append("|");

			if (IHLDOR == null) {
				sb.append("<null>");
			} else {
				sb.append(IHLDOR);
			}

			sb.append("|");

			if (IMOQTY == null) {
				sb.append("<null>");
			} else {
				sb.append(IMOQTY);
			}

			sb.append("|");

			if (IMNSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMNSTK);
			}

			sb.append("|");

			if (IMXSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMXSTK);
			}

			sb.append("|");

			if (IMDSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(IMDSTK);
			}

			sb.append("|");

			if (IDSPLY == null) {
				sb.append("<null>");
			} else {
				sb.append(IDSPLY);
			}

			sb.append("|");

			if (IOMULT == null) {
				sb.append("<null>");
			} else {
				sb.append(IOMULT);
			}

			sb.append("|");

			if (IRPLCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLCD);
			}

			sb.append("|");

			if (IMFPRC == null) {
				sb.append("<null>");
			} else {
				sb.append(IMFPRC);
			}

			sb.append("|");

			if (IWGHT == null) {
				sb.append("<null>");
			} else {
				sb.append(IWGHT);
			}

			sb.append("|");

			if (ICUBE == null) {
				sb.append("<null>");
			} else {
				sb.append(ICUBE);
			}

			sb.append("|");

			if (IDLGTH == null) {
				sb.append("<null>");
			} else {
				sb.append(IDLGTH);
			}

			sb.append("|");

			if (IDWDTH == null) {
				sb.append("<null>");
			} else {
				sb.append(IDWDTH);
			}

			sb.append("|");

			if (IDHGHT == null) {
				sb.append("<null>");
			} else {
				sb.append(IDHGHT);
			}

			sb.append("|");

			if (IMDATE == null) {
				sb.append("<null>");
			} else {
				sb.append(IMDATE);
			}

			sb.append("|");

			if (IMCENT == null) {
				sb.append("<null>");
			} else {
				sb.append(IMCENT);
			}

			sb.append("|");

			if (IVPLTI == null) {
				sb.append("<null>");
			} else {
				sb.append(IVPLTI);
			}

			sb.append("|");

			if (IVPLHI == null) {
				sb.append("<null>");
			} else {
				sb.append(IVPLHI);
			}

			sb.append("|");

			if (SHPNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(SHPNUM);
			}

			sb.append("|");

			if (IDISTM == null) {
				sb.append("<null>");
			} else {
				sb.append(IDISTM);
			}

			sb.append("|");

			if (IHLDWO == null) {
				sb.append("<null>");
			} else {
				sb.append(IHLDWO);
			}

			sb.append("|");

			if (IIGNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(IIGNUM);
			}

			sb.append("|");

			if (ISDIM == null) {
				sb.append("<null>");
			} else {
				sb.append(ISDIM);
			}

			sb.append("|");

			if (IVATCD == null) {
				sb.append("<null>");
			} else {
				sb.append(IVATCD);
			}

			sb.append("|");

			if (IPLAN == null) {
				sb.append("<null>");
			} else {
				sb.append(IPLAN);
			}

			sb.append("|");

			if (IVLRK1 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK1);
			}

			sb.append("|");

			if (IVLRK2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK2);
			}

			sb.append("|");

			if (IVLRK3 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK3);
			}

			sb.append("|");

			if (IVLRK4 == null) {
				sb.append("<null>");
			} else {
				sb.append(IVLRK4);
			}

			sb.append("|");

			if (IRPLCN == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLCN);
			}

			sb.append("|");

			if (IRPLDT == null) {
				sb.append("<null>");
			} else {
				sb.append(IRPLDT);
			}

			sb.append("|");

			if (ISEASN == null) {
				sb.append("<null>");
			} else {
				sb.append(ISEASN);
			}

			sb.append("|");

			if (IDEADC == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEADC);
			}

			sb.append("|");

			if (IDEADD == null) {
				sb.append("<null>");
			} else {
				sb.append(IDEADD);
			}

			sb.append("|");

			if (INLRTL == null) {
				sb.append("<null>");
			} else {
				sb.append(INLRTL);
			}

			sb.append("|");

			if (IHANDL == null) {
				sb.append("<null>");
			} else {
				sb.append(IHANDL);
			}

			sb.append("|");

			if (IATRB1 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB1);
			}

			sb.append("|");

			if (IATRB2 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB2);
			}

			sb.append("|");

			if (IATRB3 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB3);
			}

			sb.append("|");

			if (IATRB4 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB4);
			}

			sb.append("|");

			if (IATRB5 == null) {
				sb.append("<null>");
			} else {
				sb.append(IATRB5);
			}

			sb.append("|");

			if (IPRCCH == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCCH);
			}

			sb.append("|");

			if (IPRCZN == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCZN);
			}

			sb.append("|");

			if (IPRCST == null) {
				sb.append("<null>");
			} else {
				sb.append(IPRCST);
			}

			sb.append("|");

			if (IASNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(IASNUM);
			}

			sb.append("|");

			if (ICORGP == null) {
				sb.append("<null>");
			} else {
				sb.append(ICORGP);
			}

			sb.append("|");

			if (ILEAD == null) {
				sb.append("<null>");
			} else {
				sb.append(ILEAD);
			}

			sb.append("|");

			if (IHZCOD == null) {
				sb.append("<null>");
			} else {
				sb.append(IHZCOD);
			}

			sb.append("|");

			if (IFRACT == null) {
				sb.append("<null>");
			} else {
				sb.append(IFRACT);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				INVMSTStruct INVMST = new INVMSTStruct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "INVMST");

				int tos_count_tDBOutput_8 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBOutput_8", "tDBOutput_8", "tSnowflakeOutput");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBOutput_8 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBOutput_8 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBOutput_8 = (String) (restRequest_tDBOutput_8 != null
						? restRequest_tDBOutput_8.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBOutput_8 = new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBOutput_8 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBOutput_8 = null;

				org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_8 = (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_8
						.createRuntimeProperties();
				props_tDBOutput_8.setValue("tableAction",
						org.talend.components.common.tableaction.TableAction.TableActionEnum.TRUNCATE);

				props_tDBOutput_8.setValue("outputAction",
						org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);

				props_tDBOutput_8.setValue("convertColumnsAndTableToUppercase", true);

				props_tDBOutput_8.setValue("convertEmptyStringsToNull", false);

				props_tDBOutput_8.setValue("useSchemaDatePattern", false);

				props_tDBOutput_8.setValue("dieOnError", false);

				class SchemaSettingTool_tDBOutput_8_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_8_1_fisrt sst_tDBOutput_8_1_fisrt = new SchemaSettingTool_tDBOutput_8_1_fisrt();

				props_tDBOutput_8.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_8_1_fisrt.getSchemaValue()));

				props_tDBOutput_8.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_8.connection.setValue("useCustomRegion", false);

				props_tDBOutput_8.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_8.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_8.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBOutput_8.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBOutput_8.table.setValue("tableName", "INVMST");

				props_tDBOutput_8.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_8.table.connection.setValue("useCustomRegion", false);

				props_tDBOutput_8.table.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_8.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_8.table.connection.referencedComponent.setValue("componentInstanceId",
						"tDBConnection_1");

				props_tDBOutput_8.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBOutput_8_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"INVMST\",\"fields\":[{", s);

						a("\"name\":\"INUMBR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"INUMBR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ICHECK\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ICHECK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDESCR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":30,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IDESCR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDSCCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IDSCCD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISORT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISORT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISTYLN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":15,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISTYLN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ASNUM\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ASNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVNDPN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":15,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IVNDPN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMFGR\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"IMFGR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMFGNO\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":15,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IMFGNO\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDEPT\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"IDEPT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISDEPT\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ISDEPT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ICLAS\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ICLAS\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISCLAS\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ISCLAS\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"BYRNUM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"BYRNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IASPAC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":2,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IASPAC\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IADVYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IADVYN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IBUYCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IBUYCD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISET\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISET\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IWARNT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IWARNT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IPRMPT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IPRMPT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IPRVNT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IPRVNT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ITKTTR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ITKTTR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ITKTTA\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ITKTTA\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ITKTN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":2,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ITKTN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ILBLTR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ILBLTR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ILBLTA\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ILBLTA\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IFINLN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":5,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IFINLN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IPROFL\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":5,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IPROFL\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMODUL\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":5,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IMODUL\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISTYPE\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISTYPE\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISCOLR\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ISCOLR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISSIZE\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISSIZE\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IHAZCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IHAZCD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"MCHNUM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"MCHNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISUBST\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ISUBST\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ICORE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ICORE\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IREPL\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IREPL\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISLUM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISLUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IUMCV2\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":5,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"IUMCV2\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IBYUM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IBYUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMINPK\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"IMINPK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISTDPK\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ISTDPK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IHLDOR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IHLDOR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMOQTY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IMOQTY\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMNSTK\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IMNSTK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMXSTK\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IMXSTK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMDSTK\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IMDSTK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDSPLY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IDSPLY\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IOMULT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IOMULT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IRPLCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IRPLCD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMFPRC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"IMFPRC\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IWGHT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"IWGHT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ICUBE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ICUBE\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDLGTH\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":1,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"IDLGTH\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDWDTH\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":1,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"IDWDTH\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDHGHT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":1,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"IDHGHT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMDATE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IMDATE\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IMCENT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IMCENT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVPLTI\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IVPLTI\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVPLHI\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IVPLHI\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"SHPNUM\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"SHPNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDISTM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IDISTM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IHLDWO\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IHLDWO\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IIGNUM\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"IIGNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISDIM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISDIM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVATCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IVATCD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IPLAN\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"IPLAN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVLRK1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IVLRK1\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVLRK2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IVLRK2\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVLRK3\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IVLRK3\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IVLRK4\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IVLRK4\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IRPLCN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IRPLCN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IRPLDT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IRPLDT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ISEASN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ISEASN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDEADC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IDEADC\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IDEADD\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IDEADD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"INLRTL\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"INLRTL\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IHANDL\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IHANDL\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IATRB1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IATRB1\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IATRB2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IATRB2\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IATRB3\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IATRB3\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IATRB4\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IATRB4\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IATRB5\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":2,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IATRB5\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IPRCCH\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IPRCCH\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IPRCZN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IPRCZN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IPRCST\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IPRCST\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IASNUM\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"IASNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ICORGP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":5,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ICORGP\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ILEAD\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ILEAD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IHZCOD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IHZCOD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"IFRACT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IFRACT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"talend.field.dbType\":91,\"talend.field.dbColumnName\":\"LOAD_DATE\",\"talend.field.default\":\"\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_8_2_fisrt sst_tDBOutput_8_2_fisrt = new SchemaSettingTool_tDBOutput_8_2_fisrt();

				props_tDBOutput_8.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_8_2_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_8.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_8 = props_tDBOutput_8.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_8 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_8 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_8 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_8.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_8);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_8.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_8 = props_tDBOutput_8.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_8 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_8 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_8 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_8.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_8);
					}
				}
				globalMap.put("tDBOutput_8_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_8);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBOutput_8 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBOutput_8_MAPPINGS_URL", mappings_url_tDBOutput_8);

				org.talend.components.api.container.RuntimeContainer container_tDBOutput_8 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBOutput_8";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBOutput_8 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBOutput_8 = null;
				topology_tDBOutput_8 = org.talend.components.api.component.ConnectorTopology.INCOMING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_8 = def_tDBOutput_8.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_8,
						topology_tDBOutput_8);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_8 = def_tDBOutput_8
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_8 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBOutput_8.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBOutput_8 = componentRuntime_tDBOutput_8
						.initialize(container_tDBOutput_8, props_tDBOutput_8);

				if (initVr_tDBOutput_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBOutput_8.getMessage());
				}

				if (componentRuntime_tDBOutput_8 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_8 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBOutput_8;
					compDriverInitialization_tDBOutput_8.runAtDriver(container_tDBOutput_8);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_8 = null;
				if (componentRuntime_tDBOutput_8 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBOutput_8 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBOutput_8;
					if (doesNodeBelongToRequest_tDBOutput_8) {
						org.talend.daikon.properties.ValidationResult vr_tDBOutput_8 = sourceOrSink_tDBOutput_8
								.validate(container_tDBOutput_8);
						if (vr_tDBOutput_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBOutput_8.getMessage());
						}
					}
				}

				org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_8 = null;
				if (sourceOrSink_tDBOutput_8 instanceof org.talend.components.api.component.runtime.Sink) {
					org.talend.components.api.component.runtime.Sink sink_tDBOutput_8 = (org.talend.components.api.component.runtime.Sink) sourceOrSink_tDBOutput_8;
					org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_8 = sink_tDBOutput_8
							.createWriteOperation();
					if (doesNodeBelongToRequest_tDBOutput_8) {
						writeOperation_tDBOutput_8.initialize(container_tDBOutput_8);
					}
					writer_tDBOutput_8 = writeOperation_tDBOutput_8.createWriter(container_tDBOutput_8);
					if (doesNodeBelongToRequest_tDBOutput_8) {
						writer_tDBOutput_8.open("tDBOutput_8");
					}

					resourceMap.put("writer_tDBOutput_8", writer_tDBOutput_8);
				} // end of "sourceOrSink_tDBOutput_8 instanceof ...Sink"
				org.talend.components.api.component.Connector c_tDBOutput_8 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_8
						.getAvailableConnectors(null, false)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBOutput_8 = currentConnector;
						break;
					}
				}
				org.apache.avro.Schema designSchema_tDBOutput_8 = props_tDBOutput_8.getSchema(c_tDBOutput_8, false);
				incomingEnforcer_tDBOutput_8 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(
						designSchema_tDBOutput_8);

				java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_8 = new java.util.ArrayList<Object>();
				java.util.Iterator outgoingMainRecordsIt_tDBOutput_8 = null;

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "row2");

				int tos_count_tMap_2 = 0;

				if (log.isDebugEnabled())
					log.debug("tMap_2 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tMap_2 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tMap_2 = new StringBuilder();
							log4jParamters_tMap_2.append("Parameters:");
							log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
							log4jParamters_tMap_2.append(" | ");
							log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
							log4jParamters_tMap_2.append(" | ");
							log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
							log4jParamters_tMap_2.append(" | ");
							log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
							log4jParamters_tMap_2.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tMap_2 - " + (log4jParamters_tMap_2));
						}
					}
					new BytesLimit65535_tMap_2().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tMap_2", "tMap_2", "tMap");
					talendJobLogProcess(globalMap);
				}

// ###############################
// # Lookup's keys initialization
				int count_row2_tMap_2 = 0;

// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					java.util.Date var1;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_INVMST_tMap_2 = 0;

				INVMSTStruct INVMST_tmp = new INVMSTStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_3 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileInputDelimited_3 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileInputDelimited_3 = new StringBuilder();
							log4jParamters_tFileInputDelimited_3.append("Parameters:");
							log4jParamters_tFileInputDelimited_3
									.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVMST.zip\"");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("CSV_OPTION" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("ROWSEPARATOR" + " = " + "\"\\n\"");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("FIELDSEPARATOR" + " = " + "\"|\"");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("HEADER" + " = " + "1");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("LIMIT" + " = " + "");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("REMOVE_EMPTY_ROW" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("UNCOMPRESS" + " = " + "true");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("DIE_ON_ERROR" + " = " + "true");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("ADVANCED_SEPARATOR" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("TRIMALL" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("TRIMSELECT" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("INUMBR") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ICHECK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDESCR")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDSCCD") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ISORT") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISTYLN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ASNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IVNDPN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMFGR") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMFGNO") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IDEPT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISDEPT")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICLAS") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISCLAS") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("BYRNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IASPAC")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IADVYN") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IBUYCD") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISET") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IWARNT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IPRMPT")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IPRVNT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ITKTTR") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ITKTTA") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ITKTN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ILBLTR")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ILBLTA") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IFINLN") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IPROFL") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IMODUL") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISTYPE")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISCOLR") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ISSIZE") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IHAZCD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("MCHNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ISUBST")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICORE") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IREPL") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ISLUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IUMCV2")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IBYUM") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMINPK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ISTDPK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IHLDOR")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMOQTY") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IMNSTK") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMXSTK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IMDSTK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDSPLY")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IOMULT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IRPLCD") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IMFPRC") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IWGHT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICUBE") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IDLGTH") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IDWDTH") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IDHGHT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMDATE")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IMCENT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IVPLTI") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IVPLHI") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("SHPNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IDISTM")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IHLDWO") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IIGNUM") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ISDIM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IVATCD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IPLAN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IVLRK1") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IVLRK2") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IVLRK3") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IVLRK4") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IRPLCN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IRPLDT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ISEASN") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IDEADC") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IDEADD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("INLRTL")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IHANDL") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IATRB1") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IATRB2") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IATRB3") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IATRB4")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IATRB5") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("IPRCCH") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IPRCZN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IPRCST") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("IASNUM")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ICORGP") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("ILEAD") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("IHZCOD") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("IFRACT") + "}]");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("CHECK_FIELDS_NUM" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("CHECK_DATE" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("ENCODING" + " = " + "\"ISO-8859-15\"");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("SPLITRECORD" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							log4jParamters_tFileInputDelimited_3.append("ENABLE_DECODE" + " = " + "false");
							log4jParamters_tFileInputDelimited_3.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileInputDelimited_3 - " + (log4jParamters_tFileInputDelimited_3));
						}
					}
					new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileInputDelimited_3", "tFileInputDelimited_3", "tFileInputDelimited");
					talendJobLogProcess(globalMap);
				}

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "/data/talend/data_repository/INVMST.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_3 = null;
					try {
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_3));
						} else {
							zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(new java.io.FileInputStream(
											String.valueOf(filename_tFileInputDelimited_3))));
						}
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						throw e;

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_3 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_3 = zis_tFileInputDelimited_3.getNextEntry();
						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

							throw e;

						}
						if (entry_tFileInputDelimited_3 == null) {
							break;
						}
						if (entry_tFileInputDelimited_3.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_3, "ISO-8859-15", "|", "\n", false, 1, 0,

									limit_tFileInputDelimited_3, -1, false);
						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

							throw e;

						}

						log.info("tFileInputDelimited_3 - Retrieving records from the datasource.");

						while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
							rowstate_tFileInputDelimited_3.reset();

							row2 = null;

							boolean whetherReject_tFileInputDelimited_3 = false;
							row2 = new row2Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_3 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_3 = 0;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.INUMBR = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"INUMBR", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.INUMBR = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ICHECK = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ICHECK", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ICHECK = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								row2.IDESCR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 3;

								row2.IDSCCD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 4;

								row2.ISORT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 5;

								row2.ISTYLN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 6;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ASNUM = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ASNUM", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ASNUM = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								row2.IVNDPN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 8;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMFGR = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMFGR", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMFGR = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								row2.IMFGNO = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 10;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IDEPT = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IDEPT", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IDEPT = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ISDEPT = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ISDEPT", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ISDEPT = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ICLAS = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ICLAS", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ICLAS = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ISCLAS = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ISCLAS", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ISCLAS = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								row2.BYRNUM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 15;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IASPAC = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IASPAC", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IASPAC = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								row2.IADVYN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 17;

								row2.IBUYCD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 18;

								row2.ISET = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 19;

								row2.IWARNT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 20;

								row2.IPRMPT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 21;

								row2.IPRVNT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 22;

								row2.ITKTTR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 23;

								row2.ITKTTA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 24;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ITKTN = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ITKTN", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ITKTN = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 25;

								row2.ILBLTR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 26;

								row2.ILBLTA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 27;

								row2.IFINLN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 28;

								row2.IPROFL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 29;

								row2.IMODUL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 30;

								row2.ISTYPE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 31;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ISCOLR = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ISCOLR", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ISCOLR = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 32;

								row2.ISSIZE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 33;

								row2.IHAZCD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 34;

								row2.MCHNUM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 35;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ISUBST = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ISUBST", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ISUBST = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 36;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ICORE = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ICORE", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ICORE = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 37;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IREPL = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IREPL", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IREPL = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 38;

								row2.ISLUM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 39;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IUMCV2 = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IUMCV2", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IUMCV2 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 40;

								row2.IBYUM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 41;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMINPK = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMINPK", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMINPK = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 42;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ISTDPK = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ISTDPK", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ISTDPK = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 43;

								row2.IHLDOR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 44;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMOQTY = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMOQTY", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMOQTY = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 45;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMNSTK = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMNSTK", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMNSTK = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 46;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMXSTK = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMXSTK", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMXSTK = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 47;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMDSTK = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMDSTK", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMDSTK = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 48;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IDSPLY = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IDSPLY", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IDSPLY = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 49;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IOMULT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IOMULT", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IOMULT = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 50;

								row2.IRPLCD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 51;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMFPRC = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMFPRC", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMFPRC = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 52;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IWGHT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IWGHT", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IWGHT = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 53;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ICUBE = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ICUBE", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ICUBE = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 54;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IDLGTH = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IDLGTH", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IDLGTH = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 55;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IDWDTH = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IDWDTH", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IDWDTH = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 56;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IDHGHT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IDHGHT", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IDHGHT = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 57;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMDATE = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMDATE", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMDATE = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 58;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IMCENT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMCENT", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IMCENT = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 59;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IVPLTI = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IVPLTI", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IVPLTI = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 60;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IVPLHI = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IVPLHI", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IVPLHI = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 61;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.SHPNUM = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SHPNUM", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.SHPNUM = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 62;

								row2.IDISTM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 63;

								row2.IHLDWO = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 64;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IIGNUM = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IIGNUM", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IIGNUM = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 65;

								row2.ISDIM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 66;

								row2.IVATCD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 67;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IPLAN = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IPLAN", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IPLAN = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 68;

								row2.IVLRK1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 69;

								row2.IVLRK2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 70;

								row2.IVLRK3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 71;

								row2.IVLRK4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 72;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IRPLCN = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IRPLCN", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IRPLCN = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 73;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IRPLDT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IRPLDT", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IRPLDT = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 74;

								row2.ISEASN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 75;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IDEADC = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IDEADC", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IDEADC = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 76;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IDEADD = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IDEADD", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IDEADD = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 77;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.INLRTL = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"INLRTL", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.INLRTL = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 78;

								row2.IHANDL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 79;

								row2.IATRB1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 80;

								row2.IATRB2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 81;

								row2.IATRB3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 82;

								row2.IATRB4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 83;

								row2.IATRB5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 84;

								row2.IPRCCH = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 85;

								row2.IPRCZN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 86;

								row2.IPRCST = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 87;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.IASNUM = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IASNUM", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.IASNUM = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 88;

								row2.ICORGP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 89;

								temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row2.ILEAD = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
												ex_tFileInputDelimited_3.getMessage());
										rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ILEAD", "row2", temp, ex_tFileInputDelimited_3),
												ex_tFileInputDelimited_3));
									}

								} else {

									row2.ILEAD = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 90;

								row2.IHZCOD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 91;

								row2.IFRACT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

								if (rowstate_tFileInputDelimited_3.getException() != null) {
									throw rowstate_tFileInputDelimited_3.getException();
								}

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputDelimited_3 = true;

								throw (e);

							}

							log.debug("tFileInputDelimited_3 - Retrieving the record "
									+ fid_tFileInputDelimited_3.getRowNumber() + ".");

							/**
							 * [tFileInputDelimited_3 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_3 main ] start
							 */

							currentComponent = "tFileInputDelimited_3";

							tos_count_tFileInputDelimited_3++;

							/**
							 * [tFileInputDelimited_3 main ] stop
							 */

							/**
							 * [tFileInputDelimited_3 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_3";

							/**
							 * [tFileInputDelimited_3 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

										, "row2", "tFileInputDelimited_3", "tFileInputDelimited_3",
										"tFileInputDelimited", "tMap_2", "tMap_2", "tMap"

								)) {
									talendJobLogProcess(globalMap);
								}

								if (log.isTraceEnabled()) {
									log.trace("row2 - " + (row2 == null ? "" : row2.toLogString()));
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)

								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;
								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;
									Var.var1 = TalendDate.addDate(
											TalendDate.parseDate("yyyy-MM-dd", TalendDate.getDate("CCYY-MM-DD")), -1,
											"DD");// ###############################
									// ###############################
									// # Output tables

									INVMST = null;

// # Output table : 'INVMST'
									count_INVMST_tMap_2++;

									INVMST_tmp.INUMBR = row2.INUMBR;
									INVMST_tmp.ICHECK = row2.ICHECK;
									INVMST_tmp.IDESCR = row2.IDESCR;
									INVMST_tmp.IDSCCD = row2.IDSCCD;
									INVMST_tmp.ISORT = row2.ISORT;
									INVMST_tmp.ISTYLN = row2.ISTYLN;
									INVMST_tmp.ASNUM = row2.ASNUM;
									INVMST_tmp.IVNDPN = row2.IVNDPN;
									INVMST_tmp.IMFGR = row2.IMFGR;
									INVMST_tmp.IMFGNO = row2.IMFGNO;
									INVMST_tmp.IDEPT = row2.IDEPT;
									INVMST_tmp.ISDEPT = row2.ISDEPT;
									INVMST_tmp.ICLAS = row2.ICLAS;
									INVMST_tmp.ISCLAS = row2.ISCLAS;
									INVMST_tmp.BYRNUM = row2.BYRNUM;
									INVMST_tmp.IASPAC = row2.IASPAC;
									INVMST_tmp.IADVYN = row2.IADVYN;
									INVMST_tmp.IBUYCD = row2.IBUYCD;
									INVMST_tmp.ISET = row2.ISET;
									INVMST_tmp.IWARNT = row2.IWARNT;
									INVMST_tmp.IPRMPT = row2.IPRMPT;
									INVMST_tmp.IPRVNT = row2.IPRVNT;
									INVMST_tmp.ITKTTR = row2.ITKTTR;
									INVMST_tmp.ITKTTA = row2.ITKTTA;
									INVMST_tmp.ITKTN = row2.ITKTN;
									INVMST_tmp.ILBLTR = row2.ILBLTR;
									INVMST_tmp.ILBLTA = row2.ILBLTA;
									INVMST_tmp.IFINLN = row2.IFINLN;
									INVMST_tmp.IPROFL = row2.IPROFL;
									INVMST_tmp.IMODUL = row2.IMODUL;
									INVMST_tmp.ISTYPE = row2.ISTYPE;
									INVMST_tmp.ISCOLR = row2.ISCOLR;
									INVMST_tmp.ISSIZE = row2.ISSIZE;
									INVMST_tmp.IHAZCD = row2.IHAZCD;
									INVMST_tmp.MCHNUM = row2.MCHNUM;
									INVMST_tmp.ISUBST = row2.ISUBST;
									INVMST_tmp.ICORE = row2.ICORE;
									INVMST_tmp.IREPL = row2.IREPL;
									INVMST_tmp.ISLUM = row2.ISLUM;
									INVMST_tmp.IUMCV2 = row2.IUMCV2;
									INVMST_tmp.IBYUM = row2.IBYUM;
									INVMST_tmp.IMINPK = row2.IMINPK;
									INVMST_tmp.ISTDPK = row2.ISTDPK;
									INVMST_tmp.IHLDOR = row2.IHLDOR;
									INVMST_tmp.IMOQTY = row2.IMOQTY;
									INVMST_tmp.IMNSTK = row2.IMNSTK;
									INVMST_tmp.IMXSTK = row2.IMXSTK;
									INVMST_tmp.IMDSTK = row2.IMDSTK;
									INVMST_tmp.IDSPLY = row2.IDSPLY;
									INVMST_tmp.IOMULT = row2.IOMULT;
									INVMST_tmp.IRPLCD = row2.IRPLCD;
									INVMST_tmp.IMFPRC = row2.IMFPRC;
									INVMST_tmp.IWGHT = row2.IWGHT;
									INVMST_tmp.ICUBE = row2.ICUBE;
									INVMST_tmp.IDLGTH = row2.IDLGTH;
									INVMST_tmp.IDWDTH = row2.IDWDTH;
									INVMST_tmp.IDHGHT = row2.IDHGHT;
									INVMST_tmp.IMDATE = row2.IMDATE;
									INVMST_tmp.IMCENT = row2.IMCENT;
									INVMST_tmp.IVPLTI = row2.IVPLTI;
									INVMST_tmp.IVPLHI = row2.IVPLHI;
									INVMST_tmp.SHPNUM = row2.SHPNUM;
									INVMST_tmp.IDISTM = row2.IDISTM;
									INVMST_tmp.IHLDWO = row2.IHLDWO;
									INVMST_tmp.IIGNUM = row2.IIGNUM;
									INVMST_tmp.ISDIM = row2.ISDIM;
									INVMST_tmp.IVATCD = row2.IVATCD;
									INVMST_tmp.IPLAN = row2.IPLAN;
									INVMST_tmp.IVLRK1 = row2.IVLRK1;
									INVMST_tmp.IVLRK2 = row2.IVLRK2;
									INVMST_tmp.IVLRK3 = row2.IVLRK3;
									INVMST_tmp.IVLRK4 = row2.IVLRK4;
									INVMST_tmp.IRPLCN = row2.IRPLCN;
									INVMST_tmp.IRPLDT = row2.IRPLDT;
									INVMST_tmp.ISEASN = row2.ISEASN;
									INVMST_tmp.IDEADC = row2.IDEADC;
									INVMST_tmp.IDEADD = row2.IDEADD;
									INVMST_tmp.INLRTL = row2.INLRTL;
									INVMST_tmp.IHANDL = row2.IHANDL;
									INVMST_tmp.IATRB1 = row2.IATRB1;
									INVMST_tmp.IATRB2 = row2.IATRB2;
									INVMST_tmp.IATRB3 = row2.IATRB3;
									INVMST_tmp.IATRB4 = row2.IATRB4;
									INVMST_tmp.IATRB5 = row2.IATRB5;
									INVMST_tmp.IPRCCH = row2.IPRCCH;
									INVMST_tmp.IPRCZN = row2.IPRCZN;
									INVMST_tmp.IPRCST = row2.IPRCST;
									INVMST_tmp.IASNUM = row2.IASNUM;
									INVMST_tmp.ICORGP = row2.ICORGP;
									INVMST_tmp.ILEAD = row2.ILEAD;
									INVMST_tmp.IHZCOD = row2.IHZCOD;
									INVMST_tmp.IFRACT = row2.IFRACT;
									INVMST_tmp.LOAD_DATE = Var.var1;
									INVMST = INVMST_tmp;
									log.debug("tMap_2 - Outputting the record " + count_INVMST_tMap_2
											+ " of the output table 'INVMST'.");

// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
// Start of branch "INVMST"
								if (INVMST != null) {

									/**
									 * [tDBOutput_8 main ] start
									 */

									currentComponent = "tDBOutput_8";

									if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

											, "INVMST", "tMap_2", "tMap_2", "tMap", "tDBOutput_8", "tDBOutput_8",
											"tSnowflakeOutput"

									)) {
										talendJobLogProcess(globalMap);
									}

									if (log.isTraceEnabled()) {
										log.trace("INVMST - " + (INVMST == null ? "" : INVMST.toLogString()));
									}

									if (incomingEnforcer_tDBOutput_8 != null) {
										incomingEnforcer_tDBOutput_8.createNewRecord();
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("INUMBR") != null) {
										incomingEnforcer_tDBOutput_8.put("INUMBR", INVMST.INUMBR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ICHECK") != null) {
										incomingEnforcer_tDBOutput_8.put("ICHECK", INVMST.ICHECK);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDESCR") != null) {
										incomingEnforcer_tDBOutput_8.put("IDESCR", INVMST.IDESCR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDSCCD") != null) {
										incomingEnforcer_tDBOutput_8.put("IDSCCD", INVMST.IDSCCD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISORT") != null) {
										incomingEnforcer_tDBOutput_8.put("ISORT", INVMST.ISORT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISTYLN") != null) {
										incomingEnforcer_tDBOutput_8.put("ISTYLN", INVMST.ISTYLN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ASNUM") != null) {
										incomingEnforcer_tDBOutput_8.put("ASNUM", INVMST.ASNUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVNDPN") != null) {
										incomingEnforcer_tDBOutput_8.put("IVNDPN", INVMST.IVNDPN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMFGR") != null) {
										incomingEnforcer_tDBOutput_8.put("IMFGR", INVMST.IMFGR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMFGNO") != null) {
										incomingEnforcer_tDBOutput_8.put("IMFGNO", INVMST.IMFGNO);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDEPT") != null) {
										incomingEnforcer_tDBOutput_8.put("IDEPT", INVMST.IDEPT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISDEPT") != null) {
										incomingEnforcer_tDBOutput_8.put("ISDEPT", INVMST.ISDEPT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ICLAS") != null) {
										incomingEnforcer_tDBOutput_8.put("ICLAS", INVMST.ICLAS);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISCLAS") != null) {
										incomingEnforcer_tDBOutput_8.put("ISCLAS", INVMST.ISCLAS);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("BYRNUM") != null) {
										incomingEnforcer_tDBOutput_8.put("BYRNUM", INVMST.BYRNUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IASPAC") != null) {
										incomingEnforcer_tDBOutput_8.put("IASPAC", INVMST.IASPAC);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IADVYN") != null) {
										incomingEnforcer_tDBOutput_8.put("IADVYN", INVMST.IADVYN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IBUYCD") != null) {
										incomingEnforcer_tDBOutput_8.put("IBUYCD", INVMST.IBUYCD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISET") != null) {
										incomingEnforcer_tDBOutput_8.put("ISET", INVMST.ISET);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IWARNT") != null) {
										incomingEnforcer_tDBOutput_8.put("IWARNT", INVMST.IWARNT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IPRMPT") != null) {
										incomingEnforcer_tDBOutput_8.put("IPRMPT", INVMST.IPRMPT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IPRVNT") != null) {
										incomingEnforcer_tDBOutput_8.put("IPRVNT", INVMST.IPRVNT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ITKTTR") != null) {
										incomingEnforcer_tDBOutput_8.put("ITKTTR", INVMST.ITKTTR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ITKTTA") != null) {
										incomingEnforcer_tDBOutput_8.put("ITKTTA", INVMST.ITKTTA);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ITKTN") != null) {
										incomingEnforcer_tDBOutput_8.put("ITKTN", INVMST.ITKTN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ILBLTR") != null) {
										incomingEnforcer_tDBOutput_8.put("ILBLTR", INVMST.ILBLTR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ILBLTA") != null) {
										incomingEnforcer_tDBOutput_8.put("ILBLTA", INVMST.ILBLTA);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IFINLN") != null) {
										incomingEnforcer_tDBOutput_8.put("IFINLN", INVMST.IFINLN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IPROFL") != null) {
										incomingEnforcer_tDBOutput_8.put("IPROFL", INVMST.IPROFL);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMODUL") != null) {
										incomingEnforcer_tDBOutput_8.put("IMODUL", INVMST.IMODUL);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISTYPE") != null) {
										incomingEnforcer_tDBOutput_8.put("ISTYPE", INVMST.ISTYPE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISCOLR") != null) {
										incomingEnforcer_tDBOutput_8.put("ISCOLR", INVMST.ISCOLR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISSIZE") != null) {
										incomingEnforcer_tDBOutput_8.put("ISSIZE", INVMST.ISSIZE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IHAZCD") != null) {
										incomingEnforcer_tDBOutput_8.put("IHAZCD", INVMST.IHAZCD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("MCHNUM") != null) {
										incomingEnforcer_tDBOutput_8.put("MCHNUM", INVMST.MCHNUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISUBST") != null) {
										incomingEnforcer_tDBOutput_8.put("ISUBST", INVMST.ISUBST);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ICORE") != null) {
										incomingEnforcer_tDBOutput_8.put("ICORE", INVMST.ICORE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IREPL") != null) {
										incomingEnforcer_tDBOutput_8.put("IREPL", INVMST.IREPL);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISLUM") != null) {
										incomingEnforcer_tDBOutput_8.put("ISLUM", INVMST.ISLUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IUMCV2") != null) {
										incomingEnforcer_tDBOutput_8.put("IUMCV2", INVMST.IUMCV2);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IBYUM") != null) {
										incomingEnforcer_tDBOutput_8.put("IBYUM", INVMST.IBYUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMINPK") != null) {
										incomingEnforcer_tDBOutput_8.put("IMINPK", INVMST.IMINPK);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISTDPK") != null) {
										incomingEnforcer_tDBOutput_8.put("ISTDPK", INVMST.ISTDPK);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IHLDOR") != null) {
										incomingEnforcer_tDBOutput_8.put("IHLDOR", INVMST.IHLDOR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMOQTY") != null) {
										incomingEnforcer_tDBOutput_8.put("IMOQTY", INVMST.IMOQTY);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMNSTK") != null) {
										incomingEnforcer_tDBOutput_8.put("IMNSTK", INVMST.IMNSTK);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMXSTK") != null) {
										incomingEnforcer_tDBOutput_8.put("IMXSTK", INVMST.IMXSTK);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMDSTK") != null) {
										incomingEnforcer_tDBOutput_8.put("IMDSTK", INVMST.IMDSTK);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDSPLY") != null) {
										incomingEnforcer_tDBOutput_8.put("IDSPLY", INVMST.IDSPLY);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IOMULT") != null) {
										incomingEnforcer_tDBOutput_8.put("IOMULT", INVMST.IOMULT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IRPLCD") != null) {
										incomingEnforcer_tDBOutput_8.put("IRPLCD", INVMST.IRPLCD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMFPRC") != null) {
										incomingEnforcer_tDBOutput_8.put("IMFPRC", INVMST.IMFPRC);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IWGHT") != null) {
										incomingEnforcer_tDBOutput_8.put("IWGHT", INVMST.IWGHT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ICUBE") != null) {
										incomingEnforcer_tDBOutput_8.put("ICUBE", INVMST.ICUBE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDLGTH") != null) {
										incomingEnforcer_tDBOutput_8.put("IDLGTH", INVMST.IDLGTH);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDWDTH") != null) {
										incomingEnforcer_tDBOutput_8.put("IDWDTH", INVMST.IDWDTH);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDHGHT") != null) {
										incomingEnforcer_tDBOutput_8.put("IDHGHT", INVMST.IDHGHT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMDATE") != null) {
										incomingEnforcer_tDBOutput_8.put("IMDATE", INVMST.IMDATE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IMCENT") != null) {
										incomingEnforcer_tDBOutput_8.put("IMCENT", INVMST.IMCENT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVPLTI") != null) {
										incomingEnforcer_tDBOutput_8.put("IVPLTI", INVMST.IVPLTI);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVPLHI") != null) {
										incomingEnforcer_tDBOutput_8.put("IVPLHI", INVMST.IVPLHI);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("SHPNUM") != null) {
										incomingEnforcer_tDBOutput_8.put("SHPNUM", INVMST.SHPNUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDISTM") != null) {
										incomingEnforcer_tDBOutput_8.put("IDISTM", INVMST.IDISTM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IHLDWO") != null) {
										incomingEnforcer_tDBOutput_8.put("IHLDWO", INVMST.IHLDWO);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IIGNUM") != null) {
										incomingEnforcer_tDBOutput_8.put("IIGNUM", INVMST.IIGNUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISDIM") != null) {
										incomingEnforcer_tDBOutput_8.put("ISDIM", INVMST.ISDIM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVATCD") != null) {
										incomingEnforcer_tDBOutput_8.put("IVATCD", INVMST.IVATCD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IPLAN") != null) {
										incomingEnforcer_tDBOutput_8.put("IPLAN", INVMST.IPLAN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVLRK1") != null) {
										incomingEnforcer_tDBOutput_8.put("IVLRK1", INVMST.IVLRK1);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVLRK2") != null) {
										incomingEnforcer_tDBOutput_8.put("IVLRK2", INVMST.IVLRK2);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVLRK3") != null) {
										incomingEnforcer_tDBOutput_8.put("IVLRK3", INVMST.IVLRK3);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IVLRK4") != null) {
										incomingEnforcer_tDBOutput_8.put("IVLRK4", INVMST.IVLRK4);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IRPLCN") != null) {
										incomingEnforcer_tDBOutput_8.put("IRPLCN", INVMST.IRPLCN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IRPLDT") != null) {
										incomingEnforcer_tDBOutput_8.put("IRPLDT", INVMST.IRPLDT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ISEASN") != null) {
										incomingEnforcer_tDBOutput_8.put("ISEASN", INVMST.ISEASN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDEADC") != null) {
										incomingEnforcer_tDBOutput_8.put("IDEADC", INVMST.IDEADC);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IDEADD") != null) {
										incomingEnforcer_tDBOutput_8.put("IDEADD", INVMST.IDEADD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("INLRTL") != null) {
										incomingEnforcer_tDBOutput_8.put("INLRTL", INVMST.INLRTL);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IHANDL") != null) {
										incomingEnforcer_tDBOutput_8.put("IHANDL", INVMST.IHANDL);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IATRB1") != null) {
										incomingEnforcer_tDBOutput_8.put("IATRB1", INVMST.IATRB1);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IATRB2") != null) {
										incomingEnforcer_tDBOutput_8.put("IATRB2", INVMST.IATRB2);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IATRB3") != null) {
										incomingEnforcer_tDBOutput_8.put("IATRB3", INVMST.IATRB3);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IATRB4") != null) {
										incomingEnforcer_tDBOutput_8.put("IATRB4", INVMST.IATRB4);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IATRB5") != null) {
										incomingEnforcer_tDBOutput_8.put("IATRB5", INVMST.IATRB5);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IPRCCH") != null) {
										incomingEnforcer_tDBOutput_8.put("IPRCCH", INVMST.IPRCCH);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IPRCZN") != null) {
										incomingEnforcer_tDBOutput_8.put("IPRCZN", INVMST.IPRCZN);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IPRCST") != null) {
										incomingEnforcer_tDBOutput_8.put("IPRCST", INVMST.IPRCST);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IASNUM") != null) {
										incomingEnforcer_tDBOutput_8.put("IASNUM", INVMST.IASNUM);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ICORGP") != null) {
										incomingEnforcer_tDBOutput_8.put("ICORGP", INVMST.ICORGP);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("ILEAD") != null) {
										incomingEnforcer_tDBOutput_8.put("ILEAD", INVMST.ILEAD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IHZCOD") != null) {
										incomingEnforcer_tDBOutput_8.put("IHZCOD", INVMST.IHZCOD);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("IFRACT") != null) {
										incomingEnforcer_tDBOutput_8.put("IFRACT", INVMST.IFRACT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_8 != null && incomingEnforcer_tDBOutput_8
											.getRuntimeSchema().getField("LOAD_DATE") != null) {
										incomingEnforcer_tDBOutput_8.put("LOAD_DATE", INVMST.LOAD_DATE);
									}

									org.apache.avro.generic.IndexedRecord data_tDBOutput_8 = null;
									if (incomingEnforcer_tDBOutput_8 != null) {
										data_tDBOutput_8 = incomingEnforcer_tDBOutput_8.getCurrentRecord();
									}

									if (writer_tDBOutput_8 != null && data_tDBOutput_8 != null) {
										writer_tDBOutput_8.write(data_tDBOutput_8);
									}

									nb_line_tDBOutput_8++;

									tos_count_tDBOutput_8++;

									/**
									 * [tDBOutput_8 main ] stop
									 */

									/**
									 * [tDBOutput_8 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_8";

									/**
									 * [tDBOutput_8 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_8 process_data_end ] start
									 */

									currentComponent = "tDBOutput_8";

									/**
									 * [tDBOutput_8 process_data_end ] stop
									 */

								} // End of branch "INVMST"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFileInputDelimited_3 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_3";

							/**
							 * [tFileInputDelimited_3 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_3 end ] start
							 */

							currentComponent = "tFileInputDelimited_3";

						}
						nb_line_tFileInputDelimited_3 += fid_tFileInputDelimited_3.getRowNumber();
					}
				} finally {
					if (!((Object) ("/data/talend/data_repository/INVMST.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

					log.info("tFileInputDelimited_3- Retrieved records count: " + nb_line_tFileInputDelimited_3 + ".");

				}

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_3 - " + ("Done."));

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'INVMST': " + count_INVMST_tMap_2 + ".");

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "row2", 2, 0,
						"tFileInputDelimited_3", "tFileInputDelimited_3", "tFileInputDelimited", "tMap_2", "tMap_2",
						"tMap", "output")) {
					talendJobLogProcess(globalMap);
				}

				if (log.isDebugEnabled())
					log.debug("tMap_2 - " + ("Done."));

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

// end of generic

				resourceMap.put("finish_tDBOutput_8", Boolean.TRUE);

				java.util.Map<String, Object> resultMap_tDBOutput_8 = null;
				if (writer_tDBOutput_8 != null) {
					org.talend.components.api.component.runtime.Result resultObject_tDBOutput_8 = (org.talend.components.api.component.runtime.Result) writer_tDBOutput_8
							.close();
					resultMap_tDBOutput_8 = writer_tDBOutput_8.getWriteOperation()
							.finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(
									resultObject_tDBOutput_8), container_tDBOutput_8);
				}
				if (resultMap_tDBOutput_8 != null) {
					for (java.util.Map.Entry<String, Object> entry_tDBOutput_8 : resultMap_tDBOutput_8.entrySet()) {
						switch (entry_tDBOutput_8.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tDBOutput_8.setComponentData("tDBOutput_8", "ERROR_MESSAGE",
									entry_tDBOutput_8.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tDBOutput_8.setComponentData("tDBOutput_8", "NB_LINE",
									entry_tDBOutput_8.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tDBOutput_8.setComponentData("tDBOutput_8", "NB_SUCCESS",
									entry_tDBOutput_8.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tDBOutput_8.setComponentData("tDBOutput_8", "NB_REJECT",
									entry_tDBOutput_8.getValue());
							break;
						default:
							StringBuilder studio_key_tDBOutput_8 = new StringBuilder();
							for (int i_tDBOutput_8 = 0; i_tDBOutput_8 < entry_tDBOutput_8.getKey()
									.length(); i_tDBOutput_8++) {
								char ch_tDBOutput_8 = entry_tDBOutput_8.getKey().charAt(i_tDBOutput_8);
								if (Character.isUpperCase(ch_tDBOutput_8) && i_tDBOutput_8 > 0) {
									studio_key_tDBOutput_8.append('_');
								}
								studio_key_tDBOutput_8.append(ch_tDBOutput_8);
							}
							container_tDBOutput_8.setComponentData("tDBOutput_8",
									studio_key_tDBOutput_8.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tDBOutput_8.getValue());
							break;
						}
					}
				}

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "INVMST", 2, 0, "tMap_2",
						"tMap_2", "tMap", "tDBOutput_8", "tDBOutput_8", "tSnowflakeOutput", "output")) {
					talendJobLogProcess(globalMap);
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tFileDelete_1Process(globalMap);

				/**
				 * [tDBOutput_8 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk35", 0, "ok");
			}

			tDBRow_17Process(globalMap);

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

// finally of generic

				if (resourceMap.get("finish_tDBOutput_8") == null) {
					if (resourceMap.get("writer_tDBOutput_8") != null) {
						try {
							((org.talend.components.api.component.runtime.Writer) resourceMap.get("writer_tDBOutput_8"))
									.close();
						} catch (java.io.IOException e_tDBOutput_8) {
							String errorMessage_tDBOutput_8 = "failed to release the resource in tDBOutput_8 :"
									+ e_tDBOutput_8.getMessage();
							System.err.println(errorMessage_tDBOutput_8);
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileDelete_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileDelete_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileDelete_1 = new StringBuilder();
							log4jParamters_tFileDelete_1.append("Parameters:");
							log4jParamters_tFileDelete_1
									.append("PATH" + " = " + "\"/data/talend/data_repository/INVMST.zip\"");
							log4jParamters_tFileDelete_1.append(" | ");
							log4jParamters_tFileDelete_1.append("FAILON" + " = " + "true");
							log4jParamters_tFileDelete_1.append(" | ");
							log4jParamters_tFileDelete_1.append("FOLDER_FILE" + " = " + "true");
							log4jParamters_tFileDelete_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileDelete_1 - " + (log4jParamters_tFileDelete_1));
						}
					}
					new BytesLimit65535_tFileDelete_1().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileDelete_1", "tFileDelete_1", "tFileDelete");
					talendJobLogProcess(globalMap);
				}

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				final StringBuffer log4jSb_tFileDelete_1 = new StringBuffer();

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File path_tFileDelete_1 = new java.io.File("/data/talend/data_repository/INVMST.zip");
				if (path_tFileDelete_1.exists()) {
					if (path_tFileDelete_1.isFile()) {
						if (path_tFileDelete_1.delete()) {
							globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
							log.info("tFileDelete_1 - File : " + path_tFileDelete_1.getAbsolutePath() + " is deleted.");
						} else {
							globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
							throw new RuntimeException(
									"The file " + path_tFileDelete_1.getAbsolutePath() + " can't be deleted.");
						}
					} else if (path_tFileDelete_1.isDirectory()) {
						DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
						if (dftFileDelete_1.delete(path_tFileDelete_1)) {
							globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path deleted.");
							log.info("tFileDelete_1 - Directory : " + path_tFileDelete_1.getAbsolutePath()
									+ " is deleted.");
						} else {
							globalMap.put("tFileDelete_1_CURRENT_STATUS", "No path deleted.");
							throw new RuntimeException(
									"The directory " + path_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
						}
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS", "File or path does not exist or is invalid.");
					throw new RuntimeException("File or path does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", "/data/talend/data_repository/INVMST.zip");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				if (log.isDebugEnabled())
					log.debug("tFileDelete_1 - " + ("Done."));

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_17");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_17 begin ] start
				 */

				ok_Hash.put("tDBRow_17", false);
				start_Hash.put("tDBRow_17", System.currentTimeMillis());

				currentComponent = "tDBRow_17";

				int tos_count_tDBRow_17 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_17", "tDBRow_17", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_17 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_17 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_17 = (String) (restRequest_tDBRow_17 != null
						? restRequest_tDBRow_17.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_17 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_17 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_17 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_17 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_17
						.createRuntimeProperties();
				props_tDBRow_17.setValue("query",
						"\ninsert into INVENTORY_MASTER_INVMST\nselect \nINUMBR\n,ICHECK\n,IDESCR\n,IDSCCD\n,ISORT\n,ISTYLN\n,ASNUM\n,IVNDPN\n,I"
								+ "MFGR\n,IMFGNO\n,IDEPT\n,ISDEPT\n,ICLAS\n,ISCLAS\n,BYRNUM\n,IASPAC\n,IADVYN\n,IBUYCD\n,ISET\n,IWARNT\n,IPRMPT\n,IPRVNT\n,"
								+ "ITKTTR\n,ITKTTA\n,ITKTN\n,ILBLTR\n,ILBLTA\n,IFINLN\n,IPROFL\n,IMODUL\n,ISTYPE\n,ISCOLR\n,ISSIZE\n,IHAZCD\n,MCHNUM\n,ISUB"
								+ "ST\n,ICORE\n,IREPL\n,ISLUM\n,IUMCV2\n,IBYUM\n,IMINPK\n,ISTDPK\n,IHLDOR\n,IMOQTY\n,IMNSTK\n,IMXSTK\n,IMDSTK\n,IDSPLY\n,IO"
								+ "MULT\n,IRPLCD\n,IMFPRC\n,IWGHT\n,ICUBE\n,IDLGTH\n,IDWDTH\n,IDHGHT\n ,   case\n        when LENGTH(IMDATE)= 1 then NULL\n"
								+ "        \n        else TO_DATE(to_varchar(IMDATE), 'yymmdd')\n    end as IMDATE\n\n,IVPLTI\n,IVPLHI\n,SHPNUM\n,IDISTM\n,"
								+ "IHLDWO\n,IIGNUM\n,ISDIM\n,IVATCD\n,IPLAN\n,IVLRK1\n,IVLRK2\n,IVLRK3\n,IVLRK4\n\n,    case\n        when LENGTH(IRPLDT) i"
								+ "n (0,1) then NULL\n        \n        else TO_DATE(to_varchar(IRPLDT), 'yymmdd')\n    end as IRPLDT\n\n,ISEASN\n\n,    ca"
								+ "se\n        when LENGTH(IDEADD ) in (0,1) then NULL\n        \n        else TO_DATE(to_varchar(IDEADD ), 'yymmdd')\n    "
								+ "end as IDEADD \n\n,INLRTL\n,IHANDL\n,IATRB1\n,IATRB2\n,IATRB3\n,IATRB4\n,IATRB5\n,IPRCCH\n,IPRCZN\n,IPRCST\n,IASNUM\n,IC"
								+ "ORGP\n,ILEAD\n,IHZCOD\n,IFRACT\n,LOAD_DATE\nfrom \nINVMST\n\n");

				props_tDBRow_17.setValue("dieOnError", true);

				props_tDBRow_17.setValue("usePreparedStatement", false);

				props_tDBRow_17.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_17_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_17_1_fisrt sst_tDBRow_17_1_fisrt = new SchemaSettingTool_tDBRow_17_1_fisrt();

				props_tDBRow_17.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_17_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_17_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_17_2_fisrt sst_tDBRow_17_2_fisrt = new SchemaSettingTool_tDBRow_17_2_fisrt();

				props_tDBRow_17.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_17_2_fisrt.getSchemaValue()));

				props_tDBRow_17.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_17.connection.setValue("useCustomRegion", false);

				props_tDBRow_17.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_17.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_17.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_17.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_17.table.setValue("tableName", "");

				props_tDBRow_17.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_17.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_17.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_17.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_17.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_17.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_17_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_17_3_fisrt sst_tDBRow_17_3_fisrt = new SchemaSettingTool_tDBRow_17_3_fisrt();

				props_tDBRow_17.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_17_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_17.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_17 = props_tDBRow_17.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_17 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_17 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_17 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_17.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_17);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_17.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_17 = props_tDBRow_17.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_17 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_17 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_17 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_17.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_17);
					}
				}
				globalMap.put("tDBRow_17_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_17);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_17 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_17_MAPPINGS_URL", mappings_url_tDBRow_17);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_17 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_17";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_17 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_17 = null;
				topology_tDBRow_17 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_17 = def_tDBRow_17.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_17,
						topology_tDBRow_17);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_17 = def_tDBRow_17
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_17 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_17.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_17 = componentRuntime_tDBRow_17
						.initialize(container_tDBRow_17, props_tDBRow_17);

				if (initVr_tDBRow_17.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_17.getMessage());
				}

				if (componentRuntime_tDBRow_17 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_17 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_17;
					compDriverInitialization_tDBRow_17.runAtDriver(container_tDBRow_17);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_17 = null;
				if (componentRuntime_tDBRow_17 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_17 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_17;
					if (doesNodeBelongToRequest_tDBRow_17) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_17 = sourceOrSink_tDBRow_17
								.validate(container_tDBRow_17);
						if (vr_tDBRow_17.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_17.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_17 begin ] stop
				 */

				/**
				 * [tDBRow_17 main ] start
				 */

				currentComponent = "tDBRow_17";

				tos_count_tDBRow_17++;

				/**
				 * [tDBRow_17 main ] stop
				 */

				/**
				 * [tDBRow_17 process_data_begin ] start
				 */

				currentComponent = "tDBRow_17";

				/**
				 * [tDBRow_17 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_17 process_data_end ] start
				 */

				currentComponent = "tDBRow_17";

				/**
				 * [tDBRow_17 process_data_end ] stop
				 */

				/**
				 * [tDBRow_17 end ] start
				 */

				currentComponent = "tDBRow_17";

// end of generic

				resourceMap.put("finish_tDBRow_17", Boolean.TRUE);

				ok_Hash.put("tDBRow_17", true);
				end_Hash.put("tDBRow_17", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBRow_19Process(globalMap);

				/**
				 * [tDBRow_17 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_17 finally ] start
				 */

				currentComponent = "tDBRow_17";

// finally of generic

				if (resourceMap.get("finish_tDBRow_17") == null) {
				}

				/**
				 * [tDBRow_17 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_17_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_19");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_19 begin ] start
				 */

				ok_Hash.put("tDBRow_19", false);
				start_Hash.put("tDBRow_19", System.currentTimeMillis());

				currentComponent = "tDBRow_19";

				int tos_count_tDBRow_19 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_19", "tDBRow_19", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_19 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_19 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_19 = (String) (restRequest_tDBRow_19 != null
						? restRequest_tDBRow_19.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_19 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_19 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_19 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_19 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_19
						.createRuntimeProperties();
				props_tDBRow_19.setValue("query", "\nDrop table INVMST\n\n");

				props_tDBRow_19.setValue("dieOnError", true);

				props_tDBRow_19.setValue("usePreparedStatement", false);

				props_tDBRow_19.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_19_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_19_1_fisrt sst_tDBRow_19_1_fisrt = new SchemaSettingTool_tDBRow_19_1_fisrt();

				props_tDBRow_19.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_19_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_19_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_19_2_fisrt sst_tDBRow_19_2_fisrt = new SchemaSettingTool_tDBRow_19_2_fisrt();

				props_tDBRow_19.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_19_2_fisrt.getSchemaValue()));

				props_tDBRow_19.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_19.connection.setValue("useCustomRegion", false);

				props_tDBRow_19.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_19.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_19.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_19.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_19.table.setValue("tableName", "");

				props_tDBRow_19.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_19.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_19.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_19.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_19.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_19.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_19_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_19_3_fisrt sst_tDBRow_19_3_fisrt = new SchemaSettingTool_tDBRow_19_3_fisrt();

				props_tDBRow_19.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_19_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_19.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_19 = props_tDBRow_19.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_19 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_19 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_19 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_19.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_19);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_19.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_19 = props_tDBRow_19.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_19 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_19 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_19 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_19.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_19);
					}
				}
				globalMap.put("tDBRow_19_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_19);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_19 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_19_MAPPINGS_URL", mappings_url_tDBRow_19);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_19 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_19";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_19 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_19 = null;
				topology_tDBRow_19 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_19 = def_tDBRow_19.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_19,
						topology_tDBRow_19);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_19 = def_tDBRow_19
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_19 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_19.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_19 = componentRuntime_tDBRow_19
						.initialize(container_tDBRow_19, props_tDBRow_19);

				if (initVr_tDBRow_19.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_19.getMessage());
				}

				if (componentRuntime_tDBRow_19 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_19 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_19;
					compDriverInitialization_tDBRow_19.runAtDriver(container_tDBRow_19);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_19 = null;
				if (componentRuntime_tDBRow_19 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_19 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_19;
					if (doesNodeBelongToRequest_tDBRow_19) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_19 = sourceOrSink_tDBRow_19
								.validate(container_tDBRow_19);
						if (vr_tDBRow_19.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_19.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_19 begin ] stop
				 */

				/**
				 * [tDBRow_19 main ] start
				 */

				currentComponent = "tDBRow_19";

				tos_count_tDBRow_19++;

				/**
				 * [tDBRow_19 main ] stop
				 */

				/**
				 * [tDBRow_19 process_data_begin ] start
				 */

				currentComponent = "tDBRow_19";

				/**
				 * [tDBRow_19 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_19 process_data_end ] start
				 */

				currentComponent = "tDBRow_19";

				/**
				 * [tDBRow_19 process_data_end ] stop
				 */

				/**
				 * [tDBRow_19 end ] start
				 */

				currentComponent = "tDBRow_19";

// end of generic

				resourceMap.put("finish_tDBRow_19", Boolean.TRUE);

				ok_Hash.put("tDBRow_19", true);
				end_Hash.put("tDBRow_19", System.currentTimeMillis());

				/**
				 * [tDBRow_19 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_19 finally ] start
				 */

				currentComponent = "tDBRow_19";

// finally of generic

				if (resourceMap.get("finish_tDBRow_19") == null) {
				}

				/**
				 * [tDBRow_19 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_19_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_2 begin ] start
				 */

				ok_Hash.put("tDBRow_2", false);
				start_Hash.put("tDBRow_2", System.currentTimeMillis());

				currentComponent = "tDBRow_2";

				int tos_count_tDBRow_2 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_2", "tDBRow_2", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_2 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_2 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_2 = (String) (restRequest_tDBRow_2 != null
						? restRequest_tDBRow_2.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_2 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_2 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_2 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_2 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_2
						.createRuntimeProperties();
				props_tDBRow_2.setValue("query",
						"DELETE from SKUS_STATED_EXCLUDED_INVSKUX\nWHERE DATELOADED = CURRENT_DATE()");

				props_tDBRow_2.setValue("dieOnError", true);

				props_tDBRow_2.setValue("usePreparedStatement", false);

				props_tDBRow_2.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_2_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_2_1_fisrt sst_tDBRow_2_1_fisrt = new SchemaSettingTool_tDBRow_2_1_fisrt();

				props_tDBRow_2.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_2_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_2_2_fisrt sst_tDBRow_2_2_fisrt = new SchemaSettingTool_tDBRow_2_2_fisrt();

				props_tDBRow_2.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_2_fisrt.getSchemaValue()));

				props_tDBRow_2.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_2.connection.setValue("useCustomRegion", false);

				props_tDBRow_2.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_2.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_2.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_2.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_2.table.setValue("tableName", "");

				props_tDBRow_2.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_2.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_2.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_2.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_2.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_2.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_2_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_2_3_fisrt sst_tDBRow_2_3_fisrt = new SchemaSettingTool_tDBRow_2_3_fisrt();

				props_tDBRow_2.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_2 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_2.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_2);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_2 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_2.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_2);
					}
				}
				globalMap.put("tDBRow_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_2);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_2 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_2_MAPPINGS_URL", mappings_url_tDBRow_2);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_2 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_2";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_2 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_2 = null;
				topology_tDBRow_2 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_2 = def_tDBRow_2.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_2,
						topology_tDBRow_2);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_2 = def_tDBRow_2
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_2 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_2.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_2 = componentRuntime_tDBRow_2
						.initialize(container_tDBRow_2, props_tDBRow_2);

				if (initVr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_2.getMessage());
				}

				if (componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_2;
					compDriverInitialization_tDBRow_2.runAtDriver(container_tDBRow_2);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_2 = null;
				if (componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_2 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_2;
					if (doesNodeBelongToRequest_tDBRow_2) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_2 = sourceOrSink_tDBRow_2
								.validate(container_tDBRow_2);
						if (vr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_2.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_2 begin ] stop
				 */

				/**
				 * [tDBRow_2 main ] start
				 */

				currentComponent = "tDBRow_2";

				tos_count_tDBRow_2++;

				/**
				 * [tDBRow_2 main ] stop
				 */

				/**
				 * [tDBRow_2 process_data_begin ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_2 process_data_end ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_end ] stop
				 */

				/**
				 * [tDBRow_2 end ] start
				 */

				currentComponent = "tDBRow_2";

// end of generic

				resourceMap.put("finish_tDBRow_2", Boolean.TRUE);

				ok_Hash.put("tDBRow_2", true);
				end_Hash.put("tDBRow_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBRow_3Process(globalMap);

				/**
				 * [tDBRow_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_2 finally ] start
				 */

				currentComponent = "tDBRow_2";

// finally of generic

				if (resourceMap.get("finish_tDBRow_2") == null) {
				}

				/**
				 * [tDBRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_3 begin ] start
				 */

				ok_Hash.put("tDBRow_3", false);
				start_Hash.put("tDBRow_3", System.currentTimeMillis());

				currentComponent = "tDBRow_3";

				int tos_count_tDBRow_3 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_3", "tDBRow_3", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_3 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_3 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_3 = (String) (restRequest_tDBRow_3 != null
						? restRequest_tDBRow_3.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_3 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_3 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_3 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_3 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_3
						.createRuntimeProperties();
				props_tDBRow_3.setValue("query",
						"create or replace TABLE INVSKUX (\n	XNUMBR NUMBER(9,0),\n	XSTATE VARCHAR(4),\n	XEDATE NUMBER(6,0),\n	XECENT NUMBER(1,0)"
								+ ",\n	XRFLAG VARCHAR(1),\n	LOAD_DATE DATE\n);");

				props_tDBRow_3.setValue("dieOnError", false);

				props_tDBRow_3.setValue("usePreparedStatement", false);

				props_tDBRow_3.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_3_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_3_1_fisrt sst_tDBRow_3_1_fisrt = new SchemaSettingTool_tDBRow_3_1_fisrt();

				props_tDBRow_3.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_3_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_3_2_fisrt sst_tDBRow_3_2_fisrt = new SchemaSettingTool_tDBRow_3_2_fisrt();

				props_tDBRow_3.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_2_fisrt.getSchemaValue()));

				props_tDBRow_3.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_3.connection.setValue("useCustomRegion", false);

				props_tDBRow_3.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_3.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_3.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_3.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_3.table.setValue("tableName", "");

				props_tDBRow_3.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_3.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_3.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_3.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_3.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_3.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_3_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_3_3_fisrt sst_tDBRow_3_3_fisrt = new SchemaSettingTool_tDBRow_3_3_fisrt();

				props_tDBRow_3.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_3 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_3.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_3);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_3 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_3.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_3);
					}
				}
				globalMap.put("tDBRow_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_3);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_3 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_3_MAPPINGS_URL", mappings_url_tDBRow_3);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_3 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_3";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_3 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_3 = null;
				topology_tDBRow_3 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_3 = def_tDBRow_3.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_3,
						topology_tDBRow_3);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_3 = def_tDBRow_3
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_3 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_3.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_3 = componentRuntime_tDBRow_3
						.initialize(container_tDBRow_3, props_tDBRow_3);

				if (initVr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_3.getMessage());
				}

				if (componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_3;
					compDriverInitialization_tDBRow_3.runAtDriver(container_tDBRow_3);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_3 = null;
				if (componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_3 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_3;
					if (doesNodeBelongToRequest_tDBRow_3) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_3 = sourceOrSink_tDBRow_3
								.validate(container_tDBRow_3);
						if (vr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_3.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_3 begin ] stop
				 */

				/**
				 * [tDBRow_3 main ] start
				 */

				currentComponent = "tDBRow_3";

				tos_count_tDBRow_3++;

				/**
				 * [tDBRow_3 main ] stop
				 */

				/**
				 * [tDBRow_3 process_data_begin ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_3 process_data_end ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_end ] stop
				 */

				/**
				 * [tDBRow_3 end ] start
				 */

				currentComponent = "tDBRow_3";

// end of generic

				resourceMap.put("finish_tDBRow_3", Boolean.TRUE);

				ok_Hash.put("tDBRow_3", true);
				end_Hash.put("tDBRow_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tDBInput_1Process(globalMap);

				/**
				 * [tDBRow_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_3 finally ] start
				 */

				currentComponent = "tDBRow_3";

// finally of generic

				if (resourceMap.get("finish_tDBRow_3") == null) {
				}

				/**
				 * [tDBRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal XNUMBR;

		public BigDecimal getXNUMBR() {
			return this.XNUMBR;
		}

		public Boolean XNUMBRIsNullable() {
			return false;
		}

		public Boolean XNUMBRIsKey() {
			return false;
		}

		public Integer XNUMBRLength() {
			return 9;
		}

		public Integer XNUMBRPrecision() {
			return 0;
		}

		public String XNUMBRDefault() {

			return "";

		}

		public String XNUMBRComment() {

			return "";

		}

		public String XNUMBRPattern() {

			return "";

		}

		public String XNUMBROriginalDbColumnName() {

			return "XNUMBR";

		}

		public String XSTATE;

		public String getXSTATE() {
			return this.XSTATE;
		}

		public Boolean XSTATEIsNullable() {
			return false;
		}

		public Boolean XSTATEIsKey() {
			return false;
		}

		public Integer XSTATELength() {
			return 4;
		}

		public Integer XSTATEPrecision() {
			return 0;
		}

		public String XSTATEDefault() {

			return null;

		}

		public String XSTATEComment() {

			return "";

		}

		public String XSTATEPattern() {

			return "";

		}

		public String XSTATEOriginalDbColumnName() {

			return "XSTATE";

		}

		public BigDecimal XEDATE;

		public BigDecimal getXEDATE() {
			return this.XEDATE;
		}

		public Boolean XEDATEIsNullable() {
			return false;
		}

		public Boolean XEDATEIsKey() {
			return false;
		}

		public Integer XEDATELength() {
			return 6;
		}

		public Integer XEDATEPrecision() {
			return 0;
		}

		public String XEDATEDefault() {

			return "";

		}

		public String XEDATEComment() {

			return "";

		}

		public String XEDATEPattern() {

			return "";

		}

		public String XEDATEOriginalDbColumnName() {

			return "XEDATE";

		}

		public BigDecimal XECENT;

		public BigDecimal getXECENT() {
			return this.XECENT;
		}

		public Boolean XECENTIsNullable() {
			return false;
		}

		public Boolean XECENTIsKey() {
			return false;
		}

		public Integer XECENTLength() {
			return 1;
		}

		public Integer XECENTPrecision() {
			return 0;
		}

		public String XECENTDefault() {

			return "";

		}

		public String XECENTComment() {

			return "";

		}

		public String XECENTPattern() {

			return "";

		}

		public String XECENTOriginalDbColumnName() {

			return "XECENT";

		}

		public String XRFLAG;

		public String getXRFLAG() {
			return this.XRFLAG;
		}

		public Boolean XRFLAGIsNullable() {
			return false;
		}

		public Boolean XRFLAGIsKey() {
			return false;
		}

		public Integer XRFLAGLength() {
			return 1;
		}

		public Integer XRFLAGPrecision() {
			return 0;
		}

		public String XRFLAGDefault() {

			return null;

		}

		public String XRFLAGComment() {

			return "";

		}

		public String XRFLAGPattern() {

			return "";

		}

		public String XRFLAGOriginalDbColumnName() {

			return "XRFLAG";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.XNUMBR = (BigDecimal) dis.readObject();

					this.XSTATE = readString(dis);

					this.XEDATE = (BigDecimal) dis.readObject();

					this.XECENT = (BigDecimal) dis.readObject();

					this.XRFLAG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.XNUMBR = (BigDecimal) dis.readObject();

					this.XSTATE = readString(dis);

					this.XEDATE = (BigDecimal) dis.readObject();

					this.XECENT = (BigDecimal) dis.readObject();

					this.XRFLAG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.XNUMBR);

				// String

				writeString(this.XSTATE, dos);

				// BigDecimal

				dos.writeObject(this.XEDATE);

				// BigDecimal

				dos.writeObject(this.XECENT);

				// String

				writeString(this.XRFLAG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.XNUMBR);

				// String

				writeString(this.XSTATE, dos);

				// BigDecimal

				dos.writeObject(this.XEDATE);

				// BigDecimal

				dos.writeObject(this.XECENT);

				// String

				writeString(this.XRFLAG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XNUMBR=" + String.valueOf(XNUMBR));
			sb.append(",XSTATE=" + XSTATE);
			sb.append(",XEDATE=" + String.valueOf(XEDATE));
			sb.append(",XECENT=" + String.valueOf(XECENT));
			sb.append(",XRFLAG=" + XRFLAG);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (XNUMBR == null) {
				sb.append("<null>");
			} else {
				sb.append(XNUMBR);
			}

			sb.append("|");

			if (XSTATE == null) {
				sb.append("<null>");
			} else {
				sb.append(XSTATE);
			}

			sb.append("|");

			if (XEDATE == null) {
				sb.append("<null>");
			} else {
				sb.append(XEDATE);
			}

			sb.append("|");

			if (XECENT == null) {
				sb.append("<null>");
			} else {
				sb.append(XECENT);
			}

			sb.append("|");

			if (XRFLAG == null) {
				sb.append("<null>");
			} else {
				sb.append(XRFLAG);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "row20");

				int tos_count_tFileOutputDelimited_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileOutputDelimited_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileOutputDelimited_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileOutputDelimited_1 = new StringBuilder();
							log4jParamters_tFileOutputDelimited_1.append("Parameters:");
							log4jParamters_tFileOutputDelimited_1.append("USESTREAM" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1
									.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVSKUX.csv\"");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("ROWSEPARATOR" + " = " + "\"\\n\"");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("FIELDSEPARATOR" + " = " + "\",\"");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("APPEND" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("INCLUDEHEADER" + " = " + "true");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("COMPRESS" + " = " + "true");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("ADVANCED_SEPARATOR" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("CSV_OPTION" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("CREATE" + " = " + "true");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("SPLIT" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("FLUSHONROW" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("ROW_MODE" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("ENCODING" + " = " + "\"ISO-8859-15\"");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("DELETE_EMPTYFILE" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							log4jParamters_tFileOutputDelimited_1.append("FILE_EXIST_EXCEPTION" + " = " + "false");
							log4jParamters_tFileOutputDelimited_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileOutputDelimited_1 - " + (log4jParamters_tFileOutputDelimited_1));
						}
					}
					new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileOutputDelimited_1", "tFileOutputDelimited_1", "tFileOutputDelimited");
					talendJobLogProcess(globalMap);
				}

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File("/data/talend/data_repository/INVSKUX.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						log.info("tFileOutputDelimited_1 - Creating directory '"
								+ dir_tFileOutputDelimited_1.getCanonicalPath() + "'.");
						dir_tFileOutputDelimited_1.mkdirs();
						log.info("tFileOutputDelimited_1 - The directory '"
								+ dir_tFileOutputDelimited_1.getCanonicalPath() + "' has been created successfully.");
					}
				}

				filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				String zipName_tFileOutputDelimited_1 = fullName_tFileOutputDelimited_1 + ".zip";
				java.io.File file_tFileOutputDelimited_1 = new java.io.File(zipName_tFileOutputDelimited_1);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_1 = null;
				java.io.Writer outtFileOutputDelimited_1 = null;

				if (file_tFileOutputDelimited_1.exists()) {
					file_tFileOutputDelimited_1.delete();
				}
				zipOut_tFileOutputDelimited_1 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_1)));
				zipOut_tFileOutputDelimited_1
						.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_1.getName()));
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_1, "ISO-8859-15"));
				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_1.length() == 0) {
						outtFileOutputDelimited_1.write("XNUMBR");
						outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("XSTATE");
						outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("XEDATE");
						outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("XECENT");
						outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("XRFLAG");
						outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.flush();
					}
				}

				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBInput_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBInput_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
							log4jParamters_tDBInput_1.append("Parameters:");
							log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("HOST" + " = " + "context.jda_host_name");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.jda_mm_lib");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("USER" + " = " + "context.jda_user_name");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("PASS" + " = "
									+ String.valueOf(
											routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password))
											.substring(0, 4)
									+ "...");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"\"");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"select * from MM4R5LIB.INVSKUX\"");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "\"prompt=false\"");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("XNUMBR") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("XSTATE") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("XEDATE")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("XECENT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("XRFLAG") + "}]");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("SET_QUERY_TIMEOUT" + " = " + "false");
							log4jParamters_tDBInput_1.append(" | ");
							log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
							log4jParamters_tDBInput_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBInput_1 - " + (log4jParamters_tDBInput_1));
						}
					}
					new BytesLimit65535_tDBInput_1().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tDBInput_1", "tDBInput_1", "tAS400Input");
					talendJobLogProcess(globalMap);
				}

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.jda_user_name;

				final String decryptedPassword_tDBInput_1 = context.jda_password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";"
						+ "prompt=false";

				log.debug("tDBInput_1 - Driver ClassName: " + driverClass_tDBInput_1 + ".");

				log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '"
						+ dbUser_tDBInput_1 + "'.");

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);
				log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select * from MM4R5LIB.INVSKUX";

				log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					log.debug("tDBInput_1 - Retrieving records from the database.");

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row20.XNUMBR = null;
						} else {

							row20.XNUMBR = rs_tDBInput_1.getBigDecimal(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row20.XSTATE = null;
						} else {

							row20.XSTATE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row20.XEDATE = null;
						} else {

							row20.XEDATE = rs_tDBInput_1.getBigDecimal(3);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row20.XECENT = null;
						} else {

							row20.XECENT = rs_tDBInput_1.getBigDecimal(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row20.XRFLAG = null;
						} else {

							row20.XRFLAG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}

						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

								, "row20", "tDBInput_1", "tDBInput_1", "tAS400Input", "tFileOutputDelimited_1",
								"tFileOutputDelimited_1", "tFileOutputDelimited"

						)) {
							talendJobLogProcess(globalMap);
						}

						if (log.isTraceEnabled()) {
							log.trace("row20 - " + (row20 == null ? "" : row20.toLogString()));
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row20.XNUMBR != null) {
							sb_tFileOutputDelimited_1
									.append(row20.XNUMBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row20.XSTATE != null) {
							sb_tFileOutputDelimited_1.append(row20.XSTATE);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row20.XEDATE != null) {
							sb_tFileOutputDelimited_1.append(row20.XEDATE);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row20.XECENT != null) {
							sb_tFileOutputDelimited_1
									.append(row20.XECENT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row20.XRFLAG != null) {
							sb_tFileOutputDelimited_1.append(row20.XRFLAG);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());
							log.debug("tFileOutputDelimited_1 - Writing the record " + nb_line_tFileOutputDelimited_1
									+ ".");

						}

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						log.debug("tDBInput_1 - Closing the connection to the database.");

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

						log.debug("tDBInput_1 - Connection to the database closed.");

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);
				log.debug("tDBInput_1 - Retrieved records count: " + nb_line_tDBInput_1 + " .");

				if (log.isDebugEnabled())
					log.debug("tDBInput_1 - " + ("Done."));

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				log.debug("tFileOutputDelimited_1 - Written records count: " + nb_line_tFileOutputDelimited_1 + " .");

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "row20", 2, 0,
						"tDBInput_1", "tDBInput_1", "tAS400Input", "tFileOutputDelimited_1", "tFileOutputDelimited_1",
						"tFileOutputDelimited", "output")) {
					talendJobLogProcess(globalMap);
				}

				if (log.isDebugEnabled())
					log.debug("tFileOutputDelimited_1 - " + ("Done."));

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_1");
						if (outtFileOutputDelimited_1 != null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class INVSKUXStruct implements routines.system.IPersistableRow<INVSKUXStruct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal XNUMBR;

		public BigDecimal getXNUMBR() {
			return this.XNUMBR;
		}

		public Boolean XNUMBRIsNullable() {
			return true;
		}

		public Boolean XNUMBRIsKey() {
			return false;
		}

		public Integer XNUMBRLength() {
			return null;
		}

		public Integer XNUMBRPrecision() {
			return null;
		}

		public String XNUMBRDefault() {

			return "";

		}

		public String XNUMBRComment() {

			return "";

		}

		public String XNUMBRPattern() {

			return "";

		}

		public String XNUMBROriginalDbColumnName() {

			return "XNUMBR";

		}

		public String XSTATE;

		public String getXSTATE() {
			return this.XSTATE;
		}

		public Boolean XSTATEIsNullable() {
			return true;
		}

		public Boolean XSTATEIsKey() {
			return false;
		}

		public Integer XSTATELength() {
			return null;
		}

		public Integer XSTATEPrecision() {
			return null;
		}

		public String XSTATEDefault() {

			return null;

		}

		public String XSTATEComment() {

			return "";

		}

		public String XSTATEPattern() {

			return "";

		}

		public String XSTATEOriginalDbColumnName() {

			return "XSTATE";

		}

		public BigDecimal XEDATE;

		public BigDecimal getXEDATE() {
			return this.XEDATE;
		}

		public Boolean XEDATEIsNullable() {
			return true;
		}

		public Boolean XEDATEIsKey() {
			return false;
		}

		public Integer XEDATELength() {
			return null;
		}

		public Integer XEDATEPrecision() {
			return null;
		}

		public String XEDATEDefault() {

			return "";

		}

		public String XEDATEComment() {

			return "";

		}

		public String XEDATEPattern() {

			return "";

		}

		public String XEDATEOriginalDbColumnName() {

			return "XEDATE";

		}

		public BigDecimal XECENT;

		public BigDecimal getXECENT() {
			return this.XECENT;
		}

		public Boolean XECENTIsNullable() {
			return true;
		}

		public Boolean XECENTIsKey() {
			return false;
		}

		public Integer XECENTLength() {
			return null;
		}

		public Integer XECENTPrecision() {
			return null;
		}

		public String XECENTDefault() {

			return "";

		}

		public String XECENTComment() {

			return "";

		}

		public String XECENTPattern() {

			return "";

		}

		public String XECENTOriginalDbColumnName() {

			return "XECENT";

		}

		public String XRFLAG;

		public String getXRFLAG() {
			return this.XRFLAG;
		}

		public Boolean XRFLAGIsNullable() {
			return true;
		}

		public Boolean XRFLAGIsKey() {
			return false;
		}

		public Integer XRFLAGLength() {
			return null;
		}

		public Integer XRFLAGPrecision() {
			return null;
		}

		public String XRFLAGDefault() {

			return null;

		}

		public String XRFLAGComment() {

			return "";

		}

		public String XRFLAGPattern() {

			return "";

		}

		public String XRFLAGOriginalDbColumnName() {

			return "XRFLAG";

		}

		public java.util.Date LOAD_DATE;

		public java.util.Date getLOAD_DATE() {
			return this.LOAD_DATE;
		}

		public Boolean LOAD_DATEIsNullable() {
			return true;
		}

		public Boolean LOAD_DATEIsKey() {
			return false;
		}

		public Integer LOAD_DATELength() {
			return null;
		}

		public Integer LOAD_DATEPrecision() {
			return null;
		}

		public String LOAD_DATEDefault() {

			return null;

		}

		public String LOAD_DATEComment() {

			return "";

		}

		public String LOAD_DATEPattern() {

			return "yyyy-MM-dd";

		}

		public String LOAD_DATEOriginalDbColumnName() {

			return "LOAD_DATE";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.XNUMBR = (BigDecimal) dis.readObject();

					this.XSTATE = readString(dis);

					this.XEDATE = (BigDecimal) dis.readObject();

					this.XECENT = (BigDecimal) dis.readObject();

					this.XRFLAG = readString(dis);

					this.LOAD_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.XNUMBR = (BigDecimal) dis.readObject();

					this.XSTATE = readString(dis);

					this.XEDATE = (BigDecimal) dis.readObject();

					this.XECENT = (BigDecimal) dis.readObject();

					this.XRFLAG = readString(dis);

					this.LOAD_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.XNUMBR);

				// String

				writeString(this.XSTATE, dos);

				// BigDecimal

				dos.writeObject(this.XEDATE);

				// BigDecimal

				dos.writeObject(this.XECENT);

				// String

				writeString(this.XRFLAG, dos);

				// java.util.Date

				writeDate(this.LOAD_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.XNUMBR);

				// String

				writeString(this.XSTATE, dos);

				// BigDecimal

				dos.writeObject(this.XEDATE);

				// BigDecimal

				dos.writeObject(this.XECENT);

				// String

				writeString(this.XRFLAG, dos);

				// java.util.Date

				writeDate(this.LOAD_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XNUMBR=" + String.valueOf(XNUMBR));
			sb.append(",XSTATE=" + XSTATE);
			sb.append(",XEDATE=" + String.valueOf(XEDATE));
			sb.append(",XECENT=" + String.valueOf(XECENT));
			sb.append(",XRFLAG=" + XRFLAG);
			sb.append(",LOAD_DATE=" + String.valueOf(LOAD_DATE));
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (XNUMBR == null) {
				sb.append("<null>");
			} else {
				sb.append(XNUMBR);
			}

			sb.append("|");

			if (XSTATE == null) {
				sb.append("<null>");
			} else {
				sb.append(XSTATE);
			}

			sb.append("|");

			if (XEDATE == null) {
				sb.append("<null>");
			} else {
				sb.append(XEDATE);
			}

			sb.append("|");

			if (XECENT == null) {
				sb.append("<null>");
			} else {
				sb.append(XECENT);
			}

			sb.append("|");

			if (XRFLAG == null) {
				sb.append("<null>");
			} else {
				sb.append(XRFLAG);
			}

			sb.append("|");

			if (LOAD_DATE == null) {
				sb.append("<null>");
			} else {
				sb.append(LOAD_DATE);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(INVSKUXStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal XNUMBR;

		public BigDecimal getXNUMBR() {
			return this.XNUMBR;
		}

		public Boolean XNUMBRIsNullable() {
			return true;
		}

		public Boolean XNUMBRIsKey() {
			return false;
		}

		public Integer XNUMBRLength() {
			return null;
		}

		public Integer XNUMBRPrecision() {
			return null;
		}

		public String XNUMBRDefault() {

			return "";

		}

		public String XNUMBRComment() {

			return "";

		}

		public String XNUMBRPattern() {

			return "";

		}

		public String XNUMBROriginalDbColumnName() {

			return "XNUMBR";

		}

		public String XSTATE;

		public String getXSTATE() {
			return this.XSTATE;
		}

		public Boolean XSTATEIsNullable() {
			return true;
		}

		public Boolean XSTATEIsKey() {
			return false;
		}

		public Integer XSTATELength() {
			return null;
		}

		public Integer XSTATEPrecision() {
			return null;
		}

		public String XSTATEDefault() {

			return null;

		}

		public String XSTATEComment() {

			return "";

		}

		public String XSTATEPattern() {

			return "";

		}

		public String XSTATEOriginalDbColumnName() {

			return "XSTATE";

		}

		public BigDecimal XEDATE;

		public BigDecimal getXEDATE() {
			return this.XEDATE;
		}

		public Boolean XEDATEIsNullable() {
			return true;
		}

		public Boolean XEDATEIsKey() {
			return false;
		}

		public Integer XEDATELength() {
			return null;
		}

		public Integer XEDATEPrecision() {
			return null;
		}

		public String XEDATEDefault() {

			return "";

		}

		public String XEDATEComment() {

			return "";

		}

		public String XEDATEPattern() {

			return "";

		}

		public String XEDATEOriginalDbColumnName() {

			return "XEDATE";

		}

		public BigDecimal XECENT;

		public BigDecimal getXECENT() {
			return this.XECENT;
		}

		public Boolean XECENTIsNullable() {
			return true;
		}

		public Boolean XECENTIsKey() {
			return false;
		}

		public Integer XECENTLength() {
			return null;
		}

		public Integer XECENTPrecision() {
			return null;
		}

		public String XECENTDefault() {

			return "";

		}

		public String XECENTComment() {

			return "";

		}

		public String XECENTPattern() {

			return "";

		}

		public String XECENTOriginalDbColumnName() {

			return "XECENT";

		}

		public String XRFLAG;

		public String getXRFLAG() {
			return this.XRFLAG;
		}

		public Boolean XRFLAGIsNullable() {
			return true;
		}

		public Boolean XRFLAGIsKey() {
			return false;
		}

		public Integer XRFLAGLength() {
			return null;
		}

		public Integer XRFLAGPrecision() {
			return null;
		}

		public String XRFLAGDefault() {

			return null;

		}

		public String XRFLAGComment() {

			return "";

		}

		public String XRFLAGPattern() {

			return "";

		}

		public String XRFLAGOriginalDbColumnName() {

			return "XRFLAG";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.XNUMBR = (BigDecimal) dis.readObject();

					this.XSTATE = readString(dis);

					this.XEDATE = (BigDecimal) dis.readObject();

					this.XECENT = (BigDecimal) dis.readObject();

					this.XRFLAG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.XNUMBR = (BigDecimal) dis.readObject();

					this.XSTATE = readString(dis);

					this.XEDATE = (BigDecimal) dis.readObject();

					this.XECENT = (BigDecimal) dis.readObject();

					this.XRFLAG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.XNUMBR);

				// String

				writeString(this.XSTATE, dos);

				// BigDecimal

				dos.writeObject(this.XEDATE);

				// BigDecimal

				dos.writeObject(this.XECENT);

				// String

				writeString(this.XRFLAG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.XNUMBR);

				// String

				writeString(this.XSTATE, dos);

				// BigDecimal

				dos.writeObject(this.XEDATE);

				// BigDecimal

				dos.writeObject(this.XECENT);

				// String

				writeString(this.XRFLAG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XNUMBR=" + String.valueOf(XNUMBR));
			sb.append(",XSTATE=" + XSTATE);
			sb.append(",XEDATE=" + String.valueOf(XEDATE));
			sb.append(",XECENT=" + String.valueOf(XECENT));
			sb.append(",XRFLAG=" + XRFLAG);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (XNUMBR == null) {
				sb.append("<null>");
			} else {
				sb.append(XNUMBR);
			}

			sb.append("|");

			if (XSTATE == null) {
				sb.append("<null>");
			} else {
				sb.append(XSTATE);
			}

			sb.append("|");

			if (XEDATE == null) {
				sb.append("<null>");
			} else {
				sb.append(XEDATE);
			}

			sb.append("|");

			if (XECENT == null) {
				sb.append("<null>");
			} else {
				sb.append(XECENT);
			}

			sb.append("|");

			if (XRFLAG == null) {
				sb.append("<null>");
			} else {
				sb.append(XRFLAG);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				INVSKUXStruct INVSKUX = new INVSKUXStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "INVSKUX");

				int tos_count_tDBOutput_1 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBOutput_1", "tDBOutput_1", "tSnowflakeOutput");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBOutput_1 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBOutput_1 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBOutput_1 = (String) (restRequest_tDBOutput_1 != null
						? restRequest_tDBOutput_1.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBOutput_1 = new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBOutput_1 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBOutput_1 = null;

				org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_1 = (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_1
						.createRuntimeProperties();
				props_tDBOutput_1.setValue("tableAction",
						org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);

				props_tDBOutput_1.setValue("outputAction",
						org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);

				props_tDBOutput_1.setValue("convertColumnsAndTableToUppercase", true);

				props_tDBOutput_1.setValue("convertEmptyStringsToNull", false);

				props_tDBOutput_1.setValue("useSchemaDatePattern", false);

				props_tDBOutput_1.setValue("dieOnError", false);

				class SchemaSettingTool_tDBOutput_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_1_fisrt sst_tDBOutput_1_1_fisrt = new SchemaSettingTool_tDBOutput_1_1_fisrt();

				props_tDBOutput_1.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_1_fisrt.getSchemaValue()));

				props_tDBOutput_1.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_1.connection.setValue("useCustomRegion", false);

				props_tDBOutput_1.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_1.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_1.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBOutput_1.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBOutput_1.table.setValue("tableName", "INVSKUX");

				props_tDBOutput_1.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_1.table.connection.setValue("useCustomRegion", false);

				props_tDBOutput_1.table.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_1.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_1.table.connection.referencedComponent.setValue("componentInstanceId",
						"tDBConnection_1");

				props_tDBOutput_1.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBOutput_1_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"INVSKUX\",\"fields\":[{", s);

						a("\"name\":\"XNUMBR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"XNUMBR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"XSTATE\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"XSTATE\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"XEDATE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"XEDATE\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"XECENT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"XECENT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"XRFLAG\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"XRFLAG\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"talend.field.dbType\":91,\"talend.field.dbColumnName\":\"LOAD_DATE\",\"talend.field.default\":\"\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_2_fisrt sst_tDBOutput_1_2_fisrt = new SchemaSettingTool_tDBOutput_1_2_fisrt();

				props_tDBOutput_1.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_2_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_1.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_1);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_1.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_1);
					}
				}
				globalMap.put("tDBOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBOutput_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBOutput_1_MAPPINGS_URL", mappings_url_tDBOutput_1);

				org.talend.components.api.container.RuntimeContainer container_tDBOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBOutput_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBOutput_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBOutput_1 = null;
				topology_tDBOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_1 = def_tDBOutput_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_1,
						topology_tDBOutput_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_1 = def_tDBOutput_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBOutput_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBOutput_1 = componentRuntime_tDBOutput_1
						.initialize(container_tDBOutput_1, props_tDBOutput_1);

				if (initVr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBOutput_1.getMessage());
				}

				if (componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBOutput_1;
					compDriverInitialization_tDBOutput_1.runAtDriver(container_tDBOutput_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_1 = null;
				if (componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBOutput_1;
					if (doesNodeBelongToRequest_tDBOutput_1) {
						org.talend.daikon.properties.ValidationResult vr_tDBOutput_1 = sourceOrSink_tDBOutput_1
								.validate(container_tDBOutput_1);
						if (vr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBOutput_1.getMessage());
						}
					}
				}

				org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_1 = null;
				if (sourceOrSink_tDBOutput_1 instanceof org.talend.components.api.component.runtime.Sink) {
					org.talend.components.api.component.runtime.Sink sink_tDBOutput_1 = (org.talend.components.api.component.runtime.Sink) sourceOrSink_tDBOutput_1;
					org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_1 = sink_tDBOutput_1
							.createWriteOperation();
					if (doesNodeBelongToRequest_tDBOutput_1) {
						writeOperation_tDBOutput_1.initialize(container_tDBOutput_1);
					}
					writer_tDBOutput_1 = writeOperation_tDBOutput_1.createWriter(container_tDBOutput_1);
					if (doesNodeBelongToRequest_tDBOutput_1) {
						writer_tDBOutput_1.open("tDBOutput_1");
					}

					resourceMap.put("writer_tDBOutput_1", writer_tDBOutput_1);
				} // end of "sourceOrSink_tDBOutput_1 instanceof ...Sink"
				org.talend.components.api.component.Connector c_tDBOutput_1 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_1
						.getAvailableConnectors(null, false)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBOutput_1 = currentConnector;
						break;
					}
				}
				org.apache.avro.Schema designSchema_tDBOutput_1 = props_tDBOutput_1.getSchema(c_tDBOutput_1, false);
				incomingEnforcer_tDBOutput_1 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(
						designSchema_tDBOutput_1);

				java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_1 = new java.util.ArrayList<Object>();
				java.util.Iterator outgoingMainRecordsIt_tDBOutput_1 = null;

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "row6");

				int tos_count_tMap_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tMap_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tMap_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tMap_1 = new StringBuilder();
							log4jParamters_tMap_1.append("Parameters:");
							log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
							log4jParamters_tMap_1.append(" | ");
							log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
							log4jParamters_tMap_1.append(" | ");
							log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
							log4jParamters_tMap_1.append(" | ");
							log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
							log4jParamters_tMap_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tMap_1 - " + (log4jParamters_tMap_1));
						}
					}
					new BytesLimit65535_tMap_1().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tMap_1", "tMap_1", "tMap");
					talendJobLogProcess(globalMap);
				}

// ###############################
// # Lookup's keys initialization
				int count_row6_tMap_1 = 0;

// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					java.util.Date var1;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_INVSKUX_tMap_1 = 0;

				INVSKUXStruct INVSKUX_tmp = new INVSKUXStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileInputDelimited_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileInputDelimited_1 = new StringBuilder();
							log4jParamters_tFileInputDelimited_1.append("Parameters:");
							log4jParamters_tFileInputDelimited_1
									.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVSKUX.zip\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("CSV_OPTION" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ROWSEPARATOR" + " = " + "\"\\n\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("FIELDSEPARATOR" + " = " + "\",\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("HEADER" + " = " + "1");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("LIMIT" + " = " + "");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("REMOVE_EMPTY_ROW" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("UNCOMPRESS" + " = " + "true");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("DIE_ON_ERROR" + " = " + "true");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ADVANCED_SEPARATOR" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("TRIMALL" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("TRIMSELECT" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("XNUMBR") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("XSTATE") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("XEDATE")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("XECENT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("XRFLAG") + "}]");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("CHECK_FIELDS_NUM" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("CHECK_DATE" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ENCODING" + " = " + "\"ISO-8859-15\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("SPLITRECORD" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ENABLE_DECODE" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileInputDelimited_1 - " + (log4jParamters_tFileInputDelimited_1));
						}
					}
					new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileInputDelimited_1", "tFileInputDelimited_1", "tFileInputDelimited");
					talendJobLogProcess(globalMap);
				}

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/data/talend/data_repository/INVSKUX.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_1 = null;
					try {
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_1));
						} else {
							zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(new java.io.FileInputStream(
											String.valueOf(filename_tFileInputDelimited_1))));
						}
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						throw e;

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_1 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_1 = zis_tFileInputDelimited_1.getNextEntry();
						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

							throw e;

						}
						if (entry_tFileInputDelimited_1 == null) {
							break;
						}
						if (entry_tFileInputDelimited_1.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_1, "ISO-8859-15", ",", "\n", false, 1, 0,

									limit_tFileInputDelimited_1, -1, false);
						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

							throw e;

						}

						log.info("tFileInputDelimited_1 - Retrieving records from the datasource.");

						while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
							rowstate_tFileInputDelimited_1.reset();

							row6 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row6 = new row6Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_1 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_1 = 0;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row6.XNUMBR = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
												ex_tFileInputDelimited_1.getMessage());
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"XNUMBR", "row6", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row6.XNUMBR = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								row6.XSTATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 2;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row6.XEDATE = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
												ex_tFileInputDelimited_1.getMessage());
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"XEDATE", "row6", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row6.XEDATE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row6.XECENT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
												ex_tFileInputDelimited_1.getMessage());
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"XECENT", "row6", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row6.XECENT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								row6.XRFLAG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

								if (rowstate_tFileInputDelimited_1.getException() != null) {
									throw rowstate_tFileInputDelimited_1.getException();
								}

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputDelimited_1 = true;

								throw (e);

							}

							log.debug("tFileInputDelimited_1 - Retrieving the record "
									+ fid_tFileInputDelimited_1.getRowNumber() + ".");

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */

							/**
							 * [tFileInputDelimited_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_begin ] stop
							 */
// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

										, "row6", "tFileInputDelimited_1", "tFileInputDelimited_1",
										"tFileInputDelimited", "tMap_1", "tMap_1", "tMap"

								)) {
									talendJobLogProcess(globalMap);
								}

								if (log.isTraceEnabled()) {
									log.trace("row6 - " + (row6 == null ? "" : row6.toLogString()));
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)

								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;
								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;
									Var.var1 = TalendDate.parseDate("yyyy-MM-dd", TalendDate.getDate("CCYY-MM-DD"));// ###############################
									// ###############################
									// # Output tables

									INVSKUX = null;

// # Output table : 'INVSKUX'
									count_INVSKUX_tMap_1++;

									INVSKUX_tmp.XNUMBR = row6.XNUMBR;
									INVSKUX_tmp.XSTATE = row6.XSTATE;
									INVSKUX_tmp.XEDATE = row6.XEDATE;
									INVSKUX_tmp.XECENT = row6.XECENT;
									INVSKUX_tmp.XRFLAG = row6.XRFLAG;
									INVSKUX_tmp.LOAD_DATE = Var.var1;
									INVSKUX = INVSKUX_tmp;
									log.debug("tMap_1 - Outputting the record " + count_INVSKUX_tMap_1
											+ " of the output table 'INVSKUX'.");

// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "INVSKUX"
								if (INVSKUX != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

											, "INVSKUX", "tMap_1", "tMap_1", "tMap", "tDBOutput_1", "tDBOutput_1",
											"tSnowflakeOutput"

									)) {
										talendJobLogProcess(globalMap);
									}

									if (log.isTraceEnabled()) {
										log.trace("INVSKUX - " + (INVSKUX == null ? "" : INVSKUX.toLogString()));
									}

									if (incomingEnforcer_tDBOutput_1 != null) {
										incomingEnforcer_tDBOutput_1.createNewRecord();
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1
											.getRuntimeSchema().getField("XNUMBR") != null) {
										incomingEnforcer_tDBOutput_1.put("XNUMBR", INVSKUX.XNUMBR);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1
											.getRuntimeSchema().getField("XSTATE") != null) {
										incomingEnforcer_tDBOutput_1.put("XSTATE", INVSKUX.XSTATE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1
											.getRuntimeSchema().getField("XEDATE") != null) {
										incomingEnforcer_tDBOutput_1.put("XEDATE", INVSKUX.XEDATE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1
											.getRuntimeSchema().getField("XECENT") != null) {
										incomingEnforcer_tDBOutput_1.put("XECENT", INVSKUX.XECENT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1
											.getRuntimeSchema().getField("XRFLAG") != null) {
										incomingEnforcer_tDBOutput_1.put("XRFLAG", INVSKUX.XRFLAG);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1
											.getRuntimeSchema().getField("LOAD_DATE") != null) {
										incomingEnforcer_tDBOutput_1.put("LOAD_DATE", INVSKUX.LOAD_DATE);
									}

									org.apache.avro.generic.IndexedRecord data_tDBOutput_1 = null;
									if (incomingEnforcer_tDBOutput_1 != null) {
										data_tDBOutput_1 = incomingEnforcer_tDBOutput_1.getCurrentRecord();
									}

									if (writer_tDBOutput_1 != null && data_tDBOutput_1 != null) {
										writer_tDBOutput_1.write(data_tDBOutput_1);
									}

									nb_line_tDBOutput_1++;

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "INVSKUX"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFileInputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
						nb_line_tFileInputDelimited_1 += fid_tFileInputDelimited_1.getRowNumber();
					}
				} finally {
					if (!((Object) ("/data/talend/data_repository/INVSKUX.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

					log.info("tFileInputDelimited_1- Retrieved records count: " + nb_line_tFileInputDelimited_1 + ".");

				}

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_1 - " + ("Done."));

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'INVSKUX': " + count_INVSKUX_tMap_1 + ".");

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "row6", 2, 0,
						"tFileInputDelimited_1", "tFileInputDelimited_1", "tFileInputDelimited", "tMap_1", "tMap_1",
						"tMap", "output")) {
					talendJobLogProcess(globalMap);
				}

				if (log.isDebugEnabled())
					log.debug("tMap_1 - " + ("Done."));

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

// end of generic

				resourceMap.put("finish_tDBOutput_1", Boolean.TRUE);

				java.util.Map<String, Object> resultMap_tDBOutput_1 = null;
				if (writer_tDBOutput_1 != null) {
					org.talend.components.api.component.runtime.Result resultObject_tDBOutput_1 = (org.talend.components.api.component.runtime.Result) writer_tDBOutput_1
							.close();
					resultMap_tDBOutput_1 = writer_tDBOutput_1.getWriteOperation()
							.finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(
									resultObject_tDBOutput_1), container_tDBOutput_1);
				}
				if (resultMap_tDBOutput_1 != null) {
					for (java.util.Map.Entry<String, Object> entry_tDBOutput_1 : resultMap_tDBOutput_1.entrySet()) {
						switch (entry_tDBOutput_1.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "ERROR_MESSAGE",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_LINE",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_SUCCESS",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_REJECT",
									entry_tDBOutput_1.getValue());
							break;
						default:
							StringBuilder studio_key_tDBOutput_1 = new StringBuilder();
							for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < entry_tDBOutput_1.getKey()
									.length(); i_tDBOutput_1++) {
								char ch_tDBOutput_1 = entry_tDBOutput_1.getKey().charAt(i_tDBOutput_1);
								if (Character.isUpperCase(ch_tDBOutput_1) && i_tDBOutput_1 > 0) {
									studio_key_tDBOutput_1.append('_');
								}
								studio_key_tDBOutput_1.append(ch_tDBOutput_1);
							}
							container_tDBOutput_1.setComponentData("tDBOutput_1",
									studio_key_tDBOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tDBOutput_1.getValue());
							break;
						}
					}
				}

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "INVSKUX", 2, 0,
						"tMap_1", "tMap_1", "tMap", "tDBOutput_1", "tDBOutput_1", "tSnowflakeOutput", "output")) {
					talendJobLogProcess(globalMap);
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFileDelete_2Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tDBRow_4Process(globalMap);

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

// finally of generic

				if (resourceMap.get("finish_tDBOutput_1") == null) {
					if (resourceMap.get("writer_tDBOutput_1") != null) {
						try {
							((org.talend.components.api.component.runtime.Writer) resourceMap.get("writer_tDBOutput_1"))
									.close();
						} catch (java.io.IOException e_tDBOutput_1) {
							String errorMessage_tDBOutput_1 = "failed to release the resource in tDBOutput_1 :"
									+ e_tDBOutput_1.getMessage();
							System.err.println(errorMessage_tDBOutput_1);
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileDelete_2 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileDelete_2 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileDelete_2 = new StringBuilder();
							log4jParamters_tFileDelete_2.append("Parameters:");
							log4jParamters_tFileDelete_2
									.append("PATH" + " = " + "\"/data/talend/data_repository/INVSKUX.zip\"");
							log4jParamters_tFileDelete_2.append(" | ");
							log4jParamters_tFileDelete_2.append("FAILON" + " = " + "true");
							log4jParamters_tFileDelete_2.append(" | ");
							log4jParamters_tFileDelete_2.append("FOLDER_FILE" + " = " + "true");
							log4jParamters_tFileDelete_2.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileDelete_2 - " + (log4jParamters_tFileDelete_2));
						}
					}
					new BytesLimit65535_tFileDelete_2().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileDelete_2", "tFileDelete_2", "tFileDelete");
					talendJobLogProcess(globalMap);
				}

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				final StringBuffer log4jSb_tFileDelete_2 = new StringBuffer();

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File path_tFileDelete_2 = new java.io.File("/data/talend/data_repository/INVSKUX.zip");
				if (path_tFileDelete_2.exists()) {
					if (path_tFileDelete_2.isFile()) {
						if (path_tFileDelete_2.delete()) {
							globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
							log.info("tFileDelete_2 - File : " + path_tFileDelete_2.getAbsolutePath() + " is deleted.");
						} else {
							globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
							throw new RuntimeException(
									"The file " + path_tFileDelete_2.getAbsolutePath() + " can't be deleted.");
						}
					} else if (path_tFileDelete_2.isDirectory()) {
						DeleteFoldertFileDelete_2 dftFileDelete_2 = new DeleteFoldertFileDelete_2();
						if (dftFileDelete_2.delete(path_tFileDelete_2)) {
							globalMap.put("tFileDelete_2_CURRENT_STATUS", "Path deleted.");
							log.info("tFileDelete_2 - Directory : " + path_tFileDelete_2.getAbsolutePath()
									+ " is deleted.");
						} else {
							globalMap.put("tFileDelete_2_CURRENT_STATUS", "No path deleted.");
							throw new RuntimeException(
									"The directory " + path_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
						}
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS", "File or path does not exist or is invalid.");
					throw new RuntimeException("File or path does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH", "/data/talend/data_repository/INVSKUX.zip");

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_end ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				if (log.isDebugEnabled())
					log.debug("tFileDelete_2 - " + ("Done."));

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				/**
				 * [tFileDelete_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_4 begin ] start
				 */

				ok_Hash.put("tDBRow_4", false);
				start_Hash.put("tDBRow_4", System.currentTimeMillis());

				currentComponent = "tDBRow_4";

				int tos_count_tDBRow_4 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_4", "tDBRow_4", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_4 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_4 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_4 = (String) (restRequest_tDBRow_4 != null
						? restRequest_tDBRow_4.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_4 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_4 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_4 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_4 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_4
						.createRuntimeProperties();
				props_tDBRow_4.setValue("query",
						"\ninsert into SKUS_STATED_EXCLUDED_INVSKUX\nselect\n    XNUMBR,\n    XSTATE,   \n    case\n        when LENGTH(XEDATE)="
								+ " 5 then TO_DATE(CONCAT( '200', TO_VARCHAR(XEDATE)),'yyyymmdd')\n        else TO_DATE(CONCAT( '20', XEDATE), 'yyyymmdd')"
								+ "\n    end as XEDATE,\nXRFLAG,\nLOAD_DATE    \nfrom INVSKUX\n\n");

				props_tDBRow_4.setValue("dieOnError", true);

				props_tDBRow_4.setValue("usePreparedStatement", false);

				props_tDBRow_4.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_4_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_4_1_fisrt sst_tDBRow_4_1_fisrt = new SchemaSettingTool_tDBRow_4_1_fisrt();

				props_tDBRow_4.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_4_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_4_2_fisrt sst_tDBRow_4_2_fisrt = new SchemaSettingTool_tDBRow_4_2_fisrt();

				props_tDBRow_4.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_2_fisrt.getSchemaValue()));

				props_tDBRow_4.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_4.connection.setValue("useCustomRegion", false);

				props_tDBRow_4.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_4.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_4.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_4.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_4.table.setValue("tableName", "");

				props_tDBRow_4.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_4.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_4.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_4.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_4.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_4.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_4_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_4_3_fisrt sst_tDBRow_4_3_fisrt = new SchemaSettingTool_tDBRow_4_3_fisrt();

				props_tDBRow_4.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_4.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_4 = props_tDBRow_4.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_4 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_4 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_4 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_4.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_4);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_4.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_4 = props_tDBRow_4.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_4 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_4 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_4 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_4.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_4);
					}
				}
				globalMap.put("tDBRow_4_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_4);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_4 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_4_MAPPINGS_URL", mappings_url_tDBRow_4);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_4 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_4";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_4 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_4 = null;
				topology_tDBRow_4 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_4 = def_tDBRow_4.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_4,
						topology_tDBRow_4);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_4 = def_tDBRow_4
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_4 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_4.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_4 = componentRuntime_tDBRow_4
						.initialize(container_tDBRow_4, props_tDBRow_4);

				if (initVr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_4.getMessage());
				}

				if (componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_4;
					compDriverInitialization_tDBRow_4.runAtDriver(container_tDBRow_4);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_4 = null;
				if (componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_4 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_4;
					if (doesNodeBelongToRequest_tDBRow_4) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_4 = sourceOrSink_tDBRow_4
								.validate(container_tDBRow_4);
						if (vr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_4.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_4 begin ] stop
				 */

				/**
				 * [tDBRow_4 main ] start
				 */

				currentComponent = "tDBRow_4";

				tos_count_tDBRow_4++;

				/**
				 * [tDBRow_4 main ] stop
				 */

				/**
				 * [tDBRow_4 process_data_begin ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_4 process_data_end ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_end ] stop
				 */

				/**
				 * [tDBRow_4 end ] start
				 */

				currentComponent = "tDBRow_4";

// end of generic

				resourceMap.put("finish_tDBRow_4", Boolean.TRUE);

				ok_Hash.put("tDBRow_4", true);
				end_Hash.put("tDBRow_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBRow_5Process(globalMap);

				/**
				 * [tDBRow_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_4 finally ] start
				 */

				currentComponent = "tDBRow_4";

// finally of generic

				if (resourceMap.get("finish_tDBRow_4") == null) {
				}

				/**
				 * [tDBRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_5");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_5 begin ] start
				 */

				ok_Hash.put("tDBRow_5", false);
				start_Hash.put("tDBRow_5", System.currentTimeMillis());

				currentComponent = "tDBRow_5";

				int tos_count_tDBRow_5 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_5", "tDBRow_5", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_5 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_5 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_5 = (String) (restRequest_tDBRow_5 != null
						? restRequest_tDBRow_5.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_5 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_5 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_5 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_5 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_5
						.createRuntimeProperties();
				props_tDBRow_5.setValue("query", "\ndrop table INVSKUX\n\n");

				props_tDBRow_5.setValue("dieOnError", true);

				props_tDBRow_5.setValue("usePreparedStatement", false);

				props_tDBRow_5.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_5_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_5_1_fisrt sst_tDBRow_5_1_fisrt = new SchemaSettingTool_tDBRow_5_1_fisrt();

				props_tDBRow_5.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_5_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_5_2_fisrt sst_tDBRow_5_2_fisrt = new SchemaSettingTool_tDBRow_5_2_fisrt();

				props_tDBRow_5.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_2_fisrt.getSchemaValue()));

				props_tDBRow_5.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_5.connection.setValue("useCustomRegion", false);

				props_tDBRow_5.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_5.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_5.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_5.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_5.table.setValue("tableName", "");

				props_tDBRow_5.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_5.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_5.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_5.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_5.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_5.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_5_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_5_3_fisrt sst_tDBRow_5_3_fisrt = new SchemaSettingTool_tDBRow_5_3_fisrt();

				props_tDBRow_5.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_5.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_5 = props_tDBRow_5.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_5 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_5 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_5 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_5.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_5);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_5.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_5 = props_tDBRow_5.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_5 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_5 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_5 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_5.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_5);
					}
				}
				globalMap.put("tDBRow_5_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_5);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_5 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_5_MAPPINGS_URL", mappings_url_tDBRow_5);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_5 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_5";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_5 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_5 = null;
				topology_tDBRow_5 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_5 = def_tDBRow_5.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_5,
						topology_tDBRow_5);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_5 = def_tDBRow_5
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_5 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_5.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_5 = componentRuntime_tDBRow_5
						.initialize(container_tDBRow_5, props_tDBRow_5);

				if (initVr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_5.getMessage());
				}

				if (componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_5;
					compDriverInitialization_tDBRow_5.runAtDriver(container_tDBRow_5);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_5 = null;
				if (componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_5 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_5;
					if (doesNodeBelongToRequest_tDBRow_5) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_5 = sourceOrSink_tDBRow_5
								.validate(container_tDBRow_5);
						if (vr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_5.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_5 begin ] stop
				 */

				/**
				 * [tDBRow_5 main ] start
				 */

				currentComponent = "tDBRow_5";

				tos_count_tDBRow_5++;

				/**
				 * [tDBRow_5 main ] stop
				 */

				/**
				 * [tDBRow_5 process_data_begin ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_5 process_data_end ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_end ] stop
				 */

				/**
				 * [tDBRow_5 end ] start
				 */

				currentComponent = "tDBRow_5";

// end of generic

				resourceMap.put("finish_tDBRow_5", Boolean.TRUE);

				ok_Hash.put("tDBRow_5", true);
				end_Hash.put("tDBRow_5", System.currentTimeMillis());

				/**
				 * [tDBRow_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_5 finally ] start
				 */

				currentComponent = "tDBRow_5";

// finally of generic

				if (resourceMap.get("finish_tDBRow_5") == null) {
				}

				/**
				 * [tDBRow_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_10");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_10 begin ] start
				 */

				ok_Hash.put("tDBRow_10", false);
				start_Hash.put("tDBRow_10", System.currentTimeMillis());

				currentComponent = "tDBRow_10";

				int tos_count_tDBRow_10 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_10", "tDBRow_10", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_10 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_10 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_10 = (String) (restRequest_tDBRow_10 != null
						? restRequest_tDBRow_10.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_10 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_10 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_10 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_10 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_10
						.createRuntimeProperties();
				props_tDBRow_10.setValue("query",
						"DELETE from STORE_COMP_DATES_VSCOMP\nWHERE LOAD_DATE = CURRENT_DATE()");

				props_tDBRow_10.setValue("dieOnError", true);

				props_tDBRow_10.setValue("usePreparedStatement", false);

				props_tDBRow_10.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_10_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_10_1_fisrt sst_tDBRow_10_1_fisrt = new SchemaSettingTool_tDBRow_10_1_fisrt();

				props_tDBRow_10.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_10_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_10_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_10_2_fisrt sst_tDBRow_10_2_fisrt = new SchemaSettingTool_tDBRow_10_2_fisrt();

				props_tDBRow_10.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_10_2_fisrt.getSchemaValue()));

				props_tDBRow_10.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_10.connection.setValue("useCustomRegion", false);

				props_tDBRow_10.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_10.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_10.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_10.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_10.table.setValue("tableName", "");

				props_tDBRow_10.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_10.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_10.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_10.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_10.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_10.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_10_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_10_3_fisrt sst_tDBRow_10_3_fisrt = new SchemaSettingTool_tDBRow_10_3_fisrt();

				props_tDBRow_10.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_10_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_10.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_10 = props_tDBRow_10.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_10 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_10 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_10 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_10.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_10);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_10.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_10 = props_tDBRow_10.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_10 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_10 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_10 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_10.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_10);
					}
				}
				globalMap.put("tDBRow_10_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_10);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_10 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_10_MAPPINGS_URL", mappings_url_tDBRow_10);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_10 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_10";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_10 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_10 = null;
				topology_tDBRow_10 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_10 = def_tDBRow_10.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_10,
						topology_tDBRow_10);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_10 = def_tDBRow_10
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_10 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_10.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_10 = componentRuntime_tDBRow_10
						.initialize(container_tDBRow_10, props_tDBRow_10);

				if (initVr_tDBRow_10.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_10.getMessage());
				}

				if (componentRuntime_tDBRow_10 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_10 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_10;
					compDriverInitialization_tDBRow_10.runAtDriver(container_tDBRow_10);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_10 = null;
				if (componentRuntime_tDBRow_10 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_10 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_10;
					if (doesNodeBelongToRequest_tDBRow_10) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_10 = sourceOrSink_tDBRow_10
								.validate(container_tDBRow_10);
						if (vr_tDBRow_10.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_10.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_10 begin ] stop
				 */

				/**
				 * [tDBRow_10 main ] start
				 */

				currentComponent = "tDBRow_10";

				tos_count_tDBRow_10++;

				/**
				 * [tDBRow_10 main ] stop
				 */

				/**
				 * [tDBRow_10 process_data_begin ] start
				 */

				currentComponent = "tDBRow_10";

				/**
				 * [tDBRow_10 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_10 process_data_end ] start
				 */

				currentComponent = "tDBRow_10";

				/**
				 * [tDBRow_10 process_data_end ] stop
				 */

				/**
				 * [tDBRow_10 end ] start
				 */

				currentComponent = "tDBRow_10";

// end of generic

				resourceMap.put("finish_tDBRow_10", Boolean.TRUE);

				ok_Hash.put("tDBRow_10", true);
				end_Hash.put("tDBRow_10", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tDBInput_3Process(globalMap);

				/**
				 * [tDBRow_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_10 finally ] start
				 */

				currentComponent = "tDBRow_10";

// finally of generic

				if (resourceMap.get("finish_tDBRow_10") == null) {
				}

				/**
				 * [tDBRow_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal STRDST;

		public BigDecimal getSTRDST() {
			return this.STRDST;
		}

		public Boolean STRDSTIsNullable() {
			return false;
		}

		public Boolean STRDSTIsKey() {
			return false;
		}

		public Integer STRDSTLength() {
			return 3;
		}

		public Integer STRDSTPrecision() {
			return 0;
		}

		public String STRDSTDefault() {

			return "";

		}

		public String STRDSTComment() {

			return "";

		}

		public String STRDSTPattern() {

			return "";

		}

		public String STRDSTOriginalDbColumnName() {

			return "STRDST";

		}

		public String DSTNAM;

		public String getDSTNAM() {
			return this.DSTNAM;
		}

		public Boolean DSTNAMIsNullable() {
			return false;
		}

		public Boolean DSTNAMIsKey() {
			return false;
		}

		public Integer DSTNAMLength() {
			return 20;
		}

		public Integer DSTNAMPrecision() {
			return 0;
		}

		public String DSTNAMDefault() {

			return null;

		}

		public String DSTNAMComment() {

			return "";

		}

		public String DSTNAMPattern() {

			return "";

		}

		public String DSTNAMOriginalDbColumnName() {

			return "DSTNAM";

		}

		public String DSTSHT;

		public String getDSTSHT() {
			return this.DSTSHT;
		}

		public Boolean DSTSHTIsNullable() {
			return false;
		}

		public Boolean DSTSHTIsKey() {
			return false;
		}

		public Integer DSTSHTLength() {
			return 8;
		}

		public Integer DSTSHTPrecision() {
			return 0;
		}

		public String DSTSHTDefault() {

			return null;

		}

		public String DSTSHTComment() {

			return "";

		}

		public String DSTSHTPattern() {

			return "";

		}

		public String DSTSHTOriginalDbColumnName() {

			return "DSTSHT";

		}

		public BigDecimal REGNUM;

		public BigDecimal getREGNUM() {
			return this.REGNUM;
		}

		public Boolean REGNUMIsNullable() {
			return false;
		}

		public Boolean REGNUMIsKey() {
			return false;
		}

		public Integer REGNUMLength() {
			return 3;
		}

		public Integer REGNUMPrecision() {
			return 0;
		}

		public String REGNUMDefault() {

			return "";

		}

		public String REGNUMComment() {

			return "";

		}

		public String REGNUMPattern() {

			return "";

		}

		public String REGNUMOriginalDbColumnName() {

			return "REGNUM";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STRDST = (BigDecimal) dis.readObject();

					this.DSTNAM = readString(dis);

					this.DSTSHT = readString(dis);

					this.REGNUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STRDST = (BigDecimal) dis.readObject();

					this.DSTNAM = readString(dis);

					this.DSTSHT = readString(dis);

					this.REGNUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STRDST);

				// String

				writeString(this.DSTNAM, dos);

				// String

				writeString(this.DSTSHT, dos);

				// BigDecimal

				dos.writeObject(this.REGNUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STRDST);

				// String

				writeString(this.DSTNAM, dos);

				// String

				writeString(this.DSTSHT, dos);

				// BigDecimal

				dos.writeObject(this.REGNUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STRDST=" + String.valueOf(STRDST));
			sb.append(",DSTNAM=" + DSTNAM);
			sb.append(",DSTSHT=" + DSTSHT);
			sb.append(",REGNUM=" + String.valueOf(REGNUM));
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (STRDST == null) {
				sb.append("<null>");
			} else {
				sb.append(STRDST);
			}

			sb.append("|");

			if (DSTNAM == null) {
				sb.append("<null>");
			} else {
				sb.append(DSTNAM);
			}

			sb.append("|");

			if (DSTSHT == null) {
				sb.append("<null>");
			} else {
				sb.append(DSTSHT);
			}

			sb.append("|");

			if (REGNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(REGNUM);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "row3");

				int tos_count_tFileOutputDelimited_3 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileOutputDelimited_3 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileOutputDelimited_3 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileOutputDelimited_3 = new StringBuilder();
							log4jParamters_tFileOutputDelimited_3.append("Parameters:");
							log4jParamters_tFileOutputDelimited_3.append("USESTREAM" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3
									.append("FILENAME" + " = " + "\"/data/talend/data_repository/VSCOMP.csv\"");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("ROWSEPARATOR" + " = " + "\"\\n\"");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("FIELDSEPARATOR" + " = " + "\",\"");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("APPEND" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("INCLUDEHEADER" + " = " + "true");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("COMPRESS" + " = " + "true");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("ADVANCED_SEPARATOR" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("CSV_OPTION" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("CREATE" + " = " + "true");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("SPLIT" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("FLUSHONROW" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("ROW_MODE" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("ENCODING" + " = " + "\"ISO-8859-15\"");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("DELETE_EMPTYFILE" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							log4jParamters_tFileOutputDelimited_3.append("FILE_EXIST_EXCEPTION" + " = " + "false");
							log4jParamters_tFileOutputDelimited_3.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileOutputDelimited_3 - " + (log4jParamters_tFileOutputDelimited_3));
						}
					}
					new BytesLimit65535_tFileOutputDelimited_3().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileOutputDelimited_3", "tFileOutputDelimited_3", "tFileOutputDelimited");
					talendJobLogProcess(globalMap);
				}

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File("/data/talend/data_repository/VSCOMP.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						log.info("tFileOutputDelimited_3 - Creating directory '"
								+ dir_tFileOutputDelimited_3.getCanonicalPath() + "'.");
						dir_tFileOutputDelimited_3.mkdirs();
						log.info("tFileOutputDelimited_3 - The directory '"
								+ dir_tFileOutputDelimited_3.getCanonicalPath() + "' has been created successfully.");
					}
				}

				filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				String zipName_tFileOutputDelimited_3 = fullName_tFileOutputDelimited_3 + ".zip";
				java.io.File file_tFileOutputDelimited_3 = new java.io.File(zipName_tFileOutputDelimited_3);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_3 = null;
				java.io.Writer outtFileOutputDelimited_3 = null;

				if (file_tFileOutputDelimited_3.exists()) {
					file_tFileOutputDelimited_3.delete();
				}
				zipOut_tFileOutputDelimited_3 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_3)));
				zipOut_tFileOutputDelimited_3
						.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_3.getName()));
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_3, "ISO-8859-15"));
				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_3.length() == 0) {
						outtFileOutputDelimited_3.write("STRDST");
						outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
						outtFileOutputDelimited_3.write("DSTNAM");
						outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
						outtFileOutputDelimited_3.write("DSTSHT");
						outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
						outtFileOutputDelimited_3.write("REGNUM");
						outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
						outtFileOutputDelimited_3.flush();
					}
				}

				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBInput_3 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBInput_3 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBInput_3 = new StringBuilder();
							log4jParamters_tDBInput_3.append("Parameters:");
							log4jParamters_tDBInput_3.append("USE_EXISTING_CONNECTION" + " = " + "false");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("DB_VERSION" + " = " + "jt400-9.8.jar");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("HOST" + " = " + "context.jda_host_name");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("DBNAME" + " = " + "context.jda_mm_lib");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("USER" + " = " + "context.jda_user_name");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("PASS" + " = "
									+ String.valueOf(
											routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password))
											.substring(0, 4)
									+ "...");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("TABLE" + " = " + "\"\"");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("QUERYSTORE" + " = " + "\"\"");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("QUERY" + " = " + "\"select * from MM4R5LIB.VSCOMP\"");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("PROPERTIES" + " = " + "\"prompt=false\"");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("TRIM_ALL_COLUMN" + " = " + "false");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("TRIM_COLUMN" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STRDST") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("DSTNAM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("DSTSHT")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("REGNUM") + "}]");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("SET_QUERY_TIMEOUT" + " = " + "false");
							log4jParamters_tDBInput_3.append(" | ");
							log4jParamters_tDBInput_3.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
							log4jParamters_tDBInput_3.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBInput_3 - " + (log4jParamters_tDBInput_3));
						}
					}
					new BytesLimit65535_tDBInput_3().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tDBInput_3", "tDBInput_3", "tAS400Input");
					talendJobLogProcess(globalMap);
				}

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.jda_user_name;

				final String decryptedPassword_tDBInput_3 = context.jda_password;

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";"
						+ "prompt=false";

				log.debug("tDBInput_3 - Driver ClassName: " + driverClass_tDBInput_3 + ".");

				log.debug("tDBInput_3 - Connection attempt to '" + url_tDBInput_3 + "' with the username '"
						+ dbUser_tDBInput_3 + "'.");

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);
				log.debug("tDBInput_3 - Connection to '" + url_tDBInput_3 + "' has succeeded.");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "select * from MM4R5LIB.VSCOMP";

				log.debug("tDBInput_3 - Executing the query: '" + dbquery_tDBInput_3 + "'.");

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					log.debug("tDBInput_3 - Retrieving records from the database.");

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.STRDST = null;
						} else {

							row3.STRDST = rs_tDBInput_3.getBigDecimal(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.DSTNAM = null;
						} else {

							row3.DSTNAM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.DSTSHT = null;
						} else {

							row3.DSTSHT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.REGNUM = null;
						} else {

							row3.REGNUM = rs_tDBInput_3.getBigDecimal(4);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						log.debug("tDBInput_3 - Retrieving the record " + nb_line_tDBInput_3 + ".");

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

								, "row3", "tDBInput_3", "tDBInput_3", "tAS400Input", "tFileOutputDelimited_3",
								"tFileOutputDelimited_3", "tFileOutputDelimited"

						)) {
							talendJobLogProcess(globalMap);
						}

						if (log.isTraceEnabled()) {
							log.trace("row3 - " + (row3 == null ? "" : row3.toLogString()));
						}

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (row3.STRDST != null) {
							sb_tFileOutputDelimited_3
									.append(row3.STRDST.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row3.DSTNAM != null) {
							sb_tFileOutputDelimited_3.append(row3.DSTNAM);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row3.DSTSHT != null) {
							sb_tFileOutputDelimited_3.append(row3.DSTSHT);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row3.REGNUM != null) {
							sb_tFileOutputDelimited_3
									.append(row3.REGNUM.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_3++;
							resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

							outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());
							log.debug("tFileOutputDelimited_3 - Writing the record " + nb_line_tFileOutputDelimited_3
									+ ".");

						}

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						log.debug("tDBInput_3 - Closing the connection to the database.");

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

						log.debug("tDBInput_3 - Connection to the database closed.");

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);
				log.debug("tDBInput_3 - Retrieved records count: " + nb_line_tDBInput_3 + " .");

				if (log.isDebugEnabled())
					log.debug("tDBInput_3 - " + ("Done."));

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				}

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				log.debug("tFileOutputDelimited_3 - Written records count: " + nb_line_tFileOutputDelimited_3 + " .");

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "row3", 2, 0,
						"tDBInput_3", "tDBInput_3", "tAS400Input", "tFileOutputDelimited_3", "tFileOutputDelimited_3",
						"tFileOutputDelimited", "output")) {
					talendJobLogProcess(globalMap);
				}

				if (log.isDebugEnabled())
					log.debug("tFileOutputDelimited_3 - " + ("Done."));

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_3");
						if (outtFileOutputDelimited_3 != null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class copyOfTBLDSTStruct implements routines.system.IPersistableRow<copyOfTBLDSTStruct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal STORE;

		public BigDecimal getSTORE() {
			return this.STORE;
		}

		public Boolean STOREIsNullable() {
			return true;
		}

		public Boolean STOREIsKey() {
			return false;
		}

		public Integer STORELength() {
			return null;
		}

		public Integer STOREPrecision() {
			return null;
		}

		public String STOREDefault() {

			return "";

		}

		public String STOREComment() {

			return "";

		}

		public String STOREPattern() {

			return "";

		}

		public String STOREOriginalDbColumnName() {

			return "STORE";

		}

		public BigDecimal CMPFDT;

		public BigDecimal getCMPFDT() {
			return this.CMPFDT;
		}

		public Boolean CMPFDTIsNullable() {
			return true;
		}

		public Boolean CMPFDTIsKey() {
			return false;
		}

		public Integer CMPFDTLength() {
			return null;
		}

		public Integer CMPFDTPrecision() {
			return null;
		}

		public String CMPFDTDefault() {

			return "";

		}

		public String CMPFDTComment() {

			return "";

		}

		public String CMPFDTPattern() {

			return "";

		}

		public String CMPFDTOriginalDbColumnName() {

			return "CMPFDT";

		}

		public String CMPFRS;

		public String getCMPFRS() {
			return this.CMPFRS;
		}

		public Boolean CMPFRSIsNullable() {
			return true;
		}

		public Boolean CMPFRSIsKey() {
			return false;
		}

		public Integer CMPFRSLength() {
			return null;
		}

		public Integer CMPFRSPrecision() {
			return null;
		}

		public String CMPFRSDefault() {

			return null;

		}

		public String CMPFRSComment() {

			return "";

		}

		public String CMPFRSPattern() {

			return "";

		}

		public String CMPFRSOriginalDbColumnName() {

			return "CMPFRS";

		}

		public BigDecimal CMPTDT;

		public BigDecimal getCMPTDT() {
			return this.CMPTDT;
		}

		public Boolean CMPTDTIsNullable() {
			return true;
		}

		public Boolean CMPTDTIsKey() {
			return false;
		}

		public Integer CMPTDTLength() {
			return null;
		}

		public Integer CMPTDTPrecision() {
			return null;
		}

		public String CMPTDTDefault() {

			return "";

		}

		public String CMPTDTComment() {

			return "";

		}

		public String CMPTDTPattern() {

			return "";

		}

		public String CMPTDTOriginalDbColumnName() {

			return "CMPTDT";

		}

		public String CMPFRE;

		public String getCMPFRE() {
			return this.CMPFRE;
		}

		public Boolean CMPFREIsNullable() {
			return true;
		}

		public Boolean CMPFREIsKey() {
			return false;
		}

		public Integer CMPFRELength() {
			return null;
		}

		public Integer CMPFREPrecision() {
			return null;
		}

		public String CMPFREDefault() {

			return null;

		}

		public String CMPFREComment() {

			return "";

		}

		public String CMPFREPattern() {

			return "";

		}

		public String CMPFREOriginalDbColumnName() {

			return "CMPFRE";

		}

		public java.util.Date LOAD_DATE;

		public java.util.Date getLOAD_DATE() {
			return this.LOAD_DATE;
		}

		public Boolean LOAD_DATEIsNullable() {
			return true;
		}

		public Boolean LOAD_DATEIsKey() {
			return false;
		}

		public Integer LOAD_DATELength() {
			return null;
		}

		public Integer LOAD_DATEPrecision() {
			return null;
		}

		public String LOAD_DATEDefault() {

			return null;

		}

		public String LOAD_DATEComment() {

			return "";

		}

		public String LOAD_DATEPattern() {

			return "yyyy-MM-dd";

		}

		public String LOAD_DATEOriginalDbColumnName() {

			return "LOAD_DATE";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STORE = (BigDecimal) dis.readObject();

					this.CMPFDT = (BigDecimal) dis.readObject();

					this.CMPFRS = readString(dis);

					this.CMPTDT = (BigDecimal) dis.readObject();

					this.CMPFRE = readString(dis);

					this.LOAD_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STORE = (BigDecimal) dis.readObject();

					this.CMPFDT = (BigDecimal) dis.readObject();

					this.CMPFRS = readString(dis);

					this.CMPTDT = (BigDecimal) dis.readObject();

					this.CMPFRE = readString(dis);

					this.LOAD_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STORE);

				// BigDecimal

				dos.writeObject(this.CMPFDT);

				// String

				writeString(this.CMPFRS, dos);

				// BigDecimal

				dos.writeObject(this.CMPTDT);

				// String

				writeString(this.CMPFRE, dos);

				// java.util.Date

				writeDate(this.LOAD_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STORE);

				// BigDecimal

				dos.writeObject(this.CMPFDT);

				// String

				writeString(this.CMPFRS, dos);

				// BigDecimal

				dos.writeObject(this.CMPTDT);

				// String

				writeString(this.CMPFRE, dos);

				// java.util.Date

				writeDate(this.LOAD_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STORE=" + String.valueOf(STORE));
			sb.append(",CMPFDT=" + String.valueOf(CMPFDT));
			sb.append(",CMPFRS=" + CMPFRS);
			sb.append(",CMPTDT=" + String.valueOf(CMPTDT));
			sb.append(",CMPFRE=" + CMPFRE);
			sb.append(",LOAD_DATE=" + String.valueOf(LOAD_DATE));
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (STORE == null) {
				sb.append("<null>");
			} else {
				sb.append(STORE);
			}

			sb.append("|");

			if (CMPFDT == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPFDT);
			}

			sb.append("|");

			if (CMPFRS == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPFRS);
			}

			sb.append("|");

			if (CMPTDT == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPTDT);
			}

			sb.append("|");

			if (CMPFRE == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPFRE);
			}

			sb.append("|");

			if (LOAD_DATE == null) {
				sb.append("<null>");
			} else {
				sb.append(LOAD_DATE);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfTBLDSTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal STORE;

		public BigDecimal getSTORE() {
			return this.STORE;
		}

		public Boolean STOREIsNullable() {
			return true;
		}

		public Boolean STOREIsKey() {
			return false;
		}

		public Integer STORELength() {
			return null;
		}

		public Integer STOREPrecision() {
			return null;
		}

		public String STOREDefault() {

			return "";

		}

		public String STOREComment() {

			return "";

		}

		public String STOREPattern() {

			return "";

		}

		public String STOREOriginalDbColumnName() {

			return "STORE";

		}

		public BigDecimal CMPFDT;

		public BigDecimal getCMPFDT() {
			return this.CMPFDT;
		}

		public Boolean CMPFDTIsNullable() {
			return true;
		}

		public Boolean CMPFDTIsKey() {
			return false;
		}

		public Integer CMPFDTLength() {
			return null;
		}

		public Integer CMPFDTPrecision() {
			return null;
		}

		public String CMPFDTDefault() {

			return "";

		}

		public String CMPFDTComment() {

			return "";

		}

		public String CMPFDTPattern() {

			return "";

		}

		public String CMPFDTOriginalDbColumnName() {

			return "CMPFDT";

		}

		public String CMPFRS;

		public String getCMPFRS() {
			return this.CMPFRS;
		}

		public Boolean CMPFRSIsNullable() {
			return true;
		}

		public Boolean CMPFRSIsKey() {
			return false;
		}

		public Integer CMPFRSLength() {
			return null;
		}

		public Integer CMPFRSPrecision() {
			return null;
		}

		public String CMPFRSDefault() {

			return null;

		}

		public String CMPFRSComment() {

			return "";

		}

		public String CMPFRSPattern() {

			return "";

		}

		public String CMPFRSOriginalDbColumnName() {

			return "CMPFRS";

		}

		public BigDecimal CMPTDT;

		public BigDecimal getCMPTDT() {
			return this.CMPTDT;
		}

		public Boolean CMPTDTIsNullable() {
			return true;
		}

		public Boolean CMPTDTIsKey() {
			return false;
		}

		public Integer CMPTDTLength() {
			return null;
		}

		public Integer CMPTDTPrecision() {
			return null;
		}

		public String CMPTDTDefault() {

			return "";

		}

		public String CMPTDTComment() {

			return "";

		}

		public String CMPTDTPattern() {

			return "";

		}

		public String CMPTDTOriginalDbColumnName() {

			return "CMPTDT";

		}

		public String CMPFRE;

		public String getCMPFRE() {
			return this.CMPFRE;
		}

		public Boolean CMPFREIsNullable() {
			return true;
		}

		public Boolean CMPFREIsKey() {
			return false;
		}

		public Integer CMPFRELength() {
			return null;
		}

		public Integer CMPFREPrecision() {
			return null;
		}

		public String CMPFREDefault() {

			return null;

		}

		public String CMPFREComment() {

			return "";

		}

		public String CMPFREPattern() {

			return "";

		}

		public String CMPFREOriginalDbColumnName() {

			return "CMPFRE";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STORE = (BigDecimal) dis.readObject();

					this.CMPFDT = (BigDecimal) dis.readObject();

					this.CMPFRS = readString(dis);

					this.CMPTDT = (BigDecimal) dis.readObject();

					this.CMPFRE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STORE = (BigDecimal) dis.readObject();

					this.CMPFDT = (BigDecimal) dis.readObject();

					this.CMPFRS = readString(dis);

					this.CMPTDT = (BigDecimal) dis.readObject();

					this.CMPFRE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STORE);

				// BigDecimal

				dos.writeObject(this.CMPFDT);

				// String

				writeString(this.CMPFRS, dos);

				// BigDecimal

				dos.writeObject(this.CMPTDT);

				// String

				writeString(this.CMPFRE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STORE);

				// BigDecimal

				dos.writeObject(this.CMPFDT);

				// String

				writeString(this.CMPFRS, dos);

				// BigDecimal

				dos.writeObject(this.CMPTDT);

				// String

				writeString(this.CMPFRE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STORE=" + String.valueOf(STORE));
			sb.append(",CMPFDT=" + String.valueOf(CMPFDT));
			sb.append(",CMPFRS=" + CMPFRS);
			sb.append(",CMPTDT=" + String.valueOf(CMPTDT));
			sb.append(",CMPFRE=" + CMPFRE);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (STORE == null) {
				sb.append("<null>");
			} else {
				sb.append(STORE);
			}

			sb.append("|");

			if (CMPFDT == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPFDT);
			}

			sb.append("|");

			if (CMPFRS == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPFRS);
			}

			sb.append("|");

			if (CMPTDT == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPTDT);
			}

			sb.append("|");

			if (CMPFRE == null) {
				sb.append("<null>");
			} else {
				sb.append(CMPFRE);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				copyOfTBLDSTStruct copyOfTBLDST = new copyOfTBLDSTStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "copyOfTBLDST");

				int tos_count_tDBOutput_3 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBOutput_3", "tDBOutput_3", "tSnowflakeOutput");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBOutput_3 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBOutput_3 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBOutput_3 = (String) (restRequest_tDBOutput_3 != null
						? restRequest_tDBOutput_3.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBOutput_3 = new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBOutput_3 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBOutput_3 = null;

				org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_3 = (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_3
						.createRuntimeProperties();
				props_tDBOutput_3.setValue("tableAction",
						org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);

				props_tDBOutput_3.setValue("outputAction",
						org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);

				props_tDBOutput_3.setValue("convertColumnsAndTableToUppercase", true);

				props_tDBOutput_3.setValue("convertEmptyStringsToNull", false);

				props_tDBOutput_3.setValue("useSchemaDatePattern", false);

				props_tDBOutput_3.setValue("dieOnError", false);

				class SchemaSettingTool_tDBOutput_3_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_3_1_fisrt sst_tDBOutput_3_1_fisrt = new SchemaSettingTool_tDBOutput_3_1_fisrt();

				props_tDBOutput_3.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_3_1_fisrt.getSchemaValue()));

				props_tDBOutput_3.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_3.connection.setValue("useCustomRegion", false);

				props_tDBOutput_3.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_3.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_3.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBOutput_3.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBOutput_3.table.setValue("tableName", "STORE_COMP_DATES_VSCOMP");

				props_tDBOutput_3.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_3.table.connection.setValue("useCustomRegion", false);

				props_tDBOutput_3.table.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_3.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_3.table.connection.referencedComponent.setValue("componentInstanceId",
						"tDBConnection_1");

				props_tDBOutput_3.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBOutput_3_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"copyOfTBLDST\",\"fields\":[{", s);

						a("\"name\":\"STORE\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"STORE\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"STORE\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CMPFDT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CMPFDT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CMPFDT\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CMPFRS\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"CMPFRS\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CMPFRS\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CMPTDT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"CMPTDT\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CMPTDT\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CMPFRE\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"CMPFRE\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CMPFRE\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"LOAD_DATE\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"LOAD_DATE\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"copyOfTBLDST\",\"di.table.label\":\"copyOfTBLDST\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_3_2_fisrt sst_tDBOutput_3_2_fisrt = new SchemaSettingTool_tDBOutput_3_2_fisrt();

				props_tDBOutput_3.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_3_2_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_3.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_3 = props_tDBOutput_3.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_3 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_3 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_3.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_3);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_3.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_3 = props_tDBOutput_3.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_3 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_3 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_3.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_3);
					}
				}
				globalMap.put("tDBOutput_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_3);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBOutput_3 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBOutput_3_MAPPINGS_URL", mappings_url_tDBOutput_3);

				org.talend.components.api.container.RuntimeContainer container_tDBOutput_3 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBOutput_3";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBOutput_3 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBOutput_3 = null;
				topology_tDBOutput_3 = org.talend.components.api.component.ConnectorTopology.INCOMING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_3 = def_tDBOutput_3.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_3,
						topology_tDBOutput_3);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_3 = def_tDBOutput_3
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBOutput_3.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBOutput_3 = componentRuntime_tDBOutput_3
						.initialize(container_tDBOutput_3, props_tDBOutput_3);

				if (initVr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBOutput_3.getMessage());
				}

				if (componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBOutput_3;
					compDriverInitialization_tDBOutput_3.runAtDriver(container_tDBOutput_3);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_3 = null;
				if (componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBOutput_3 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBOutput_3;
					if (doesNodeBelongToRequest_tDBOutput_3) {
						org.talend.daikon.properties.ValidationResult vr_tDBOutput_3 = sourceOrSink_tDBOutput_3
								.validate(container_tDBOutput_3);
						if (vr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBOutput_3.getMessage());
						}
					}
				}

				org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_3 = null;
				if (sourceOrSink_tDBOutput_3 instanceof org.talend.components.api.component.runtime.Sink) {
					org.talend.components.api.component.runtime.Sink sink_tDBOutput_3 = (org.talend.components.api.component.runtime.Sink) sourceOrSink_tDBOutput_3;
					org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_3 = sink_tDBOutput_3
							.createWriteOperation();
					if (doesNodeBelongToRequest_tDBOutput_3) {
						writeOperation_tDBOutput_3.initialize(container_tDBOutput_3);
					}
					writer_tDBOutput_3 = writeOperation_tDBOutput_3.createWriter(container_tDBOutput_3);
					if (doesNodeBelongToRequest_tDBOutput_3) {
						writer_tDBOutput_3.open("tDBOutput_3");
					}

					resourceMap.put("writer_tDBOutput_3", writer_tDBOutput_3);
				} // end of "sourceOrSink_tDBOutput_3 instanceof ...Sink"
				org.talend.components.api.component.Connector c_tDBOutput_3 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_3
						.getAvailableConnectors(null, false)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBOutput_3 = currentConnector;
						break;
					}
				}
				org.apache.avro.Schema designSchema_tDBOutput_3 = props_tDBOutput_3.getSchema(c_tDBOutput_3, false);
				incomingEnforcer_tDBOutput_3 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(
						designSchema_tDBOutput_3);

				java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_3 = new java.util.ArrayList<Object>();
				java.util.Iterator outgoingMainRecordsIt_tDBOutput_3 = null;

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "row7");

				int tos_count_tMap_4 = 0;

				if (log.isDebugEnabled())
					log.debug("tMap_4 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tMap_4 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tMap_4 = new StringBuilder();
							log4jParamters_tMap_4.append("Parameters:");
							log4jParamters_tMap_4.append("LINK_STYLE" + " = " + "AUTO");
							log4jParamters_tMap_4.append(" | ");
							log4jParamters_tMap_4.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
							log4jParamters_tMap_4.append(" | ");
							log4jParamters_tMap_4.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
							log4jParamters_tMap_4.append(" | ");
							log4jParamters_tMap_4.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
							log4jParamters_tMap_4.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tMap_4 - " + (log4jParamters_tMap_4));
						}
					}
					new BytesLimit65535_tMap_4().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tMap_4", "tMap_4", "tMap");
					talendJobLogProcess(globalMap);
				}

// ###############################
// # Lookup's keys initialization
				int count_row7_tMap_4 = 0;

// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
					java.util.Date var1;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_copyOfTBLDST_tMap_4 = 0;

				copyOfTBLDSTStruct copyOfTBLDST_tmp = new copyOfTBLDSTStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_4 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileInputDelimited_4 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileInputDelimited_4 = new StringBuilder();
							log4jParamters_tFileInputDelimited_4.append("Parameters:");
							log4jParamters_tFileInputDelimited_4
									.append("FILENAME" + " = " + "\"/data/talend/data_repository/VSCOMP.zip\"");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("CSV_OPTION" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("ROWSEPARATOR" + " = " + "\"\\n\"");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("FIELDSEPARATOR" + " = " + "\",\"");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("HEADER" + " = " + "1");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("LIMIT" + " = " + "");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("REMOVE_EMPTY_ROW" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("UNCOMPRESS" + " = " + "true");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("DIE_ON_ERROR" + " = " + "true");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("ADVANCED_SEPARATOR" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("TRIMALL" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("TRIMSELECT" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STORE") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("CMPFDT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("CMPFRS")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("CMPTDT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("CMPFRE") + "}]");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("CHECK_FIELDS_NUM" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("CHECK_DATE" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("ENCODING" + " = " + "\"ISO-8859-15\"");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("SPLITRECORD" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							log4jParamters_tFileInputDelimited_4.append("ENABLE_DECODE" + " = " + "false");
							log4jParamters_tFileInputDelimited_4.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileInputDelimited_4 - " + (log4jParamters_tFileInputDelimited_4));
						}
					}
					new BytesLimit65535_tFileInputDelimited_4().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileInputDelimited_4", "tFileInputDelimited_4", "tFileInputDelimited");
					talendJobLogProcess(globalMap);
				}

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "/data/talend/data_repository/VSCOMP.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_4 = null;
					try {
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_4 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_4));
						} else {
							zis_tFileInputDelimited_4 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(new java.io.FileInputStream(
											String.valueOf(filename_tFileInputDelimited_4))));
						}
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());

						throw e;

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_4 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_4 = zis_tFileInputDelimited_4.getNextEntry();
						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());

							throw e;

						}
						if (entry_tFileInputDelimited_4 == null) {
							break;
						}
						if (entry_tFileInputDelimited_4.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_4, "ISO-8859-15", ",", "\n", false, 1, 0,

									limit_tFileInputDelimited_4, -1, false);
						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());

							throw e;

						}

						log.info("tFileInputDelimited_4 - Retrieving records from the datasource.");

						while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
							rowstate_tFileInputDelimited_4.reset();

							row7 = null;

							boolean whetherReject_tFileInputDelimited_4 = false;
							row7 = new row7Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_4 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_4 = 0;

								temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
								if (temp.length() > 0) {

									try {

										row7.STORE = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_4) {
										globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
												ex_tFileInputDelimited_4.getMessage());
										rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"STORE", "row7", temp, ex_tFileInputDelimited_4),
												ex_tFileInputDelimited_4));
									}

								} else {

									row7.STORE = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
								if (temp.length() > 0) {

									try {

										row7.CMPFDT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_4) {
										globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
												ex_tFileInputDelimited_4.getMessage());
										rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CMPFDT", "row7", temp, ex_tFileInputDelimited_4),
												ex_tFileInputDelimited_4));
									}

								} else {

									row7.CMPFDT = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								row7.CMPFRS = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

								columnIndexWithD_tFileInputDelimited_4 = 3;

								temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
								if (temp.length() > 0) {

									try {

										row7.CMPTDT = ParserUtils.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_4) {
										globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
												ex_tFileInputDelimited_4.getMessage());
										rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CMPTDT", "row7", temp, ex_tFileInputDelimited_4),
												ex_tFileInputDelimited_4));
									}

								} else {

									row7.CMPTDT = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								row7.CMPFRE = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

								if (rowstate_tFileInputDelimited_4.getException() != null) {
									throw rowstate_tFileInputDelimited_4.getException();
								}

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputDelimited_4 = true;

								throw (e);

							}

							log.debug("tFileInputDelimited_4 - Retrieving the record "
									+ fid_tFileInputDelimited_4.getRowNumber() + ".");

							/**
							 * [tFileInputDelimited_4 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_4 main ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							tos_count_tFileInputDelimited_4++;

							/**
							 * [tFileInputDelimited_4 main ] stop
							 */

							/**
							 * [tFileInputDelimited_4 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							/**
							 * [tFileInputDelimited_4 process_data_begin ] stop
							 */
// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tMap_4 main ] start
								 */

								currentComponent = "tMap_4";

								if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

										, "row7", "tFileInputDelimited_4", "tFileInputDelimited_4",
										"tFileInputDelimited", "tMap_4", "tMap_4", "tMap"

								)) {
									talendJobLogProcess(globalMap);
								}

								if (log.isTraceEnabled()) {
									log.trace("row7 - " + (row7 == null ? "" : row7.toLogString()));
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

								// ###############################
								// # Input tables (lookups)

								boolean rejectedInnerJoin_tMap_4 = false;
								boolean mainRowRejected_tMap_4 = false;
								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_4__Struct Var = Var__tMap_4;
									Var.var1 = TalendDate.parseDate("yyyy-MM-dd", TalendDate.getDate("CCYY-MM-DD"));// ###############################
									// ###############################
									// # Output tables

									copyOfTBLDST = null;

// # Output table : 'copyOfTBLDST'
									count_copyOfTBLDST_tMap_4++;

									copyOfTBLDST_tmp.STORE = row7.STORE;
									copyOfTBLDST_tmp.CMPFDT = row7.CMPFDT;
									copyOfTBLDST_tmp.CMPFRS = row7.CMPFRS;
									copyOfTBLDST_tmp.CMPTDT = row7.CMPTDT;
									copyOfTBLDST_tmp.CMPFRE = row7.CMPFRE;
									copyOfTBLDST_tmp.LOAD_DATE = Var.var1;
									copyOfTBLDST = copyOfTBLDST_tmp;
									log.debug("tMap_4 - Outputting the record " + count_copyOfTBLDST_tMap_4
											+ " of the output table 'copyOfTBLDST'.");

// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_4 = false;

								tos_count_tMap_4++;

								/**
								 * [tMap_4 main ] stop
								 */

								/**
								 * [tMap_4 process_data_begin ] start
								 */

								currentComponent = "tMap_4";

								/**
								 * [tMap_4 process_data_begin ] stop
								 */
// Start of branch "copyOfTBLDST"
								if (copyOfTBLDST != null) {

									/**
									 * [tDBOutput_3 main ] start
									 */

									currentComponent = "tDBOutput_3";

									if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

											, "copyOfTBLDST", "tMap_4", "tMap_4", "tMap", "tDBOutput_3", "tDBOutput_3",
											"tSnowflakeOutput"

									)) {
										talendJobLogProcess(globalMap);
									}

									if (log.isTraceEnabled()) {
										log.trace("copyOfTBLDST - "
												+ (copyOfTBLDST == null ? "" : copyOfTBLDST.toLogString()));
									}

									if (incomingEnforcer_tDBOutput_3 != null) {
										incomingEnforcer_tDBOutput_3.createNewRecord();
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3
											.getRuntimeSchema().getField("STORE") != null) {
										incomingEnforcer_tDBOutput_3.put("STORE", copyOfTBLDST.STORE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3
											.getRuntimeSchema().getField("CMPFDT") != null) {
										incomingEnforcer_tDBOutput_3.put("CMPFDT", copyOfTBLDST.CMPFDT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3
											.getRuntimeSchema().getField("CMPFRS") != null) {
										incomingEnforcer_tDBOutput_3.put("CMPFRS", copyOfTBLDST.CMPFRS);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3
											.getRuntimeSchema().getField("CMPTDT") != null) {
										incomingEnforcer_tDBOutput_3.put("CMPTDT", copyOfTBLDST.CMPTDT);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3
											.getRuntimeSchema().getField("CMPFRE") != null) {
										incomingEnforcer_tDBOutput_3.put("CMPFRE", copyOfTBLDST.CMPFRE);
									}
									// skip the put action if the input column doesn't appear in component runtime
									// schema
									if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3
											.getRuntimeSchema().getField("LOAD_DATE") != null) {
										incomingEnforcer_tDBOutput_3.put("LOAD_DATE", copyOfTBLDST.LOAD_DATE);
									}

									org.apache.avro.generic.IndexedRecord data_tDBOutput_3 = null;
									if (incomingEnforcer_tDBOutput_3 != null) {
										data_tDBOutput_3 = incomingEnforcer_tDBOutput_3.getCurrentRecord();
									}

									if (writer_tDBOutput_3 != null && data_tDBOutput_3 != null) {
										writer_tDBOutput_3.write(data_tDBOutput_3);
									}

									nb_line_tDBOutput_3++;

									tos_count_tDBOutput_3++;

									/**
									 * [tDBOutput_3 main ] stop
									 */

									/**
									 * [tDBOutput_3 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_3";

									/**
									 * [tDBOutput_3 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_3 process_data_end ] start
									 */

									currentComponent = "tDBOutput_3";

									/**
									 * [tDBOutput_3 process_data_end ] stop
									 */

								} // End of branch "copyOfTBLDST"

								/**
								 * [tMap_4 process_data_end ] start
								 */

								currentComponent = "tMap_4";

								/**
								 * [tMap_4 process_data_end ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tFileInputDelimited_4 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							/**
							 * [tFileInputDelimited_4 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_4 end ] start
							 */

							currentComponent = "tFileInputDelimited_4";

						}
						nb_line_tFileInputDelimited_4 += fid_tFileInputDelimited_4.getRowNumber();
					}
				} finally {
					if (!((Object) ("/data/talend/data_repository/VSCOMP.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", nb_line_tFileInputDelimited_4);
					}

					log.info("tFileInputDelimited_4- Retrieved records count: " + nb_line_tFileInputDelimited_4 + ".");

				}

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_4 - " + ("Done."));

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_4 - Written records count in the table 'copyOfTBLDST': " + count_copyOfTBLDST_tMap_4
						+ ".");

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "row7", 2, 0,
						"tFileInputDelimited_4", "tFileInputDelimited_4", "tFileInputDelimited", "tMap_4", "tMap_4",
						"tMap", "output")) {
					talendJobLogProcess(globalMap);
				}

				if (log.isDebugEnabled())
					log.debug("tMap_4 - " + ("Done."));

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

// end of generic

				resourceMap.put("finish_tDBOutput_3", Boolean.TRUE);

				java.util.Map<String, Object> resultMap_tDBOutput_3 = null;
				if (writer_tDBOutput_3 != null) {
					org.talend.components.api.component.runtime.Result resultObject_tDBOutput_3 = (org.talend.components.api.component.runtime.Result) writer_tDBOutput_3
							.close();
					resultMap_tDBOutput_3 = writer_tDBOutput_3.getWriteOperation()
							.finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(
									resultObject_tDBOutput_3), container_tDBOutput_3);
				}
				if (resultMap_tDBOutput_3 != null) {
					for (java.util.Map.Entry<String, Object> entry_tDBOutput_3 : resultMap_tDBOutput_3.entrySet()) {
						switch (entry_tDBOutput_3.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tDBOutput_3.setComponentData("tDBOutput_3", "ERROR_MESSAGE",
									entry_tDBOutput_3.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_LINE",
									entry_tDBOutput_3.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_SUCCESS",
									entry_tDBOutput_3.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_REJECT",
									entry_tDBOutput_3.getValue());
							break;
						default:
							StringBuilder studio_key_tDBOutput_3 = new StringBuilder();
							for (int i_tDBOutput_3 = 0; i_tDBOutput_3 < entry_tDBOutput_3.getKey()
									.length(); i_tDBOutput_3++) {
								char ch_tDBOutput_3 = entry_tDBOutput_3.getKey().charAt(i_tDBOutput_3);
								if (Character.isUpperCase(ch_tDBOutput_3) && i_tDBOutput_3 > 0) {
									studio_key_tDBOutput_3.append('_');
								}
								studio_key_tDBOutput_3.append(ch_tDBOutput_3);
							}
							container_tDBOutput_3.setComponentData("tDBOutput_3",
									studio_key_tDBOutput_3.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tDBOutput_3.getValue());
							break;
						}
					}
				}

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "copyOfTBLDST", 2, 0,
						"tMap_4", "tMap_4", "tMap", "tDBOutput_3", "tDBOutput_3", "tSnowflakeOutput", "output")) {
					talendJobLogProcess(globalMap);
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tFileDelete_4Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

// finally of generic

				if (resourceMap.get("finish_tDBOutput_3") == null) {
					if (resourceMap.get("writer_tDBOutput_3") != null) {
						try {
							((org.talend.components.api.component.runtime.Writer) resourceMap.get("writer_tDBOutput_3"))
									.close();
						} catch (java.io.IOException e_tDBOutput_3) {
							String errorMessage_tDBOutput_3 = "failed to release the resource in tDBOutput_3 :"
									+ e_tDBOutput_3.getMessage();
							System.err.println(errorMessage_tDBOutput_3);
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_4 begin ] start
				 */

				ok_Hash.put("tFileDelete_4", false);
				start_Hash.put("tFileDelete_4", System.currentTimeMillis());

				currentComponent = "tFileDelete_4";

				int tos_count_tFileDelete_4 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileDelete_4 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileDelete_4 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileDelete_4 = new StringBuilder();
							log4jParamters_tFileDelete_4.append("Parameters:");
							log4jParamters_tFileDelete_4
									.append("PATH" + " = " + "\"/data/talend/data_repository/VSCOMP.zip\"");
							log4jParamters_tFileDelete_4.append(" | ");
							log4jParamters_tFileDelete_4.append("FAILON" + " = " + "true");
							log4jParamters_tFileDelete_4.append(" | ");
							log4jParamters_tFileDelete_4.append("FOLDER_FILE" + " = " + "true");
							log4jParamters_tFileDelete_4.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileDelete_4 - " + (log4jParamters_tFileDelete_4));
						}
					}
					new BytesLimit65535_tFileDelete_4().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tFileDelete_4", "tFileDelete_4", "tFileDelete");
					talendJobLogProcess(globalMap);
				}

				/**
				 * [tFileDelete_4 begin ] stop
				 */

				/**
				 * [tFileDelete_4 main ] start
				 */

				currentComponent = "tFileDelete_4";

				final StringBuffer log4jSb_tFileDelete_4 = new StringBuffer();

				class DeleteFoldertFileDelete_4 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File path_tFileDelete_4 = new java.io.File("/data/talend/data_repository/VSCOMP.zip");
				if (path_tFileDelete_4.exists()) {
					if (path_tFileDelete_4.isFile()) {
						if (path_tFileDelete_4.delete()) {
							globalMap.put("tFileDelete_4_CURRENT_STATUS", "File deleted.");
							log.info("tFileDelete_4 - File : " + path_tFileDelete_4.getAbsolutePath() + " is deleted.");
						} else {
							globalMap.put("tFileDelete_4_CURRENT_STATUS", "No file deleted.");
							throw new RuntimeException(
									"The file " + path_tFileDelete_4.getAbsolutePath() + " can't be deleted.");
						}
					} else if (path_tFileDelete_4.isDirectory()) {
						DeleteFoldertFileDelete_4 dftFileDelete_4 = new DeleteFoldertFileDelete_4();
						if (dftFileDelete_4.delete(path_tFileDelete_4)) {
							globalMap.put("tFileDelete_4_CURRENT_STATUS", "Path deleted.");
							log.info("tFileDelete_4 - Directory : " + path_tFileDelete_4.getAbsolutePath()
									+ " is deleted.");
						} else {
							globalMap.put("tFileDelete_4_CURRENT_STATUS", "No path deleted.");
							throw new RuntimeException(
									"The directory " + path_tFileDelete_4.getAbsolutePath() + " can not be deleted.");
						}
					}
				} else {
					globalMap.put("tFileDelete_4_CURRENT_STATUS", "File or path does not exist or is invalid.");
					throw new RuntimeException("File or path does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_4_DELETE_PATH", "/data/talend/data_repository/VSCOMP.zip");

				tos_count_tFileDelete_4++;

				/**
				 * [tFileDelete_4 main ] stop
				 */

				/**
				 * [tFileDelete_4 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_4";

				/**
				 * [tFileDelete_4 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_4 process_data_end ] start
				 */

				currentComponent = "tFileDelete_4";

				/**
				 * [tFileDelete_4 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_4 end ] start
				 */

				currentComponent = "tFileDelete_4";

				if (log.isDebugEnabled())
					log.debug("tFileDelete_4 - " + ("Done."));

				ok_Hash.put("tFileDelete_4", true);
				end_Hash.put("tFileDelete_4", System.currentTimeMillis());

				/**
				 * [tFileDelete_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_4 finally ] start
				 */

				currentComponent = "tFileDelete_4";

				/**
				 * [tFileDelete_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_12");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_12 begin ] start
				 */

				ok_Hash.put("tDBRow_12", false);
				start_Hash.put("tDBRow_12", System.currentTimeMillis());

				currentComponent = "tDBRow_12";

				int tos_count_tDBRow_12 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBRow_12", "tDBRow_12", "tSnowflakeRow");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBRow_12 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBRow_12 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBRow_12 = (String) (restRequest_tDBRow_12 != null
						? restRequest_tDBRow_12.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBRow_12 = new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBRow_12 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBRow_12 = null;

				org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_12 = (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_12
						.createRuntimeProperties();
				props_tDBRow_12.setValue("query",
						"\nDELETE from STORE_INFORMATION_TBLSTR\nWHERE DATELOADED = CURRENT_DATE() - 1\n\n");

				props_tDBRow_12.setValue("dieOnError", true);

				props_tDBRow_12.setValue("usePreparedStatement", false);

				props_tDBRow_12.setValue("commitCount", 10000);

				class SchemaSettingTool_tDBRow_12_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_12_1_fisrt sst_tDBRow_12_1_fisrt = new SchemaSettingTool_tDBRow_12_1_fisrt();

				props_tDBRow_12.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_12_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_12_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_12_2_fisrt sst_tDBRow_12_2_fisrt = new SchemaSettingTool_tDBRow_12_2_fisrt();

				props_tDBRow_12.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_12_2_fisrt.getSchemaValue()));

				props_tDBRow_12.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_12.connection.setValue("useCustomRegion", false);

				props_tDBRow_12.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_12.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_12.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_12.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBRow_12.table.setValue("tableName", "");

				props_tDBRow_12.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBRow_12.table.connection.setValue("useCustomRegion", false);

				props_tDBRow_12.table.connection.userPassword.setValue("useAuth", false);

				props_tDBRow_12.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_12.table.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_12.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBRow_12_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_12_3_fisrt sst_tDBRow_12_3_fisrt = new SchemaSettingTool_tDBRow_12_3_fisrt();

				props_tDBRow_12.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_12_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_12.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_12 = props_tDBRow_12.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_12 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_12 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_12 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_12.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_12);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_12.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_12 = props_tDBRow_12.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_12 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_12 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_12 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_12.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBRow_12);
					}
				}
				globalMap.put("tDBRow_12_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_12);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBRow_12 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_12_MAPPINGS_URL", mappings_url_tDBRow_12);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_12 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_12";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_12 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_12 = null;
				topology_tDBRow_12 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_12 = def_tDBRow_12.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_12,
						topology_tDBRow_12);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_12 = def_tDBRow_12
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_12 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_12.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_12 = componentRuntime_tDBRow_12
						.initialize(container_tDBRow_12, props_tDBRow_12);

				if (initVr_tDBRow_12.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_12.getMessage());
				}

				if (componentRuntime_tDBRow_12 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_12 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_12;
					compDriverInitialization_tDBRow_12.runAtDriver(container_tDBRow_12);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_12 = null;
				if (componentRuntime_tDBRow_12 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_12 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_12;
					if (doesNodeBelongToRequest_tDBRow_12) {
						org.talend.daikon.properties.ValidationResult vr_tDBRow_12 = sourceOrSink_tDBRow_12
								.validate(container_tDBRow_12);
						if (vr_tDBRow_12.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBRow_12.getMessage());
						}
					}
				}

				/**
				 * [tDBRow_12 begin ] stop
				 */

				/**
				 * [tDBRow_12 main ] start
				 */

				currentComponent = "tDBRow_12";

				tos_count_tDBRow_12++;

				/**
				 * [tDBRow_12 main ] stop
				 */

				/**
				 * [tDBRow_12 process_data_begin ] start
				 */

				currentComponent = "tDBRow_12";

				/**
				 * [tDBRow_12 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_12 process_data_end ] start
				 */

				currentComponent = "tDBRow_12";

				/**
				 * [tDBRow_12 process_data_end ] stop
				 */

				/**
				 * [tDBRow_12 end ] start
				 */

				currentComponent = "tDBRow_12";

// end of generic

				resourceMap.put("finish_tDBRow_12", Boolean.TRUE);

				ok_Hash.put("tDBRow_12", true);
				end_Hash.put("tDBRow_12", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBRow_12 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_12 finally ] start
				 */

				currentComponent = "tDBRow_12";

// finally of generic

				if (resourceMap.get("finish_tDBRow_12") == null) {
				}

				/**
				 * [tDBRow_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_12_SUBPROCESS_STATE", 1);
	}

	public static class TBLSTR_outputStruct implements routines.system.IPersistableRow<TBLSTR_outputStruct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal STRNUM;

		public BigDecimal getSTRNUM() {
			return this.STRNUM;
		}

		public Boolean STRNUMIsNullable() {
			return true;
		}

		public Boolean STRNUMIsKey() {
			return false;
		}

		public Integer STRNUMLength() {
			return null;
		}

		public Integer STRNUMPrecision() {
			return null;
		}

		public String STRNUMDefault() {

			return "";

		}

		public String STRNUMComment() {

			return "";

		}

		public String STRNUMPattern() {

			return "";

		}

		public String STRNUMOriginalDbColumnName() {

			return "STRNUM";

		}

		public String STRNAM;

		public String getSTRNAM() {
			return this.STRNAM;
		}

		public Boolean STRNAMIsNullable() {
			return true;
		}

		public Boolean STRNAMIsKey() {
			return false;
		}

		public Integer STRNAMLength() {
			return null;
		}

		public Integer STRNAMPrecision() {
			return null;
		}

		public String STRNAMDefault() {

			return null;

		}

		public String STRNAMComment() {

			return "";

		}

		public String STRNAMPattern() {

			return "";

		}

		public String STRNAMOriginalDbColumnName() {

			return "STRNAM";

		}

		public String STADD1;

		public String getSTADD1() {
			return this.STADD1;
		}

		public Boolean STADD1IsNullable() {
			return true;
		}

		public Boolean STADD1IsKey() {
			return false;
		}

		public Integer STADD1Length() {
			return null;
		}

		public Integer STADD1Precision() {
			return null;
		}

		public String STADD1Default() {

			return null;

		}

		public String STADD1Comment() {

			return "";

		}

		public String STADD1Pattern() {

			return "";

		}

		public String STADD1OriginalDbColumnName() {

			return "STADD1";

		}

		public String STADD2;

		public String getSTADD2() {
			return this.STADD2;
		}

		public Boolean STADD2IsNullable() {
			return true;
		}

		public Boolean STADD2IsKey() {
			return false;
		}

		public Integer STADD2Length() {
			return null;
		}

		public Integer STADD2Precision() {
			return null;
		}

		public String STADD2Default() {

			return null;

		}

		public String STADD2Comment() {

			return "";

		}

		public String STADD2Pattern() {

			return "";

		}

		public String STADD2OriginalDbColumnName() {

			return "STADD2";

		}

		public String STADD3;

		public String getSTADD3() {
			return this.STADD3;
		}

		public Boolean STADD3IsNullable() {
			return true;
		}

		public Boolean STADD3IsKey() {
			return false;
		}

		public Integer STADD3Length() {
			return null;
		}

		public Integer STADD3Precision() {
			return null;
		}

		public String STADD3Default() {

			return null;

		}

		public String STADD3Comment() {

			return "";

		}

		public String STADD3Pattern() {

			return "";

		}

		public String STADD3OriginalDbColumnName() {

			return "STADD3";

		}

		public String STCITY;

		public String getSTCITY() {
			return this.STCITY;
		}

		public Boolean STCITYIsNullable() {
			return true;
		}

		public Boolean STCITYIsKey() {
			return false;
		}

		public Integer STCITYLength() {
			return null;
		}

		public Integer STCITYPrecision() {
			return null;
		}

		public String STCITYDefault() {

			return null;

		}

		public String STCITYComment() {

			return "";

		}

		public String STCITYPattern() {

			return "";

		}

		public String STCITYOriginalDbColumnName() {

			return "STCITY";

		}

		public String STPVST;

		public String getSTPVST() {
			return this.STPVST;
		}

		public Boolean STPVSTIsNullable() {
			return true;
		}

		public Boolean STPVSTIsKey() {
			return false;
		}

		public Integer STPVSTLength() {
			return null;
		}

		public Integer STPVSTPrecision() {
			return null;
		}

		public String STPVSTDefault() {

			return null;

		}

		public String STPVSTComment() {

			return "";

		}

		public String STPVSTPattern() {

			return "";

		}

		public String STPVSTOriginalDbColumnName() {

			return "STPVST";

		}

		public String STCNTY;

		public String getSTCNTY() {
			return this.STCNTY;
		}

		public Boolean STCNTYIsNullable() {
			return true;
		}

		public Boolean STCNTYIsKey() {
			return false;
		}

		public Integer STCNTYLength() {
			return null;
		}

		public Integer STCNTYPrecision() {
			return null;
		}

		public String STCNTYDefault() {

			return null;

		}

		public String STCNTYComment() {

			return "";

		}

		public String STCNTYPattern() {

			return "";

		}

		public String STCNTYOriginalDbColumnName() {

			return "STCNTY";

		}

		public String STCTRY;

		public String getSTCTRY() {
			return this.STCTRY;
		}

		public Boolean STCTRYIsNullable() {
			return true;
		}

		public Boolean STCTRYIsKey() {
			return false;
		}

		public Integer STCTRYLength() {
			return null;
		}

		public Integer STCTRYPrecision() {
			return null;
		}

		public String STCTRYDefault() {

			return null;

		}

		public String STCTRYComment() {

			return "";

		}

		public String STCTRYPattern() {

			return "";

		}

		public String STCTRYOriginalDbColumnName() {

			return "STCTRY";

		}

		public String STZIP;

		public String getSTZIP() {
			return this.STZIP;
		}

		public Boolean STZIPIsNullable() {
			return true;
		}

		public Boolean STZIPIsKey() {
			return false;
		}

		public Integer STZIPLength() {
			return null;
		}

		public Integer STZIPPrecision() {
			return null;
		}

		public String STZIPDefault() {

			return null;

		}

		public String STZIPComment() {

			return "";

		}

		public String STZIPPattern() {

			return "";

		}

		public String STZIPOriginalDbColumnName() {

			return "STZIP";

		}

		public String STPHON;

		public String getSTPHON() {
			return this.STPHON;
		}

		public Boolean STPHONIsNullable() {
			return true;
		}

		public Boolean STPHONIsKey() {
			return false;
		}

		public Integer STPHONLength() {
			return null;
		}

		public Integer STPHONPrecision() {
			return null;
		}

		public String STPHONDefault() {

			return null;

		}

		public String STPHONComment() {

			return "";

		}

		public String STPHONPattern() {

			return "";

		}

		public String STPHONOriginalDbColumnName() {

			return "STPHON";

		}

		public String STFAXN;

		public String getSTFAXN() {
			return this.STFAXN;
		}

		public Boolean STFAXNIsNullable() {
			return true;
		}

		public Boolean STFAXNIsKey() {
			return false;
		}

		public Integer STFAXNLength() {
			return null;
		}

		public Integer STFAXNPrecision() {
			return null;
		}

		public String STFAXNDefault() {

			return null;

		}

		public String STFAXNComment() {

			return "";

		}

		public String STFAXNPattern() {

			return "";

		}

		public String STFAXNOriginalDbColumnName() {

			return "STFAXN";

		}

		public String STSHRT;

		public String getSTSHRT() {
			return this.STSHRT;
		}

		public Boolean STSHRTIsNullable() {
			return true;
		}

		public Boolean STSHRTIsKey() {
			return false;
		}

		public Integer STSHRTLength() {
			return null;
		}

		public Integer STSHRTPrecision() {
			return null;
		}

		public String STSHRTDefault() {

			return null;

		}

		public String STSHRTComment() {

			return "";

		}

		public String STSHRTPattern() {

			return "";

		}

		public String STSHRTOriginalDbColumnName() {

			return "STSHRT";

		}

		public BigDecimal REGNUM;

		public BigDecimal getREGNUM() {
			return this.REGNUM;
		}

		public Boolean REGNUMIsNullable() {
			return true;
		}

		public Boolean REGNUMIsKey() {
			return false;
		}

		public Integer REGNUMLength() {
			return null;
		}

		public Integer REGNUMPrecision() {
			return null;
		}

		public String REGNUMDefault() {

			return "";

		}

		public String REGNUMComment() {

			return "";

		}

		public String REGNUMPattern() {

			return "";

		}

		public String REGNUMOriginalDbColumnName() {

			return "REGNUM";

		}

		public String STMNGR;

		public String getSTMNGR() {
			return this.STMNGR;
		}

		public Boolean STMNGRIsNullable() {
			return true;
		}

		public Boolean STMNGRIsKey() {
			return false;
		}

		public Integer STMNGRLength() {
			return null;
		}

		public Integer STMNGRPrecision() {
			return null;
		}

		public String STMNGRDefault() {

			return null;

		}

		public String STMNGRComment() {

			return "";

		}

		public String STMNGRPattern() {

			return "";

		}

		public String STMNGROriginalDbColumnName() {

			return "STMNGR";

		}

		public BigDecimal STSDAT;

		public BigDecimal getSTSDAT() {
			return this.STSDAT;
		}

		public Boolean STSDATIsNullable() {
			return true;
		}

		public Boolean STSDATIsKey() {
			return false;
		}

		public Integer STSDATLength() {
			return null;
		}

		public Integer STSDATPrecision() {
			return null;
		}

		public String STSDATDefault() {

			return "";

		}

		public String STSDATComment() {

			return "";

		}

		public String STSDATPattern() {

			return "";

		}

		public String STSDATOriginalDbColumnName() {

			return "STSDAT";

		}

		public BigDecimal STRETL;

		public BigDecimal getSTRETL() {
			return this.STRETL;
		}

		public Boolean STRETLIsNullable() {
			return true;
		}

		public Boolean STRETLIsKey() {
			return false;
		}

		public Integer STRETLLength() {
			return null;
		}

		public Integer STRETLPrecision() {
			return null;
		}

		public String STRETLDefault() {

			return "";

		}

		public String STRETLComment() {

			return "";

		}

		public String STRETLPattern() {

			return "";

		}

		public String STRETLOriginalDbColumnName() {

			return "STRETL";

		}

		public String STPOLL;

		public String getSTPOLL() {
			return this.STPOLL;
		}

		public Boolean STPOLLIsNullable() {
			return true;
		}

		public Boolean STPOLLIsKey() {
			return false;
		}

		public Integer STPOLLLength() {
			return null;
		}

		public Integer STPOLLPrecision() {
			return null;
		}

		public String STPOLLDefault() {

			return null;

		}

		public String STPOLLComment() {

			return "";

		}

		public String STPOLLPattern() {

			return "";

		}

		public String STPOLLOriginalDbColumnName() {

			return "STPOLL";

		}

		public String STSNDY;

		public String getSTSNDY() {
			return this.STSNDY;
		}

		public Boolean STSNDYIsNullable() {
			return true;
		}

		public Boolean STSNDYIsKey() {
			return false;
		}

		public Integer STSNDYLength() {
			return null;
		}

		public Integer STSNDYPrecision() {
			return null;
		}

		public String STSNDYDefault() {

			return null;

		}

		public String STSNDYComment() {

			return "";

		}

		public String STSNDYPattern() {

			return "";

		}

		public String STSNDYOriginalDbColumnName() {

			return "STSNDY";

		}

		public String STRHDO;

		public String getSTRHDO() {
			return this.STRHDO;
		}

		public Boolean STRHDOIsNullable() {
			return true;
		}

		public Boolean STRHDOIsKey() {
			return false;
		}

		public Integer STRHDOLength() {
			return null;
		}

		public Integer STRHDOPrecision() {
			return null;
		}

		public String STRHDODefault() {

			return null;

		}

		public String STRHDOComment() {

			return "";

		}

		public String STRHDOPattern() {

			return "";

		}

		public String STRHDOOriginalDbColumnName() {

			return "STRHDO";

		}

		public BigDecimal STBACT;

		public BigDecimal getSTBACT() {
			return this.STBACT;
		}

		public Boolean STBACTIsNullable() {
			return true;
		}

		public Boolean STBACTIsKey() {
			return false;
		}

		public Integer STBACTLength() {
			return null;
		}

		public Integer STBACTPrecision() {
			return null;
		}

		public String STBACTDefault() {

			return "";

		}

		public String STBACTComment() {

			return "";

		}

		public String STBACTPattern() {

			return "";

		}

		public String STBACTOriginalDbColumnName() {

			return "STBACT";

		}

		public BigDecimal STRWHS;

		public BigDecimal getSTRWHS() {
			return this.STRWHS;
		}

		public Boolean STRWHSIsNullable() {
			return true;
		}

		public Boolean STRWHSIsKey() {
			return false;
		}

		public Integer STRWHSLength() {
			return null;
		}

		public Integer STRWHSPrecision() {
			return null;
		}

		public String STRWHSDefault() {

			return "";

		}

		public String STRWHSComment() {

			return "";

		}

		public String STRWHSPattern() {

			return "";

		}

		public String STRWHSOriginalDbColumnName() {

			return "STRWHS";

		}

		public BigDecimal STRDST;

		public BigDecimal getSTRDST() {
			return this.STRDST;
		}

		public Boolean STRDSTIsNullable() {
			return true;
		}

		public Boolean STRDSTIsKey() {
			return false;
		}

		public Integer STRDSTLength() {
			return null;
		}

		public Integer STRDSTPrecision() {
			return null;
		}

		public String STRDSTDefault() {

			return "";

		}

		public String STRDSTComment() {

			return "";

		}

		public String STRDSTPattern() {

			return "";

		}

		public String STRDSTOriginalDbColumnName() {

			return "STRDST";

		}

		public String STRCMP;

		public String getSTRCMP() {
			return this.STRCMP;
		}

		public Boolean STRCMPIsNullable() {
			return true;
		}

		public Boolean STRCMPIsKey() {
			return false;
		}

		public Integer STRCMPLength() {
			return null;
		}

		public Integer STRCMPPrecision() {
			return null;
		}

		public String STRCMPDefault() {

			return null;

		}

		public String STRCMPComment() {

			return "";

		}

		public String STRCMPPattern() {

			return "";

		}

		public String STRCMPOriginalDbColumnName() {

			return "STRCMP";

		}

		public String STRTYP;

		public String getSTRTYP() {
			return this.STRTYP;
		}

		public Boolean STRTYPIsNullable() {
			return true;
		}

		public Boolean STRTYPIsKey() {
			return false;
		}

		public Integer STRTYPLength() {
			return null;
		}

		public Integer STRTYPPrecision() {
			return null;
		}

		public String STRTYPDefault() {

			return null;

		}

		public String STRTYPComment() {

			return "";

		}

		public String STRTYPPattern() {

			return "";

		}

		public String STRTYPOriginalDbColumnName() {

			return "STRTYP";

		}

		public String STOUTQ;

		public String getSTOUTQ() {
			return this.STOUTQ;
		}

		public Boolean STOUTQIsNullable() {
			return true;
		}

		public Boolean STOUTQIsKey() {
			return false;
		}

		public Integer STOUTQLength() {
			return null;
		}

		public Integer STOUTQPrecision() {
			return null;
		}

		public String STOUTQDefault() {

			return null;

		}

		public String STOUTQComment() {

			return "";

		}

		public String STOUTQPattern() {

			return "";

		}

		public String STOUTQOriginalDbColumnName() {

			return "STOUTQ";

		}

		public BigDecimal STCOMP;

		public BigDecimal getSTCOMP() {
			return this.STCOMP;
		}

		public Boolean STCOMPIsNullable() {
			return true;
		}

		public Boolean STCOMPIsKey() {
			return false;
		}

		public Integer STCOMPLength() {
			return null;
		}

		public Integer STCOMPPrecision() {
			return null;
		}

		public String STCOMPDefault() {

			return "";

		}

		public String STCOMPComment() {

			return "";

		}

		public String STCOMPPattern() {

			return "";

		}

		public String STCOMPOriginalDbColumnName() {

			return "STCOMP";

		}

		public String STCNTR;

		public String getSTCNTR() {
			return this.STCNTR;
		}

		public Boolean STCNTRIsNullable() {
			return true;
		}

		public Boolean STCNTRIsKey() {
			return false;
		}

		public Integer STCNTRLength() {
			return null;
		}

		public Integer STCNTRPrecision() {
			return null;
		}

		public String STCNTRDefault() {

			return null;

		}

		public String STCNTRComment() {

			return "";

		}

		public String STCNTRPattern() {

			return "";

		}

		public String STCNTROriginalDbColumnName() {

			return "STCNTR";

		}

		public String STGLYN;

		public String getSTGLYN() {
			return this.STGLYN;
		}

		public Boolean STGLYNIsNullable() {
			return true;
		}

		public Boolean STGLYNIsKey() {
			return false;
		}

		public Integer STGLYNLength() {
			return null;
		}

		public Integer STGLYNPrecision() {
			return null;
		}

		public String STGLYNDefault() {

			return null;

		}

		public String STGLYNComment() {

			return "";

		}

		public String STGLYNPattern() {

			return "";

		}

		public String STGLYNOriginalDbColumnName() {

			return "STGLYN";

		}

		public String STAPYN;

		public String getSTAPYN() {
			return this.STAPYN;
		}

		public Boolean STAPYNIsNullable() {
			return true;
		}

		public Boolean STAPYNIsKey() {
			return false;
		}

		public Integer STAPYNLength() {
			return null;
		}

		public Integer STAPYNPrecision() {
			return null;
		}

		public String STAPYNDefault() {

			return null;

		}

		public String STAPYNComment() {

			return "";

		}

		public String STAPYNPattern() {

			return "";

		}

		public String STAPYNOriginalDbColumnName() {

			return "STAPYN";

		}

		public String STARYN;

		public String getSTARYN() {
			return this.STARYN;
		}

		public Boolean STARYNIsNullable() {
			return true;
		}

		public Boolean STARYNIsKey() {
			return false;
		}

		public Integer STARYNLength() {
			return null;
		}

		public Integer STARYNPrecision() {
			return null;
		}

		public String STARYNDefault() {

			return null;

		}

		public String STARYNComment() {

			return "";

		}

		public String STARYNPattern() {

			return "";

		}

		public String STARYNOriginalDbColumnName() {

			return "STARYN";

		}

		public BigDecimal STLCNN;

		public BigDecimal getSTLCNN() {
			return this.STLCNN;
		}

		public Boolean STLCNNIsNullable() {
			return true;
		}

		public Boolean STLCNNIsKey() {
			return false;
		}

		public Integer STLCNNLength() {
			return null;
		}

		public Integer STLCNNPrecision() {
			return null;
		}

		public String STLCNNDefault() {

			return "";

		}

		public String STLCNNComment() {

			return "";

		}

		public String STLCNNPattern() {

			return "";

		}

		public String STLCNNOriginalDbColumnName() {

			return "STLCNN";

		}

		public BigDecimal ZONNUM;

		public BigDecimal getZONNUM() {
			return this.ZONNUM;
		}

		public Boolean ZONNUMIsNullable() {
			return true;
		}

		public Boolean ZONNUMIsKey() {
			return false;
		}

		public Integer ZONNUMLength() {
			return null;
		}

		public Integer ZONNUMPrecision() {
			return null;
		}

		public String ZONNUMDefault() {

			return "";

		}

		public String ZONNUMComment() {

			return "";

		}

		public String ZONNUMPattern() {

			return "";

		}

		public String ZONNUMOriginalDbColumnName() {

			return "ZONNUM";

		}

		public String STAVGC;

		public String getSTAVGC() {
			return this.STAVGC;
		}

		public Boolean STAVGCIsNullable() {
			return true;
		}

		public Boolean STAVGCIsKey() {
			return false;
		}

		public Integer STAVGCLength() {
			return null;
		}

		public Integer STAVGCPrecision() {
			return null;
		}

		public String STAVGCDefault() {

			return null;

		}

		public String STAVGCComment() {

			return "";

		}

		public String STAVGCPattern() {

			return "";

		}

		public String STAVGCOriginalDbColumnName() {

			return "STAVGC";

		}

		public String STSCLK;

		public String getSTSCLK() {
			return this.STSCLK;
		}

		public Boolean STSCLKIsNullable() {
			return true;
		}

		public Boolean STSCLKIsKey() {
			return false;
		}

		public Integer STSCLKLength() {
			return null;
		}

		public Integer STSCLKPrecision() {
			return null;
		}

		public String STSCLKDefault() {

			return null;

		}

		public String STSCLKComment() {

			return "";

		}

		public String STSCLKPattern() {

			return "";

		}

		public String STSCLKOriginalDbColumnName() {

			return "STSCLK";

		}

		public String STMSTK;

		public String getSTMSTK() {
			return this.STMSTK;
		}

		public Boolean STMSTKIsNullable() {
			return true;
		}

		public Boolean STMSTKIsKey() {
			return false;
		}

		public Integer STMSTKLength() {
			return null;
		}

		public Integer STMSTKPrecision() {
			return null;
		}

		public String STMSTKDefault() {

			return null;

		}

		public String STMSTKComment() {

			return "";

		}

		public String STMSTKPattern() {

			return "";

		}

		public String STMSTKOriginalDbColumnName() {

			return "STMSTK";

		}

		public String STAYES;

		public String getSTAYES() {
			return this.STAYES;
		}

		public Boolean STAYESIsNullable() {
			return true;
		}

		public Boolean STAYESIsKey() {
			return false;
		}

		public Integer STAYESLength() {
			return null;
		}

		public Integer STAYESPrecision() {
			return null;
		}

		public String STAYESDefault() {

			return null;

		}

		public String STAYESComment() {

			return "";

		}

		public String STAYESPattern() {

			return "";

		}

		public String STAYESOriginalDbColumnName() {

			return "STAYES";

		}

		public BigDecimal STAFCT;

		public BigDecimal getSTAFCT() {
			return this.STAFCT;
		}

		public Boolean STAFCTIsNullable() {
			return true;
		}

		public Boolean STAFCTIsKey() {
			return false;
		}

		public Integer STAFCTLength() {
			return null;
		}

		public Integer STAFCTPrecision() {
			return null;
		}

		public String STAFCTDefault() {

			return "";

		}

		public String STAFCTComment() {

			return "";

		}

		public String STAFCTPattern() {

			return "";

		}

		public String STAFCTOriginalDbColumnName() {

			return "STAFCT";

		}

		public BigDecimal RPLZN;

		public BigDecimal getRPLZN() {
			return this.RPLZN;
		}

		public Boolean RPLZNIsNullable() {
			return true;
		}

		public Boolean RPLZNIsKey() {
			return false;
		}

		public Integer RPLZNLength() {
			return null;
		}

		public Integer RPLZNPrecision() {
			return null;
		}

		public String RPLZNDefault() {

			return "";

		}

		public String RPLZNComment() {

			return "";

		}

		public String RPLZNPattern() {

			return "";

		}

		public String RPLZNOriginalDbColumnName() {

			return "RPLZN";

		}

		public String STPRMS;

		public String getSTPRMS() {
			return this.STPRMS;
		}

		public Boolean STPRMSIsNullable() {
			return true;
		}

		public Boolean STPRMSIsKey() {
			return false;
		}

		public Integer STPRMSLength() {
			return null;
		}

		public Integer STPRMSPrecision() {
			return null;
		}

		public String STPRMSDefault() {

			return null;

		}

		public String STPRMSComment() {

			return "";

		}

		public String STPRMSPattern() {

			return "";

		}

		public String STPRMSOriginalDbColumnName() {

			return "STPRMS";

		}

		public String STRPON;

		public String getSTRPON() {
			return this.STRPON;
		}

		public Boolean STRPONIsNullable() {
			return true;
		}

		public Boolean STRPONIsKey() {
			return false;
		}

		public Integer STRPONLength() {
			return null;
		}

		public Integer STRPONPrecision() {
			return null;
		}

		public String STRPONDefault() {

			return null;

		}

		public String STRPONComment() {

			return "";

		}

		public String STRPONPattern() {

			return "";

		}

		public String STRPONOriginalDbColumnName() {

			return "STRPON";

		}

		public BigDecimal STCLDT;

		public BigDecimal getSTCLDT() {
			return this.STCLDT;
		}

		public Boolean STCLDTIsNullable() {
			return true;
		}

		public Boolean STCLDTIsKey() {
			return false;
		}

		public Integer STCLDTLength() {
			return null;
		}

		public Integer STCLDTPrecision() {
			return null;
		}

		public String STCLDTDefault() {

			return "";

		}

		public String STCLDTComment() {

			return "";

		}

		public String STCLDTPattern() {

			return "";

		}

		public String STCLDTOriginalDbColumnName() {

			return "STCLDT";

		}

		public String STRCOD;

		public String getSTRCOD() {
			return this.STRCOD;
		}

		public Boolean STRCODIsNullable() {
			return true;
		}

		public Boolean STRCODIsKey() {
			return false;
		}

		public Integer STRCODLength() {
			return null;
		}

		public Integer STRCODPrecision() {
			return null;
		}

		public String STRCODDefault() {

			return null;

		}

		public String STRCODComment() {

			return "";

		}

		public String STRCODPattern() {

			return "";

		}

		public String STRCODOriginalDbColumnName() {

			return "STRCOD";

		}

		public String STRTXC;

		public String getSTRTXC() {
			return this.STRTXC;
		}

		public Boolean STRTXCIsNullable() {
			return true;
		}

		public Boolean STRTXCIsKey() {
			return false;
		}

		public Integer STRTXCLength() {
			return null;
		}

		public Integer STRTXCPrecision() {
			return null;
		}

		public String STRTXCDefault() {

			return null;

		}

		public String STRTXCComment() {

			return "";

		}

		public String STRTXCPattern() {

			return "";

		}

		public String STRTXCOriginalDbColumnName() {

			return "STRTXC";

		}

		public String STRLAN;

		public String getSTRLAN() {
			return this.STRLAN;
		}

		public Boolean STRLANIsNullable() {
			return true;
		}

		public Boolean STRLANIsKey() {
			return false;
		}

		public Integer STRLANLength() {
			return null;
		}

		public Integer STRLANPrecision() {
			return null;
		}

		public String STRLANDefault() {

			return null;

		}

		public String STRLANComment() {

			return "";

		}

		public String STRLANPattern() {

			return "";

		}

		public String STRLANOriginalDbColumnName() {

			return "STRLAN";

		}

		public java.util.Date DATELOADED;

		public java.util.Date getDATELOADED() {
			return this.DATELOADED;
		}

		public Boolean DATELOADEDIsNullable() {
			return true;
		}

		public Boolean DATELOADEDIsKey() {
			return false;
		}

		public Integer DATELOADEDLength() {
			return null;
		}

		public Integer DATELOADEDPrecision() {
			return null;
		}

		public String DATELOADEDDefault() {

			return null;

		}

		public String DATELOADEDComment() {

			return "";

		}

		public String DATELOADEDPattern() {

			return "yyyy-MM-dd";

		}

		public String DATELOADEDOriginalDbColumnName() {

			return "DATELOADED";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STRNUM = (BigDecimal) dis.readObject();

					this.STRNAM = readString(dis);

					this.STADD1 = readString(dis);

					this.STADD2 = readString(dis);

					this.STADD3 = readString(dis);

					this.STCITY = readString(dis);

					this.STPVST = readString(dis);

					this.STCNTY = readString(dis);

					this.STCTRY = readString(dis);

					this.STZIP = readString(dis);

					this.STPHON = readString(dis);

					this.STFAXN = readString(dis);

					this.STSHRT = readString(dis);

					this.REGNUM = (BigDecimal) dis.readObject();

					this.STMNGR = readString(dis);

					this.STSDAT = (BigDecimal) dis.readObject();

					this.STRETL = (BigDecimal) dis.readObject();

					this.STPOLL = readString(dis);

					this.STSNDY = readString(dis);

					this.STRHDO = readString(dis);

					this.STBACT = (BigDecimal) dis.readObject();

					this.STRWHS = (BigDecimal) dis.readObject();

					this.STRDST = (BigDecimal) dis.readObject();

					this.STRCMP = readString(dis);

					this.STRTYP = readString(dis);

					this.STOUTQ = readString(dis);

					this.STCOMP = (BigDecimal) dis.readObject();

					this.STCNTR = readString(dis);

					this.STGLYN = readString(dis);

					this.STAPYN = readString(dis);

					this.STARYN = readString(dis);

					this.STLCNN = (BigDecimal) dis.readObject();

					this.ZONNUM = (BigDecimal) dis.readObject();

					this.STAVGC = readString(dis);

					this.STSCLK = readString(dis);

					this.STMSTK = readString(dis);

					this.STAYES = readString(dis);

					this.STAFCT = (BigDecimal) dis.readObject();

					this.RPLZN = (BigDecimal) dis.readObject();

					this.STPRMS = readString(dis);

					this.STRPON = readString(dis);

					this.STCLDT = (BigDecimal) dis.readObject();

					this.STRCOD = readString(dis);

					this.STRTXC = readString(dis);

					this.STRLAN = readString(dis);

					this.DATELOADED = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STRNUM = (BigDecimal) dis.readObject();

					this.STRNAM = readString(dis);

					this.STADD1 = readString(dis);

					this.STADD2 = readString(dis);

					this.STADD3 = readString(dis);

					this.STCITY = readString(dis);

					this.STPVST = readString(dis);

					this.STCNTY = readString(dis);

					this.STCTRY = readString(dis);

					this.STZIP = readString(dis);

					this.STPHON = readString(dis);

					this.STFAXN = readString(dis);

					this.STSHRT = readString(dis);

					this.REGNUM = (BigDecimal) dis.readObject();

					this.STMNGR = readString(dis);

					this.STSDAT = (BigDecimal) dis.readObject();

					this.STRETL = (BigDecimal) dis.readObject();

					this.STPOLL = readString(dis);

					this.STSNDY = readString(dis);

					this.STRHDO = readString(dis);

					this.STBACT = (BigDecimal) dis.readObject();

					this.STRWHS = (BigDecimal) dis.readObject();

					this.STRDST = (BigDecimal) dis.readObject();

					this.STRCMP = readString(dis);

					this.STRTYP = readString(dis);

					this.STOUTQ = readString(dis);

					this.STCOMP = (BigDecimal) dis.readObject();

					this.STCNTR = readString(dis);

					this.STGLYN = readString(dis);

					this.STAPYN = readString(dis);

					this.STARYN = readString(dis);

					this.STLCNN = (BigDecimal) dis.readObject();

					this.ZONNUM = (BigDecimal) dis.readObject();

					this.STAVGC = readString(dis);

					this.STSCLK = readString(dis);

					this.STMSTK = readString(dis);

					this.STAYES = readString(dis);

					this.STAFCT = (BigDecimal) dis.readObject();

					this.RPLZN = (BigDecimal) dis.readObject();

					this.STPRMS = readString(dis);

					this.STRPON = readString(dis);

					this.STCLDT = (BigDecimal) dis.readObject();

					this.STRCOD = readString(dis);

					this.STRTXC = readString(dis);

					this.STRLAN = readString(dis);

					this.DATELOADED = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STRNUM);

				// String

				writeString(this.STRNAM, dos);

				// String

				writeString(this.STADD1, dos);

				// String

				writeString(this.STADD2, dos);

				// String

				writeString(this.STADD3, dos);

				// String

				writeString(this.STCITY, dos);

				// String

				writeString(this.STPVST, dos);

				// String

				writeString(this.STCNTY, dos);

				// String

				writeString(this.STCTRY, dos);

				// String

				writeString(this.STZIP, dos);

				// String

				writeString(this.STPHON, dos);

				// String

				writeString(this.STFAXN, dos);

				// String

				writeString(this.STSHRT, dos);

				// BigDecimal

				dos.writeObject(this.REGNUM);

				// String

				writeString(this.STMNGR, dos);

				// BigDecimal

				dos.writeObject(this.STSDAT);

				// BigDecimal

				dos.writeObject(this.STRETL);

				// String

				writeString(this.STPOLL, dos);

				// String

				writeString(this.STSNDY, dos);

				// String

				writeString(this.STRHDO, dos);

				// BigDecimal

				dos.writeObject(this.STBACT);

				// BigDecimal

				dos.writeObject(this.STRWHS);

				// BigDecimal

				dos.writeObject(this.STRDST);

				// String

				writeString(this.STRCMP, dos);

				// String

				writeString(this.STRTYP, dos);

				// String

				writeString(this.STOUTQ, dos);

				// BigDecimal

				dos.writeObject(this.STCOMP);

				// String

				writeString(this.STCNTR, dos);

				// String

				writeString(this.STGLYN, dos);

				// String

				writeString(this.STAPYN, dos);

				// String

				writeString(this.STARYN, dos);

				// BigDecimal

				dos.writeObject(this.STLCNN);

				// BigDecimal

				dos.writeObject(this.ZONNUM);

				// String

				writeString(this.STAVGC, dos);

				// String

				writeString(this.STSCLK, dos);

				// String

				writeString(this.STMSTK, dos);

				// String

				writeString(this.STAYES, dos);

				// BigDecimal

				dos.writeObject(this.STAFCT);

				// BigDecimal

				dos.writeObject(this.RPLZN);

				// String

				writeString(this.STPRMS, dos);

				// String

				writeString(this.STRPON, dos);

				// BigDecimal

				dos.writeObject(this.STCLDT);

				// String

				writeString(this.STRCOD, dos);

				// String

				writeString(this.STRTXC, dos);

				// String

				writeString(this.STRLAN, dos);

				// java.util.Date

				writeDate(this.DATELOADED, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STRNUM);

				// String

				writeString(this.STRNAM, dos);

				// String

				writeString(this.STADD1, dos);

				// String

				writeString(this.STADD2, dos);

				// String

				writeString(this.STADD3, dos);

				// String

				writeString(this.STCITY, dos);

				// String

				writeString(this.STPVST, dos);

				// String

				writeString(this.STCNTY, dos);

				// String

				writeString(this.STCTRY, dos);

				// String

				writeString(this.STZIP, dos);

				// String

				writeString(this.STPHON, dos);

				// String

				writeString(this.STFAXN, dos);

				// String

				writeString(this.STSHRT, dos);

				// BigDecimal

				dos.writeObject(this.REGNUM);

				// String

				writeString(this.STMNGR, dos);

				// BigDecimal

				dos.writeObject(this.STSDAT);

				// BigDecimal

				dos.writeObject(this.STRETL);

				// String

				writeString(this.STPOLL, dos);

				// String

				writeString(this.STSNDY, dos);

				// String

				writeString(this.STRHDO, dos);

				// BigDecimal

				dos.writeObject(this.STBACT);

				// BigDecimal

				dos.writeObject(this.STRWHS);

				// BigDecimal

				dos.writeObject(this.STRDST);

				// String

				writeString(this.STRCMP, dos);

				// String

				writeString(this.STRTYP, dos);

				// String

				writeString(this.STOUTQ, dos);

				// BigDecimal

				dos.writeObject(this.STCOMP);

				// String

				writeString(this.STCNTR, dos);

				// String

				writeString(this.STGLYN, dos);

				// String

				writeString(this.STAPYN, dos);

				// String

				writeString(this.STARYN, dos);

				// BigDecimal

				dos.writeObject(this.STLCNN);

				// BigDecimal

				dos.writeObject(this.ZONNUM);

				// String

				writeString(this.STAVGC, dos);

				// String

				writeString(this.STSCLK, dos);

				// String

				writeString(this.STMSTK, dos);

				// String

				writeString(this.STAYES, dos);

				// BigDecimal

				dos.writeObject(this.STAFCT);

				// BigDecimal

				dos.writeObject(this.RPLZN);

				// String

				writeString(this.STPRMS, dos);

				// String

				writeString(this.STRPON, dos);

				// BigDecimal

				dos.writeObject(this.STCLDT);

				// String

				writeString(this.STRCOD, dos);

				// String

				writeString(this.STRTXC, dos);

				// String

				writeString(this.STRLAN, dos);

				// java.util.Date

				writeDate(this.DATELOADED, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STRNUM=" + String.valueOf(STRNUM));
			sb.append(",STRNAM=" + STRNAM);
			sb.append(",STADD1=" + STADD1);
			sb.append(",STADD2=" + STADD2);
			sb.append(",STADD3=" + STADD3);
			sb.append(",STCITY=" + STCITY);
			sb.append(",STPVST=" + STPVST);
			sb.append(",STCNTY=" + STCNTY);
			sb.append(",STCTRY=" + STCTRY);
			sb.append(",STZIP=" + STZIP);
			sb.append(",STPHON=" + STPHON);
			sb.append(",STFAXN=" + STFAXN);
			sb.append(",STSHRT=" + STSHRT);
			sb.append(",REGNUM=" + String.valueOf(REGNUM));
			sb.append(",STMNGR=" + STMNGR);
			sb.append(",STSDAT=" + String.valueOf(STSDAT));
			sb.append(",STRETL=" + String.valueOf(STRETL));
			sb.append(",STPOLL=" + STPOLL);
			sb.append(",STSNDY=" + STSNDY);
			sb.append(",STRHDO=" + STRHDO);
			sb.append(",STBACT=" + String.valueOf(STBACT));
			sb.append(",STRWHS=" + String.valueOf(STRWHS));
			sb.append(",STRDST=" + String.valueOf(STRDST));
			sb.append(",STRCMP=" + STRCMP);
			sb.append(",STRTYP=" + STRTYP);
			sb.append(",STOUTQ=" + STOUTQ);
			sb.append(",STCOMP=" + String.valueOf(STCOMP));
			sb.append(",STCNTR=" + STCNTR);
			sb.append(",STGLYN=" + STGLYN);
			sb.append(",STAPYN=" + STAPYN);
			sb.append(",STARYN=" + STARYN);
			sb.append(",STLCNN=" + String.valueOf(STLCNN));
			sb.append(",ZONNUM=" + String.valueOf(ZONNUM));
			sb.append(",STAVGC=" + STAVGC);
			sb.append(",STSCLK=" + STSCLK);
			sb.append(",STMSTK=" + STMSTK);
			sb.append(",STAYES=" + STAYES);
			sb.append(",STAFCT=" + String.valueOf(STAFCT));
			sb.append(",RPLZN=" + String.valueOf(RPLZN));
			sb.append(",STPRMS=" + STPRMS);
			sb.append(",STRPON=" + STRPON);
			sb.append(",STCLDT=" + String.valueOf(STCLDT));
			sb.append(",STRCOD=" + STRCOD);
			sb.append(",STRTXC=" + STRTXC);
			sb.append(",STRLAN=" + STRLAN);
			sb.append(",DATELOADED=" + String.valueOf(DATELOADED));
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (STRNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(STRNUM);
			}

			sb.append("|");

			if (STRNAM == null) {
				sb.append("<null>");
			} else {
				sb.append(STRNAM);
			}

			sb.append("|");

			if (STADD1 == null) {
				sb.append("<null>");
			} else {
				sb.append(STADD1);
			}

			sb.append("|");

			if (STADD2 == null) {
				sb.append("<null>");
			} else {
				sb.append(STADD2);
			}

			sb.append("|");

			if (STADD3 == null) {
				sb.append("<null>");
			} else {
				sb.append(STADD3);
			}

			sb.append("|");

			if (STCITY == null) {
				sb.append("<null>");
			} else {
				sb.append(STCITY);
			}

			sb.append("|");

			if (STPVST == null) {
				sb.append("<null>");
			} else {
				sb.append(STPVST);
			}

			sb.append("|");

			if (STCNTY == null) {
				sb.append("<null>");
			} else {
				sb.append(STCNTY);
			}

			sb.append("|");

			if (STCTRY == null) {
				sb.append("<null>");
			} else {
				sb.append(STCTRY);
			}

			sb.append("|");

			if (STZIP == null) {
				sb.append("<null>");
			} else {
				sb.append(STZIP);
			}

			sb.append("|");

			if (STPHON == null) {
				sb.append("<null>");
			} else {
				sb.append(STPHON);
			}

			sb.append("|");

			if (STFAXN == null) {
				sb.append("<null>");
			} else {
				sb.append(STFAXN);
			}

			sb.append("|");

			if (STSHRT == null) {
				sb.append("<null>");
			} else {
				sb.append(STSHRT);
			}

			sb.append("|");

			if (REGNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(REGNUM);
			}

			sb.append("|");

			if (STMNGR == null) {
				sb.append("<null>");
			} else {
				sb.append(STMNGR);
			}

			sb.append("|");

			if (STSDAT == null) {
				sb.append("<null>");
			} else {
				sb.append(STSDAT);
			}

			sb.append("|");

			if (STRETL == null) {
				sb.append("<null>");
			} else {
				sb.append(STRETL);
			}

			sb.append("|");

			if (STPOLL == null) {
				sb.append("<null>");
			} else {
				sb.append(STPOLL);
			}

			sb.append("|");

			if (STSNDY == null) {
				sb.append("<null>");
			} else {
				sb.append(STSNDY);
			}

			sb.append("|");

			if (STRHDO == null) {
				sb.append("<null>");
			} else {
				sb.append(STRHDO);
			}

			sb.append("|");

			if (STBACT == null) {
				sb.append("<null>");
			} else {
				sb.append(STBACT);
			}

			sb.append("|");

			if (STRWHS == null) {
				sb.append("<null>");
			} else {
				sb.append(STRWHS);
			}

			sb.append("|");

			if (STRDST == null) {
				sb.append("<null>");
			} else {
				sb.append(STRDST);
			}

			sb.append("|");

			if (STRCMP == null) {
				sb.append("<null>");
			} else {
				sb.append(STRCMP);
			}

			sb.append("|");

			if (STRTYP == null) {
				sb.append("<null>");
			} else {
				sb.append(STRTYP);
			}

			sb.append("|");

			if (STOUTQ == null) {
				sb.append("<null>");
			} else {
				sb.append(STOUTQ);
			}

			sb.append("|");

			if (STCOMP == null) {
				sb.append("<null>");
			} else {
				sb.append(STCOMP);
			}

			sb.append("|");

			if (STCNTR == null) {
				sb.append("<null>");
			} else {
				sb.append(STCNTR);
			}

			sb.append("|");

			if (STGLYN == null) {
				sb.append("<null>");
			} else {
				sb.append(STGLYN);
			}

			sb.append("|");

			if (STAPYN == null) {
				sb.append("<null>");
			} else {
				sb.append(STAPYN);
			}

			sb.append("|");

			if (STARYN == null) {
				sb.append("<null>");
			} else {
				sb.append(STARYN);
			}

			sb.append("|");

			if (STLCNN == null) {
				sb.append("<null>");
			} else {
				sb.append(STLCNN);
			}

			sb.append("|");

			if (ZONNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(ZONNUM);
			}

			sb.append("|");

			if (STAVGC == null) {
				sb.append("<null>");
			} else {
				sb.append(STAVGC);
			}

			sb.append("|");

			if (STSCLK == null) {
				sb.append("<null>");
			} else {
				sb.append(STSCLK);
			}

			sb.append("|");

			if (STMSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(STMSTK);
			}

			sb.append("|");

			if (STAYES == null) {
				sb.append("<null>");
			} else {
				sb.append(STAYES);
			}

			sb.append("|");

			if (STAFCT == null) {
				sb.append("<null>");
			} else {
				sb.append(STAFCT);
			}

			sb.append("|");

			if (RPLZN == null) {
				sb.append("<null>");
			} else {
				sb.append(RPLZN);
			}

			sb.append("|");

			if (STPRMS == null) {
				sb.append("<null>");
			} else {
				sb.append(STPRMS);
			}

			sb.append("|");

			if (STRPON == null) {
				sb.append("<null>");
			} else {
				sb.append(STRPON);
			}

			sb.append("|");

			if (STCLDT == null) {
				sb.append("<null>");
			} else {
				sb.append(STCLDT);
			}

			sb.append("|");

			if (STRCOD == null) {
				sb.append("<null>");
			} else {
				sb.append(STRCOD);
			}

			sb.append("|");

			if (STRTXC == null) {
				sb.append("<null>");
			} else {
				sb.append(STRTXC);
			}

			sb.append("|");

			if (STRLAN == null) {
				sb.append("<null>");
			} else {
				sb.append(STRLAN);
			}

			sb.append("|");

			if (DATELOADED == null) {
				sb.append("<null>");
			} else {
				sb.append(DATELOADED);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TBLSTR_outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];
		static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[0];

		public BigDecimal STRNUM;

		public BigDecimal getSTRNUM() {
			return this.STRNUM;
		}

		public Boolean STRNUMIsNullable() {
			return true;
		}

		public Boolean STRNUMIsKey() {
			return false;
		}

		public Integer STRNUMLength() {
			return null;
		}

		public Integer STRNUMPrecision() {
			return null;
		}

		public String STRNUMDefault() {

			return "";

		}

		public String STRNUMComment() {

			return "";

		}

		public String STRNUMPattern() {

			return "";

		}

		public String STRNUMOriginalDbColumnName() {

			return "STRNUM";

		}

		public String STRNAM;

		public String getSTRNAM() {
			return this.STRNAM;
		}

		public Boolean STRNAMIsNullable() {
			return true;
		}

		public Boolean STRNAMIsKey() {
			return false;
		}

		public Integer STRNAMLength() {
			return null;
		}

		public Integer STRNAMPrecision() {
			return null;
		}

		public String STRNAMDefault() {

			return null;

		}

		public String STRNAMComment() {

			return "";

		}

		public String STRNAMPattern() {

			return "";

		}

		public String STRNAMOriginalDbColumnName() {

			return "STRNAM";

		}

		public String STADD1;

		public String getSTADD1() {
			return this.STADD1;
		}

		public Boolean STADD1IsNullable() {
			return true;
		}

		public Boolean STADD1IsKey() {
			return false;
		}

		public Integer STADD1Length() {
			return null;
		}

		public Integer STADD1Precision() {
			return null;
		}

		public String STADD1Default() {

			return null;

		}

		public String STADD1Comment() {

			return "";

		}

		public String STADD1Pattern() {

			return "";

		}

		public String STADD1OriginalDbColumnName() {

			return "STADD1";

		}

		public String STADD2;

		public String getSTADD2() {
			return this.STADD2;
		}

		public Boolean STADD2IsNullable() {
			return true;
		}

		public Boolean STADD2IsKey() {
			return false;
		}

		public Integer STADD2Length() {
			return null;
		}

		public Integer STADD2Precision() {
			return null;
		}

		public String STADD2Default() {

			return null;

		}

		public String STADD2Comment() {

			return "";

		}

		public String STADD2Pattern() {

			return "";

		}

		public String STADD2OriginalDbColumnName() {

			return "STADD2";

		}

		public String STADD3;

		public String getSTADD3() {
			return this.STADD3;
		}

		public Boolean STADD3IsNullable() {
			return true;
		}

		public Boolean STADD3IsKey() {
			return false;
		}

		public Integer STADD3Length() {
			return null;
		}

		public Integer STADD3Precision() {
			return null;
		}

		public String STADD3Default() {

			return null;

		}

		public String STADD3Comment() {

			return "";

		}

		public String STADD3Pattern() {

			return "";

		}

		public String STADD3OriginalDbColumnName() {

			return "STADD3";

		}

		public String STCITY;

		public String getSTCITY() {
			return this.STCITY;
		}

		public Boolean STCITYIsNullable() {
			return true;
		}

		public Boolean STCITYIsKey() {
			return false;
		}

		public Integer STCITYLength() {
			return null;
		}

		public Integer STCITYPrecision() {
			return null;
		}

		public String STCITYDefault() {

			return null;

		}

		public String STCITYComment() {

			return "";

		}

		public String STCITYPattern() {

			return "";

		}

		public String STCITYOriginalDbColumnName() {

			return "STCITY";

		}

		public String STPVST;

		public String getSTPVST() {
			return this.STPVST;
		}

		public Boolean STPVSTIsNullable() {
			return true;
		}

		public Boolean STPVSTIsKey() {
			return false;
		}

		public Integer STPVSTLength() {
			return null;
		}

		public Integer STPVSTPrecision() {
			return null;
		}

		public String STPVSTDefault() {

			return null;

		}

		public String STPVSTComment() {

			return "";

		}

		public String STPVSTPattern() {

			return "";

		}

		public String STPVSTOriginalDbColumnName() {

			return "STPVST";

		}

		public String STCNTY;

		public String getSTCNTY() {
			return this.STCNTY;
		}

		public Boolean STCNTYIsNullable() {
			return true;
		}

		public Boolean STCNTYIsKey() {
			return false;
		}

		public Integer STCNTYLength() {
			return null;
		}

		public Integer STCNTYPrecision() {
			return null;
		}

		public String STCNTYDefault() {

			return null;

		}

		public String STCNTYComment() {

			return "";

		}

		public String STCNTYPattern() {

			return "";

		}

		public String STCNTYOriginalDbColumnName() {

			return "STCNTY";

		}

		public String STCTRY;

		public String getSTCTRY() {
			return this.STCTRY;
		}

		public Boolean STCTRYIsNullable() {
			return true;
		}

		public Boolean STCTRYIsKey() {
			return false;
		}

		public Integer STCTRYLength() {
			return null;
		}

		public Integer STCTRYPrecision() {
			return null;
		}

		public String STCTRYDefault() {

			return null;

		}

		public String STCTRYComment() {

			return "";

		}

		public String STCTRYPattern() {

			return "";

		}

		public String STCTRYOriginalDbColumnName() {

			return "STCTRY";

		}

		public String STZIP;

		public String getSTZIP() {
			return this.STZIP;
		}

		public Boolean STZIPIsNullable() {
			return true;
		}

		public Boolean STZIPIsKey() {
			return false;
		}

		public Integer STZIPLength() {
			return null;
		}

		public Integer STZIPPrecision() {
			return null;
		}

		public String STZIPDefault() {

			return null;

		}

		public String STZIPComment() {

			return "";

		}

		public String STZIPPattern() {

			return "";

		}

		public String STZIPOriginalDbColumnName() {

			return "STZIP";

		}

		public String STPHON;

		public String getSTPHON() {
			return this.STPHON;
		}

		public Boolean STPHONIsNullable() {
			return true;
		}

		public Boolean STPHONIsKey() {
			return false;
		}

		public Integer STPHONLength() {
			return null;
		}

		public Integer STPHONPrecision() {
			return null;
		}

		public String STPHONDefault() {

			return null;

		}

		public String STPHONComment() {

			return "";

		}

		public String STPHONPattern() {

			return "";

		}

		public String STPHONOriginalDbColumnName() {

			return "STPHON";

		}

		public String STFAXN;

		public String getSTFAXN() {
			return this.STFAXN;
		}

		public Boolean STFAXNIsNullable() {
			return true;
		}

		public Boolean STFAXNIsKey() {
			return false;
		}

		public Integer STFAXNLength() {
			return null;
		}

		public Integer STFAXNPrecision() {
			return null;
		}

		public String STFAXNDefault() {

			return null;

		}

		public String STFAXNComment() {

			return "";

		}

		public String STFAXNPattern() {

			return "";

		}

		public String STFAXNOriginalDbColumnName() {

			return "STFAXN";

		}

		public String STSHRT;

		public String getSTSHRT() {
			return this.STSHRT;
		}

		public Boolean STSHRTIsNullable() {
			return true;
		}

		public Boolean STSHRTIsKey() {
			return false;
		}

		public Integer STSHRTLength() {
			return null;
		}

		public Integer STSHRTPrecision() {
			return null;
		}

		public String STSHRTDefault() {

			return null;

		}

		public String STSHRTComment() {

			return "";

		}

		public String STSHRTPattern() {

			return "";

		}

		public String STSHRTOriginalDbColumnName() {

			return "STSHRT";

		}

		public BigDecimal REGNUM;

		public BigDecimal getREGNUM() {
			return this.REGNUM;
		}

		public Boolean REGNUMIsNullable() {
			return true;
		}

		public Boolean REGNUMIsKey() {
			return false;
		}

		public Integer REGNUMLength() {
			return null;
		}

		public Integer REGNUMPrecision() {
			return null;
		}

		public String REGNUMDefault() {

			return "";

		}

		public String REGNUMComment() {

			return "";

		}

		public String REGNUMPattern() {

			return "";

		}

		public String REGNUMOriginalDbColumnName() {

			return "REGNUM";

		}

		public String STMNGR;

		public String getSTMNGR() {
			return this.STMNGR;
		}

		public Boolean STMNGRIsNullable() {
			return true;
		}

		public Boolean STMNGRIsKey() {
			return false;
		}

		public Integer STMNGRLength() {
			return null;
		}

		public Integer STMNGRPrecision() {
			return null;
		}

		public String STMNGRDefault() {

			return null;

		}

		public String STMNGRComment() {

			return "";

		}

		public String STMNGRPattern() {

			return "";

		}

		public String STMNGROriginalDbColumnName() {

			return "STMNGR";

		}

		public BigDecimal STSCEN;

		public BigDecimal getSTSCEN() {
			return this.STSCEN;
		}

		public Boolean STSCENIsNullable() {
			return true;
		}

		public Boolean STSCENIsKey() {
			return false;
		}

		public Integer STSCENLength() {
			return null;
		}

		public Integer STSCENPrecision() {
			return null;
		}

		public String STSCENDefault() {

			return "";

		}

		public String STSCENComment() {

			return "";

		}

		public String STSCENPattern() {

			return "";

		}

		public String STSCENOriginalDbColumnName() {

			return "STSCEN";

		}

		public BigDecimal STSDAT;

		public BigDecimal getSTSDAT() {
			return this.STSDAT;
		}

		public Boolean STSDATIsNullable() {
			return true;
		}

		public Boolean STSDATIsKey() {
			return false;
		}

		public Integer STSDATLength() {
			return null;
		}

		public Integer STSDATPrecision() {
			return null;
		}

		public String STSDATDefault() {

			return "";

		}

		public String STSDATComment() {

			return "";

		}

		public String STSDATPattern() {

			return "";

		}

		public String STSDATOriginalDbColumnName() {

			return "STSDAT";

		}

		public BigDecimal STRETL;

		public BigDecimal getSTRETL() {
			return this.STRETL;
		}

		public Boolean STRETLIsNullable() {
			return true;
		}

		public Boolean STRETLIsKey() {
			return false;
		}

		public Integer STRETLLength() {
			return null;
		}

		public Integer STRETLPrecision() {
			return null;
		}

		public String STRETLDefault() {

			return "";

		}

		public String STRETLComment() {

			return "";

		}

		public String STRETLPattern() {

			return "";

		}

		public String STRETLOriginalDbColumnName() {

			return "STRETL";

		}

		public String STPOLL;

		public String getSTPOLL() {
			return this.STPOLL;
		}

		public Boolean STPOLLIsNullable() {
			return true;
		}

		public Boolean STPOLLIsKey() {
			return false;
		}

		public Integer STPOLLLength() {
			return null;
		}

		public Integer STPOLLPrecision() {
			return null;
		}

		public String STPOLLDefault() {

			return null;

		}

		public String STPOLLComment() {

			return "";

		}

		public String STPOLLPattern() {

			return "";

		}

		public String STPOLLOriginalDbColumnName() {

			return "STPOLL";

		}

		public String STSNDY;

		public String getSTSNDY() {
			return this.STSNDY;
		}

		public Boolean STSNDYIsNullable() {
			return true;
		}

		public Boolean STSNDYIsKey() {
			return false;
		}

		public Integer STSNDYLength() {
			return null;
		}

		public Integer STSNDYPrecision() {
			return null;
		}

		public String STSNDYDefault() {

			return null;

		}

		public String STSNDYComment() {

			return "";

		}

		public String STSNDYPattern() {

			return "";

		}

		public String STSNDYOriginalDbColumnName() {

			return "STSNDY";

		}

		public String STRHDO;

		public String getSTRHDO() {
			return this.STRHDO;
		}

		public Boolean STRHDOIsNullable() {
			return true;
		}

		public Boolean STRHDOIsKey() {
			return false;
		}

		public Integer STRHDOLength() {
			return null;
		}

		public Integer STRHDOPrecision() {
			return null;
		}

		public String STRHDODefault() {

			return null;

		}

		public String STRHDOComment() {

			return "";

		}

		public String STRHDOPattern() {

			return "";

		}

		public String STRHDOOriginalDbColumnName() {

			return "STRHDO";

		}

		public BigDecimal STBACT;

		public BigDecimal getSTBACT() {
			return this.STBACT;
		}

		public Boolean STBACTIsNullable() {
			return true;
		}

		public Boolean STBACTIsKey() {
			return false;
		}

		public Integer STBACTLength() {
			return null;
		}

		public Integer STBACTPrecision() {
			return null;
		}

		public String STBACTDefault() {

			return "";

		}

		public String STBACTComment() {

			return "";

		}

		public String STBACTPattern() {

			return "";

		}

		public String STBACTOriginalDbColumnName() {

			return "STBACT";

		}

		public BigDecimal STRWHS;

		public BigDecimal getSTRWHS() {
			return this.STRWHS;
		}

		public Boolean STRWHSIsNullable() {
			return true;
		}

		public Boolean STRWHSIsKey() {
			return false;
		}

		public Integer STRWHSLength() {
			return null;
		}

		public Integer STRWHSPrecision() {
			return null;
		}

		public String STRWHSDefault() {

			return "";

		}

		public String STRWHSComment() {

			return "";

		}

		public String STRWHSPattern() {

			return "";

		}

		public String STRWHSOriginalDbColumnName() {

			return "STRWHS";

		}

		public BigDecimal STRDST;

		public BigDecimal getSTRDST() {
			return this.STRDST;
		}

		public Boolean STRDSTIsNullable() {
			return true;
		}

		public Boolean STRDSTIsKey() {
			return false;
		}

		public Integer STRDSTLength() {
			return null;
		}

		public Integer STRDSTPrecision() {
			return null;
		}

		public String STRDSTDefault() {

			return "";

		}

		public String STRDSTComment() {

			return "";

		}

		public String STRDSTPattern() {

			return "";

		}

		public String STRDSTOriginalDbColumnName() {

			return "STRDST";

		}

		public String STRCMP;

		public String getSTRCMP() {
			return this.STRCMP;
		}

		public Boolean STRCMPIsNullable() {
			return true;
		}

		public Boolean STRCMPIsKey() {
			return false;
		}

		public Integer STRCMPLength() {
			return null;
		}

		public Integer STRCMPPrecision() {
			return null;
		}

		public String STRCMPDefault() {

			return null;

		}

		public String STRCMPComment() {

			return "";

		}

		public String STRCMPPattern() {

			return "";

		}

		public String STRCMPOriginalDbColumnName() {

			return "STRCMP";

		}

		public String STRTYP;

		public String getSTRTYP() {
			return this.STRTYP;
		}

		public Boolean STRTYPIsNullable() {
			return true;
		}

		public Boolean STRTYPIsKey() {
			return false;
		}

		public Integer STRTYPLength() {
			return null;
		}

		public Integer STRTYPPrecision() {
			return null;
		}

		public String STRTYPDefault() {

			return null;

		}

		public String STRTYPComment() {

			return "";

		}

		public String STRTYPPattern() {

			return "";

		}

		public String STRTYPOriginalDbColumnName() {

			return "STRTYP";

		}

		public String STOUTQ;

		public String getSTOUTQ() {
			return this.STOUTQ;
		}

		public Boolean STOUTQIsNullable() {
			return true;
		}

		public Boolean STOUTQIsKey() {
			return false;
		}

		public Integer STOUTQLength() {
			return null;
		}

		public Integer STOUTQPrecision() {
			return null;
		}

		public String STOUTQDefault() {

			return null;

		}

		public String STOUTQComment() {

			return "";

		}

		public String STOUTQPattern() {

			return "";

		}

		public String STOUTQOriginalDbColumnName() {

			return "STOUTQ";

		}

		public BigDecimal STCOMP;

		public BigDecimal getSTCOMP() {
			return this.STCOMP;
		}

		public Boolean STCOMPIsNullable() {
			return true;
		}

		public Boolean STCOMPIsKey() {
			return false;
		}

		public Integer STCOMPLength() {
			return null;
		}

		public Integer STCOMPPrecision() {
			return null;
		}

		public String STCOMPDefault() {

			return "";

		}

		public String STCOMPComment() {

			return "";

		}

		public String STCOMPPattern() {

			return "";

		}

		public String STCOMPOriginalDbColumnName() {

			return "STCOMP";

		}

		public String STCNTR;

		public String getSTCNTR() {
			return this.STCNTR;
		}

		public Boolean STCNTRIsNullable() {
			return true;
		}

		public Boolean STCNTRIsKey() {
			return false;
		}

		public Integer STCNTRLength() {
			return null;
		}

		public Integer STCNTRPrecision() {
			return null;
		}

		public String STCNTRDefault() {

			return null;

		}

		public String STCNTRComment() {

			return "";

		}

		public String STCNTRPattern() {

			return "";

		}

		public String STCNTROriginalDbColumnName() {

			return "STCNTR";

		}

		public String STGLYN;

		public String getSTGLYN() {
			return this.STGLYN;
		}

		public Boolean STGLYNIsNullable() {
			return true;
		}

		public Boolean STGLYNIsKey() {
			return false;
		}

		public Integer STGLYNLength() {
			return null;
		}

		public Integer STGLYNPrecision() {
			return null;
		}

		public String STGLYNDefault() {

			return null;

		}

		public String STGLYNComment() {

			return "";

		}

		public String STGLYNPattern() {

			return "";

		}

		public String STGLYNOriginalDbColumnName() {

			return "STGLYN";

		}

		public String STAPYN;

		public String getSTAPYN() {
			return this.STAPYN;
		}

		public Boolean STAPYNIsNullable() {
			return true;
		}

		public Boolean STAPYNIsKey() {
			return false;
		}

		public Integer STAPYNLength() {
			return null;
		}

		public Integer STAPYNPrecision() {
			return null;
		}

		public String STAPYNDefault() {

			return null;

		}

		public String STAPYNComment() {

			return "";

		}

		public String STAPYNPattern() {

			return "";

		}

		public String STAPYNOriginalDbColumnName() {

			return "STAPYN";

		}

		public String STARYN;

		public String getSTARYN() {
			return this.STARYN;
		}

		public Boolean STARYNIsNullable() {
			return true;
		}

		public Boolean STARYNIsKey() {
			return false;
		}

		public Integer STARYNLength() {
			return null;
		}

		public Integer STARYNPrecision() {
			return null;
		}

		public String STARYNDefault() {

			return null;

		}

		public String STARYNComment() {

			return "";

		}

		public String STARYNPattern() {

			return "";

		}

		public String STARYNOriginalDbColumnName() {

			return "STARYN";

		}

		public BigDecimal STLCNN;

		public BigDecimal getSTLCNN() {
			return this.STLCNN;
		}

		public Boolean STLCNNIsNullable() {
			return true;
		}

		public Boolean STLCNNIsKey() {
			return false;
		}

		public Integer STLCNNLength() {
			return null;
		}

		public Integer STLCNNPrecision() {
			return null;
		}

		public String STLCNNDefault() {

			return "";

		}

		public String STLCNNComment() {

			return "";

		}

		public String STLCNNPattern() {

			return "";

		}

		public String STLCNNOriginalDbColumnName() {

			return "STLCNN";

		}

		public BigDecimal ZONNUM;

		public BigDecimal getZONNUM() {
			return this.ZONNUM;
		}

		public Boolean ZONNUMIsNullable() {
			return true;
		}

		public Boolean ZONNUMIsKey() {
			return false;
		}

		public Integer ZONNUMLength() {
			return null;
		}

		public Integer ZONNUMPrecision() {
			return null;
		}

		public String ZONNUMDefault() {

			return "";

		}

		public String ZONNUMComment() {

			return "";

		}

		public String ZONNUMPattern() {

			return "";

		}

		public String ZONNUMOriginalDbColumnName() {

			return "ZONNUM";

		}

		public String STAVGC;

		public String getSTAVGC() {
			return this.STAVGC;
		}

		public Boolean STAVGCIsNullable() {
			return true;
		}

		public Boolean STAVGCIsKey() {
			return false;
		}

		public Integer STAVGCLength() {
			return null;
		}

		public Integer STAVGCPrecision() {
			return null;
		}

		public String STAVGCDefault() {

			return null;

		}

		public String STAVGCComment() {

			return "";

		}

		public String STAVGCPattern() {

			return "";

		}

		public String STAVGCOriginalDbColumnName() {

			return "STAVGC";

		}

		public String STSCLK;

		public String getSTSCLK() {
			return this.STSCLK;
		}

		public Boolean STSCLKIsNullable() {
			return true;
		}

		public Boolean STSCLKIsKey() {
			return false;
		}

		public Integer STSCLKLength() {
			return null;
		}

		public Integer STSCLKPrecision() {
			return null;
		}

		public String STSCLKDefault() {

			return null;

		}

		public String STSCLKComment() {

			return "";

		}

		public String STSCLKPattern() {

			return "";

		}

		public String STSCLKOriginalDbColumnName() {

			return "STSCLK";

		}

		public String STMSTK;

		public String getSTMSTK() {
			return this.STMSTK;
		}

		public Boolean STMSTKIsNullable() {
			return true;
		}

		public Boolean STMSTKIsKey() {
			return false;
		}

		public Integer STMSTKLength() {
			return null;
		}

		public Integer STMSTKPrecision() {
			return null;
		}

		public String STMSTKDefault() {

			return null;

		}

		public String STMSTKComment() {

			return "";

		}

		public String STMSTKPattern() {

			return "";

		}

		public String STMSTKOriginalDbColumnName() {

			return "STMSTK";

		}

		public String STAYES;

		public String getSTAYES() {
			return this.STAYES;
		}

		public Boolean STAYESIsNullable() {
			return true;
		}

		public Boolean STAYESIsKey() {
			return false;
		}

		public Integer STAYESLength() {
			return null;
		}

		public Integer STAYESPrecision() {
			return null;
		}

		public String STAYESDefault() {

			return null;

		}

		public String STAYESComment() {

			return "";

		}

		public String STAYESPattern() {

			return "";

		}

		public String STAYESOriginalDbColumnName() {

			return "STAYES";

		}

		public BigDecimal STAFCT;

		public BigDecimal getSTAFCT() {
			return this.STAFCT;
		}

		public Boolean STAFCTIsNullable() {
			return true;
		}

		public Boolean STAFCTIsKey() {
			return false;
		}

		public Integer STAFCTLength() {
			return null;
		}

		public Integer STAFCTPrecision() {
			return null;
		}

		public String STAFCTDefault() {

			return "";

		}

		public String STAFCTComment() {

			return "";

		}

		public String STAFCTPattern() {

			return "";

		}

		public String STAFCTOriginalDbColumnName() {

			return "STAFCT";

		}

		public BigDecimal RPLZN;

		public BigDecimal getRPLZN() {
			return this.RPLZN;
		}

		public Boolean RPLZNIsNullable() {
			return true;
		}

		public Boolean RPLZNIsKey() {
			return false;
		}

		public Integer RPLZNLength() {
			return null;
		}

		public Integer RPLZNPrecision() {
			return null;
		}

		public String RPLZNDefault() {

			return "";

		}

		public String RPLZNComment() {

			return "";

		}

		public String RPLZNPattern() {

			return "";

		}

		public String RPLZNOriginalDbColumnName() {

			return "RPLZN";

		}

		public String STPRMS;

		public String getSTPRMS() {
			return this.STPRMS;
		}

		public Boolean STPRMSIsNullable() {
			return true;
		}

		public Boolean STPRMSIsKey() {
			return false;
		}

		public Integer STPRMSLength() {
			return null;
		}

		public Integer STPRMSPrecision() {
			return null;
		}

		public String STPRMSDefault() {

			return null;

		}

		public String STPRMSComment() {

			return "";

		}

		public String STPRMSPattern() {

			return "";

		}

		public String STPRMSOriginalDbColumnName() {

			return "STPRMS";

		}

		public String STRPON;

		public String getSTRPON() {
			return this.STRPON;
		}

		public Boolean STRPONIsNullable() {
			return true;
		}

		public Boolean STRPONIsKey() {
			return false;
		}

		public Integer STRPONLength() {
			return null;
		}

		public Integer STRPONPrecision() {
			return null;
		}

		public String STRPONDefault() {

			return null;

		}

		public String STRPONComment() {

			return "";

		}

		public String STRPONPattern() {

			return "";

		}

		public String STRPONOriginalDbColumnName() {

			return "STRPON";

		}

		public BigDecimal STCLCN;

		public BigDecimal getSTCLCN() {
			return this.STCLCN;
		}

		public Boolean STCLCNIsNullable() {
			return true;
		}

		public Boolean STCLCNIsKey() {
			return false;
		}

		public Integer STCLCNLength() {
			return null;
		}

		public Integer STCLCNPrecision() {
			return null;
		}

		public String STCLCNDefault() {

			return "";

		}

		public String STCLCNComment() {

			return "";

		}

		public String STCLCNPattern() {

			return "";

		}

		public String STCLCNOriginalDbColumnName() {

			return "STCLCN";

		}

		public BigDecimal STCLDT;

		public BigDecimal getSTCLDT() {
			return this.STCLDT;
		}

		public Boolean STCLDTIsNullable() {
			return true;
		}

		public Boolean STCLDTIsKey() {
			return false;
		}

		public Integer STCLDTLength() {
			return null;
		}

		public Integer STCLDTPrecision() {
			return null;
		}

		public String STCLDTDefault() {

			return "";

		}

		public String STCLDTComment() {

			return "";

		}

		public String STCLDTPattern() {

			return "";

		}

		public String STCLDTOriginalDbColumnName() {

			return "STCLDT";

		}

		public String STRCOD;

		public String getSTRCOD() {
			return this.STRCOD;
		}

		public Boolean STRCODIsNullable() {
			return true;
		}

		public Boolean STRCODIsKey() {
			return false;
		}

		public Integer STRCODLength() {
			return null;
		}

		public Integer STRCODPrecision() {
			return null;
		}

		public String STRCODDefault() {

			return null;

		}

		public String STRCODComment() {

			return "";

		}

		public String STRCODPattern() {

			return "";

		}

		public String STRCODOriginalDbColumnName() {

			return "STRCOD";

		}

		public String STRTXC;

		public String getSTRTXC() {
			return this.STRTXC;
		}

		public Boolean STRTXCIsNullable() {
			return true;
		}

		public Boolean STRTXCIsKey() {
			return false;
		}

		public Integer STRTXCLength() {
			return null;
		}

		public Integer STRTXCPrecision() {
			return null;
		}

		public String STRTXCDefault() {

			return null;

		}

		public String STRTXCComment() {

			return "";

		}

		public String STRTXCPattern() {

			return "";

		}

		public String STRTXCOriginalDbColumnName() {

			return "STRTXC";

		}

		public String STRLAN;

		public String getSTRLAN() {
			return this.STRLAN;
		}

		public Boolean STRLANIsNullable() {
			return true;
		}

		public Boolean STRLANIsKey() {
			return false;
		}

		public Integer STRLANLength() {
			return null;
		}

		public Integer STRLANPrecision() {
			return null;
		}

		public String STRLANDefault() {

			return null;

		}

		public String STRLANComment() {

			return "";

		}

		public String STRLANPattern() {

			return "";

		}

		public String STRLANOriginalDbColumnName() {

			return "STRLAN";

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length) {
					if (length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL4.length == 0) {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[1024];
					} else {
						commonByteArray_AT_TALEND_JOBS_TTAALLCL4 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length);
				strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL4, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STRNUM = (BigDecimal) dis.readObject();

					this.STRNAM = readString(dis);

					this.STADD1 = readString(dis);

					this.STADD2 = readString(dis);

					this.STADD3 = readString(dis);

					this.STCITY = readString(dis);

					this.STPVST = readString(dis);

					this.STCNTY = readString(dis);

					this.STCTRY = readString(dis);

					this.STZIP = readString(dis);

					this.STPHON = readString(dis);

					this.STFAXN = readString(dis);

					this.STSHRT = readString(dis);

					this.REGNUM = (BigDecimal) dis.readObject();

					this.STMNGR = readString(dis);

					this.STSCEN = (BigDecimal) dis.readObject();

					this.STSDAT = (BigDecimal) dis.readObject();

					this.STRETL = (BigDecimal) dis.readObject();

					this.STPOLL = readString(dis);

					this.STSNDY = readString(dis);

					this.STRHDO = readString(dis);

					this.STBACT = (BigDecimal) dis.readObject();

					this.STRWHS = (BigDecimal) dis.readObject();

					this.STRDST = (BigDecimal) dis.readObject();

					this.STRCMP = readString(dis);

					this.STRTYP = readString(dis);

					this.STOUTQ = readString(dis);

					this.STCOMP = (BigDecimal) dis.readObject();

					this.STCNTR = readString(dis);

					this.STGLYN = readString(dis);

					this.STAPYN = readString(dis);

					this.STARYN = readString(dis);

					this.STLCNN = (BigDecimal) dis.readObject();

					this.ZONNUM = (BigDecimal) dis.readObject();

					this.STAVGC = readString(dis);

					this.STSCLK = readString(dis);

					this.STMSTK = readString(dis);

					this.STAYES = readString(dis);

					this.STAFCT = (BigDecimal) dis.readObject();

					this.RPLZN = (BigDecimal) dis.readObject();

					this.STPRMS = readString(dis);

					this.STRPON = readString(dis);

					this.STCLCN = (BigDecimal) dis.readObject();

					this.STCLDT = (BigDecimal) dis.readObject();

					this.STRCOD = readString(dis);

					this.STRTXC = readString(dis);

					this.STRLAN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL4) {

				try {

					int length = 0;

					this.STRNUM = (BigDecimal) dis.readObject();

					this.STRNAM = readString(dis);

					this.STADD1 = readString(dis);

					this.STADD2 = readString(dis);

					this.STADD3 = readString(dis);

					this.STCITY = readString(dis);

					this.STPVST = readString(dis);

					this.STCNTY = readString(dis);

					this.STCTRY = readString(dis);

					this.STZIP = readString(dis);

					this.STPHON = readString(dis);

					this.STFAXN = readString(dis);

					this.STSHRT = readString(dis);

					this.REGNUM = (BigDecimal) dis.readObject();

					this.STMNGR = readString(dis);

					this.STSCEN = (BigDecimal) dis.readObject();

					this.STSDAT = (BigDecimal) dis.readObject();

					this.STRETL = (BigDecimal) dis.readObject();

					this.STPOLL = readString(dis);

					this.STSNDY = readString(dis);

					this.STRHDO = readString(dis);

					this.STBACT = (BigDecimal) dis.readObject();

					this.STRWHS = (BigDecimal) dis.readObject();

					this.STRDST = (BigDecimal) dis.readObject();

					this.STRCMP = readString(dis);

					this.STRTYP = readString(dis);

					this.STOUTQ = readString(dis);

					this.STCOMP = (BigDecimal) dis.readObject();

					this.STCNTR = readString(dis);

					this.STGLYN = readString(dis);

					this.STAPYN = readString(dis);

					this.STARYN = readString(dis);

					this.STLCNN = (BigDecimal) dis.readObject();

					this.ZONNUM = (BigDecimal) dis.readObject();

					this.STAVGC = readString(dis);

					this.STSCLK = readString(dis);

					this.STMSTK = readString(dis);

					this.STAYES = readString(dis);

					this.STAFCT = (BigDecimal) dis.readObject();

					this.RPLZN = (BigDecimal) dis.readObject();

					this.STPRMS = readString(dis);

					this.STRPON = readString(dis);

					this.STCLCN = (BigDecimal) dis.readObject();

					this.STCLDT = (BigDecimal) dis.readObject();

					this.STRCOD = readString(dis);

					this.STRTXC = readString(dis);

					this.STRLAN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STRNUM);

				// String

				writeString(this.STRNAM, dos);

				// String

				writeString(this.STADD1, dos);

				// String

				writeString(this.STADD2, dos);

				// String

				writeString(this.STADD3, dos);

				// String

				writeString(this.STCITY, dos);

				// String

				writeString(this.STPVST, dos);

				// String

				writeString(this.STCNTY, dos);

				// String

				writeString(this.STCTRY, dos);

				// String

				writeString(this.STZIP, dos);

				// String

				writeString(this.STPHON, dos);

				// String

				writeString(this.STFAXN, dos);

				// String

				writeString(this.STSHRT, dos);

				// BigDecimal

				dos.writeObject(this.REGNUM);

				// String

				writeString(this.STMNGR, dos);

				// BigDecimal

				dos.writeObject(this.STSCEN);

				// BigDecimal

				dos.writeObject(this.STSDAT);

				// BigDecimal

				dos.writeObject(this.STRETL);

				// String

				writeString(this.STPOLL, dos);

				// String

				writeString(this.STSNDY, dos);

				// String

				writeString(this.STRHDO, dos);

				// BigDecimal

				dos.writeObject(this.STBACT);

				// BigDecimal

				dos.writeObject(this.STRWHS);

				// BigDecimal

				dos.writeObject(this.STRDST);

				// String

				writeString(this.STRCMP, dos);

				// String

				writeString(this.STRTYP, dos);

				// String

				writeString(this.STOUTQ, dos);

				// BigDecimal

				dos.writeObject(this.STCOMP);

				// String

				writeString(this.STCNTR, dos);

				// String

				writeString(this.STGLYN, dos);

				// String

				writeString(this.STAPYN, dos);

				// String

				writeString(this.STARYN, dos);

				// BigDecimal

				dos.writeObject(this.STLCNN);

				// BigDecimal

				dos.writeObject(this.ZONNUM);

				// String

				writeString(this.STAVGC, dos);

				// String

				writeString(this.STSCLK, dos);

				// String

				writeString(this.STMSTK, dos);

				// String

				writeString(this.STAYES, dos);

				// BigDecimal

				dos.writeObject(this.STAFCT);

				// BigDecimal

				dos.writeObject(this.RPLZN);

				// String

				writeString(this.STPRMS, dos);

				// String

				writeString(this.STRPON, dos);

				// BigDecimal

				dos.writeObject(this.STCLCN);

				// BigDecimal

				dos.writeObject(this.STCLDT);

				// String

				writeString(this.STRCOD, dos);

				// String

				writeString(this.STRTXC, dos);

				// String

				writeString(this.STRLAN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.STRNUM);

				// String

				writeString(this.STRNAM, dos);

				// String

				writeString(this.STADD1, dos);

				// String

				writeString(this.STADD2, dos);

				// String

				writeString(this.STADD3, dos);

				// String

				writeString(this.STCITY, dos);

				// String

				writeString(this.STPVST, dos);

				// String

				writeString(this.STCNTY, dos);

				// String

				writeString(this.STCTRY, dos);

				// String

				writeString(this.STZIP, dos);

				// String

				writeString(this.STPHON, dos);

				// String

				writeString(this.STFAXN, dos);

				// String

				writeString(this.STSHRT, dos);

				// BigDecimal

				dos.writeObject(this.REGNUM);

				// String

				writeString(this.STMNGR, dos);

				// BigDecimal

				dos.writeObject(this.STSCEN);

				// BigDecimal

				dos.writeObject(this.STSDAT);

				// BigDecimal

				dos.writeObject(this.STRETL);

				// String

				writeString(this.STPOLL, dos);

				// String

				writeString(this.STSNDY, dos);

				// String

				writeString(this.STRHDO, dos);

				// BigDecimal

				dos.writeObject(this.STBACT);

				// BigDecimal

				dos.writeObject(this.STRWHS);

				// BigDecimal

				dos.writeObject(this.STRDST);

				// String

				writeString(this.STRCMP, dos);

				// String

				writeString(this.STRTYP, dos);

				// String

				writeString(this.STOUTQ, dos);

				// BigDecimal

				dos.writeObject(this.STCOMP);

				// String

				writeString(this.STCNTR, dos);

				// String

				writeString(this.STGLYN, dos);

				// String

				writeString(this.STAPYN, dos);

				// String

				writeString(this.STARYN, dos);

				// BigDecimal

				dos.writeObject(this.STLCNN);

				// BigDecimal

				dos.writeObject(this.ZONNUM);

				// String

				writeString(this.STAVGC, dos);

				// String

				writeString(this.STSCLK, dos);

				// String

				writeString(this.STMSTK, dos);

				// String

				writeString(this.STAYES, dos);

				// BigDecimal

				dos.writeObject(this.STAFCT);

				// BigDecimal

				dos.writeObject(this.RPLZN);

				// String

				writeString(this.STPRMS, dos);

				// String

				writeString(this.STRPON, dos);

				// BigDecimal

				dos.writeObject(this.STCLCN);

				// BigDecimal

				dos.writeObject(this.STCLDT);

				// String

				writeString(this.STRCOD, dos);

				// String

				writeString(this.STRTXC, dos);

				// String

				writeString(this.STRLAN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STRNUM=" + String.valueOf(STRNUM));
			sb.append(",STRNAM=" + STRNAM);
			sb.append(",STADD1=" + STADD1);
			sb.append(",STADD2=" + STADD2);
			sb.append(",STADD3=" + STADD3);
			sb.append(",STCITY=" + STCITY);
			sb.append(",STPVST=" + STPVST);
			sb.append(",STCNTY=" + STCNTY);
			sb.append(",STCTRY=" + STCTRY);
			sb.append(",STZIP=" + STZIP);
			sb.append(",STPHON=" + STPHON);
			sb.append(",STFAXN=" + STFAXN);
			sb.append(",STSHRT=" + STSHRT);
			sb.append(",REGNUM=" + String.valueOf(REGNUM));
			sb.append(",STMNGR=" + STMNGR);
			sb.append(",STSCEN=" + String.valueOf(STSCEN));
			sb.append(",STSDAT=" + String.valueOf(STSDAT));
			sb.append(",STRETL=" + String.valueOf(STRETL));
			sb.append(",STPOLL=" + STPOLL);
			sb.append(",STSNDY=" + STSNDY);
			sb.append(",STRHDO=" + STRHDO);
			sb.append(",STBACT=" + String.valueOf(STBACT));
			sb.append(",STRWHS=" + String.valueOf(STRWHS));
			sb.append(",STRDST=" + String.valueOf(STRDST));
			sb.append(",STRCMP=" + STRCMP);
			sb.append(",STRTYP=" + STRTYP);
			sb.append(",STOUTQ=" + STOUTQ);
			sb.append(",STCOMP=" + String.valueOf(STCOMP));
			sb.append(",STCNTR=" + STCNTR);
			sb.append(",STGLYN=" + STGLYN);
			sb.append(",STAPYN=" + STAPYN);
			sb.append(",STARYN=" + STARYN);
			sb.append(",STLCNN=" + String.valueOf(STLCNN));
			sb.append(",ZONNUM=" + String.valueOf(ZONNUM));
			sb.append(",STAVGC=" + STAVGC);
			sb.append(",STSCLK=" + STSCLK);
			sb.append(",STMSTK=" + STMSTK);
			sb.append(",STAYES=" + STAYES);
			sb.append(",STAFCT=" + String.valueOf(STAFCT));
			sb.append(",RPLZN=" + String.valueOf(RPLZN));
			sb.append(",STPRMS=" + STPRMS);
			sb.append(",STRPON=" + STRPON);
			sb.append(",STCLCN=" + String.valueOf(STCLCN));
			sb.append(",STCLDT=" + String.valueOf(STCLDT));
			sb.append(",STRCOD=" + STRCOD);
			sb.append(",STRTXC=" + STRTXC);
			sb.append(",STRLAN=" + STRLAN);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (STRNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(STRNUM);
			}

			sb.append("|");

			if (STRNAM == null) {
				sb.append("<null>");
			} else {
				sb.append(STRNAM);
			}

			sb.append("|");

			if (STADD1 == null) {
				sb.append("<null>");
			} else {
				sb.append(STADD1);
			}

			sb.append("|");

			if (STADD2 == null) {
				sb.append("<null>");
			} else {
				sb.append(STADD2);
			}

			sb.append("|");

			if (STADD3 == null) {
				sb.append("<null>");
			} else {
				sb.append(STADD3);
			}

			sb.append("|");

			if (STCITY == null) {
				sb.append("<null>");
			} else {
				sb.append(STCITY);
			}

			sb.append("|");

			if (STPVST == null) {
				sb.append("<null>");
			} else {
				sb.append(STPVST);
			}

			sb.append("|");

			if (STCNTY == null) {
				sb.append("<null>");
			} else {
				sb.append(STCNTY);
			}

			sb.append("|");

			if (STCTRY == null) {
				sb.append("<null>");
			} else {
				sb.append(STCTRY);
			}

			sb.append("|");

			if (STZIP == null) {
				sb.append("<null>");
			} else {
				sb.append(STZIP);
			}

			sb.append("|");

			if (STPHON == null) {
				sb.append("<null>");
			} else {
				sb.append(STPHON);
			}

			sb.append("|");

			if (STFAXN == null) {
				sb.append("<null>");
			} else {
				sb.append(STFAXN);
			}

			sb.append("|");

			if (STSHRT == null) {
				sb.append("<null>");
			} else {
				sb.append(STSHRT);
			}

			sb.append("|");

			if (REGNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(REGNUM);
			}

			sb.append("|");

			if (STMNGR == null) {
				sb.append("<null>");
			} else {
				sb.append(STMNGR);
			}

			sb.append("|");

			if (STSCEN == null) {
				sb.append("<null>");
			} else {
				sb.append(STSCEN);
			}

			sb.append("|");

			if (STSDAT == null) {
				sb.append("<null>");
			} else {
				sb.append(STSDAT);
			}

			sb.append("|");

			if (STRETL == null) {
				sb.append("<null>");
			} else {
				sb.append(STRETL);
			}

			sb.append("|");

			if (STPOLL == null) {
				sb.append("<null>");
			} else {
				sb.append(STPOLL);
			}

			sb.append("|");

			if (STSNDY == null) {
				sb.append("<null>");
			} else {
				sb.append(STSNDY);
			}

			sb.append("|");

			if (STRHDO == null) {
				sb.append("<null>");
			} else {
				sb.append(STRHDO);
			}

			sb.append("|");

			if (STBACT == null) {
				sb.append("<null>");
			} else {
				sb.append(STBACT);
			}

			sb.append("|");

			if (STRWHS == null) {
				sb.append("<null>");
			} else {
				sb.append(STRWHS);
			}

			sb.append("|");

			if (STRDST == null) {
				sb.append("<null>");
			} else {
				sb.append(STRDST);
			}

			sb.append("|");

			if (STRCMP == null) {
				sb.append("<null>");
			} else {
				sb.append(STRCMP);
			}

			sb.append("|");

			if (STRTYP == null) {
				sb.append("<null>");
			} else {
				sb.append(STRTYP);
			}

			sb.append("|");

			if (STOUTQ == null) {
				sb.append("<null>");
			} else {
				sb.append(STOUTQ);
			}

			sb.append("|");

			if (STCOMP == null) {
				sb.append("<null>");
			} else {
				sb.append(STCOMP);
			}

			sb.append("|");

			if (STCNTR == null) {
				sb.append("<null>");
			} else {
				sb.append(STCNTR);
			}

			sb.append("|");

			if (STGLYN == null) {
				sb.append("<null>");
			} else {
				sb.append(STGLYN);
			}

			sb.append("|");

			if (STAPYN == null) {
				sb.append("<null>");
			} else {
				sb.append(STAPYN);
			}

			sb.append("|");

			if (STARYN == null) {
				sb.append("<null>");
			} else {
				sb.append(STARYN);
			}

			sb.append("|");

			if (STLCNN == null) {
				sb.append("<null>");
			} else {
				sb.append(STLCNN);
			}

			sb.append("|");

			if (ZONNUM == null) {
				sb.append("<null>");
			} else {
				sb.append(ZONNUM);
			}

			sb.append("|");

			if (STAVGC == null) {
				sb.append("<null>");
			} else {
				sb.append(STAVGC);
			}

			sb.append("|");

			if (STSCLK == null) {
				sb.append("<null>");
			} else {
				sb.append(STSCLK);
			}

			sb.append("|");

			if (STMSTK == null) {
				sb.append("<null>");
			} else {
				sb.append(STMSTK);
			}

			sb.append("|");

			if (STAYES == null) {
				sb.append("<null>");
			} else {
				sb.append(STAYES);
			}

			sb.append("|");

			if (STAFCT == null) {
				sb.append("<null>");
			} else {
				sb.append(STAFCT);
			}

			sb.append("|");

			if (RPLZN == null) {
				sb.append("<null>");
			} else {
				sb.append(RPLZN);
			}

			sb.append("|");

			if (STPRMS == null) {
				sb.append("<null>");
			} else {
				sb.append(STPRMS);
			}

			sb.append("|");

			if (STRPON == null) {
				sb.append("<null>");
			} else {
				sb.append(STRPON);
			}

			sb.append("|");

			if (STCLCN == null) {
				sb.append("<null>");
			} else {
				sb.append(STCLCN);
			}

			sb.append("|");

			if (STCLDT == null) {
				sb.append("<null>");
			} else {
				sb.append(STCLDT);
			}

			sb.append("|");

			if (STRCOD == null) {
				sb.append("<null>");
			} else {
				sb.append(STRCOD);
			}

			sb.append("|");

			if (STRTXC == null) {
				sb.append("<null>");
			} else {
				sb.append(STRTXC);
			}

			sb.append("|");

			if (STRLAN == null) {
				sb.append("<null>");
			} else {
				sb.append(STRLAN);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_6");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				TBLSTR_outputStruct TBLSTR_output = new TBLSTR_outputStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "TBLSTR_output");

				int tos_count_tDBOutput_4 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBOutput_4", "tDBOutput_4", "tSnowflakeOutput");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBOutput_4 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBOutput_4 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBOutput_4 = (String) (restRequest_tDBOutput_4 != null
						? restRequest_tDBOutput_4.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBOutput_4 = new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBOutput_4 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBOutput_4 = null;

				org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_4 = (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_4
						.createRuntimeProperties();
				props_tDBOutput_4.setValue("tableAction",
						org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);

				props_tDBOutput_4.setValue("outputAction",
						org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);

				props_tDBOutput_4.setValue("convertColumnsAndTableToUppercase", true);

				props_tDBOutput_4.setValue("convertEmptyStringsToNull", false);

				props_tDBOutput_4.setValue("useSchemaDatePattern", false);

				props_tDBOutput_4.setValue("dieOnError", false);

				class SchemaSettingTool_tDBOutput_4_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_4_1_fisrt sst_tDBOutput_4_1_fisrt = new SchemaSettingTool_tDBOutput_4_1_fisrt();

				props_tDBOutput_4.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_4_1_fisrt.getSchemaValue()));

				props_tDBOutput_4.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_4.connection.setValue("useCustomRegion", false);

				props_tDBOutput_4.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_4.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_4.connection.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBOutput_4.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				props_tDBOutput_4.table.setValue("tableName", "STORE_INFORMATION_TBLSTR");

				props_tDBOutput_4.table.connection.setValue("region",
						org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);

				props_tDBOutput_4.table.connection.setValue("useCustomRegion", false);

				props_tDBOutput_4.table.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_4.table.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_4.table.connection.referencedComponent.setValue("componentInstanceId",
						"tDBConnection_1");

				props_tDBOutput_4.table.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSnowflakeConnection");

				class SchemaSettingTool_tDBOutput_4_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"STORE_INFORMATION_TBLSTR\",\"fields\":[{", s);

						a("\"name\":\"STRNUM\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STRNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRNAM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":30,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRNAM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STADD1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":35,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STADD1\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STADD2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":35,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STADD2\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STADD3\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":35,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STADD3\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STCITY\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STCITY\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STPVST\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STPVST\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STCNTY\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STCNTY\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STCTRY\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STCTRY\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STZIP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STZIP\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STPHON\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":18,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STPHON\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STFAXN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":18,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STFAXN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STSHRT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":8,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STSHRT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"REGNUM\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"REGNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STMNGR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STMNGR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STSDAT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":16,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STSDAT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRETL\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":8,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STRETL\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STPOLL\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STPOLL\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STSNDY\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STSNDY\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRHDO\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRHDO\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STBACT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STBACT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRWHS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STRWHS\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRDST\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STRDST\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRCMP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRCMP\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRTYP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRTYP\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STOUTQ\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STOUTQ\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STCOMP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STCOMP\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STCNTR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STCNTR\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STGLYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STGLYN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STAPYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STAPYN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STARYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STARYN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STLCNN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STLCNN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"ZONNUM\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ZONNUM\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STAVGC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STAVGC\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STSCLK\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STSCLK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STMSTK\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STMSTK\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STAYES\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STAYES\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STAFCT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":7,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"STAFCT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"RPLZN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"RPLZN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STPRMS\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":4,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STPRMS\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRPON\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRPON\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STCLDT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":16,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STCLDT\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRCOD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRCOD\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRTXC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRTXC\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"STRLAN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"STRLAN\",\"talend.field.default\":\"\"},{",
								s);

						a("\"name\":\"DATELOADED\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"talend.field.dbType\":91,\"talend.field.dbColumnName\":\"DATELOADED\",\"talend.field.default\":\"\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_4_2_fisrt sst_tDBOutput_4_2_fisrt = new SchemaSettingTool_tDBOutput_4_2_fisrt();

				props_tDBOutput_4.table.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_4_2_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_4.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_4 = props_tDBOutput_4.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_4 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_4 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_4 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_4.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_4);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_4.table.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_4 = props_tDBOutput_4.table.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_4 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_4 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_4 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_4.table.connection.referencedComponent
								.setReference(referencedComponentProperties_tDBOutput_4);
					}
				}
				globalMap.put("tDBOutput_4_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_4);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBOutput_4 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBOutput_4_MAPPINGS_URL", mappings_url_tDBOutput_4);

				org.talend.components.api.container.RuntimeContainer container_tDBOutput_4 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBOutput_4";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBOutput_4 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBOutput_4 = null;
				topology_tDBOutput_4 = org.talend.components.api.component.ConnectorTopology.INCOMING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_4 = def_tDBOutput_4.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_4,
						topology_tDBOutput_4);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_4 = def_tDBOutput_4
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_4 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBOutput_4.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBOutput_4 = componentRuntime_tDBOutput_4
						.initialize(container_tDBOutput_4, props_tDBOutput_4);

				if (initVr_tDBOutput_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBOutput_4.getMessage());
				}

				if (componentRuntime_tDBOutput_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBOutput_4;
					compDriverInitialization_tDBOutput_4.runAtDriver(container_tDBOutput_4);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_4 = null;
				if (componentRuntime_tDBOutput_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBOutput_4 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBOutput_4;
					if (doesNodeBelongToRequest_tDBOutput_4) {
						org.talend.daikon.properties.ValidationResult vr_tDBOutput_4 = sourceOrSink_tDBOutput_4
								.validate(container_tDBOutput_4);
						if (vr_tDBOutput_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBOutput_4.getMessage());
						}
					}
				}

				org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_4 = null;
				if (sourceOrSink_tDBOutput_4 instanceof org.talend.components.api.component.runtime.Sink) {
					org.talend.components.api.component.runtime.Sink sink_tDBOutput_4 = (org.talend.components.api.component.runtime.Sink) sourceOrSink_tDBOutput_4;
					org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_4 = sink_tDBOutput_4
							.createWriteOperation();
					if (doesNodeBelongToRequest_tDBOutput_4) {
						writeOperation_tDBOutput_4.initialize(container_tDBOutput_4);
					}
					writer_tDBOutput_4 = writeOperation_tDBOutput_4.createWriter(container_tDBOutput_4);
					if (doesNodeBelongToRequest_tDBOutput_4) {
						writer_tDBOutput_4.open("tDBOutput_4");
					}

					resourceMap.put("writer_tDBOutput_4", writer_tDBOutput_4);
				} // end of "sourceOrSink_tDBOutput_4 instanceof ...Sink"
				org.talend.components.api.component.Connector c_tDBOutput_4 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_4
						.getAvailableConnectors(null, false)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBOutput_4 = currentConnector;
						break;
					}
				}
				org.apache.avro.Schema designSchema_tDBOutput_4 = props_tDBOutput_4.getSchema(c_tDBOutput_4, false);
				incomingEnforcer_tDBOutput_4 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(
						designSchema_tDBOutput_4);

				java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_4 = new java.util.ArrayList<Object>();
				java.util.Iterator outgoingMainRecordsIt_tDBOutput_4 = null;

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, 0, 0, "row9");

				int tos_count_tMap_5 = 0;

				if (log.isDebugEnabled())
					log.debug("tMap_5 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tMap_5 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tMap_5 = new StringBuilder();
							log4jParamters_tMap_5.append("Parameters:");
							log4jParamters_tMap_5.append("LINK_STYLE" + " = " + "AUTO");
							log4jParamters_tMap_5.append(" | ");
							log4jParamters_tMap_5.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
							log4jParamters_tMap_5.append(" | ");
							log4jParamters_tMap_5.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
							log4jParamters_tMap_5.append(" | ");
							log4jParamters_tMap_5.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
							log4jParamters_tMap_5.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tMap_5 - " + (log4jParamters_tMap_5));
						}
					}
					new BytesLimit65535_tMap_5().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tMap_5", "tMap_5", "tMap");
					talendJobLogProcess(globalMap);
				}

// ###############################
// # Lookup's keys initialization
				int count_row9_tMap_5 = 0;

// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
					java.util.Date var1;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_TBLSTR_output_tMap_5 = 0;

				TBLSTR_outputStruct TBLSTR_output_tmp = new TBLSTR_outputStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBInput_6 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBInput_6 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBInput_6 = new StringBuilder();
							log4jParamters_tDBInput_6.append("Parameters:");
							log4jParamters_tDBInput_6.append("USE_EXISTING_CONNECTION" + " = " + "false");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("DB_VERSION" + " = " + "jt400-9.8.jar");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("HOST" + " = " + "context.jda_host_name");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("DBNAME" + " = " + "context.jda_mm_lib");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("USER" + " = " + "context.jda_user_name");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("PASS" + " = "
									+ String.valueOf(
											routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password))
											.substring(0, 4)
									+ "...");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("TABLE" + " = " + "\"\"");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("QUERYSTORE" + " = " + "\"\"");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("QUERY" + " = " + "\"select * from MM4R5LIB.TBLSTR\"");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("PROPERTIES" + " = " + "\"prompt=false\"");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("TRIM_ALL_COLUMN" + " = " + "false");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("TRIM_COLUMN" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STRNUM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STRNAM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STADD1")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STADD2") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STADD3") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STCITY") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STPVST") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STCNTY")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STCTRY") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STZIP") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STPHON") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STFAXN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STSHRT")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("REGNUM") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STMNGR") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STSCEN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STSDAT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STRETL")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STPOLL") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STSNDY") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STRHDO") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STBACT") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STRWHS")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STRDST") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STRCMP") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STRTYP") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STOUTQ") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STCOMP")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STCNTR") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STGLYN") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STAPYN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STARYN") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STLCNN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ZONNUM") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STAVGC") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STSCLK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STMSTK") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STAYES")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STAFCT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("RPLZN") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STPRMS") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STRPON") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STCLCN")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("STCLDT") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("STRCOD") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("STRTXC") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("STRLAN") + "}]");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("SET_QUERY_TIMEOUT" + " = " + "false");
							log4jParamters_tDBInput_6.append(" | ");
							log4jParamters_tDBInput_6.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
							log4jParamters_tDBInput_6.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBInput_6 - " + (log4jParamters_tDBInput_6));
						}
					}
					new BytesLimit65535_tDBInput_6().limitLog4jByte();
				}
				if (enableLogStash) {
					talendJobLog.addCM("tDBInput_6", "tDBInput_6", "tAS400Input");
					talendJobLogProcess(globalMap);
				}

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.jda_user_name;

				final String decryptedPassword_tDBInput_6 = context.jda_password;

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";"
						+ "prompt=false";

				log.debug("tDBInput_6 - Driver ClassName: " + driverClass_tDBInput_6 + ".");

				log.debug("tDBInput_6 - Connection attempt to '" + url_tDBInput_6 + "' with the username '"
						+ dbUser_tDBInput_6 + "'.");

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);
				log.debug("tDBInput_6 - Connection to '" + url_tDBInput_6 + "' has succeeded.");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "select * from MM4R5LIB.TBLSTR";

				log.debug("tDBInput_6 - Executing the query: '" + dbquery_tDBInput_6 + "'.");

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					log.debug("tDBInput_6 - Retrieving records from the database.");

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row9.STRNUM = null;
						} else {

							row9.STRNUM = rs_tDBInput_6.getBigDecimal(1);
							if (rs_tDBInput_6.wasNull()) {
								row9.STRNUM = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row9.STRNAM = null;
						} else {

							row9.STRNAM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row9.STADD1 = null;
						} else {

							row9.STADD1 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row9.STADD2 = null;
						} else {

							row9.STADD2 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row9.STADD3 = null;
						} else {

							row9.STADD3 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row9.STCITY = null;
						} else {

							row9.STCITY = routines.system.JDBCUtil.getString(rs_tDBInput_6, 6, false);
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row9.STPVST = null;
						} else {

							row9.STPVST = routines.system.JDBCUtil.getString(rs_tDBInput_6, 7, false);
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row9.STCNTY = null;
						} else {

							row9.STCNTY = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, false);
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row9.STCTRY = null;
						} else {

							row9.STCTRY = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, false);
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row9.STZIP = null;
						} else {

							row9.STZIP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 10, false);
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row9.STPHON = null;
						} else {

							row9.STPHON = routines.system.JDBCUtil.getString(rs_tDBInput_6, 11, false);
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row9.STFAXN = null;
						} else {

							row9.STFAXN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 12, false);
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row9.STSHRT = null;
						} else {

							row9.STSHRT = routines.system.JDBCUtil.getString(rs_tDBInput_6, 13, false);
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row9.REGNUM = null;
						} else {

							row9.REGNUM = rs_tDBInput_6.getBigDecimal(14);
							if (rs_tDBInput_6.wasNull()) {
								row9.REGNUM = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row9.STMNGR = null;
						} else {

							row9.STMNGR = routines.system.JDBCUtil.getString(rs_tDBInput_6, 15, false);
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row9.STSCEN = null;
						} else {

							row9.STSCEN = rs_tDBInput_6.getBigDecimal(16);
							if (rs_tDBInput_6.wasNull()) {
								row9.STSCEN = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row9.STSDAT = null;
						} else {

							row9.STSDAT = rs_tDBInput_6.getBigDecimal(17);
							if (rs_tDBInput_6.wasNull()) {
								row9.STSDAT = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row9.STRETL = null;
						} else {

							row9.STRETL = rs_tDBInput_6.getBigDecimal(18);
							if (rs_tDBInput_6.wasNull()) {
								row9.STRETL = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row9.STPOLL = null;
						} else {

							row9.STPOLL = routines.system.JDBCUtil.getString(rs_tDBInput_6, 19, false);
						}
						if (colQtyInRs_tDBInput_6 < 20) {
							row9.STSNDY = null;
						} else {

							row9.STSNDY = routines.system.JDBCUtil.getString(rs_tDBInput_6, 20, false);
						}
						if (colQtyInRs_tDBInput_6 < 21) {
							row9.STRHDO = null;
						} else {

							row9.STRHDO = routines.system.JDBCUtil.getString(rs_tDBInput_6, 21, false);
						}
						if (colQtyInRs_tDBInput_6 < 22) {
							row9.STBACT = null;
						} else {

							row9.STBACT = rs_tDBInput_6.getBigDecimal(22);
							if (rs_tDBInput_6.wasNull()) {
								row9.STBACT = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 23) {
							row9.STRWHS = null;
						} else {

							row9.STRWHS = rs_tDBInput_6.getBigDecimal(23);
							if (rs_tDBInput_6.wasNull()) {
								row9.STRWHS = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 24) {
							row9.STRDST = null;
						} else {

							row9.STRDST = rs_tDBInput_6.getBigDecimal(24);
							if (rs_tDBInput_6.wasNull()) {
								row9.STRDST = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 25) {
							row9.STRCMP = null;
						} else {

							row9.STRCMP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 25, false);
						}
						if (colQtyInRs_tDBInput_6 < 26) {
							row9.STRTYP = null;
						} else {

							row9.STRTYP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 26, false);
						}
						if (colQtyInRs_tDBInput_6 < 27) {
							row9.STOUTQ = null;
						} else {

							row9.STOUTQ = routines.system.JDBCUtil.getString(rs_tDBInput_6, 27, false);
						}
						if (colQtyInRs_tDBInput_6 < 28) {
							row9.STCOMP = null;
						} else {

							row9.STCOMP = rs_tDBInput_6.getBigDecimal(28);
							if (rs_tDBInput_6.wasNull()) {
								row9.STCOMP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 29) {
							row9.STCNTR = null;
						} else {

							row9.STCNTR = routines.system.JDBCUtil.getString(rs_tDBInput_6, 29, false);
						}
						if (colQtyInRs_tDBInput_6 < 30) {
							row9.STGLYN = null;
						} else {

							row9.STGLYN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 30, false);
						}
						if (colQtyInRs_tDBInput_6 < 31) {
							row9.STAPYN = null;
						} else {

							row9.STAPYN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 31, false);
						}
						if (colQtyInRs_tDBInput_6 < 32) {
							row9.STARYN = null;
						} else {

							row9.STARYN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 32, false);
						}
						if (colQtyInRs_tDBInput_6 < 33) {
							row9.STLCNN = null;
						} else {

							row9.STLCNN = rs_tDBInput_6.getBigDecimal(33);
							if (rs_tDBInput_6.wasNull()) {
								row9.STLCNN = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 34) {
							row9.ZONNUM = null;
						} else {

							row9.ZONNUM = rs_tDBInput_6.getBigDecimal(34);
							if (rs_tDBInput_6.wasNull()) {
								row9.ZONNUM = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 35) {
							row9.STAVGC = null;
						} else {

							row9.STAVGC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 35, false);
						}
						if (colQtyInRs_tDBInput_6 < 36) {
							row9.STSCLK = null;
						} else {

							row9.STSCLK = routines.system.JDBCUtil.getString(rs_tDBInput_6, 36, false);
						}
						if (colQtyInRs_tDBInput_6 < 37) {
							row9.STMSTK = null;
						} else {

							row9.STMSTK = routines.system.JDBCUtil.getString(rs_tDBInput_6, 37, false);
						}
						if (colQtyInRs_tDBInput_6 < 38) {
							row9.STAYES = null;
						} else {

							row9.STAYES = routines.system.JDBCUtil.getString(rs_tDBInput_6, 38, false);
						}
						if (colQtyInRs_tDBInput_6 < 39) {
							row9.STAFCT = null;
						} else {

							row9.STAFCT = rs_tDBInput_6.getBigDecimal(39);
							if (rs_tDBInput_6.wasNull()) {
								row9.STAFCT = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 40) {
							row9.RPLZN = null;
						} else {

							row9.RPLZN = rs_tDBInput_6.getBigDecimal(40);
							if (rs_tDBInput_6.wasNull()) {
								row9.RPLZN = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 41) {
							row9.STPRMS = null;
						} else {

							row9.STPRMS = routines.system.JDBCUtil.getString(rs_tDBInput_6, 41, false);
						}
						if (colQtyInRs_tDBInput_6 < 42) {
							row9.STRPON = null;
						} else {

							row9.STRPON = routines.system.JDBCUtil.getString(rs_tDBInput_6, 42, false);
						}
						if (colQtyInRs_tDBInput_6 < 43) {
							row9.STCLCN = null;
						} else {

							row9.STCLCN = rs_tDBInput_6.getBigDecimal(43);
							if (rs_tDBInput_6.wasNull()) {
								row9.STCLCN = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 44) {
							row9.STCLDT = null;
						} else {

							row9.STCLDT = rs_tDBInput_6.getBigDecimal(44);
							if (rs_tDBInput_6.wasNull()) {
								row9.STCLDT = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 45) {
							row9.STRCOD = null;
						} else {

							row9.STRCOD = routines.system.JDBCUtil.getString(rs_tDBInput_6, 45, false);
						}
						if (colQtyInRs_tDBInput_6 < 46) {
							row9.STRTXC = null;
						} else {

							row9.STRTXC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 46, false);
						}
						if (colQtyInRs_tDBInput_6 < 47) {
							row9.STRLAN = null;
						} else {

							row9.STRLAN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 47, false);
						}

						log.debug("tDBInput_6 - Retrieving the record " + nb_line_tDBInput_6 + ".");

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

								, "row9", "tDBInput_6", "tDBInput_6", "tAS400Input", "tMap_5", "tMap_5", "tMap"

						)) {
							talendJobLogProcess(globalMap);
						}

						if (log.isTraceEnabled()) {
							log.trace("row9 - " + (row9 == null ? "" : row9.toLogString()));
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)

						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;
							Var.var1 = TalendDate.addDate(
									TalendDate.parseDate("yyyy-MM-dd", TalendDate.getDate("CCYY-MM-DD")), -1, "DD");// ###############################
							// ###############################
							// # Output tables

							TBLSTR_output = null;

// # Output table : 'TBLSTR_output'
							count_TBLSTR_output_tMap_5++;

							TBLSTR_output_tmp.STRNUM = row9.STRNUM;
							TBLSTR_output_tmp.STRNAM = row9.STRNAM;
							TBLSTR_output_tmp.STADD1 = row9.STADD1;
							TBLSTR_output_tmp.STADD2 = row9.STADD2;
							TBLSTR_output_tmp.STADD3 = row9.STADD3;
							TBLSTR_output_tmp.STCITY = row9.STCITY;
							TBLSTR_output_tmp.STPVST = row9.STPVST;
							TBLSTR_output_tmp.STCNTY = row9.STCNTY;
							TBLSTR_output_tmp.STCTRY = row9.STCTRY;
							TBLSTR_output_tmp.STZIP = row9.STZIP;
							TBLSTR_output_tmp.STPHON = row9.STPHON;
							TBLSTR_output_tmp.STFAXN = row9.STFAXN;
							TBLSTR_output_tmp.STSHRT = row9.STSHRT;
							TBLSTR_output_tmp.REGNUM = row9.REGNUM;
							TBLSTR_output_tmp.STMNGR = row9.STMNGR;
							TBLSTR_output_tmp.STSDAT = row9.STSDAT;
							TBLSTR_output_tmp.STRETL = row9.STRETL;
							TBLSTR_output_tmp.STPOLL = row9.STPOLL;
							TBLSTR_output_tmp.STSNDY = row9.STSNDY;
							TBLSTR_output_tmp.STRHDO = row9.STRHDO;
							TBLSTR_output_tmp.STBACT = row9.STBACT;
							TBLSTR_output_tmp.STRWHS = row9.STRWHS;
							TBLSTR_output_tmp.STRDST = row9.STRDST;
							TBLSTR_output_tmp.STRCMP = row9.STRCMP;
							TBLSTR_output_tmp.STRTYP = row9.STRTYP;
							TBLSTR_output_tmp.STOUTQ = row9.STOUTQ;
							TBLSTR_output_tmp.STCOMP = row9.STCOMP;
							TBLSTR_output_tmp.STCNTR = row9.STCNTR;
							TBLSTR_output_tmp.STGLYN = row9.STGLYN;
							TBLSTR_output_tmp.STAPYN = row9.STAPYN;
							TBLSTR_output_tmp.STARYN = row9.STARYN;
							TBLSTR_output_tmp.STLCNN = row9.STLCNN;
							TBLSTR_output_tmp.ZONNUM = row9.ZONNUM;
							TBLSTR_output_tmp.STAVGC = row9.STAVGC;
							TBLSTR_output_tmp.STSCLK = row9.STSCLK;
							TBLSTR_output_tmp.STMSTK = row9.STMSTK;
							TBLSTR_output_tmp.STAYES = row9.STAYES;
							TBLSTR_output_tmp.STAFCT = row9.STAFCT;
							TBLSTR_output_tmp.RPLZN = row9.RPLZN;
							TBLSTR_output_tmp.STPRMS = row9.STPRMS;
							TBLSTR_output_tmp.STRPON = row9.STRPON;
							TBLSTR_output_tmp.STCLDT = row9.STCLDT;
							TBLSTR_output_tmp.STRCOD = row9.STRCOD;
							TBLSTR_output_tmp.STRTXC = row9.STRTXC;
							TBLSTR_output_tmp.STRLAN = row9.STRLAN;
							TBLSTR_output_tmp.DATELOADED = Var.var1;
							TBLSTR_output = TBLSTR_output_tmp;
							log.debug("tMap_5 - Outputting the record " + count_TBLSTR_output_tMap_5
									+ " of the output table 'TBLSTR_output'.");

// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */

						/**
						 * [tMap_5 process_data_begin ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_begin ] stop
						 */
// Start of branch "TBLSTR_output"
						if (TBLSTR_output != null) {

							/**
							 * [tDBOutput_4 main ] start
							 */

							currentComponent = "tDBOutput_4";

							if (runStat.update(execStat, enableLogStash, iterateId, 1, 1

									, "TBLSTR_output", "tMap_5", "tMap_5", "tMap", "tDBOutput_4", "tDBOutput_4",
									"tSnowflakeOutput"

							)) {
								talendJobLogProcess(globalMap);
							}

							if (log.isTraceEnabled()) {
								log.trace("TBLSTR_output - "
										+ (TBLSTR_output == null ? "" : TBLSTR_output.toLogString()));
							}

							if (incomingEnforcer_tDBOutput_4 != null) {
								incomingEnforcer_tDBOutput_4.createNewRecord();
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRNUM") != null) {
								incomingEnforcer_tDBOutput_4.put("STRNUM", TBLSTR_output.STRNUM);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRNAM") != null) {
								incomingEnforcer_tDBOutput_4.put("STRNAM", TBLSTR_output.STRNAM);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STADD1") != null) {
								incomingEnforcer_tDBOutput_4.put("STADD1", TBLSTR_output.STADD1);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STADD2") != null) {
								incomingEnforcer_tDBOutput_4.put("STADD2", TBLSTR_output.STADD2);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STADD3") != null) {
								incomingEnforcer_tDBOutput_4.put("STADD3", TBLSTR_output.STADD3);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STCITY") != null) {
								incomingEnforcer_tDBOutput_4.put("STCITY", TBLSTR_output.STCITY);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STPVST") != null) {
								incomingEnforcer_tDBOutput_4.put("STPVST", TBLSTR_output.STPVST);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STCNTY") != null) {
								incomingEnforcer_tDBOutput_4.put("STCNTY", TBLSTR_output.STCNTY);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STCTRY") != null) {
								incomingEnforcer_tDBOutput_4.put("STCTRY", TBLSTR_output.STCTRY);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STZIP") != null) {
								incomingEnforcer_tDBOutput_4.put("STZIP", TBLSTR_output.STZIP);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STPHON") != null) {
								incomingEnforcer_tDBOutput_4.put("STPHON", TBLSTR_output.STPHON);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STFAXN") != null) {
								incomingEnforcer_tDBOutput_4.put("STFAXN", TBLSTR_output.STFAXN);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STSHRT") != null) {
								incomingEnforcer_tDBOutput_4.put("STSHRT", TBLSTR_output.STSHRT);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("REGNUM") != null) {
								incomingEnforcer_tDBOutput_4.put("REGNUM", TBLSTR_output.REGNUM);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STMNGR") != null) {
								incomingEnforcer_tDBOutput_4.put("STMNGR", TBLSTR_output.STMNGR);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STSDAT") != null) {
								incomingEnforcer_tDBOutput_4.put("STSDAT", TBLSTR_output.STSDAT);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRETL") != null) {
								incomingEnforcer_tDBOutput_4.put("STRETL", TBLSTR_output.STRETL);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STPOLL") != null) {
								incomingEnforcer_tDBOutput_4.put("STPOLL", TBLSTR_output.STPOLL);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STSNDY") != null) {
								incomingEnforcer_tDBOutput_4.put("STSNDY", TBLSTR_output.STSNDY);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRHDO") != null) {
								incomingEnforcer_tDBOutput_4.put("STRHDO", TBLSTR_output.STRHDO);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STBACT") != null) {
								incomingEnforcer_tDBOutput_4.put("STBACT", TBLSTR_output.STBACT);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRWHS") != null) {
								incomingEnforcer_tDBOutput_4.put("STRWHS", TBLSTR_output.STRWHS);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRDST") != null) {
								incomingEnforcer_tDBOutput_4.put("STRDST", TBLSTR_output.STRDST);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRCMP") != null) {
								incomingEnforcer_tDBOutput_4.put("STRCMP", TBLSTR_output.STRCMP);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRTYP") != null) {
								incomingEnforcer_tDBOutput_4.put("STRTYP", TBLSTR_output.STRTYP);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STOUTQ") != null) {
								incomingEnforcer_tDBOutput_4.put("STOUTQ", TBLSTR_output.STOUTQ);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STCOMP") != null) {
								incomingEnforcer_tDBOutput_4.put("STCOMP", TBLSTR_output.STCOMP);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STCNTR") != null) {
								incomingEnforcer_tDBOutput_4.put("STCNTR", TBLSTR_output.STCNTR);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STGLYN") != null) {
								incomingEnforcer_tDBOutput_4.put("STGLYN", TBLSTR_output.STGLYN);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STAPYN") != null) {
								incomingEnforcer_tDBOutput_4.put("STAPYN", TBLSTR_output.STAPYN);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STARYN") != null) {
								incomingEnforcer_tDBOutput_4.put("STARYN", TBLSTR_output.STARYN);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STLCNN") != null) {
								incomingEnforcer_tDBOutput_4.put("STLCNN", TBLSTR_output.STLCNN);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("ZONNUM") != null) {
								incomingEnforcer_tDBOutput_4.put("ZONNUM", TBLSTR_output.ZONNUM);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STAVGC") != null) {
								incomingEnforcer_tDBOutput_4.put("STAVGC", TBLSTR_output.STAVGC);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STSCLK") != null) {
								incomingEnforcer_tDBOutput_4.put("STSCLK", TBLSTR_output.STSCLK);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STMSTK") != null) {
								incomingEnforcer_tDBOutput_4.put("STMSTK", TBLSTR_output.STMSTK);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STAYES") != null) {
								incomingEnforcer_tDBOutput_4.put("STAYES", TBLSTR_output.STAYES);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STAFCT") != null) {
								incomingEnforcer_tDBOutput_4.put("STAFCT", TBLSTR_output.STAFCT);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("RPLZN") != null) {
								incomingEnforcer_tDBOutput_4.put("RPLZN", TBLSTR_output.RPLZN);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STPRMS") != null) {
								incomingEnforcer_tDBOutput_4.put("STPRMS", TBLSTR_output.STPRMS);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRPON") != null) {
								incomingEnforcer_tDBOutput_4.put("STRPON", TBLSTR_output.STRPON);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STCLDT") != null) {
								incomingEnforcer_tDBOutput_4.put("STCLDT", TBLSTR_output.STCLDT);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRCOD") != null) {
								incomingEnforcer_tDBOutput_4.put("STRCOD", TBLSTR_output.STRCOD);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRTXC") != null) {
								incomingEnforcer_tDBOutput_4.put("STRTXC", TBLSTR_output.STRTXC);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("STRLAN") != null) {
								incomingEnforcer_tDBOutput_4.put("STRLAN", TBLSTR_output.STRLAN);
							}
							// skip the put action if the input column doesn't appear in component runtime
							// schema
							if (incomingEnforcer_tDBOutput_4 != null
									&& incomingEnforcer_tDBOutput_4.getRuntimeSchema().getField("DATELOADED") != null) {
								incomingEnforcer_tDBOutput_4.put("DATELOADED", TBLSTR_output.DATELOADED);
							}

							org.apache.avro.generic.IndexedRecord data_tDBOutput_4 = null;
							if (incomingEnforcer_tDBOutput_4 != null) {
								data_tDBOutput_4 = incomingEnforcer_tDBOutput_4.getCurrentRecord();
							}

							if (writer_tDBOutput_4 != null && data_tDBOutput_4 != null) {
								writer_tDBOutput_4.write(data_tDBOutput_4);
							}

							nb_line_tDBOutput_4++;

							tos_count_tDBOutput_4++;

							/**
							 * [tDBOutput_4 main ] stop
							 */

							/**
							 * [tDBOutput_4 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_4 process_data_end ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_end ] stop
							 */

						} // End of branch "TBLSTR_output"

						/**
						 * [tMap_5 process_data_end ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						log.debug("tDBInput_6 - Closing the connection to the database.");

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

						log.debug("tDBInput_6 - Connection to the database closed.");

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);
				log.debug("tDBInput_6 - Retrieved records count: " + nb_line_tDBInput_6 + " .");

				if (log.isDebugEnabled())
					log.debug("tDBInput_6 - " + ("Done."));

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_5 - Written records count in the table 'TBLSTR_output': " + count_TBLSTR_output_tMap_5
						+ ".");

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "row9", 2, 0,
						"tDBInput_6", "tDBInput_6", "tAS400Input", "tMap_5", "tMap_5", "tMap", "output")) {
					talendJobLogProcess(globalMap);
				}

				if (log.isDebugEnabled())
					log.debug("tMap_5 - " + ("Done."));

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

// end of generic

				resourceMap.put("finish_tDBOutput_4", Boolean.TRUE);

				java.util.Map<String, Object> resultMap_tDBOutput_4 = null;
				if (writer_tDBOutput_4 != null) {
					org.talend.components.api.component.runtime.Result resultObject_tDBOutput_4 = (org.talend.components.api.component.runtime.Result) writer_tDBOutput_4
							.close();
					resultMap_tDBOutput_4 = writer_tDBOutput_4.getWriteOperation()
							.finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(
									resultObject_tDBOutput_4), container_tDBOutput_4);
				}
				if (resultMap_tDBOutput_4 != null) {
					for (java.util.Map.Entry<String, Object> entry_tDBOutput_4 : resultMap_tDBOutput_4.entrySet()) {
						switch (entry_tDBOutput_4.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tDBOutput_4.setComponentData("tDBOutput_4", "ERROR_MESSAGE",
									entry_tDBOutput_4.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tDBOutput_4.setComponentData("tDBOutput_4", "NB_LINE",
									entry_tDBOutput_4.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tDBOutput_4.setComponentData("tDBOutput_4", "NB_SUCCESS",
									entry_tDBOutput_4.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tDBOutput_4.setComponentData("tDBOutput_4", "NB_REJECT",
									entry_tDBOutput_4.getValue());
							break;
						default:
							StringBuilder studio_key_tDBOutput_4 = new StringBuilder();
							for (int i_tDBOutput_4 = 0; i_tDBOutput_4 < entry_tDBOutput_4.getKey()
									.length(); i_tDBOutput_4++) {
								char ch_tDBOutput_4 = entry_tDBOutput_4.getKey().charAt(i_tDBOutput_4);
								if (Character.isUpperCase(ch_tDBOutput_4) && i_tDBOutput_4 > 0) {
									studio_key_tDBOutput_4.append('_');
								}
								studio_key_tDBOutput_4.append(ch_tDBOutput_4);
							}
							container_tDBOutput_4.setComponentData("tDBOutput_4",
									studio_key_tDBOutput_4.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tDBOutput_4.getValue());
							break;
						}
					}
				}

				if (runStat.updateStatAndLog(execStat, enableLogStash, resourceMap, iterateId, "TBLSTR_output", 2, 0,
						"tMap_5", "tMap_5", "tMap", "tDBOutput_4", "tDBOutput_4", "tSnowflakeOutput", "output")) {
					talendJobLogProcess(globalMap);
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

// finally of generic

				if (resourceMap.get("finish_tDBOutput_4") == null) {
					if (resourceMap.get("writer_tDBOutput_4") != null) {
						try {
							((org.talend.components.api.component.runtime.Writer) resourceMap.get("writer_tDBOutput_4"))
									.close();
						} catch (java.io.IOException e_tDBOutput_4) {
							String errorMessage_tDBOutput_4 = "failed to release the resource in tDBOutput_4 :"
									+ e_tDBOutput_4.getMessage();
							System.err.println(errorMessage_tDBOutput_4);
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tPostjob_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tPostjob_1", "tPostjob_1", "tPostjob");
					talendJobLogProcess(globalMap);
				}

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBClose_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBClose_1", "tDBClose_1", "tSnowflakeClose");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBClose_1 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBClose_1 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBClose_1 = (String) (restRequest_tDBClose_1 != null
						? restRequest_tDBClose_1.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBClose_1 = new org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBClose_1 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBClose_1 = null;

				org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseProperties props_tDBClose_1 = (org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseProperties) def_tDBClose_1
						.createRuntimeProperties();
				props_tDBClose_1.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBClose_1.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBClose_1.referencedComponent.setValue("referenceDefinitionName", "tSnowflakeConnection");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBClose_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBClose_1 = props_tDBClose_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBClose_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBClose_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBClose_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBClose_1.referencedComponent.setReference(referencedComponentProperties_tDBClose_1);
					}
				}
				globalMap.put("tDBClose_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBClose_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBClose_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBClose_1_MAPPINGS_URL", mappings_url_tDBClose_1);

				org.talend.components.api.container.RuntimeContainer container_tDBClose_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBClose_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBClose_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBClose_1 = null;
				topology_tDBClose_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBClose_1 = def_tDBClose_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBClose_1,
						topology_tDBClose_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBClose_1 = def_tDBClose_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBClose_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBClose_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBClose_1 = componentRuntime_tDBClose_1
						.initialize(container_tDBClose_1, props_tDBClose_1);

				if (initVr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBClose_1.getMessage());
				}

				if (componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBClose_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBClose_1;
					compDriverInitialization_tDBClose_1.runAtDriver(container_tDBClose_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBClose_1 = null;
				if (componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBClose_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBClose_1;
					if (doesNodeBelongToRequest_tDBClose_1) {
						org.talend.daikon.properties.ValidationResult vr_tDBClose_1 = sourceOrSink_tDBClose_1
								.validate(container_tDBClose_1);
						if (vr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBClose_1.getMessage());
						}
					}
				}

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

// end of generic

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

// finally of generic

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tPrejob_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tPrejob_1", "tPrejob_1", "tPrejob");
					talendJobLogProcess(globalMap);
				}

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBConnection_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				cLabel = "INVENTORY";

				int tos_count_tDBConnection_1 = 0;

				if (enableLogStash) {
					talendJobLog.addCM("tDBConnection_1", "INVENTORY", "tSnowflakeConnection");
					talendJobLogProcess(globalMap);
				}

				boolean doesNodeBelongToRequest_tDBConnection_1 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tDBConnection_1 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tDBConnection_1 = (String) (restRequest_tDBConnection_1 != null
						? restRequest_tDBConnection_1.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tDBConnection_1 = new org.talend.components.snowflake.tsnowflakeconnection.TSnowflakeConnectionDefinition();

				org.talend.components.api.component.runtime.Writer writer_tDBConnection_1 = null;
				org.talend.components.api.component.runtime.Reader reader_tDBConnection_1 = null;

				org.talend.components.snowflake.SnowflakeConnectionProperties props_tDBConnection_1 = (org.talend.components.snowflake.SnowflakeConnectionProperties) def_tDBConnection_1
						.createRuntimeProperties();
				props_tDBConnection_1.setValue("loginTimeout", 15);

				props_tDBConnection_1.setValue("account", "vitaminshoppe");

				props_tDBConnection_1.setValue("regionID", "us-east-1");

				props_tDBConnection_1.setValue("useCustomRegion", false);

				props_tDBConnection_1.setValue("authenticationType",
						org.talend.components.snowflake.tsnowflakeconnection.AuthenticationType.BASIC);

				props_tDBConnection_1.setValue("warehouse", "VSI_WH_XS");

				props_tDBConnection_1.setValue("db", "PROD_DATA");

				props_tDBConnection_1.setValue("schemaName", "INVENTORY");

				props_tDBConnection_1.setValue("role", "sysadmin");

				props_tDBConnection_1.setValue("jdbcParameters", "");

				props_tDBConnection_1.setValue("autoCommit", true);

				props_tDBConnection_1.userPassword.setValue("useAuth", false);

				props_tDBConnection_1.userPassword.setValue("userId", "Talend_user");

				props_tDBConnection_1.userPassword.setValue("password",
						routines.system.PasswordEncryptUtil.decryptPassword(
								"enc:routine.encryption.key.v1:qht5Y1bNRwrPCtYTsdSt2V78E4NGwNJaJbnNCTsCpdDtBRBy"));

				props_tDBConnection_1.referencedComponent.setValue("referenceDefinitionName", "tSnowflakeConnection");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBConnection_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBConnection_1 = props_tDBConnection_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBConnection_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBConnection_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBConnection_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBConnection_1.referencedComponent
								.setReference(referencedComponentProperties_tDBConnection_1);
					}
				}
				globalMap.put("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBConnection_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
				java.net.URL mappings_url_tDBConnection_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBConnection_1_MAPPINGS_URL", mappings_url_tDBConnection_1);

				org.talend.components.api.container.RuntimeContainer container_tDBConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBConnection_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBConnection_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBConnection_1 = null;
				topology_tDBConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBConnection_1 = def_tDBConnection_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBConnection_1,
						topology_tDBConnection_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBConnection_1 = def_tDBConnection_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBConnection_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBConnection_1 = componentRuntime_tDBConnection_1
						.initialize(container_tDBConnection_1, props_tDBConnection_1);

				if (initVr_tDBConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBConnection_1.getMessage());
				}

				if (componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBConnection_1;
					compDriverInitialization_tDBConnection_1.runAtDriver(container_tDBConnection_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBConnection_1 = null;
				if (componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBConnection_1;
					if (doesNodeBelongToRequest_tDBConnection_1) {
						org.talend.daikon.properties.ValidationResult vr_tDBConnection_1 = sourceOrSink_tDBConnection_1
								.validate(container_tDBConnection_1);
						if (vr_tDBConnection_1
								.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tDBConnection_1.getMessage());
						}
					}
				}

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				cLabel = "INVENTORY";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				cLabel = "INVENTORY";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				cLabel = "INVENTORY";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				cLabel = "INVENTORY";

// end of generic

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				cLabel = "INVENTORY";

// finally of generic

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void talendJobLogProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendJobLog_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "talendJobLog");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));

		String iterateId = "";

		String currentComponent = "";
		String cLabel = null;
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [talendJobLog begin ] start
				 */

				ok_Hash.put("talendJobLog", false);
				start_Hash.put("talendJobLog", System.currentTimeMillis());

				currentComponent = "talendJobLog";

				int tos_count_talendJobLog = 0;

				for (JobStructureCatcherUtils.JobStructureCatcherMessage jcm : talendJobLog.getMessages()) {
					org.talend.job.audit.JobContextBuilder builder_talendJobLog = org.talend.job.audit.JobContextBuilder
							.create().jobName(jcm.job_name).jobId(jcm.job_id).jobVersion(jcm.job_version)
							.custom("process_id", jcm.pid).custom("thread_id", jcm.tid).custom("pid", pid)
							.custom("father_pid", fatherPid).custom("root_pid", rootPid);
					org.talend.logging.audit.Context log_context_talendJobLog = null;

					if (jcm.log_type == JobStructureCatcherUtils.LogType.PERFORMANCE) {
						long timeMS = jcm.end_time - jcm.start_time;
						String duration = String.valueOf(timeMS);

						log_context_talendJobLog = builder_talendJobLog.sourceId(jcm.sourceId)
								.sourceLabel(jcm.sourceLabel).sourceConnectorType(jcm.sourceComponentName)
								.targetId(jcm.targetId).targetLabel(jcm.targetLabel)
								.targetConnectorType(jcm.targetComponentName).connectionName(jcm.current_connector)
								.rows(jcm.row_count).duration(duration).build();
						auditLogger_talendJobLog.flowExecution(log_context_talendJobLog);
					} else if (jcm.log_type == JobStructureCatcherUtils.LogType.JOBSTART) {
						log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment).build();
						auditLogger_talendJobLog.jobstart(log_context_talendJobLog);
					} else if (jcm.log_type == JobStructureCatcherUtils.LogType.JOBEND) {
						long timeMS = jcm.end_time - jcm.start_time;
						String duration = String.valueOf(timeMS);

						log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment).duration(duration)
								.status(jcm.status).build();
						auditLogger_talendJobLog.jobstop(log_context_talendJobLog);
					} else if (jcm.log_type == JobStructureCatcherUtils.LogType.RUNCOMPONENT) {
						log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment)
								.connectorType(jcm.component_name).connectorId(jcm.component_id)
								.connectorLabel(jcm.component_label).build();
						auditLogger_talendJobLog.runcomponent(log_context_talendJobLog);
					} else if (jcm.log_type == JobStructureCatcherUtils.LogType.FLOWINPUT) {// log current component
																							// input line
						long timeMS = jcm.end_time - jcm.start_time;
						String duration = String.valueOf(timeMS);

						log_context_talendJobLog = builder_talendJobLog.connectorType(jcm.component_name)
								.connectorId(jcm.component_id).connectorLabel(jcm.component_label)
								.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
								.rows(jcm.total_row_number).duration(duration).build();
						auditLogger_talendJobLog.flowInput(log_context_talendJobLog);
					} else if (jcm.log_type == JobStructureCatcherUtils.LogType.FLOWOUTPUT) {// log current component
																								// output/reject line
						long timeMS = jcm.end_time - jcm.start_time;
						String duration = String.valueOf(timeMS);

						log_context_talendJobLog = builder_talendJobLog.connectorType(jcm.component_name)
								.connectorId(jcm.component_id).connectorLabel(jcm.component_label)
								.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
								.rows(jcm.total_row_number).duration(duration).build();
						auditLogger_talendJobLog.flowOutput(log_context_talendJobLog);
					} else if (jcm.log_type == JobStructureCatcherUtils.LogType.JOBERROR) {
						java.lang.Exception e_talendJobLog = jcm.exception;
						if (e_talendJobLog != null) {
							try (java.io.StringWriter sw_talendJobLog = new java.io.StringWriter();
									java.io.PrintWriter pw_talendJobLog = new java.io.PrintWriter(sw_talendJobLog)) {
								e_talendJobLog.printStackTrace(pw_talendJobLog);
								builder_talendJobLog.custom("stacktrace", sw_talendJobLog.getBuffer().substring(0,
										java.lang.Math.min(sw_talendJobLog.getBuffer().length(), 512)));
							}
						}

						if (jcm.extra_info != null) {
							builder_talendJobLog.connectorId(jcm.component_id).custom("extra_info", jcm.extra_info);
						}

						log_context_talendJobLog = builder_talendJobLog
								.connectorType(jcm.component_id.substring(0, jcm.component_id.lastIndexOf('_')))
								.connectorId(jcm.component_id)
								.connectorLabel(jcm.component_label == null ? jcm.component_id : jcm.component_label)
								.build();

						auditLogger_talendJobLog.exception(log_context_talendJobLog);
					}

				}

				/**
				 * [talendJobLog begin ] stop
				 */

				/**
				 * [talendJobLog main ] start
				 */

				currentComponent = "talendJobLog";

				tos_count_talendJobLog++;

				/**
				 * [talendJobLog main ] stop
				 */

				/**
				 * [talendJobLog process_data_begin ] start
				 */

				currentComponent = "talendJobLog";

				/**
				 * [talendJobLog process_data_begin ] stop
				 */

				/**
				 * [talendJobLog process_data_end ] start
				 */

				currentComponent = "talendJobLog";

				/**
				 * [talendJobLog process_data_end ] stop
				 */

				/**
				 * [talendJobLog end ] start
				 */

				currentComponent = "talendJobLog";

				ok_Hash.put("talendJobLog", true);
				end_Hash.put("talendJobLog", System.currentTimeMillis());

				/**
				 * [talendJobLog end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendJobLog finally ] start
				 */

				currentComponent = "talendJobLog";

				/**
				 * [talendJobLog finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendJobLog_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
		public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password,
				String dbConnectionName) throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
		}

		public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
				throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
		}
	};

	private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";

	{
		globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
	}

	private final static java.util.Properties jobInfo = new java.util.Properties();
	private final static java.util.Map<String, String> mdcInfo = new java.util.HashMap<>();

	public static void main(String[] args) {
		final TTAALLCL4 TTAALLCL4Class = new TTAALLCL4();

		int exitCode = TTAALLCL4Class.runJobInTOS(args);
		if (exitCode == 0) {
			log.info("TalendJob: 'TTAALLCL4' - Done.");
		}

		System.exit(exitCode);
	}

	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if (path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
		readJobInfo(new java.io.File(BUILD_PATH));
	}

	private void readJobInfo(java.io.File jobInfoFile) {

		if (jobInfoFile.exists()) {
			try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
				jobInfo.load(is);
			} catch (IOException e) {

				log.debug("Read jobInfo.properties file fail: " + e.getMessage());

			}
		}
		log.info(String.format("Project name: %s\tJob name: %s\tGIT Commit ID: %s\tTalend Version: %s", projectName,
				jobName, jobInfo.getProperty("gitCommitId"), "8.0.1.20230418_1502-patch"));

	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (!"".equals(log4jLevel)) {

			if ("trace".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.TRACE);
			} else if ("debug".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.DEBUG);
			} else if ("info".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.INFO);
			} else if ("warn".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.WARN);
			} else if ("error".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.ERROR);
			} else if ("fatal".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.FATAL);
			} else if ("off".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.OFF);
			}
			org.apache.logging.log4j.core.config.Configurator
					.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());

		}

		getjobInfo();
		log.info("TalendJob: 'TTAALLCL4' - Start.");

		java.util.Set<Object> jobInfoKeys = jobInfo.keySet();
		for (Object jobInfoKey : jobInfoKeys) {
			org.slf4j.MDC.put("_" + jobInfoKey.toString(), jobInfo.get(jobInfoKey).toString());
		}
		org.slf4j.MDC.put("_pid", pid);
		org.slf4j.MDC.put("_rootPid", rootPid);
		org.slf4j.MDC.put("_fatherPid", fatherPid);
		org.slf4j.MDC.put("_projectName", projectName);
		org.slf4j.MDC.put("_startTimestamp", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC)
				.format(java.time.format.DateTimeFormatter.ISO_INSTANT));
		org.slf4j.MDC.put("_jobRepositoryId", "_daEeYAV0Eeqgh6rCafRRhA");
		org.slf4j.MDC.put("_compiledAtTimestamp", "2023-06-29T15:23:49.151250100Z");

		java.lang.management.RuntimeMXBean mx = java.lang.management.ManagementFactory.getRuntimeMXBean();
		String[] mxNameTable = mx.getName().split("@"); //$NON-NLS-1$
		if (mxNameTable.length == 2) {
			org.slf4j.MDC.put("_systemPid", mxNameTable[0]);
		} else {
			org.slf4j.MDC.put("_systemPid", String.valueOf(java.lang.Thread.currentThread().getId()));
		}

		if (enableLogStash) {
			java.util.Properties properties_talendJobLog = new java.util.Properties();
			properties_talendJobLog.setProperty("root.logger", "audit");
			properties_talendJobLog.setProperty("encoding", "UTF-8");
			properties_talendJobLog.setProperty("application.name", "Talend Studio");
			properties_talendJobLog.setProperty("service.name", "Talend Studio Job");
			properties_talendJobLog.setProperty("instance.name", "Talend Studio Job Instance");
			properties_talendJobLog.setProperty("propagate.appender.exceptions", "none");
			properties_talendJobLog.setProperty("log.appender", "file");
			properties_talendJobLog.setProperty("appender.file.path", "audit.json");
			properties_talendJobLog.setProperty("appender.file.maxsize", "52428800");
			properties_talendJobLog.setProperty("appender.file.maxbackup", "20");
			properties_talendJobLog.setProperty("host", "false");

			System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit.logger."))
					.forEach(key -> properties_talendJobLog.setProperty(key.substring("audit.logger.".length()),
							System.getProperty(key)));

			org.apache.logging.log4j.core.config.Configurator
					.setLevel(properties_talendJobLog.getProperty("root.logger"), org.apache.logging.log4j.Level.DEBUG);

			auditLogger_talendJobLog = org.talend.job.audit.JobEventAuditLoggerFactory
					.createJobAuditLogger(properties_talendJobLog);
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		org.slf4j.MDC.put("_pid", pid);

		if (rootPid == null) {
			rootPid = pid;
		}

		org.slf4j.MDC.put("_rootPid", rootPid);

		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}
		org.slf4j.MDC.put("_fatherPid", fatherPid);

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		try {
			java.util.Dictionary<String, Object> jobProperties = null;
			if (inOSGi) {
				jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

				if (jobProperties != null && jobProperties.get("context") != null) {
					contextStr = (String) jobProperties.get("context");
				}
			}
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = TTAALLCL4.class.getClassLoader()
					.getResourceAsStream("at_talend_jobs/ttaallcl4_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = TTAALLCL4.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						if (inOSGi && jobProperties != null) {
							java.util.Enumeration<String> keys = jobProperties.keys();
							while (keys.hasMoreElements()) {
								String propKey = keys.nextElement();
								if (defaultProps.containsKey(propKey)) {
									defaultProps.put(propKey, (String) jobProperties.get(propKey));
								}
							}
						}
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("jda_host_name", "id_String");
					if (context.getStringValue("jda_host_name") == null) {
						context.jda_host_name = null;
					} else {
						context.jda_host_name = (String) context.getProperty("jda_host_name");
					}
					context.setContextType("jda_mm_lib", "id_String");
					if (context.getStringValue("jda_mm_lib") == null) {
						context.jda_mm_lib = null;
					} else {
						context.jda_mm_lib = (String) context.getProperty("jda_mm_lib");
					}
					context.setContextType("jda_user_name", "id_String");
					if (context.getStringValue("jda_user_name") == null) {
						context.jda_user_name = null;
					} else {
						context.jda_user_name = (String) context.getProperty("jda_user_name");
					}
					context.setContextType("jda_password", "id_Password");
					if (context.getStringValue("jda_password") == null) {
						context.jda_password = null;
					} else {
						String pwd_jda_password_value = context.getProperty("jda_password");
						context.jda_password = null;
						if (pwd_jda_password_value != null) {
							if (context_param.containsKey("jda_password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.jda_password = pwd_jda_password_value;
							} else if (!pwd_jda_password_value.isEmpty()) {
								try {
									context.jda_password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_jda_password_value);
									context.put("jda_password", context.jda_password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("SF_account", "id_String");
					if (context.getStringValue("SF_account") == null) {
						context.SF_account = null;
					} else {
						context.SF_account = (String) context.getProperty("SF_account");
					}
					context.setContextType("SF_prod_database", "id_String");
					if (context.getStringValue("SF_prod_database") == null) {
						context.SF_prod_database = null;
					} else {
						context.SF_prod_database = (String) context.getProperty("SF_prod_database");
					}
					context.setContextType("SF_password", "id_Password");
					if (context.getStringValue("SF_password") == null) {
						context.SF_password = null;
					} else {
						String pwd_SF_password_value = context.getProperty("SF_password");
						context.SF_password = null;
						if (pwd_SF_password_value != null) {
							if (context_param.containsKey("SF_password")) {// no need to decrypt if it come from program
																			// argument or parent job runtime
								context.SF_password = pwd_SF_password_value;
							} else if (!pwd_SF_password_value.isEmpty()) {
								try {
									context.SF_password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_SF_password_value);
									context.put("SF_password", context.SF_password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("SF_fin_schema", "id_String");
					if (context.getStringValue("SF_fin_schema") == null) {
						context.SF_fin_schema = null;
					} else {
						context.SF_fin_schema = (String) context.getProperty("SF_fin_schema");
					}
					context.setContextType("SF_user_id", "id_String");
					if (context.getStringValue("SF_user_id") == null) {
						context.SF_user_id = null;
					} else {
						context.SF_user_id = (String) context.getProperty("SF_user_id");
					}
					context.setContextType("SF_warehouse", "id_String");
					if (context.getStringValue("SF_warehouse") == null) {
						context.SF_warehouse = null;
					} else {
						context.SF_warehouse = (String) context.getProperty("SF_warehouse");
					}
					context.setContextType("sql_server_database", "id_String");
					if (context.getStringValue("sql_server_database") == null) {
						context.sql_server_database = null;
					} else {
						context.sql_server_database = (String) context.getProperty("sql_server_database");
					}
					context.setContextType("sql_server_host", "id_String");
					if (context.getStringValue("sql_server_host") == null) {
						context.sql_server_host = null;
					} else {
						context.sql_server_host = (String) context.getProperty("sql_server_host");
					}
					context.setContextType("sql_server_password", "id_Password");
					if (context.getStringValue("sql_server_password") == null) {
						context.sql_server_password = null;
					} else {
						String pwd_sql_server_password_value = context.getProperty("sql_server_password");
						context.sql_server_password = null;
						if (pwd_sql_server_password_value != null) {
							if (context_param.containsKey("sql_server_password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
								context.sql_server_password = pwd_sql_server_password_value;
							} else if (!pwd_sql_server_password_value.isEmpty()) {
								try {
									context.sql_server_password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_sql_server_password_value);
									context.put("sql_server_password", context.sql_server_password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("sql_server_port", "id_String");
					if (context.getStringValue("sql_server_port") == null) {
						context.sql_server_port = null;
					} else {
						context.sql_server_port = (String) context.getProperty("sql_server_port");
					}
					context.setContextType("sql_server_schema", "id_String");
					if (context.getStringValue("sql_server_schema") == null) {
						context.sql_server_schema = null;
					} else {
						context.sql_server_schema = (String) context.getProperty("sql_server_schema");
					}
					context.setContextType("sql_server_user_id", "id_String");
					if (context.getStringValue("sql_server_user_id") == null) {
						context.sql_server_user_id = null;
					} else {
						context.sql_server_user_id = (String) context.getProperty("sql_server_user_id");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("jda_host_name")) {
				context.jda_host_name = (String) parentContextMap.get("jda_host_name");
			}
			if (parentContextMap.containsKey("jda_mm_lib")) {
				context.jda_mm_lib = (String) parentContextMap.get("jda_mm_lib");
			}
			if (parentContextMap.containsKey("jda_user_name")) {
				context.jda_user_name = (String) parentContextMap.get("jda_user_name");
			}
			if (parentContextMap.containsKey("jda_password")) {
				context.jda_password = (java.lang.String) parentContextMap.get("jda_password");
			}
			if (parentContextMap.containsKey("SF_account")) {
				context.SF_account = (String) parentContextMap.get("SF_account");
			}
			if (parentContextMap.containsKey("SF_prod_database")) {
				context.SF_prod_database = (String) parentContextMap.get("SF_prod_database");
			}
			if (parentContextMap.containsKey("SF_password")) {
				context.SF_password = (java.lang.String) parentContextMap.get("SF_password");
			}
			if (parentContextMap.containsKey("SF_fin_schema")) {
				context.SF_fin_schema = (String) parentContextMap.get("SF_fin_schema");
			}
			if (parentContextMap.containsKey("SF_user_id")) {
				context.SF_user_id = (String) parentContextMap.get("SF_user_id");
			}
			if (parentContextMap.containsKey("SF_warehouse")) {
				context.SF_warehouse = (String) parentContextMap.get("SF_warehouse");
			}
			if (parentContextMap.containsKey("sql_server_database")) {
				context.sql_server_database = (String) parentContextMap.get("sql_server_database");
			}
			if (parentContextMap.containsKey("sql_server_host")) {
				context.sql_server_host = (String) parentContextMap.get("sql_server_host");
			}
			if (parentContextMap.containsKey("sql_server_password")) {
				context.sql_server_password = (java.lang.String) parentContextMap.get("sql_server_password");
			}
			if (parentContextMap.containsKey("sql_server_port")) {
				context.sql_server_port = (String) parentContextMap.get("sql_server_port");
			}
			if (parentContextMap.containsKey("sql_server_schema")) {
				context.sql_server_schema = (String) parentContextMap.get("sql_server_schema");
			}
			if (parentContextMap.containsKey("sql_server_user_id")) {
				context.sql_server_user_id = (String) parentContextMap.get("sql_server_user_id");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("jda_password");
		parametersToEncrypt.add("SF_password");
		parametersToEncrypt.add("sql_server_password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, ContextProperties.class, parametersToEncrypt));

		org.slf4j.MDC.put("_context", contextStr);
		log.info("TalendJob: 'TTAALLCL4' - Started.");
		mdcInfo.putAll(org.slf4j.MDC.getCopyOfContextMap());

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		if (enableLogStash) {
			talendJobLog.addJobStartMessage();
			try {
				talendJobLogProcess(globalMap);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				mdcInfo.forEach(org.slf4j.MDC::put);

				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tParallelize_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tParallelize_1) {
					globalMap.put("tParallelize_1_SUBPROCESS_STATE", -1);

					e_tParallelize_1.printStackTrace();

				} catch (java.lang.Error e_tParallelize_1) {
					globalMap.put("tParallelize_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tParallelize_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : TTAALLCL4");
		}
		if (enableLogStash) {
			talendJobLog.addJobEndMessage(startTime, end, status);
			try {
				talendJobLogProcess(globalMap);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
		if (localErrorCode != null) {
			if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
				errorCode = localErrorCode;
			}
		}
		if (localStatus != null && !status.equals("failure")) {
			status = localStatus;
		}

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");
		resumeUtil.flush();

		org.slf4j.MDC.remove("_subJobName");
		org.slf4j.MDC.remove("_subJobPid");
		org.slf4j.MDC.remove("_systemPid");
		log.info("TalendJob: 'TTAALLCL4' - Finished - status: " + status + " returnCode: " + returnCode);

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("tDBConnection_1_connection", globalMap.get("tDBConnection_1_connection"));
		connections.put("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES",
				globalMap.get("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1312736 characters generated by Talend Cloud Data Management Platform on the
 * June 29, 2023 at 11:23:49 AM EDT
 ************************************************************************************************/