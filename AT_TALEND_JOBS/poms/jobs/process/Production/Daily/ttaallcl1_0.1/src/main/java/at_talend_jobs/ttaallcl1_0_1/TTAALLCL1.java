
package at_talend_jobs.ttaallcl1_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.DataQuality;
import routines.Relational;
import routines.DataQualityDependencies;
import routines.Mathematical;
import routines.SQLike;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.DQTechnical;
import routines.StringHandling;
import routines.DataMasking;
import routines.TalendDate;
import routines.DqStringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: TTAALLCL1 Purpose: TTAALLCL1<br>
 * Description: TTAALLCL1 <br>
 * @author thati, akhil
 * @version 8.0.1.20230418_1502-patch
 * @status 
 */
public class TTAALLCL1 implements TalendJob {
	static {System.setProperty("TalendJob.log", "TTAALLCL1.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(TTAALLCL1.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(jda_host_name != null){
				
					this.setProperty("jda_host_name", jda_host_name.toString());
				
			}
			
			if(jda_mm_lib != null){
				
					this.setProperty("jda_mm_lib", jda_mm_lib.toString());
				
			}
			
			if(jda_user_name != null){
				
					this.setProperty("jda_user_name", jda_user_name.toString());
				
			}
			
			if(jda_password != null){
				
					this.setProperty("jda_password", jda_password.toString());
				
			}
			
			if(SF_account != null){
				
					this.setProperty("SF_account", SF_account.toString());
				
			}
			
			if(SF_prod_database != null){
				
					this.setProperty("SF_prod_database", SF_prod_database.toString());
				
			}
			
			if(SF_password != null){
				
					this.setProperty("SF_password", SF_password.toString());
				
			}
			
			if(SF_fin_schema != null){
				
					this.setProperty("SF_fin_schema", SF_fin_schema.toString());
				
			}
			
			if(SF_user_id != null){
				
					this.setProperty("SF_user_id", SF_user_id.toString());
				
			}
			
			if(SF_warehouse != null){
				
					this.setProperty("SF_warehouse", SF_warehouse.toString());
				
			}
			
			if(sql_server_database != null){
				
					this.setProperty("sql_server_database", sql_server_database.toString());
				
			}
			
			if(sql_server_host != null){
				
					this.setProperty("sql_server_host", sql_server_host.toString());
				
			}
			
			if(sql_server_password != null){
				
					this.setProperty("sql_server_password", sql_server_password.toString());
				
			}
			
			if(sql_server_port != null){
				
					this.setProperty("sql_server_port", sql_server_port.toString());
				
			}
			
			if(sql_server_schema != null){
				
					this.setProperty("sql_server_schema", sql_server_schema.toString());
				
			}
			
			if(sql_server_user_id != null){
				
					this.setProperty("sql_server_user_id", sql_server_user_id.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String jda_host_name;
public String getJda_host_name(){
	return this.jda_host_name;
}
public String jda_mm_lib;
public String getJda_mm_lib(){
	return this.jda_mm_lib;
}
public String jda_user_name;
public String getJda_user_name(){
	return this.jda_user_name;
}
public java.lang.String jda_password;
public java.lang.String getJda_password(){
	return this.jda_password;
}
public String SF_account;
public String getSF_account(){
	return this.SF_account;
}
public String SF_prod_database;
public String getSF_prod_database(){
	return this.SF_prod_database;
}
public java.lang.String SF_password;
public java.lang.String getSF_password(){
	return this.SF_password;
}
public String SF_fin_schema;
public String getSF_fin_schema(){
	return this.SF_fin_schema;
}
public String SF_user_id;
public String getSF_user_id(){
	return this.SF_user_id;
}
public String SF_warehouse;
public String getSF_warehouse(){
	return this.SF_warehouse;
}
public String sql_server_database;
public String getSql_server_database(){
	return this.sql_server_database;
}
public String sql_server_host;
public String getSql_server_host(){
	return this.sql_server_host;
}
public java.lang.String sql_server_password;
public java.lang.String getSql_server_password(){
	return this.sql_server_password;
}
public String sql_server_port;
public String getSql_server_port(){
	return this.sql_server_port;
}
public String sql_server_schema;
public String getSql_server_schema(){
	return this.sql_server_schema;
}
public String sql_server_user_id;
public String getSql_server_user_id(){
	return this.sql_server_user_id;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "TTAALLCL1";
	private final String projectName = "AT_TALEND_JOBS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private final JobStructureCatcherUtils talendJobLog = new JobStructureCatcherUtils(jobName, "_DXnV4De4Eeq6DoZ_tDDDfA", "0.1");
private org.talend.job.audit.JobAuditLogger auditLogger_talendJobLog = null;

private RunStat runStat = new RunStat(talendJobLog, System.getProperty("audit.interval"));

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				TTAALLCL1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(TTAALLCL1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
		if(enableLogStash) {
			talendJobLog.addJobExceptionMessage(currentComponent, cLabel, null, e);
			talendJobLogProcess(globalMap);
		}
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tParallelize_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tParallelize_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendJobLog_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					talendJobLog_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tParallelize_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendJobLog_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tPrejob_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tPrejob_1", "tPrejob_1", "tPrejob");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBConnection_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		
		int tos_count_tDBConnection_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBConnection_1", "INVENTORY", "tSnowflakeConnection");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBConnection_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBConnection_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBConnection_1 = (String)(restRequest_tDBConnection_1 != null ? restRequest_tDBConnection_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBConnection_1 =
        new org.talend.components.snowflake.tsnowflakeconnection.TSnowflakeConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBConnection_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBConnection_1 = null;


org.talend.components.snowflake.SnowflakeConnectionProperties props_tDBConnection_1 =
        (org.talend.components.snowflake.SnowflakeConnectionProperties) def_tDBConnection_1.createRuntimeProperties();
 		                    props_tDBConnection_1.setValue("loginTimeout",
 		                    15);
 		                    
 		                    props_tDBConnection_1.setValue("account",
 		                    "vitaminshoppe");
 		                    
 		                    props_tDBConnection_1.setValue("regionID",
 		                    "us-east-1");
 		                    
 		                    props_tDBConnection_1.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBConnection_1.setValue("authenticationType",
 		                        org.talend.components.snowflake.tsnowflakeconnection.AuthenticationType.BASIC);
 		                    
 		                    props_tDBConnection_1.setValue("warehouse",
 		                    "VSI_WH_XS");
 		                    
 		                    props_tDBConnection_1.setValue("db",
 		                    "PROD_DATA");
 		                    
 		                    props_tDBConnection_1.setValue("schemaName",
 		                    "INVENTORY");
 		                    
 		                    props_tDBConnection_1.setValue("role",
 		                    "sysadmin");
 		                    
 		                    props_tDBConnection_1.setValue("jdbcParameters",
 		                    "");
 		                    
 		                    props_tDBConnection_1.setValue("autoCommit",
 		                    true);
 		                    
 		                    props_tDBConnection_1.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBConnection_1.userPassword.setValue("userId",
 		                    "Talend_user");
 		                    
 		                        props_tDBConnection_1.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:QFrcmrWE1NyU9lytiUdbIOaKqJC0BxwSvxiersxfmFKgfmMt"));
 		                        
 		                    props_tDBConnection_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBConnection_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBConnection_1 = props_tDBConnection_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBConnection_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBConnection_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBConnection_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBConnection_1.referencedComponent.setReference(referencedComponentProperties_tDBConnection_1);
        }
    }
globalMap.put("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBConnection_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBConnection_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBConnection_1_MAPPINGS_URL", mappings_url_tDBConnection_1);

org.talend.components.api.container.RuntimeContainer container_tDBConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBConnection_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBConnection_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBConnection_1 = null;
topology_tDBConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBConnection_1 = def_tDBConnection_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBConnection_1, topology_tDBConnection_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBConnection_1 = def_tDBConnection_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBConnection_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBConnection_1 = componentRuntime_tDBConnection_1.initialize(container_tDBConnection_1, props_tDBConnection_1);

if (initVr_tDBConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBConnection_1.getMessage());
}

if(componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBConnection_1;
	compDriverInitialization_tDBConnection_1.runAtDriver(container_tDBConnection_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBConnection_1 = null;
if(componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBConnection_1;
	if (doesNodeBelongToRequest_tDBConnection_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBConnection_1 = sourceOrSink_tDBConnection_1.validate(container_tDBConnection_1);
        if (vr_tDBConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBConnection_1.getMessage());
        }
	}
}

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		


 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		


 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		


 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		
// end of generic

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	
			cLabel="INVENTORY";
		
// finally of generic

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tPostjob_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tPostjob_1", "tPostjob_1", "tPostjob");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBClose_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBClose_1", "tDBClose_1", "tSnowflakeClose");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBClose_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBClose_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBClose_1 = (String)(restRequest_tDBClose_1 != null ? restRequest_tDBClose_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBClose_1 =
        new org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBClose_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBClose_1 = null;


org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseProperties props_tDBClose_1 =
        (org.talend.components.snowflake.tsnowflakeclose.TSnowflakeCloseProperties) def_tDBClose_1.createRuntimeProperties();
 		                    props_tDBClose_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBClose_1.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBClose_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBClose_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBClose_1 = props_tDBClose_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBClose_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBClose_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBClose_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBClose_1.referencedComponent.setReference(referencedComponentProperties_tDBClose_1);
        }
    }
globalMap.put("tDBClose_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBClose_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBClose_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBClose_1_MAPPINGS_URL", mappings_url_tDBClose_1);

org.talend.components.api.container.RuntimeContainer container_tDBClose_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBClose_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBClose_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBClose_1 = null;
topology_tDBClose_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBClose_1 = def_tDBClose_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBClose_1, topology_tDBClose_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBClose_1 = def_tDBClose_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBClose_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBClose_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBClose_1 = componentRuntime_tDBClose_1.initialize(container_tDBClose_1, props_tDBClose_1);

if (initVr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBClose_1.getMessage());
}

if(componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBClose_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBClose_1;
	compDriverInitialization_tDBClose_1.runAtDriver(container_tDBClose_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBClose_1 = null;
if(componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBClose_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBClose_1;
	if (doesNodeBelongToRequest_tDBClose_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBClose_1 = sourceOrSink_tDBClose_1.validate(container_tDBClose_1);
        if (vr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBClose_1.getMessage());
        }
	}
}

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	


 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	


 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	


 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	
// end of generic

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	
// finally of generic

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tParallelize_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tParallelize_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tParallelize_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tParallelize_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tParallelize_1", false);
		start_Hash.put("tParallelize_1", System.currentTimeMillis());
		
	
	currentComponent="tParallelize_1";
	
	
		int tos_count_tParallelize_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tParallelize_1", "tParallelize_1", "tParallelize");
				talendJobLogProcess(globalMap);
			}
			

// call parallelized subjobs
	java.util.Map<String, Thread> mt_tParallelize_1 = new java.util.HashMap<String, Thread>();

// clear the temporary values in the globalMap
	globalMap.remove("tDBRow_3_SUBPROCESS_STATE");
	globalMap.remove("tDBRow_2_SUBPROCESS_STATE");
	globalMap.remove("tDBRow_1_SUBPROCESS_STATE");
	globalMap.remove("tDBRow_8_SUBPROCESS_STATE");

				java.util.Map concurrentMap_temp_tParallelize_1;
				if(globalMap instanceof java.util.HashMap){
					concurrentMap_temp_tParallelize_1 = java.util.Collections.synchronizedMap(globalMap);
				}else{
					concurrentMap_temp_tParallelize_1 = globalMap;
				}
				final java.util.Map concurrentMap_tParallelize_1 = concurrentMap_temp_tParallelize_1;
			
		runningThreadCount.add(1);
		String name_tDBRow_3 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_3 = new Thread(new ThreadGroup(name_tDBRow_3), name_tDBRow_3){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_3' starts.");
					
					tDBRow_3Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_3' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_3_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_3_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_3.start();
		mt_tParallelize_1.put("tDBRow_3",thread_tDBRow_3);
		runningThreadCount.add(1);
		String name_tDBRow_2 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_2 = new Thread(new ThreadGroup(name_tDBRow_2), name_tDBRow_2){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_2' starts.");
					
					tDBRow_2Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_2' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_2_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_2_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_2.start();
		mt_tParallelize_1.put("tDBRow_2",thread_tDBRow_2);
		runningThreadCount.add(1);
		String name_tDBRow_1 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_1 = new Thread(new ThreadGroup(name_tDBRow_1), name_tDBRow_1){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_1' starts.");
					
					tDBRow_1Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_1' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_1_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_1_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_1.start();
		mt_tParallelize_1.put("tDBRow_1",thread_tDBRow_1);
		runningThreadCount.add(1);
		String name_tDBRow_8 = "tParallelize_1_" + java.util.UUID.randomUUID().toString();
		Thread thread_tDBRow_8 = new Thread(new ThreadGroup(name_tDBRow_8), name_tDBRow_8){
	    	public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

                try {
					
						
							mdcInfo.forEach(org.slf4j.MDC::put);
						
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_8' starts.");
					
					tDBRow_8Process(concurrentMap_tParallelize_1);
					
						log.debug("tParallelize_1 - The subjob starting with the component 'tDBRow_8' is done.");
					
				} catch (TalendException e) {
					
						log.error("tParallelize_1 - " + e.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_8_SUBPROCESS_STATE", -1);
					e.printStackTrace();
				} catch (java.lang.Error error) {
					
						log.error("tParallelize_1 - " + error.getMessage());
					
					concurrentMap_tParallelize_1.put("tDBRow_8_SUBPROCESS_STATE", -1);
					error.printStackTrace();
				}finally {
                	runningThreadCount.add(-1);
                }
	    	}
		};
		thread_tDBRow_8.start();
		mt_tParallelize_1.put("tDBRow_8",thread_tDBRow_8);
	while(
(
		((globalMap.get("tDBRow_3_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_3_SUBPROCESS_STATE")==0))||
		((globalMap.get("tDBRow_2_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_2_SUBPROCESS_STATE")==0))||
		((globalMap.get("tDBRow_1_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_1_SUBPROCESS_STATE")==0))||
		((globalMap.get("tDBRow_8_SUBPROCESS_STATE")==null)?true:((Integer)globalMap.get("tDBRow_8_SUBPROCESS_STATE")==0))|| false) ) {
	Thread.sleep(100);
}


// call next subprocesses

 



/**
 * [tParallelize_1 begin ] stop
 */
	
	/**
	 * [tParallelize_1 main ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 


	tos_count_tParallelize_1++;

/**
 * [tParallelize_1 main ] stop
 */
	
	/**
	 * [tParallelize_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 



/**
 * [tParallelize_1 process_data_begin ] stop
 */
	
	/**
	 * [tParallelize_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 



/**
 * [tParallelize_1 process_data_end ] stop
 */
	
	/**
	 * [tParallelize_1 end ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 

ok_Hash.put("tParallelize_1", true);
end_Hash.put("tParallelize_1", System.currentTimeMillis());




/**
 * [tParallelize_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tParallelize_1 finally ] start
	 */

	

	
	
	currentComponent="tParallelize_1";
	
	

 



/**
 * [tParallelize_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tParallelize_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_3", false);
		start_Hash.put("tDBRow_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_3";
	
	
		int tos_count_tDBRow_3 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_3", "tDBRow_3", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_3 = (String)(restRequest_tDBRow_3 != null ? restRequest_tDBRow_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_3 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_3 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_3 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_3 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_3.createRuntimeProperties();
 		                    props_tDBRow_3.setValue("query",
 		                    "DELETE from UPC_FILE_INVUPC\nWHERE LOAD_DATE = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_3.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_3.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_3.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_3_1_fisrt sst_tDBRow_3_1_fisrt = new SchemaSettingTool_tDBRow_3_1_fisrt();
 		                    
 		                    props_tDBRow_3.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_3_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_3_2_fisrt sst_tDBRow_3_2_fisrt = new SchemaSettingTool_tDBRow_3_2_fisrt();
 		                    
 		                    props_tDBRow_3.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_3.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_3.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_3.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_3.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_3.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_3.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_3.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_3.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_3.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_3.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_3.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_3.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_3_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_3_3_fisrt sst_tDBRow_3_3_fisrt = new SchemaSettingTool_tDBRow_3_3_fisrt();
 		                    
 		                    props_tDBRow_3.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_3.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_3);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_3.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_3);
        }
    }
globalMap.put("tDBRow_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_3_MAPPINGS_URL", mappings_url_tDBRow_3);

org.talend.components.api.container.RuntimeContainer container_tDBRow_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_3 = null;
topology_tDBRow_3 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_3 = def_tDBRow_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_3, topology_tDBRow_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_3 = def_tDBRow_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_3 = componentRuntime_tDBRow_3.initialize(container_tDBRow_3, props_tDBRow_3);

if (initVr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_3.getMessage());
}

if(componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_3;
	compDriverInitialization_tDBRow_3.runAtDriver(container_tDBRow_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_3 = null;
if(componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_3;
	if (doesNodeBelongToRequest_tDBRow_3) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_3 = sourceOrSink_tDBRow_3.validate(container_tDBRow_3);
        if (vr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_3.getMessage());
        }
	}
}

 



/**
 * [tDBRow_3 begin ] stop
 */
	
	/**
	 * [tDBRow_3 main ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	


 


	tos_count_tDBRow_3++;

/**
 * [tDBRow_3 main ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	


 



/**
 * [tDBRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	


 



/**
 * [tDBRow_3 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_3 end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	
// end of generic


resourceMap.put("finish_tDBRow_3", Boolean.TRUE);

 

ok_Hash.put("tDBRow_3", true);
end_Hash.put("tDBRow_3", System.currentTimeMillis());




/**
 * [tDBRow_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_3";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_3")==null){
}
 



/**
 * [tDBRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public BigDecimal IUPC;

				public BigDecimal getIUPC () {
					return this.IUPC;
				}

				public Boolean IUPCIsNullable(){
				    return false;
				}
				public Boolean IUPCIsKey(){
				    return false;
				}
				public Integer IUPCLength(){
				    return 18;
				}
				public Integer IUPCPrecision(){
				    return 0;
				}
				public String IUPCDefault(){
				
					return "";
				
				}
				public String IUPCComment(){
				
				    return "";
				
				}
				public String IUPCPattern(){
				
					return "";
				
				}
				public String IUPCOriginalDbColumnName(){
				
					return "IUPC";
				
				}

				
			    public String IUPCCD;

				public String getIUPCCD () {
					return this.IUPCCD;
				}

				public Boolean IUPCCDIsNullable(){
				    return false;
				}
				public Boolean IUPCCDIsKey(){
				    return false;
				}
				public Integer IUPCCDLength(){
				    return 1;
				}
				public Integer IUPCCDPrecision(){
				    return 0;
				}
				public String IUPCCDDefault(){
				
					return null;
				
				}
				public String IUPCCDComment(){
				
				    return "";
				
				}
				public String IUPCCDPattern(){
				
					return "";
				
				}
				public String IUPCCDOriginalDbColumnName(){
				
					return "IUPCCD";
				
				}

				
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return false;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return 9;
				}
				public Integer INUMBRPrecision(){
				    return 0;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public String IUSTYL;

				public String getIUSTYL () {
					return this.IUSTYL;
				}

				public Boolean IUSTYLIsNullable(){
				    return false;
				}
				public Boolean IUSTYLIsKey(){
				    return false;
				}
				public Integer IUSTYLLength(){
				    return 15;
				}
				public Integer IUSTYLPrecision(){
				    return 0;
				}
				public String IUSTYLDefault(){
				
					return null;
				
				}
				public String IUSTYLComment(){
				
				    return "";
				
				}
				public String IUSTYLPattern(){
				
					return "";
				
				}
				public String IUSTYLOriginalDbColumnName(){
				
					return "IUSTYL";
				
				}

				
			    public float IUASN;

				public float getIUASN () {
					return this.IUASN;
				}

				public Boolean IUASNIsNullable(){
				    return false;
				}
				public Boolean IUASNIsKey(){
				    return false;
				}
				public Integer IUASNLength(){
				    return 6;
				}
				public Integer IUASNPrecision(){
				    return 0;
				}
				public String IUASNDefault(){
				
					return "";
				
				}
				public String IUASNComment(){
				
				    return "";
				
				}
				public String IUASNPattern(){
				
					return "";
				
				}
				public String IUASNOriginalDbColumnName(){
				
					return "IUASN";
				
				}

				
			    public String IUPRTN;

				public String getIUPRTN () {
					return this.IUPRTN;
				}

				public Boolean IUPRTNIsNullable(){
				    return false;
				}
				public Boolean IUPRTNIsKey(){
				    return false;
				}
				public Integer IUPRTNLength(){
				    return 15;
				}
				public Integer IUPRTNPrecision(){
				    return 0;
				}
				public String IUPRTNDefault(){
				
					return null;
				
				}
				public String IUPRTNComment(){
				
				    return "";
				
				}
				public String IUPRTNPattern(){
				
					return "";
				
				}
				public String IUPRTNOriginalDbColumnName(){
				
					return "IUPRTN";
				
				}

				
			    public float IUVND;

				public float getIUVND () {
					return this.IUVND;
				}

				public Boolean IUVNDIsNullable(){
				    return false;
				}
				public Boolean IUVNDIsKey(){
				    return false;
				}
				public Integer IUVNDLength(){
				    return 6;
				}
				public Integer IUVNDPrecision(){
				    return 0;
				}
				public String IUVNDDefault(){
				
					return "";
				
				}
				public String IUVNDComment(){
				
				    return "";
				
				}
				public String IUVNDPattern(){
				
					return "";
				
				}
				public String IUVNDOriginalDbColumnName(){
				
					return "IUVND";
				
				}

				
			    public BigDecimal IUPALT;

				public BigDecimal getIUPALT () {
					return this.IUPALT;
				}

				public Boolean IUPALTIsNullable(){
				    return false;
				}
				public Boolean IUPALTIsKey(){
				    return false;
				}
				public Integer IUPALTLength(){
				    return 18;
				}
				public Integer IUPALTPrecision(){
				    return 0;
				}
				public String IUPALTDefault(){
				
					return "";
				
				}
				public String IUPALTComment(){
				
				    return "";
				
				}
				public String IUPALTPattern(){
				
					return "";
				
				}
				public String IUPALTOriginalDbColumnName(){
				
					return "IUPALT";
				
				}

				
			    public BigDecimal IUPC25;

				public BigDecimal getIUPC25 () {
					return this.IUPC25;
				}

				public Boolean IUPC25IsNullable(){
				    return false;
				}
				public Boolean IUPC25IsKey(){
				    return false;
				}
				public Integer IUPC25Length(){
				    return 25;
				}
				public Integer IUPC25Precision(){
				    return 0;
				}
				public String IUPC25Default(){
				
					return "";
				
				}
				public String IUPC25Comment(){
				
				    return "";
				
				}
				public String IUPC25Pattern(){
				
					return "";
				
				}
				public String IUPC25OriginalDbColumnName(){
				
					return "IUPC25";
				
				}

				
			    public String IUPC40;

				public String getIUPC40 () {
					return this.IUPC40;
				}

				public Boolean IUPC40IsNullable(){
				    return false;
				}
				public Boolean IUPC40IsKey(){
				    return false;
				}
				public Integer IUPC40Length(){
				    return 40;
				}
				public Integer IUPC40Precision(){
				    return 0;
				}
				public String IUPC40Default(){
				
					return null;
				
				}
				public String IUPC40Comment(){
				
				    return "";
				
				}
				public String IUPC40Pattern(){
				
					return "";
				
				}
				public String IUPC40OriginalDbColumnName(){
				
					return "IUPC40";
				
				}

				
			    public BigDecimal IUPPRM;

				public BigDecimal getIUPPRM () {
					return this.IUPPRM;
				}

				public Boolean IUPPRMIsNullable(){
				    return false;
				}
				public Boolean IUPPRMIsKey(){
				    return false;
				}
				public Integer IUPPRMLength(){
				    return 1;
				}
				public Integer IUPPRMPrecision(){
				    return 0;
				}
				public String IUPPRMDefault(){
				
					return "";
				
				}
				public String IUPPRMComment(){
				
				    return "";
				
				}
				public String IUPPRMPattern(){
				
					return "";
				
				}
				public String IUPPRMOriginalDbColumnName(){
				
					return "IUPPRM";
				
				}

				
			    public String IUPUMR;

				public String getIUPUMR () {
					return this.IUPUMR;
				}

				public Boolean IUPUMRIsNullable(){
				    return false;
				}
				public Boolean IUPUMRIsKey(){
				    return false;
				}
				public Integer IUPUMRLength(){
				    return 3;
				}
				public Integer IUPUMRPrecision(){
				    return 0;
				}
				public String IUPUMRDefault(){
				
					return "";
				
				}
				public String IUPUMRComment(){
				
				    return "";
				
				}
				public String IUPUMRPattern(){
				
					return "";
				
				}
				public String IUPUMROriginalDbColumnName(){
				
					return "IUPUMR";
				
				}

				
			    public BigDecimal IUPPOS;

				public BigDecimal getIUPPOS () {
					return this.IUPPOS;
				}

				public Boolean IUPPOSIsNullable(){
				    return false;
				}
				public Boolean IUPPOSIsKey(){
				    return false;
				}
				public Integer IUPPOSLength(){
				    return 1;
				}
				public Integer IUPPOSPrecision(){
				    return 0;
				}
				public String IUPPOSDefault(){
				
					return "";
				
				}
				public String IUPPOSComment(){
				
				    return "";
				
				}
				public String IUPPOSPattern(){
				
					return "";
				
				}
				public String IUPPOSOriginalDbColumnName(){
				
					return "IUPPOS";
				
				}

				
			    public String IUPRCC;

				public String getIUPRCC () {
					return this.IUPRCC;
				}

				public Boolean IUPRCCIsNullable(){
				    return false;
				}
				public Boolean IUPRCCIsKey(){
				    return false;
				}
				public Integer IUPRCCLength(){
				    return 1;
				}
				public Integer IUPRCCPrecision(){
				    return 0;
				}
				public String IUPRCCDefault(){
				
					return "";
				
				}
				public String IUPRCCComment(){
				
				    return "";
				
				}
				public String IUPRCCPattern(){
				
					return "";
				
				}
				public String IUPRCCOriginalDbColumnName(){
				
					return "IUPRCC";
				
				}

				
			    public String IUPRCZ;

				public String getIUPRCZ () {
					return this.IUPRCZ;
				}

				public Boolean IUPRCZIsNullable(){
				    return false;
				}
				public Boolean IUPRCZIsKey(){
				    return false;
				}
				public Integer IUPRCZLength(){
				    return 1;
				}
				public Integer IUPRCZPrecision(){
				    return 0;
				}
				public String IUPRCZDefault(){
				
					return "";
				
				}
				public String IUPRCZComment(){
				
				    return "";
				
				}
				public String IUPRCZPattern(){
				
					return "";
				
				}
				public String IUPRCZOriginalDbColumnName(){
				
					return "IUPRCZ";
				
				}

				
			    public String IUPRCS;

				public String getIUPRCS () {
					return this.IUPRCS;
				}

				public Boolean IUPRCSIsNullable(){
				    return false;
				}
				public Boolean IUPRCSIsKey(){
				    return false;
				}
				public Integer IUPRCSLength(){
				    return 1;
				}
				public Integer IUPRCSPrecision(){
				    return 0;
				}
				public String IUPRCSDefault(){
				
					return "";
				
				}
				public String IUPRCSComment(){
				
				    return "";
				
				}
				public String IUPRCSPattern(){
				
					return "";
				
				}
				public String IUPRCSOriginalDbColumnName(){
				
					return "IUPRCS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
						this.IUPC = (BigDecimal) dis.readObject();
					
					this.IUPCCD = readString(dis);
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.IUSTYL = readString(dis);
					
			        this.IUASN = dis.readFloat();
					
					this.IUPRTN = readString(dis);
					
			        this.IUVND = dis.readFloat();
					
						this.IUPALT = (BigDecimal) dis.readObject();
					
						this.IUPC25 = (BigDecimal) dis.readObject();
					
					this.IUPC40 = readString(dis);
					
						this.IUPPRM = (BigDecimal) dis.readObject();
					
					this.IUPUMR = readString(dis);
					
						this.IUPPOS = (BigDecimal) dis.readObject();
					
					this.IUPRCC = readString(dis);
					
					this.IUPRCZ = readString(dis);
					
					this.IUPRCS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
						this.IUPC = (BigDecimal) dis.readObject();
					
					this.IUPCCD = readString(dis);
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.IUSTYL = readString(dis);
					
			        this.IUASN = dis.readFloat();
					
					this.IUPRTN = readString(dis);
					
			        this.IUVND = dis.readFloat();
					
						this.IUPALT = (BigDecimal) dis.readObject();
					
						this.IUPC25 = (BigDecimal) dis.readObject();
					
					this.IUPC40 = readString(dis);
					
						this.IUPPRM = (BigDecimal) dis.readObject();
					
					this.IUPUMR = readString(dis);
					
						this.IUPPOS = (BigDecimal) dis.readObject();
					
					this.IUPRCC = readString(dis);
					
					this.IUPRCZ = readString(dis);
					
					this.IUPRCS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC);
					
					// String
				
						writeString(this.IUPCCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.IUSTYL,dos);
					
					// float
				
		            	dos.writeFloat(this.IUASN);
					
					// String
				
						writeString(this.IUPRTN,dos);
					
					// float
				
		            	dos.writeFloat(this.IUVND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPALT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC25);
					
					// String
				
						writeString(this.IUPC40,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPRM);
					
					// String
				
						writeString(this.IUPUMR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPOS);
					
					// String
				
						writeString(this.IUPRCC,dos);
					
					// String
				
						writeString(this.IUPRCZ,dos);
					
					// String
				
						writeString(this.IUPRCS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC);
					
					// String
				
						writeString(this.IUPCCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.IUSTYL,dos);
					
					// float
				
		            	dos.writeFloat(this.IUASN);
					
					// String
				
						writeString(this.IUPRTN,dos);
					
					// float
				
		            	dos.writeFloat(this.IUVND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPALT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC25);
					
					// String
				
						writeString(this.IUPC40,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPRM);
					
					// String
				
						writeString(this.IUPUMR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPOS);
					
					// String
				
						writeString(this.IUPRCC,dos);
					
					// String
				
						writeString(this.IUPRCZ,dos);
					
					// String
				
						writeString(this.IUPRCS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUPC="+String.valueOf(IUPC));
		sb.append(",IUPCCD="+IUPCCD);
		sb.append(",INUMBR="+String.valueOf(INUMBR));
		sb.append(",IUSTYL="+IUSTYL);
		sb.append(",IUASN="+String.valueOf(IUASN));
		sb.append(",IUPRTN="+IUPRTN);
		sb.append(",IUVND="+String.valueOf(IUVND));
		sb.append(",IUPALT="+String.valueOf(IUPALT));
		sb.append(",IUPC25="+String.valueOf(IUPC25));
		sb.append(",IUPC40="+IUPC40);
		sb.append(",IUPPRM="+String.valueOf(IUPPRM));
		sb.append(",IUPUMR="+IUPUMR);
		sb.append(",IUPPOS="+String.valueOf(IUPPOS));
		sb.append(",IUPRCC="+IUPRCC);
		sb.append(",IUPRCZ="+IUPRCZ);
		sb.append(",IUPRCS="+IUPRCS);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(IUPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC);
            			}
            		
        			sb.append("|");
        		
        				if(IUPCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPCCD);
            			}
            		
        			sb.append("|");
        		
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(IUSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUSTYL);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IUASN);
        			
        			sb.append("|");
        		
        				if(IUPRTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRTN);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IUVND);
        			
        			sb.append("|");
        		
        				if(IUPALT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPALT);
            			}
            		
        			sb.append("|");
        		
        				if(IUPC25 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC25);
            			}
            		
        			sb.append("|");
        		
        				if(IUPC40 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC40);
            			}
            		
        			sb.append("|");
        		
        				if(IUPPRM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPPRM);
            			}
            		
        			sb.append("|");
        		
        				if(IUPUMR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPUMR);
            			}
            		
        			sb.append("|");
        		
        				if(IUPPOS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPPOS);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCC);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCZ);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCS);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row32");
			
		int tos_count_tFileOutputDelimited_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_3 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_3.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_3.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVUPC.txt\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                            log4jParamters_tFileOutputDelimited_3.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_3 - "  + (log4jParamters_tFileOutputDelimited_3) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_3", "tFileOutputDelimited_3", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File("/data/talend/data_repository/INVUPC.txt")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                                log.info("tFileOutputDelimited_3 - Creating directory '" + dir_tFileOutputDelimited_3.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_3.mkdirs();
                                log.info("tFileOutputDelimited_3 - The directory '"+ dir_tFileOutputDelimited_3.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        String zipName_tFileOutputDelimited_3 = fullName_tFileOutputDelimited_3 + ".zip";
                        java.io.File file_tFileOutputDelimited_3 = new java.io.File(zipName_tFileOutputDelimited_3);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_3= null;
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        if(file_tFileOutputDelimited_3.exists()) {
                            file_tFileOutputDelimited_3.delete();
                        }
                        zipOut_tFileOutputDelimited_3= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_3)));
                        zipOut_tFileOutputDelimited_3.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_3.getName()));
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_3,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("IUPC");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPCCD");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("INUMBR");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUSTYL");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUASN");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPRTN");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUVND");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPALT");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPC25");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPC40");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPPRM");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPUMR");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPPOS");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPRCC");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPRCZ");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("IUPRCS");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_3 = new StringBuilder();
                    log4jParamters_tDBInput_3.append("Parameters:");
                            log4jParamters_tDBInput_3.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("QUERY" + " = " + "\"select * from MM4R5LIB.INVUPC\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("IUPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPCCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUSTYL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUASN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRTN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUVND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPALT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPC25")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPC40")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPPRM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPUMR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPPOS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRCC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRCZ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRCS")+"}]");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + (log4jParamters_tDBInput_3) );
                    } 
                } 
            new BytesLimit65535_tDBInput_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_3", "tDBInput_3", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_3 = context.jda_password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				  
				String url_tDBInput_3 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_3 - Driver ClassName: "+driverClass_tDBInput_3+".");
			
	    		log.debug("tDBInput_3 - Connection attempt to '" + url_tDBInput_3 + "' with the username '" + dbUser_tDBInput_3 + "'.");
			
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
	    		log.debug("tDBInput_3 - Connection to '" + url_tDBInput_3 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select * from MM4R5LIB.INVUPC";
		    
	    		log.debug("tDBInput_3 - Executing the query: '" + dbquery_tDBInput_3 + "'.");
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    	log.debug("tDBInput_3 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row32.IUPC = null;
							} else {
		                          
            row32.IUPC = rs_tDBInput_3.getBigDecimal(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row32.IUPCCD = null;
							} else {
	                         		
        	row32.IUPCCD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row32.INUMBR = null;
							} else {
		                          
            row32.INUMBR = rs_tDBInput_3.getBigDecimal(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row32.IUSTYL = null;
							} else {
	                         		
        	row32.IUSTYL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row32.IUASN = 0;
							} else {
		                          
            row32.IUASN = rs_tDBInput_3.getFloat(5);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row32.IUPRTN = null;
							} else {
	                         		
        	row32.IUPRTN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row32.IUVND = 0;
							} else {
		                          
            row32.IUVND = rs_tDBInput_3.getFloat(7);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row32.IUPALT = null;
							} else {
		                          
            row32.IUPALT = rs_tDBInput_3.getBigDecimal(8);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row32.IUPC25 = null;
							} else {
		                          
            row32.IUPC25 = rs_tDBInput_3.getBigDecimal(9);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row32.IUPC40 = null;
							} else {
	                         		
        	row32.IUPC40 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row32.IUPPRM = null;
							} else {
		                          
            row32.IUPPRM = rs_tDBInput_3.getBigDecimal(11);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row32.IUPUMR = null;
							} else {
	                         		
        	row32.IUPUMR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row32.IUPPOS = null;
							} else {
		                          
            row32.IUPPOS = rs_tDBInput_3.getBigDecimal(13);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row32.IUPRCC = null;
							} else {
	                         		
        	row32.IUPRCC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row32.IUPRCZ = null;
							} else {
	                         		
        	row32.IUPRCZ = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row32.IUPRCS = null;
							} else {
	                         		
        	row32.IUPRCS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
		                    }
					
						log.debug("tDBInput_3 - Retrieving the record " + nb_line_tDBInput_3 + ".");
					



 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row32","tDBInput_3","tDBInput_3","tAS400Input","tFileOutputDelimited_3","tFileOutputDelimited_3","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row32 - " + (row32==null? "": row32.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row32.IUPC != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPC.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPCCD != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPCCD
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.INUMBR != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.INUMBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUSTYL != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUSTYL
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row32.IUASN
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPRTN != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPRTN
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row32.IUVND
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPALT != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPALT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPC25 != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPC25.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPC40 != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPC40
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPPRM != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPPRM.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPUMR != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPUMR
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPPOS != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPPOS.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPRCC != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPRCC
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPRCZ != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPRCZ
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row32.IUPRCS != null) {
                        sb_tFileOutputDelimited_3.append(
                            row32.IUPRCS
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());
                        log.debug("tFileOutputDelimited_3 - Writing the record " + nb_line_tFileOutputDelimited_3 + ".");

                    }



 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
	    		log.debug("tDBInput_3 - Closing the connection to the database.");
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_3 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
	    		log.debug("tDBInput_3 - Retrieved records count: "+nb_line_tDBInput_3 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + ("Done.") );

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	
				log.debug("tFileOutputDelimited_3 - Written records count: " + nb_line_tFileOutputDelimited_3 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row32",2,0,
			 			"tDBInput_3","tDBInput_3","tAS400Input","tFileOutputDelimited_3","tFileOutputDelimited_3","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_3 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tFileInputDelimited_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class INVUPCStruct implements routines.system.IPersistableRow<INVUPCStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public BigDecimal IUPC;

				public BigDecimal getIUPC () {
					return this.IUPC;
				}

				public Boolean IUPCIsNullable(){
				    return true;
				}
				public Boolean IUPCIsKey(){
				    return false;
				}
				public Integer IUPCLength(){
				    return null;
				}
				public Integer IUPCPrecision(){
				    return null;
				}
				public String IUPCDefault(){
				
					return "";
				
				}
				public String IUPCComment(){
				
				    return "";
				
				}
				public String IUPCPattern(){
				
					return "";
				
				}
				public String IUPCOriginalDbColumnName(){
				
					return "IUPC";
				
				}

				
			    public String IUPCCD;

				public String getIUPCCD () {
					return this.IUPCCD;
				}

				public Boolean IUPCCDIsNullable(){
				    return true;
				}
				public Boolean IUPCCDIsKey(){
				    return false;
				}
				public Integer IUPCCDLength(){
				    return null;
				}
				public Integer IUPCCDPrecision(){
				    return null;
				}
				public String IUPCCDDefault(){
				
					return null;
				
				}
				public String IUPCCDComment(){
				
				    return "";
				
				}
				public String IUPCCDPattern(){
				
					return "";
				
				}
				public String IUPCCDOriginalDbColumnName(){
				
					return "IUPCCD";
				
				}

				
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public String IUSTYL;

				public String getIUSTYL () {
					return this.IUSTYL;
				}

				public Boolean IUSTYLIsNullable(){
				    return true;
				}
				public Boolean IUSTYLIsKey(){
				    return false;
				}
				public Integer IUSTYLLength(){
				    return null;
				}
				public Integer IUSTYLPrecision(){
				    return null;
				}
				public String IUSTYLDefault(){
				
					return null;
				
				}
				public String IUSTYLComment(){
				
				    return "";
				
				}
				public String IUSTYLPattern(){
				
					return "";
				
				}
				public String IUSTYLOriginalDbColumnName(){
				
					return "IUSTYL";
				
				}

				
			    public Double IUASN;

				public Double getIUASN () {
					return this.IUASN;
				}

				public Boolean IUASNIsNullable(){
				    return true;
				}
				public Boolean IUASNIsKey(){
				    return false;
				}
				public Integer IUASNLength(){
				    return null;
				}
				public Integer IUASNPrecision(){
				    return null;
				}
				public String IUASNDefault(){
				
					return "";
				
				}
				public String IUASNComment(){
				
				    return "";
				
				}
				public String IUASNPattern(){
				
					return "";
				
				}
				public String IUASNOriginalDbColumnName(){
				
					return "IUASN";
				
				}

				
			    public String IUPRTN;

				public String getIUPRTN () {
					return this.IUPRTN;
				}

				public Boolean IUPRTNIsNullable(){
				    return true;
				}
				public Boolean IUPRTNIsKey(){
				    return false;
				}
				public Integer IUPRTNLength(){
				    return null;
				}
				public Integer IUPRTNPrecision(){
				    return null;
				}
				public String IUPRTNDefault(){
				
					return null;
				
				}
				public String IUPRTNComment(){
				
				    return "";
				
				}
				public String IUPRTNPattern(){
				
					return "";
				
				}
				public String IUPRTNOriginalDbColumnName(){
				
					return "IUPRTN";
				
				}

				
			    public Double IUVND;

				public Double getIUVND () {
					return this.IUVND;
				}

				public Boolean IUVNDIsNullable(){
				    return true;
				}
				public Boolean IUVNDIsKey(){
				    return false;
				}
				public Integer IUVNDLength(){
				    return null;
				}
				public Integer IUVNDPrecision(){
				    return null;
				}
				public String IUVNDDefault(){
				
					return "";
				
				}
				public String IUVNDComment(){
				
				    return "";
				
				}
				public String IUVNDPattern(){
				
					return "";
				
				}
				public String IUVNDOriginalDbColumnName(){
				
					return "IUVND";
				
				}

				
			    public BigDecimal IUPALT;

				public BigDecimal getIUPALT () {
					return this.IUPALT;
				}

				public Boolean IUPALTIsNullable(){
				    return true;
				}
				public Boolean IUPALTIsKey(){
				    return false;
				}
				public Integer IUPALTLength(){
				    return null;
				}
				public Integer IUPALTPrecision(){
				    return null;
				}
				public String IUPALTDefault(){
				
					return "";
				
				}
				public String IUPALTComment(){
				
				    return "";
				
				}
				public String IUPALTPattern(){
				
					return "";
				
				}
				public String IUPALTOriginalDbColumnName(){
				
					return "IUPALT";
				
				}

				
			    public BigDecimal IUPC25;

				public BigDecimal getIUPC25 () {
					return this.IUPC25;
				}

				public Boolean IUPC25IsNullable(){
				    return true;
				}
				public Boolean IUPC25IsKey(){
				    return false;
				}
				public Integer IUPC25Length(){
				    return null;
				}
				public Integer IUPC25Precision(){
				    return null;
				}
				public String IUPC25Default(){
				
					return "";
				
				}
				public String IUPC25Comment(){
				
				    return "";
				
				}
				public String IUPC25Pattern(){
				
					return "";
				
				}
				public String IUPC25OriginalDbColumnName(){
				
					return "IUPC25";
				
				}

				
			    public String IUPC40;

				public String getIUPC40 () {
					return this.IUPC40;
				}

				public Boolean IUPC40IsNullable(){
				    return true;
				}
				public Boolean IUPC40IsKey(){
				    return false;
				}
				public Integer IUPC40Length(){
				    return null;
				}
				public Integer IUPC40Precision(){
				    return null;
				}
				public String IUPC40Default(){
				
					return null;
				
				}
				public String IUPC40Comment(){
				
				    return "";
				
				}
				public String IUPC40Pattern(){
				
					return "";
				
				}
				public String IUPC40OriginalDbColumnName(){
				
					return "IUPC40";
				
				}

				
			    public BigDecimal IUPPRM;

				public BigDecimal getIUPPRM () {
					return this.IUPPRM;
				}

				public Boolean IUPPRMIsNullable(){
				    return true;
				}
				public Boolean IUPPRMIsKey(){
				    return false;
				}
				public Integer IUPPRMLength(){
				    return null;
				}
				public Integer IUPPRMPrecision(){
				    return null;
				}
				public String IUPPRMDefault(){
				
					return "";
				
				}
				public String IUPPRMComment(){
				
				    return "";
				
				}
				public String IUPPRMPattern(){
				
					return "";
				
				}
				public String IUPPRMOriginalDbColumnName(){
				
					return "IUPPRM";
				
				}

				
			    public String IUPUMR;

				public String getIUPUMR () {
					return this.IUPUMR;
				}

				public Boolean IUPUMRIsNullable(){
				    return true;
				}
				public Boolean IUPUMRIsKey(){
				    return false;
				}
				public Integer IUPUMRLength(){
				    return null;
				}
				public Integer IUPUMRPrecision(){
				    return null;
				}
				public String IUPUMRDefault(){
				
					return "";
				
				}
				public String IUPUMRComment(){
				
				    return "";
				
				}
				public String IUPUMRPattern(){
				
					return "";
				
				}
				public String IUPUMROriginalDbColumnName(){
				
					return "IUPUMR";
				
				}

				
			    public BigDecimal IUPPOS;

				public BigDecimal getIUPPOS () {
					return this.IUPPOS;
				}

				public Boolean IUPPOSIsNullable(){
				    return true;
				}
				public Boolean IUPPOSIsKey(){
				    return false;
				}
				public Integer IUPPOSLength(){
				    return null;
				}
				public Integer IUPPOSPrecision(){
				    return null;
				}
				public String IUPPOSDefault(){
				
					return "";
				
				}
				public String IUPPOSComment(){
				
				    return "";
				
				}
				public String IUPPOSPattern(){
				
					return "";
				
				}
				public String IUPPOSOriginalDbColumnName(){
				
					return "IUPPOS";
				
				}

				
			    public String IUPRCC;

				public String getIUPRCC () {
					return this.IUPRCC;
				}

				public Boolean IUPRCCIsNullable(){
				    return true;
				}
				public Boolean IUPRCCIsKey(){
				    return false;
				}
				public Integer IUPRCCLength(){
				    return null;
				}
				public Integer IUPRCCPrecision(){
				    return null;
				}
				public String IUPRCCDefault(){
				
					return "";
				
				}
				public String IUPRCCComment(){
				
				    return "";
				
				}
				public String IUPRCCPattern(){
				
					return "";
				
				}
				public String IUPRCCOriginalDbColumnName(){
				
					return "IUPRCC";
				
				}

				
			    public String IUPRCZ;

				public String getIUPRCZ () {
					return this.IUPRCZ;
				}

				public Boolean IUPRCZIsNullable(){
				    return true;
				}
				public Boolean IUPRCZIsKey(){
				    return false;
				}
				public Integer IUPRCZLength(){
				    return null;
				}
				public Integer IUPRCZPrecision(){
				    return null;
				}
				public String IUPRCZDefault(){
				
					return "";
				
				}
				public String IUPRCZComment(){
				
				    return "";
				
				}
				public String IUPRCZPattern(){
				
					return "";
				
				}
				public String IUPRCZOriginalDbColumnName(){
				
					return "IUPRCZ";
				
				}

				
			    public String IUPRCS;

				public String getIUPRCS () {
					return this.IUPRCS;
				}

				public Boolean IUPRCSIsNullable(){
				    return true;
				}
				public Boolean IUPRCSIsKey(){
				    return false;
				}
				public Integer IUPRCSLength(){
				    return null;
				}
				public Integer IUPRCSPrecision(){
				    return null;
				}
				public String IUPRCSDefault(){
				
					return "";
				
				}
				public String IUPRCSComment(){
				
				    return "";
				
				}
				public String IUPRCSPattern(){
				
					return "";
				
				}
				public String IUPRCSOriginalDbColumnName(){
				
					return "IUPRCS";
				
				}

				
			    public java.util.Date LOAD_DATE;

				public java.util.Date getLOAD_DATE () {
					return this.LOAD_DATE;
				}

				public Boolean LOAD_DATEIsNullable(){
				    return true;
				}
				public Boolean LOAD_DATEIsKey(){
				    return false;
				}
				public Integer LOAD_DATELength(){
				    return null;
				}
				public Integer LOAD_DATEPrecision(){
				    return null;
				}
				public String LOAD_DATEDefault(){
				
					return "";
				
				}
				public String LOAD_DATEComment(){
				
				    return "";
				
				}
				public String LOAD_DATEPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String LOAD_DATEOriginalDbColumnName(){
				
					return "LOAD_DATE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
						this.IUPC = (BigDecimal) dis.readObject();
					
					this.IUPCCD = readString(dis);
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.IUSTYL = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUASN = null;
           				} else {
           			    	this.IUASN = dis.readDouble();
           				}
					
					this.IUPRTN = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUVND = null;
           				} else {
           			    	this.IUVND = dis.readDouble();
           				}
					
						this.IUPALT = (BigDecimal) dis.readObject();
					
						this.IUPC25 = (BigDecimal) dis.readObject();
					
					this.IUPC40 = readString(dis);
					
						this.IUPPRM = (BigDecimal) dis.readObject();
					
					this.IUPUMR = readString(dis);
					
						this.IUPPOS = (BigDecimal) dis.readObject();
					
					this.IUPRCC = readString(dis);
					
					this.IUPRCZ = readString(dis);
					
					this.IUPRCS = readString(dis);
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
						this.IUPC = (BigDecimal) dis.readObject();
					
					this.IUPCCD = readString(dis);
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.IUSTYL = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUASN = null;
           				} else {
           			    	this.IUASN = dis.readDouble();
           				}
					
					this.IUPRTN = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUVND = null;
           				} else {
           			    	this.IUVND = dis.readDouble();
           				}
					
						this.IUPALT = (BigDecimal) dis.readObject();
					
						this.IUPC25 = (BigDecimal) dis.readObject();
					
					this.IUPC40 = readString(dis);
					
						this.IUPPRM = (BigDecimal) dis.readObject();
					
					this.IUPUMR = readString(dis);
					
						this.IUPPOS = (BigDecimal) dis.readObject();
					
					this.IUPRCC = readString(dis);
					
					this.IUPRCZ = readString(dis);
					
					this.IUPRCS = readString(dis);
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC);
					
					// String
				
						writeString(this.IUPCCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.IUSTYL,dos);
					
					// Double
				
						if(this.IUASN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUASN);
		            	}
					
					// String
				
						writeString(this.IUPRTN,dos);
					
					// Double
				
						if(this.IUVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUVND);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPALT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC25);
					
					// String
				
						writeString(this.IUPC40,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPRM);
					
					// String
				
						writeString(this.IUPUMR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPOS);
					
					// String
				
						writeString(this.IUPRCC,dos);
					
					// String
				
						writeString(this.IUPRCZ,dos);
					
					// String
				
						writeString(this.IUPRCS,dos);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC);
					
					// String
				
						writeString(this.IUPCCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.IUSTYL,dos);
					
					// Double
				
						if(this.IUASN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUASN);
		            	}
					
					// String
				
						writeString(this.IUPRTN,dos);
					
					// Double
				
						if(this.IUVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUVND);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPALT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC25);
					
					// String
				
						writeString(this.IUPC40,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPRM);
					
					// String
				
						writeString(this.IUPUMR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPOS);
					
					// String
				
						writeString(this.IUPRCC,dos);
					
					// String
				
						writeString(this.IUPRCZ,dos);
					
					// String
				
						writeString(this.IUPRCS,dos);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUPC="+String.valueOf(IUPC));
		sb.append(",IUPCCD="+IUPCCD);
		sb.append(",INUMBR="+String.valueOf(INUMBR));
		sb.append(",IUSTYL="+IUSTYL);
		sb.append(",IUASN="+String.valueOf(IUASN));
		sb.append(",IUPRTN="+IUPRTN);
		sb.append(",IUVND="+String.valueOf(IUVND));
		sb.append(",IUPALT="+String.valueOf(IUPALT));
		sb.append(",IUPC25="+String.valueOf(IUPC25));
		sb.append(",IUPC40="+IUPC40);
		sb.append(",IUPPRM="+String.valueOf(IUPPRM));
		sb.append(",IUPUMR="+IUPUMR);
		sb.append(",IUPPOS="+String.valueOf(IUPPOS));
		sb.append(",IUPRCC="+IUPRCC);
		sb.append(",IUPRCZ="+IUPRCZ);
		sb.append(",IUPRCS="+IUPRCS);
		sb.append(",LOAD_DATE="+String.valueOf(LOAD_DATE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(IUPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC);
            			}
            		
        			sb.append("|");
        		
        				if(IUPCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPCCD);
            			}
            		
        			sb.append("|");
        		
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(IUSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(IUASN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUASN);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRTN);
            			}
            		
        			sb.append("|");
        		
        				if(IUVND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUVND);
            			}
            		
        			sb.append("|");
        		
        				if(IUPALT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPALT);
            			}
            		
        			sb.append("|");
        		
        				if(IUPC25 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC25);
            			}
            		
        			sb.append("|");
        		
        				if(IUPC40 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC40);
            			}
            		
        			sb.append("|");
        		
        				if(IUPPRM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPPRM);
            			}
            		
        			sb.append("|");
        		
        				if(IUPUMR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPUMR);
            			}
            		
        			sb.append("|");
        		
        				if(IUPPOS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPPOS);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCC);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCZ);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCS);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_DATE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(INVUPCStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public BigDecimal IUPC;

				public BigDecimal getIUPC () {
					return this.IUPC;
				}

				public Boolean IUPCIsNullable(){
				    return true;
				}
				public Boolean IUPCIsKey(){
				    return false;
				}
				public Integer IUPCLength(){
				    return null;
				}
				public Integer IUPCPrecision(){
				    return null;
				}
				public String IUPCDefault(){
				
					return "";
				
				}
				public String IUPCComment(){
				
				    return "";
				
				}
				public String IUPCPattern(){
				
					return "";
				
				}
				public String IUPCOriginalDbColumnName(){
				
					return "IUPC";
				
				}

				
			    public String IUPCCD;

				public String getIUPCCD () {
					return this.IUPCCD;
				}

				public Boolean IUPCCDIsNullable(){
				    return true;
				}
				public Boolean IUPCCDIsKey(){
				    return false;
				}
				public Integer IUPCCDLength(){
				    return null;
				}
				public Integer IUPCCDPrecision(){
				    return null;
				}
				public String IUPCCDDefault(){
				
					return null;
				
				}
				public String IUPCCDComment(){
				
				    return "";
				
				}
				public String IUPCCDPattern(){
				
					return "";
				
				}
				public String IUPCCDOriginalDbColumnName(){
				
					return "IUPCCD";
				
				}

				
			    public BigDecimal INUMBR;

				public BigDecimal getINUMBR () {
					return this.INUMBR;
				}

				public Boolean INUMBRIsNullable(){
				    return true;
				}
				public Boolean INUMBRIsKey(){
				    return false;
				}
				public Integer INUMBRLength(){
				    return null;
				}
				public Integer INUMBRPrecision(){
				    return null;
				}
				public String INUMBRDefault(){
				
					return "";
				
				}
				public String INUMBRComment(){
				
				    return "";
				
				}
				public String INUMBRPattern(){
				
					return "";
				
				}
				public String INUMBROriginalDbColumnName(){
				
					return "INUMBR";
				
				}

				
			    public String IUSTYL;

				public String getIUSTYL () {
					return this.IUSTYL;
				}

				public Boolean IUSTYLIsNullable(){
				    return true;
				}
				public Boolean IUSTYLIsKey(){
				    return false;
				}
				public Integer IUSTYLLength(){
				    return null;
				}
				public Integer IUSTYLPrecision(){
				    return null;
				}
				public String IUSTYLDefault(){
				
					return null;
				
				}
				public String IUSTYLComment(){
				
				    return "";
				
				}
				public String IUSTYLPattern(){
				
					return "";
				
				}
				public String IUSTYLOriginalDbColumnName(){
				
					return "IUSTYL";
				
				}

				
			    public Double IUASN;

				public Double getIUASN () {
					return this.IUASN;
				}

				public Boolean IUASNIsNullable(){
				    return true;
				}
				public Boolean IUASNIsKey(){
				    return false;
				}
				public Integer IUASNLength(){
				    return null;
				}
				public Integer IUASNPrecision(){
				    return null;
				}
				public String IUASNDefault(){
				
					return "";
				
				}
				public String IUASNComment(){
				
				    return "";
				
				}
				public String IUASNPattern(){
				
					return "";
				
				}
				public String IUASNOriginalDbColumnName(){
				
					return "IUASN";
				
				}

				
			    public String IUPRTN;

				public String getIUPRTN () {
					return this.IUPRTN;
				}

				public Boolean IUPRTNIsNullable(){
				    return true;
				}
				public Boolean IUPRTNIsKey(){
				    return false;
				}
				public Integer IUPRTNLength(){
				    return null;
				}
				public Integer IUPRTNPrecision(){
				    return null;
				}
				public String IUPRTNDefault(){
				
					return null;
				
				}
				public String IUPRTNComment(){
				
				    return "";
				
				}
				public String IUPRTNPattern(){
				
					return "";
				
				}
				public String IUPRTNOriginalDbColumnName(){
				
					return "IUPRTN";
				
				}

				
			    public Double IUVND;

				public Double getIUVND () {
					return this.IUVND;
				}

				public Boolean IUVNDIsNullable(){
				    return true;
				}
				public Boolean IUVNDIsKey(){
				    return false;
				}
				public Integer IUVNDLength(){
				    return null;
				}
				public Integer IUVNDPrecision(){
				    return null;
				}
				public String IUVNDDefault(){
				
					return "";
				
				}
				public String IUVNDComment(){
				
				    return "";
				
				}
				public String IUVNDPattern(){
				
					return "";
				
				}
				public String IUVNDOriginalDbColumnName(){
				
					return "IUVND";
				
				}

				
			    public BigDecimal IUPALT;

				public BigDecimal getIUPALT () {
					return this.IUPALT;
				}

				public Boolean IUPALTIsNullable(){
				    return true;
				}
				public Boolean IUPALTIsKey(){
				    return false;
				}
				public Integer IUPALTLength(){
				    return null;
				}
				public Integer IUPALTPrecision(){
				    return null;
				}
				public String IUPALTDefault(){
				
					return "";
				
				}
				public String IUPALTComment(){
				
				    return "";
				
				}
				public String IUPALTPattern(){
				
					return "";
				
				}
				public String IUPALTOriginalDbColumnName(){
				
					return "IUPALT";
				
				}

				
			    public BigDecimal IUPC25;

				public BigDecimal getIUPC25 () {
					return this.IUPC25;
				}

				public Boolean IUPC25IsNullable(){
				    return true;
				}
				public Boolean IUPC25IsKey(){
				    return false;
				}
				public Integer IUPC25Length(){
				    return null;
				}
				public Integer IUPC25Precision(){
				    return null;
				}
				public String IUPC25Default(){
				
					return "";
				
				}
				public String IUPC25Comment(){
				
				    return "";
				
				}
				public String IUPC25Pattern(){
				
					return "";
				
				}
				public String IUPC25OriginalDbColumnName(){
				
					return "IUPC25";
				
				}

				
			    public String IUPC40;

				public String getIUPC40 () {
					return this.IUPC40;
				}

				public Boolean IUPC40IsNullable(){
				    return true;
				}
				public Boolean IUPC40IsKey(){
				    return false;
				}
				public Integer IUPC40Length(){
				    return null;
				}
				public Integer IUPC40Precision(){
				    return null;
				}
				public String IUPC40Default(){
				
					return null;
				
				}
				public String IUPC40Comment(){
				
				    return "";
				
				}
				public String IUPC40Pattern(){
				
					return "";
				
				}
				public String IUPC40OriginalDbColumnName(){
				
					return "IUPC40";
				
				}

				
			    public BigDecimal IUPPRM;

				public BigDecimal getIUPPRM () {
					return this.IUPPRM;
				}

				public Boolean IUPPRMIsNullable(){
				    return true;
				}
				public Boolean IUPPRMIsKey(){
				    return false;
				}
				public Integer IUPPRMLength(){
				    return null;
				}
				public Integer IUPPRMPrecision(){
				    return null;
				}
				public String IUPPRMDefault(){
				
					return "";
				
				}
				public String IUPPRMComment(){
				
				    return "";
				
				}
				public String IUPPRMPattern(){
				
					return "";
				
				}
				public String IUPPRMOriginalDbColumnName(){
				
					return "IUPPRM";
				
				}

				
			    public String IUPUMR;

				public String getIUPUMR () {
					return this.IUPUMR;
				}

				public Boolean IUPUMRIsNullable(){
				    return true;
				}
				public Boolean IUPUMRIsKey(){
				    return false;
				}
				public Integer IUPUMRLength(){
				    return null;
				}
				public Integer IUPUMRPrecision(){
				    return null;
				}
				public String IUPUMRDefault(){
				
					return null;
				
				}
				public String IUPUMRComment(){
				
				    return "";
				
				}
				public String IUPUMRPattern(){
				
					return "";
				
				}
				public String IUPUMROriginalDbColumnName(){
				
					return "IUPUMR";
				
				}

				
			    public BigDecimal IUPPOS;

				public BigDecimal getIUPPOS () {
					return this.IUPPOS;
				}

				public Boolean IUPPOSIsNullable(){
				    return true;
				}
				public Boolean IUPPOSIsKey(){
				    return false;
				}
				public Integer IUPPOSLength(){
				    return null;
				}
				public Integer IUPPOSPrecision(){
				    return null;
				}
				public String IUPPOSDefault(){
				
					return "";
				
				}
				public String IUPPOSComment(){
				
				    return "";
				
				}
				public String IUPPOSPattern(){
				
					return "";
				
				}
				public String IUPPOSOriginalDbColumnName(){
				
					return "IUPPOS";
				
				}

				
			    public String IUPRCC;

				public String getIUPRCC () {
					return this.IUPRCC;
				}

				public Boolean IUPRCCIsNullable(){
				    return true;
				}
				public Boolean IUPRCCIsKey(){
				    return false;
				}
				public Integer IUPRCCLength(){
				    return null;
				}
				public Integer IUPRCCPrecision(){
				    return null;
				}
				public String IUPRCCDefault(){
				
					return "";
				
				}
				public String IUPRCCComment(){
				
				    return "";
				
				}
				public String IUPRCCPattern(){
				
					return "";
				
				}
				public String IUPRCCOriginalDbColumnName(){
				
					return "IUPRCC";
				
				}

				
			    public String IUPRCZ;

				public String getIUPRCZ () {
					return this.IUPRCZ;
				}

				public Boolean IUPRCZIsNullable(){
				    return true;
				}
				public Boolean IUPRCZIsKey(){
				    return false;
				}
				public Integer IUPRCZLength(){
				    return null;
				}
				public Integer IUPRCZPrecision(){
				    return null;
				}
				public String IUPRCZDefault(){
				
					return "";
				
				}
				public String IUPRCZComment(){
				
				    return "";
				
				}
				public String IUPRCZPattern(){
				
					return "";
				
				}
				public String IUPRCZOriginalDbColumnName(){
				
					return "IUPRCZ";
				
				}

				
			    public String IUPRCS;

				public String getIUPRCS () {
					return this.IUPRCS;
				}

				public Boolean IUPRCSIsNullable(){
				    return true;
				}
				public Boolean IUPRCSIsKey(){
				    return false;
				}
				public Integer IUPRCSLength(){
				    return null;
				}
				public Integer IUPRCSPrecision(){
				    return null;
				}
				public String IUPRCSDefault(){
				
					return "";
				
				}
				public String IUPRCSComment(){
				
				    return "";
				
				}
				public String IUPRCSPattern(){
				
					return "";
				
				}
				public String IUPRCSOriginalDbColumnName(){
				
					return "IUPRCS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
						this.IUPC = (BigDecimal) dis.readObject();
					
					this.IUPCCD = readString(dis);
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.IUSTYL = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUASN = null;
           				} else {
           			    	this.IUASN = dis.readDouble();
           				}
					
					this.IUPRTN = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUVND = null;
           				} else {
           			    	this.IUVND = dis.readDouble();
           				}
					
						this.IUPALT = (BigDecimal) dis.readObject();
					
						this.IUPC25 = (BigDecimal) dis.readObject();
					
					this.IUPC40 = readString(dis);
					
						this.IUPPRM = (BigDecimal) dis.readObject();
					
					this.IUPUMR = readString(dis);
					
						this.IUPPOS = (BigDecimal) dis.readObject();
					
					this.IUPRCC = readString(dis);
					
					this.IUPRCZ = readString(dis);
					
					this.IUPRCS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
						this.IUPC = (BigDecimal) dis.readObject();
					
					this.IUPCCD = readString(dis);
					
						this.INUMBR = (BigDecimal) dis.readObject();
					
					this.IUSTYL = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUASN = null;
           				} else {
           			    	this.IUASN = dis.readDouble();
           				}
					
					this.IUPRTN = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IUVND = null;
           				} else {
           			    	this.IUVND = dis.readDouble();
           				}
					
						this.IUPALT = (BigDecimal) dis.readObject();
					
						this.IUPC25 = (BigDecimal) dis.readObject();
					
					this.IUPC40 = readString(dis);
					
						this.IUPPRM = (BigDecimal) dis.readObject();
					
					this.IUPUMR = readString(dis);
					
						this.IUPPOS = (BigDecimal) dis.readObject();
					
					this.IUPRCC = readString(dis);
					
					this.IUPRCZ = readString(dis);
					
					this.IUPRCS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC);
					
					// String
				
						writeString(this.IUPCCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.IUSTYL,dos);
					
					// Double
				
						if(this.IUASN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUASN);
		            	}
					
					// String
				
						writeString(this.IUPRTN,dos);
					
					// Double
				
						if(this.IUVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUVND);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPALT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC25);
					
					// String
				
						writeString(this.IUPC40,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPRM);
					
					// String
				
						writeString(this.IUPUMR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPOS);
					
					// String
				
						writeString(this.IUPRCC,dos);
					
					// String
				
						writeString(this.IUPRCZ,dos);
					
					// String
				
						writeString(this.IUPRCS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC);
					
					// String
				
						writeString(this.IUPCCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INUMBR);
					
					// String
				
						writeString(this.IUSTYL,dos);
					
					// Double
				
						if(this.IUASN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUASN);
		            	}
					
					// String
				
						writeString(this.IUPRTN,dos);
					
					// Double
				
						if(this.IUVND == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IUVND);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPALT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPC25);
					
					// String
				
						writeString(this.IUPC40,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPRM);
					
					// String
				
						writeString(this.IUPUMR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IUPPOS);
					
					// String
				
						writeString(this.IUPRCC,dos);
					
					// String
				
						writeString(this.IUPRCZ,dos);
					
					// String
				
						writeString(this.IUPRCS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUPC="+String.valueOf(IUPC));
		sb.append(",IUPCCD="+IUPCCD);
		sb.append(",INUMBR="+String.valueOf(INUMBR));
		sb.append(",IUSTYL="+IUSTYL);
		sb.append(",IUASN="+String.valueOf(IUASN));
		sb.append(",IUPRTN="+IUPRTN);
		sb.append(",IUVND="+String.valueOf(IUVND));
		sb.append(",IUPALT="+String.valueOf(IUPALT));
		sb.append(",IUPC25="+String.valueOf(IUPC25));
		sb.append(",IUPC40="+IUPC40);
		sb.append(",IUPPRM="+String.valueOf(IUPPRM));
		sb.append(",IUPUMR="+IUPUMR);
		sb.append(",IUPPOS="+String.valueOf(IUPPOS));
		sb.append(",IUPRCC="+IUPRCC);
		sb.append(",IUPRCZ="+IUPRCZ);
		sb.append(",IUPRCS="+IUPRCS);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(IUPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC);
            			}
            		
        			sb.append("|");
        		
        				if(IUPCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPCCD);
            			}
            		
        			sb.append("|");
        		
        				if(INUMBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INUMBR);
            			}
            		
        			sb.append("|");
        		
        				if(IUSTYL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUSTYL);
            			}
            		
        			sb.append("|");
        		
        				if(IUASN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUASN);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRTN);
            			}
            		
        			sb.append("|");
        		
        				if(IUVND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUVND);
            			}
            		
        			sb.append("|");
        		
        				if(IUPALT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPALT);
            			}
            		
        			sb.append("|");
        		
        				if(IUPC25 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC25);
            			}
            		
        			sb.append("|");
        		
        				if(IUPC40 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPC40);
            			}
            		
        			sb.append("|");
        		
        				if(IUPPRM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPPRM);
            			}
            		
        			sb.append("|");
        		
        				if(IUPUMR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPUMR);
            			}
            		
        			sb.append("|");
        		
        				if(IUPPOS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPPOS);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCC);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCZ);
            			}
            		
        			sb.append("|");
        		
        				if(IUPRCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IUPRCS);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
INVUPCStruct INVUPC = new INVUPCStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"INVUPC");
			
		int tos_count_tDBOutput_3 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_3", "tDBOutput_3", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_3 = (String)(restRequest_tDBOutput_3 != null ? restRequest_tDBOutput_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_3 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_3 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_3 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_3 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_3.createRuntimeProperties();
 		                    props_tDBOutput_3.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_3.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_3.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_3.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_3_1_fisrt sst_tDBOutput_3_1_fisrt = new SchemaSettingTool_tDBOutput_3_1_fisrt();
 		                    
 		                    props_tDBOutput_3.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_3_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_3.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_3.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_3.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_3.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_3.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_3.table.setValue("tableName",
 		                    "UPC_FILE_INVUPC");
 		                    
 		                    props_tDBOutput_3.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_3.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_3.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_3.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_3.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_3.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_3_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"UPC_FILE_INVUPC\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"IUPC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":18,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IUPC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPCCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUPCCD\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"INUMBR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"INUMBR\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUSTYL\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":15,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUSTYL\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUASN\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"IUASN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPRTN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":15,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUPRTN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUVND\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"IUVND\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPALT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":18,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IUPALT\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPC25\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":25,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IUPC25\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPC40\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":40,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUPC40\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPPRM\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IUPPRM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPUMR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUPUMR\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPPOS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"IUPPOS\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPRCC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUPRCC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPRCZ\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUPRCZ\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IUPRCS\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"IUPRCS\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"talend.field.dbType\":91,\"talend.field.dbColumnName\":\"LOAD_DATE\",\"talend.field.default\":\"\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_3_2_fisrt sst_tDBOutput_3_2_fisrt = new SchemaSettingTool_tDBOutput_3_2_fisrt();
 		                    
 		                    props_tDBOutput_3.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_3_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_3.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_3 = props_tDBOutput_3.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_3.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_3);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_3.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_3 = props_tDBOutput_3.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_3.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_3);
        }
    }
globalMap.put("tDBOutput_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_3_MAPPINGS_URL", mappings_url_tDBOutput_3);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_3 = null;
topology_tDBOutput_3 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_3 = def_tDBOutput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_3, topology_tDBOutput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_3 = def_tDBOutput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_3 = componentRuntime_tDBOutput_3.initialize(container_tDBOutput_3, props_tDBOutput_3);

if (initVr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_3.getMessage());
}

if(componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_3;
	compDriverInitialization_tDBOutput_3.runAtDriver(container_tDBOutput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_3 = null;
if(componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_3;
	if (doesNodeBelongToRequest_tDBOutput_3) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_3 = sourceOrSink_tDBOutput_3.validate(container_tDBOutput_3);
        if (vr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_3.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_3 = null;
    if (sourceOrSink_tDBOutput_3 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_3 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_3;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_3 = sink_tDBOutput_3.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_3) {
            writeOperation_tDBOutput_3.initialize(container_tDBOutput_3);
        }
        writer_tDBOutput_3 = writeOperation_tDBOutput_3.createWriter(container_tDBOutput_3);
        if (doesNodeBelongToRequest_tDBOutput_3) {
            writer_tDBOutput_3.open("tDBOutput_3");
        }

        resourceMap.put("writer_tDBOutput_3", writer_tDBOutput_3);
    } // end of "sourceOrSink_tDBOutput_3 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_3 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_3.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_3 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_3 = props_tDBOutput_3.getSchema(c_tDBOutput_3, false);
    incomingEnforcer_tDBOutput_3 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_3);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_3 = null;


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row13");
			
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_3", "tMap_3", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row13_tMap_3 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	java.util.Date var1;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_INVUPC_tMap_3 = 0;
				
INVUPCStruct INVUPC_tmp = new INVUPCStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";
	
	
		int tos_count_tFileInputDelimited_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_4 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_4.append("Parameters:");
                            log4jParamters_tFileInputDelimited_4.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVUPC.zip\"");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("DIE_ON_ERROR" + " = " + "true");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("IUPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPCCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("INUMBR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUSTYL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUASN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRTN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUVND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPALT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPC25")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPC40")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPPRM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPUMR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPPOS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRCC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRCZ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IUPRCS")+"}]");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                            log4jParamters_tFileInputDelimited_4.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_4 - "  + (log4jParamters_tFileInputDelimited_4) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_4().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_4", "tFileInputDelimited_4", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = "/data/talend/data_repository/INVUPC.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_4 = null;
						try {
							if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
								zis_tFileInputDelimited_4 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_4));
							}else{
								zis_tFileInputDelimited_4 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_4))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
							
								throw e;
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_4 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_4 = zis_tFileInputDelimited_4.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
								
									throw e;
								
							}
							if(entry_tFileInputDelimited_4 == null) {
								break;
							}
							if(entry_tFileInputDelimited_4.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_4, "ISO-8859-15","|","\n",false,1,0,
								
									limit_tFileInputDelimited_4
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
								
									throw e;
								
							}
					
				    
				    	log.info("tFileInputDelimited_4 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row13 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row13 = new row13Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.IUPC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IUPC", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.IUPC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
							row13.IUPCCD = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.INUMBR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"INUMBR", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.INUMBR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
							row13.IUSTYL = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.IUASN = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IUASN", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.IUASN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
							row13.IUPRTN = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 6;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.IUVND = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IUVND", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.IUVND = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 7;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.IUPALT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IUPALT", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.IUPALT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 8;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.IUPC25 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IUPC25", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.IUPC25 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 9;
					
							row13.IUPC40 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 10;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.IUPPRM = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IUPPRM", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.IUPPRM = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 11;
					
							row13.IUPUMR = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 12;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row13.IUPPOS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IUPPOS", "row13", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row13.IUPPOS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 13;
					
							row13.IUPRCC = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 14;
					
							row13.IUPRCZ = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 15;
					
							row13.IUPRCS = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			            					throw(e);
			            				
			    					}
								
			log.debug("tFileInputDelimited_4 - Retrieving the record " + fid_tFileInputDelimited_4.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";
	
	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";
	
	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row13","tFileInputDelimited_4","tFileInputDelimited_4","tFileInputDelimited","tMap_3","tMap_3","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row13 - " + (row13==null? "": row13.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var1 = TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")) ;// ###############################
        // ###############################
        // # Output tables

INVUPC = null;


// # Output table : 'INVUPC'
count_INVUPC_tMap_3++;

INVUPC_tmp.IUPC = row13.IUPC;
INVUPC_tmp.IUPCCD = row13.IUPCCD;
INVUPC_tmp.INUMBR = row13.INUMBR;
INVUPC_tmp.IUSTYL = row13.IUSTYL;
INVUPC_tmp.IUASN = row13.IUASN;
INVUPC_tmp.IUPRTN = row13.IUPRTN;
INVUPC_tmp.IUVND = row13.IUVND;
INVUPC_tmp.IUPALT = row13.IUPALT;
INVUPC_tmp.IUPC25 = row13.IUPC25;
INVUPC_tmp.IUPC40 = row13.IUPC40;
INVUPC_tmp.IUPPRM = row13.IUPPRM;
INVUPC_tmp.IUPUMR = row13.IUPUMR;
INVUPC_tmp.IUPPOS = row13.IUPPOS;
INVUPC_tmp.IUPRCC = row13.IUPRCC;
INVUPC_tmp.IUPRCZ = row13.IUPRCZ;
INVUPC_tmp.IUPRCS = row13.IUPRCS;
INVUPC_tmp.LOAD_DATE = Var.var1 ;
INVUPC = INVUPC_tmp;
log.debug("tMap_3 - Outputting the record " + count_INVUPC_tMap_3 + " of the output table 'INVUPC'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "INVUPC"
if(INVUPC != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"INVUPC","tMap_3","tMap_3","tMap","tDBOutput_3","tDBOutput_3","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("INVUPC - " + (INVUPC==null? "": INVUPC.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_3 != null) {
            incomingEnforcer_tDBOutput_3.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPC") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPC", INVUPC.IUPC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPCCD") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPCCD", INVUPC.IUPCCD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("INUMBR") != null){
                    incomingEnforcer_tDBOutput_3.put("INUMBR", INVUPC.INUMBR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUSTYL") != null){
                    incomingEnforcer_tDBOutput_3.put("IUSTYL", INVUPC.IUSTYL);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUASN") != null){
                    incomingEnforcer_tDBOutput_3.put("IUASN", INVUPC.IUASN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPRTN") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPRTN", INVUPC.IUPRTN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUVND") != null){
                    incomingEnforcer_tDBOutput_3.put("IUVND", INVUPC.IUVND);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPALT") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPALT", INVUPC.IUPALT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPC25") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPC25", INVUPC.IUPC25);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPC40") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPC40", INVUPC.IUPC40);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPPRM") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPPRM", INVUPC.IUPPRM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPUMR") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPUMR", INVUPC.IUPUMR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPPOS") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPPOS", INVUPC.IUPPOS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPRCC") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPRCC", INVUPC.IUPRCC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPRCZ") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPRCZ", INVUPC.IUPRCZ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("IUPRCS") != null){
                    incomingEnforcer_tDBOutput_3.put("IUPRCS", INVUPC.IUPRCS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_3 != null && incomingEnforcer_tDBOutput_3.getRuntimeSchema().getField("LOAD_DATE") != null){
                    incomingEnforcer_tDBOutput_3.put("LOAD_DATE", INVUPC.LOAD_DATE);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_3 = null;
        if (incomingEnforcer_tDBOutput_3 != null) {
            data_tDBOutput_3 = incomingEnforcer_tDBOutput_3.getCurrentRecord();
        }
        
        if (writer_tDBOutput_3 != null && data_tDBOutput_3 != null) {
        	writer_tDBOutput_3.write(data_tDBOutput_3);
        }
        
        nb_line_tDBOutput_3++;

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	


 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	


 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "INVUPC"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";
	
	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";
	
	


				
            }
            nb_line_tFileInputDelimited_4+=fid_tFileInputDelimited_4.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/INVUPC.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_4!=null){
            		fid_tFileInputDelimited_4.close();
            	}
            }
            if(fid_tFileInputDelimited_4!=null){
            	globalMap.put("tFileInputDelimited_4_NB_LINE", nb_line_tFileInputDelimited_4);
            }
					
						log.info("tFileInputDelimited_4- Retrieved records count: "+ nb_line_tFileInputDelimited_4 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_4 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'INVUPC': " + count_INVUPC_tMap_3 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row13",2,0,
			 			"tFileInputDelimited_4","tFileInputDelimited_4","tFileInputDelimited","tMap_3","tMap_3","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_3", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_3 = null;
    if (writer_tDBOutput_3 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_3 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_3.close();
        resultMap_tDBOutput_3 = writer_tDBOutput_3.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_3), container_tDBOutput_3);
    }
if(resultMap_tDBOutput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_3 : resultMap_tDBOutput_3.entrySet()) {
		switch(entry_tDBOutput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "ERROR_MESSAGE", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_LINE", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_SUCCESS", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_REJECT", entry_tDBOutput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_3 = new StringBuilder();
            for (int i_tDBOutput_3 = 0; i_tDBOutput_3 < entry_tDBOutput_3.getKey().length(); i_tDBOutput_3++) {
                char ch_tDBOutput_3 = entry_tDBOutput_3.getKey().charAt(i_tDBOutput_3);
                if(Character.isUpperCase(ch_tDBOutput_3) && i_tDBOutput_3> 0) {
                	studio_key_tDBOutput_3.append('_');
                }
                studio_key_tDBOutput_3.append(ch_tDBOutput_3);
            }
			container_tDBOutput_3.setComponentData("tDBOutput_3", studio_key_tDBOutput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_3.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"INVUPC",2,0,
			 			"tMap_3","tMap_3","tMap","tDBOutput_3","tDBOutput_3","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFileDelete_4Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";
	
	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_3")==null){
    if(resourceMap.get("writer_tDBOutput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_3")).close();
		} catch (java.io.IOException e_tDBOutput_3) {
			String errorMessage_tDBOutput_3 = "failed to release the resource in tDBOutput_3 :" + e_tDBOutput_3.getMessage();
			System.err.println(errorMessage_tDBOutput_3);
		}
	}
}
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_4", false);
		start_Hash.put("tFileDelete_4", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_4";
	
	
		int tos_count_tFileDelete_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_4 = new StringBuilder();
                    log4jParamters_tFileDelete_4.append("Parameters:");
                            log4jParamters_tFileDelete_4.append("PATH" + " = " + "\"/data/talend/data_repository/INVUPC.zip\"");
                        log4jParamters_tFileDelete_4.append(" | ");
                            log4jParamters_tFileDelete_4.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_4.append(" | ");
                            log4jParamters_tFileDelete_4.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_4 - "  + (log4jParamters_tFileDelete_4) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_4().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_4", "tFileDelete_4", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_4 begin ] stop
 */
	
	/**
	 * [tFileDelete_4 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 

				final StringBuffer log4jSb_tFileDelete_4 = new StringBuffer();
			
class DeleteFoldertFileDelete_4{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_4=new java.io.File("/data/talend/data_repository/INVUPC.zip");
	if(path_tFileDelete_4.exists()){
		if(path_tFileDelete_4.isFile()){
	    	if(path_tFileDelete_4.delete()){
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_4 - File : "+ path_tFileDelete_4.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_4.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_4.isDirectory()){ 
	    	DeleteFoldertFileDelete_4 dftFileDelete_4 = new DeleteFoldertFileDelete_4();
	    	if(dftFileDelete_4.delete(path_tFileDelete_4)){
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_4 - Directory : "+ path_tFileDelete_4.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_4.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_4_DELETE_PATH","/data/talend/data_repository/INVUPC.zip");
 


	tos_count_tFileDelete_4++;

/**
 * [tFileDelete_4 main ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 



/**
 * [tFileDelete_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 



/**
 * [tFileDelete_4 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_4 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_4 - "  + ("Done.") );

ok_Hash.put("tFileDelete_4", true);
end_Hash.put("tFileDelete_4", System.currentTimeMillis());




/**
 * [tFileDelete_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_4 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";
	
	

 



/**
 * [tFileDelete_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";
	
	
		int tos_count_tDBRow_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_2", "tDBRow_2", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_2 = (String)(restRequest_tDBRow_2 != null ? restRequest_tDBRow_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_2 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_2 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_2 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_2 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_2.createRuntimeProperties();
 		                    props_tDBRow_2.setValue("query",
 		                    "DELETE from DEPARTMENT_DESCRIPTIONS_INVDPT\nWHERE LOAD_DATE = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_2.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_2.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_2.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_2_1_fisrt sst_tDBRow_2_1_fisrt = new SchemaSettingTool_tDBRow_2_1_fisrt();
 		                    
 		                    props_tDBRow_2.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_2_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_2_2_fisrt sst_tDBRow_2_2_fisrt = new SchemaSettingTool_tDBRow_2_2_fisrt();
 		                    
 		                    props_tDBRow_2.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_2.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_2.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_2.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_2.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_2.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_2.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_2.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_2.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_2.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_2.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_2.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_2.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_2_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_2_3_fisrt sst_tDBRow_2_3_fisrt = new SchemaSettingTool_tDBRow_2_3_fisrt();
 		                    
 		                    props_tDBRow_2.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_2.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_2);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_2.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_2);
        }
    }
globalMap.put("tDBRow_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_2_MAPPINGS_URL", mappings_url_tDBRow_2);

org.talend.components.api.container.RuntimeContainer container_tDBRow_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_2 = null;
topology_tDBRow_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_2 = def_tDBRow_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_2, topology_tDBRow_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_2 = def_tDBRow_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_2 = componentRuntime_tDBRow_2.initialize(container_tDBRow_2, props_tDBRow_2);

if (initVr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_2.getMessage());
}

if(componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_2;
	compDriverInitialization_tDBRow_2.runAtDriver(container_tDBRow_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_2 = null;
if(componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_2;
	if (doesNodeBelongToRequest_tDBRow_2) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_2 = sourceOrSink_tDBRow_2.validate(container_tDBRow_2);
        if (vr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_2.getMessage());
        }
	}
}

 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	


 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	


 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	


 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	
// end of generic


resourceMap.put("finish_tDBRow_2", Boolean.TRUE);

 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());




/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_2")==null){
}
 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public float IDEPT;

				public float getIDEPT () {
					return this.IDEPT;
				}

				public Boolean IDEPTIsNullable(){
				    return false;
				}
				public Boolean IDEPTIsKey(){
				    return false;
				}
				public Integer IDEPTLength(){
				    return 3;
				}
				public Integer IDEPTPrecision(){
				    return 0;
				}
				public String IDEPTDefault(){
				
					return "";
				
				}
				public String IDEPTComment(){
				
				    return "";
				
				}
				public String IDEPTPattern(){
				
					return "";
				
				}
				public String IDEPTOriginalDbColumnName(){
				
					return "IDEPT";
				
				}

				
			    public float ISDEPT;

				public float getISDEPT () {
					return this.ISDEPT;
				}

				public Boolean ISDEPTIsNullable(){
				    return false;
				}
				public Boolean ISDEPTIsKey(){
				    return false;
				}
				public Integer ISDEPTLength(){
				    return 3;
				}
				public Integer ISDEPTPrecision(){
				    return 0;
				}
				public String ISDEPTDefault(){
				
					return "";
				
				}
				public String ISDEPTComment(){
				
				    return "";
				
				}
				public String ISDEPTPattern(){
				
					return "";
				
				}
				public String ISDEPTOriginalDbColumnName(){
				
					return "ISDEPT";
				
				}

				
			    public float ICLAS;

				public float getICLAS () {
					return this.ICLAS;
				}

				public Boolean ICLASIsNullable(){
				    return false;
				}
				public Boolean ICLASIsKey(){
				    return false;
				}
				public Integer ICLASLength(){
				    return 3;
				}
				public Integer ICLASPrecision(){
				    return 0;
				}
				public String ICLASDefault(){
				
					return "";
				
				}
				public String ICLASComment(){
				
				    return "";
				
				}
				public String ICLASPattern(){
				
					return "";
				
				}
				public String ICLASOriginalDbColumnName(){
				
					return "ICLAS";
				
				}

				
			    public float ISCLAS;

				public float getISCLAS () {
					return this.ISCLAS;
				}

				public Boolean ISCLASIsNullable(){
				    return false;
				}
				public Boolean ISCLASIsKey(){
				    return false;
				}
				public Integer ISCLASLength(){
				    return 3;
				}
				public Integer ISCLASPrecision(){
				    return 0;
				}
				public String ISCLASDefault(){
				
					return "";
				
				}
				public String ISCLASComment(){
				
				    return "";
				
				}
				public String ISCLASPattern(){
				
					return "";
				
				}
				public String ISCLASOriginalDbColumnName(){
				
					return "ISCLAS";
				
				}

				
			    public String DPTNAM;

				public String getDPTNAM () {
					return this.DPTNAM;
				}

				public Boolean DPTNAMIsNullable(){
				    return false;
				}
				public Boolean DPTNAMIsKey(){
				    return false;
				}
				public Integer DPTNAMLength(){
				    return 25;
				}
				public Integer DPTNAMPrecision(){
				    return 0;
				}
				public String DPTNAMDefault(){
				
					return null;
				
				}
				public String DPTNAMComment(){
				
				    return "";
				
				}
				public String DPTNAMPattern(){
				
					return "";
				
				}
				public String DPTNAMOriginalDbColumnName(){
				
					return "DPTNAM";
				
				}

				
			    public String DPTSHT;

				public String getDPTSHT () {
					return this.DPTSHT;
				}

				public Boolean DPTSHTIsNullable(){
				    return false;
				}
				public Boolean DPTSHTIsKey(){
				    return false;
				}
				public Integer DPTSHTLength(){
				    return 8;
				}
				public Integer DPTSHTPrecision(){
				    return 0;
				}
				public String DPTSHTDefault(){
				
					return null;
				
				}
				public String DPTSHTComment(){
				
				    return "";
				
				}
				public String DPTSHTPattern(){
				
					return "";
				
				}
				public String DPTSHTOriginalDbColumnName(){
				
					return "DPTSHT";
				
				}

				
			    public float IDPLAN;

				public float getIDPLAN () {
					return this.IDPLAN;
				}

				public Boolean IDPLANIsNullable(){
				    return false;
				}
				public Boolean IDPLANIsKey(){
				    return false;
				}
				public Integer IDPLANLength(){
				    return 5;
				}
				public Integer IDPLANPrecision(){
				    return 0;
				}
				public String IDPLANDefault(){
				
					return "";
				
				}
				public String IDPLANComment(){
				
				    return "";
				
				}
				public String IDPLANPattern(){
				
					return "";
				
				}
				public String IDPLANOriginalDbColumnName(){
				
					return "IDPLAN";
				
				}

				
			    public String IDBUYR;

				public String getIDBUYR () {
					return this.IDBUYR;
				}

				public Boolean IDBUYRIsNullable(){
				    return false;
				}
				public Boolean IDBUYRIsKey(){
				    return false;
				}
				public Integer IDBUYRLength(){
				    return 3;
				}
				public Integer IDBUYRPrecision(){
				    return 0;
				}
				public String IDBUYRDefault(){
				
					return null;
				
				}
				public String IDBUYRComment(){
				
				    return "";
				
				}
				public String IDBUYRPattern(){
				
					return "";
				
				}
				public String IDBUYROriginalDbColumnName(){
				
					return "IDBUYR";
				
				}

				
			    public String IDRESP;

				public String getIDRESP () {
					return this.IDRESP;
				}

				public Boolean IDRESPIsNullable(){
				    return false;
				}
				public Boolean IDRESPIsKey(){
				    return false;
				}
				public Integer IDRESPLength(){
				    return 3;
				}
				public Integer IDRESPPrecision(){
				    return 0;
				}
				public String IDRESPDefault(){
				
					return null;
				
				}
				public String IDRESPComment(){
				
				    return "";
				
				}
				public String IDRESPPattern(){
				
					return "";
				
				}
				public String IDRESPOriginalDbColumnName(){
				
					return "IDRESP";
				
				}

				
			    public String IDSLVL;

				public String getIDSLVL () {
					return this.IDSLVL;
				}

				public Boolean IDSLVLIsNullable(){
				    return false;
				}
				public Boolean IDSLVLIsKey(){
				    return false;
				}
				public Integer IDSLVLLength(){
				    return 1;
				}
				public Integer IDSLVLPrecision(){
				    return 0;
				}
				public String IDSLVLDefault(){
				
					return null;
				
				}
				public String IDSLVLComment(){
				
				    return "";
				
				}
				public String IDSLVLPattern(){
				
					return "";
				
				}
				public String IDSLVLOriginalDbColumnName(){
				
					return "IDSLVL";
				
				}

				
			    public String IDSFRQ;

				public String getIDSFRQ () {
					return this.IDSFRQ;
				}

				public Boolean IDSFRQIsNullable(){
				    return false;
				}
				public Boolean IDSFRQIsKey(){
				    return false;
				}
				public Integer IDSFRQLength(){
				    return 1;
				}
				public Integer IDSFRQPrecision(){
				    return 0;
				}
				public String IDSFRQDefault(){
				
					return null;
				
				}
				public String IDSFRQComment(){
				
				    return "";
				
				}
				public String IDSFRQPattern(){
				
					return "";
				
				}
				public String IDSFRQOriginalDbColumnName(){
				
					return "IDSFRQ";
				
				}

				
			    public BigDecimal IDSRTD;

				public BigDecimal getIDSRTD () {
					return this.IDSRTD;
				}

				public Boolean IDSRTDIsNullable(){
				    return false;
				}
				public Boolean IDSRTDIsKey(){
				    return false;
				}
				public Integer IDSRTDLength(){
				    return 3;
				}
				public Integer IDSRTDPrecision(){
				    return 0;
				}
				public String IDSRTDDefault(){
				
					return "";
				
				}
				public String IDSRTDComment(){
				
				    return "";
				
				}
				public String IDSRTDPattern(){
				
					return "";
				
				}
				public String IDSRTDOriginalDbColumnName(){
				
					return "IDSRTD";
				
				}

				
			    public BigDecimal IDSRTW;

				public BigDecimal getIDSRTW () {
					return this.IDSRTW;
				}

				public Boolean IDSRTWIsNullable(){
				    return false;
				}
				public Boolean IDSRTWIsKey(){
				    return false;
				}
				public Integer IDSRTWLength(){
				    return 3;
				}
				public Integer IDSRTWPrecision(){
				    return 0;
				}
				public String IDSRTWDefault(){
				
					return "";
				
				}
				public String IDSRTWComment(){
				
				    return "";
				
				}
				public String IDSRTWPattern(){
				
					return "";
				
				}
				public String IDSRTWOriginalDbColumnName(){
				
					return "IDSRTW";
				
				}

				
			    public BigDecimal IDSRTP;

				public BigDecimal getIDSRTP () {
					return this.IDSRTP;
				}

				public Boolean IDSRTPIsNullable(){
				    return false;
				}
				public Boolean IDSRTPIsKey(){
				    return false;
				}
				public Integer IDSRTPLength(){
				    return 3;
				}
				public Integer IDSRTPPrecision(){
				    return 0;
				}
				public String IDSRTPDefault(){
				
					return "";
				
				}
				public String IDSRTPComment(){
				
				    return "";
				
				}
				public String IDSRTPPattern(){
				
					return "";
				
				}
				public String IDSRTPOriginalDbColumnName(){
				
					return "IDSRTP";
				
				}

				
			    public BigDecimal IDSRTY;

				public BigDecimal getIDSRTY () {
					return this.IDSRTY;
				}

				public Boolean IDSRTYIsNullable(){
				    return false;
				}
				public Boolean IDSRTYIsKey(){
				    return false;
				}
				public Integer IDSRTYLength(){
				    return 1;
				}
				public Integer IDSRTYPrecision(){
				    return 0;
				}
				public String IDSRTYDefault(){
				
					return "";
				
				}
				public String IDSRTYComment(){
				
				    return "";
				
				}
				public String IDSRTYPattern(){
				
					return "";
				
				}
				public String IDSRTYOriginalDbColumnName(){
				
					return "IDSRTY";
				
				}

				
			    public BigDecimal ARTSCL;

				public BigDecimal getARTSCL () {
					return this.ARTSCL;
				}

				public Boolean ARTSCLIsNullable(){
				    return false;
				}
				public Boolean ARTSCLIsKey(){
				    return false;
				}
				public Integer ARTSCLLength(){
				    return 9;
				}
				public Integer ARTSCLPrecision(){
				    return 0;
				}
				public String ARTSCLDefault(){
				
					return "";
				
				}
				public String ARTSCLComment(){
				
				    return "";
				
				}
				public String ARTSCLPattern(){
				
					return "";
				
				}
				public String ARTSCLOriginalDbColumnName(){
				
					return "ARTSCL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			        this.IDEPT = dis.readFloat();
					
			        this.ISDEPT = dis.readFloat();
					
			        this.ICLAS = dis.readFloat();
					
			        this.ISCLAS = dis.readFloat();
					
					this.DPTNAM = readString(dis);
					
					this.DPTSHT = readString(dis);
					
			        this.IDPLAN = dis.readFloat();
					
					this.IDBUYR = readString(dis);
					
					this.IDRESP = readString(dis);
					
					this.IDSLVL = readString(dis);
					
					this.IDSFRQ = readString(dis);
					
						this.IDSRTD = (BigDecimal) dis.readObject();
					
						this.IDSRTW = (BigDecimal) dis.readObject();
					
						this.IDSRTP = (BigDecimal) dis.readObject();
					
						this.IDSRTY = (BigDecimal) dis.readObject();
					
						this.ARTSCL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			        this.IDEPT = dis.readFloat();
					
			        this.ISDEPT = dis.readFloat();
					
			        this.ICLAS = dis.readFloat();
					
			        this.ISCLAS = dis.readFloat();
					
					this.DPTNAM = readString(dis);
					
					this.DPTSHT = readString(dis);
					
			        this.IDPLAN = dis.readFloat();
					
					this.IDBUYR = readString(dis);
					
					this.IDRESP = readString(dis);
					
					this.IDSLVL = readString(dis);
					
					this.IDSFRQ = readString(dis);
					
						this.IDSRTD = (BigDecimal) dis.readObject();
					
						this.IDSRTW = (BigDecimal) dis.readObject();
					
						this.IDSRTP = (BigDecimal) dis.readObject();
					
						this.IDSRTY = (BigDecimal) dis.readObject();
					
						this.ARTSCL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.IDEPT);
					
					// float
				
		            	dos.writeFloat(this.ISDEPT);
					
					// float
				
		            	dos.writeFloat(this.ICLAS);
					
					// float
				
		            	dos.writeFloat(this.ISCLAS);
					
					// String
				
						writeString(this.DPTNAM,dos);
					
					// String
				
						writeString(this.DPTSHT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDPLAN);
					
					// String
				
						writeString(this.IDBUYR,dos);
					
					// String
				
						writeString(this.IDRESP,dos);
					
					// String
				
						writeString(this.IDSLVL,dos);
					
					// String
				
						writeString(this.IDSFRQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARTSCL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.IDEPT);
					
					// float
				
		            	dos.writeFloat(this.ISDEPT);
					
					// float
				
		            	dos.writeFloat(this.ICLAS);
					
					// float
				
		            	dos.writeFloat(this.ISCLAS);
					
					// String
				
						writeString(this.DPTNAM,dos);
					
					// String
				
						writeString(this.DPTSHT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDPLAN);
					
					// String
				
						writeString(this.IDBUYR,dos);
					
					// String
				
						writeString(this.IDRESP,dos);
					
					// String
				
						writeString(this.IDSLVL,dos);
					
					// String
				
						writeString(this.IDSFRQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARTSCL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDEPT="+String.valueOf(IDEPT));
		sb.append(",ISDEPT="+String.valueOf(ISDEPT));
		sb.append(",ICLAS="+String.valueOf(ICLAS));
		sb.append(",ISCLAS="+String.valueOf(ISCLAS));
		sb.append(",DPTNAM="+DPTNAM);
		sb.append(",DPTSHT="+DPTSHT);
		sb.append(",IDPLAN="+String.valueOf(IDPLAN));
		sb.append(",IDBUYR="+IDBUYR);
		sb.append(",IDRESP="+IDRESP);
		sb.append(",IDSLVL="+IDSLVL);
		sb.append(",IDSFRQ="+IDSFRQ);
		sb.append(",IDSRTD="+String.valueOf(IDSRTD));
		sb.append(",IDSRTW="+String.valueOf(IDSRTW));
		sb.append(",IDSRTP="+String.valueOf(IDSRTP));
		sb.append(",IDSRTY="+String.valueOf(IDSRTY));
		sb.append(",ARTSCL="+String.valueOf(ARTSCL));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(IDEPT);
        			
        			sb.append("|");
        		
        				sb.append(ISDEPT);
        			
        			sb.append("|");
        		
        				sb.append(ICLAS);
        			
        			sb.append("|");
        		
        				sb.append(ISCLAS);
        			
        			sb.append("|");
        		
        				if(DPTNAM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DPTNAM);
            			}
            		
        			sb.append("|");
        		
        				if(DPTSHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DPTSHT);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IDPLAN);
        			
        			sb.append("|");
        		
        				if(IDBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(IDRESP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDRESP);
            			}
            		
        			sb.append("|");
        		
        				if(IDSLVL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSLVL);
            			}
            		
        			sb.append("|");
        		
        				if(IDSFRQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSFRQ);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTD);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTW);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTP);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTY);
            			}
            		
        			sb.append("|");
        		
        				if(ARTSCL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ARTSCL);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row17");
			
		int tos_count_tFileOutputDelimited_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_2 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_2.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_2.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVDPT.csv\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                            log4jParamters_tFileOutputDelimited_2.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_2 - "  + (log4jParamters_tFileOutputDelimited_2) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_2", "tFileOutputDelimited_2", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("/data/talend/data_repository/INVDPT.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                                log.info("tFileOutputDelimited_2 - Creating directory '" + dir_tFileOutputDelimited_2.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_2.mkdirs();
                                log.info("tFileOutputDelimited_2 - The directory '"+ dir_tFileOutputDelimited_2.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        String zipName_tFileOutputDelimited_2 = fullName_tFileOutputDelimited_2 + ".zip";
                        java.io.File file_tFileOutputDelimited_2 = new java.io.File(zipName_tFileOutputDelimited_2);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_2= null;
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        if(file_tFileOutputDelimited_2.exists()) {
                            file_tFileOutputDelimited_2.delete();
                        }
                        zipOut_tFileOutputDelimited_2= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_2)));
                        zipOut_tFileOutputDelimited_2.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_2.getName()));
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_2,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("IDEPT");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ISDEPT");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ICLAS");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ISCLAS");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DPTNAM");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DPTSHT");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDPLAN");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDBUYR");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDRESP");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDSLVL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDSFRQ");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDSRTD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDSRTW");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDSRTP");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IDSRTY");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ARTSCL");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_2 = new StringBuilder();
                    log4jParamters_tDBInput_2.append("Parameters:");
                            log4jParamters_tDBInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERY" + " = " + "\"select * from MM4R5LIB.INVDPT\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("IDEPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISDEPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ICLAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISCLAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DPTNAM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DPTSHT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDPLAN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDBUYR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDRESP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSLVL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSFRQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTW")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ARTSCL")+"}]");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + (log4jParamters_tDBInput_2) );
                    } 
                } 
            new BytesLimit65535_tDBInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_2", "tDBInput_2", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_2 = context.jda_password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				  
				String url_tDBInput_2 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_2 - Driver ClassName: "+driverClass_tDBInput_2+".");
			
	    		log.debug("tDBInput_2 - Connection attempt to '" + url_tDBInput_2 + "' with the username '" + dbUser_tDBInput_2 + "'.");
			
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
	    		log.debug("tDBInput_2 - Connection to '" + url_tDBInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select * from MM4R5LIB.INVDPT";
		    
	    		log.debug("tDBInput_2 - Executing the query: '" + dbquery_tDBInput_2 + "'.");
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    	log.debug("tDBInput_2 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row17.IDEPT = 0;
							} else {
		                          
            row17.IDEPT = rs_tDBInput_2.getFloat(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row17.ISDEPT = 0;
							} else {
		                          
            row17.ISDEPT = rs_tDBInput_2.getFloat(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row17.ICLAS = 0;
							} else {
		                          
            row17.ICLAS = rs_tDBInput_2.getFloat(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row17.ISCLAS = 0;
							} else {
		                          
            row17.ISCLAS = rs_tDBInput_2.getFloat(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row17.DPTNAM = null;
							} else {
	                         		
        	row17.DPTNAM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row17.DPTSHT = null;
							} else {
	                         		
        	row17.DPTSHT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row17.IDPLAN = 0;
							} else {
		                          
            row17.IDPLAN = rs_tDBInput_2.getFloat(7);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row17.IDBUYR = null;
							} else {
	                         		
        	row17.IDBUYR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row17.IDRESP = null;
							} else {
	                         		
        	row17.IDRESP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row17.IDSLVL = null;
							} else {
	                         		
        	row17.IDSLVL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row17.IDSFRQ = null;
							} else {
	                         		
        	row17.IDSFRQ = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row17.IDSRTD = null;
							} else {
		                          
            row17.IDSRTD = rs_tDBInput_2.getBigDecimal(12);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row17.IDSRTW = null;
							} else {
		                          
            row17.IDSRTW = rs_tDBInput_2.getBigDecimal(13);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row17.IDSRTP = null;
							} else {
		                          
            row17.IDSRTP = rs_tDBInput_2.getBigDecimal(14);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row17.IDSRTY = null;
							} else {
		                          
            row17.IDSRTY = rs_tDBInput_2.getBigDecimal(15);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row17.ARTSCL = null;
							} else {
		                          
            row17.ARTSCL = rs_tDBInput_2.getBigDecimal(16);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					
						log.debug("tDBInput_2 - Retrieving the record " + nb_line_tDBInput_2 + ".");
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row17","tDBInput_2","tDBInput_2","tAS400Input","tFileOutputDelimited_2","tFileOutputDelimited_2","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row17 - " + (row17==null? "": row17.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                        sb_tFileOutputDelimited_2.append(
                            row17.IDEPT
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.ISDEPT
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.ICLAS
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.ISCLAS
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.DPTNAM != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.DPTNAM
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.DPTSHT != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.DPTSHT
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.IDPLAN
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDBUYR != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDBUYR
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDRESP != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDRESP
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDSLVL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDSLVL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDSFRQ != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDSFRQ
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDSRTD != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDSRTD.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDSRTW != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDSRTW.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDSRTP != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDSRTP.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.IDSRTY != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.IDSRTY.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ARTSCL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.ARTSCL.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());
                        log.debug("tFileOutputDelimited_2 - Writing the record " + nb_line_tFileOutputDelimited_2 + ".");

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
	    		log.debug("tDBInput_2 - Closing the connection to the database.");
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
	    		log.debug("tDBInput_2 - Retrieved records count: "+nb_line_tDBInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Done.") );

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	
				log.debug("tFileOutputDelimited_2 - Written records count: " + nb_line_tFileOutputDelimited_2 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row17",2,0,
			 			"tDBInput_2","tDBInput_2","tAS400Input","tFileOutputDelimited_2","tFileOutputDelimited_2","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_2 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileInputDelimited_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class tmap_INVDPTStruct implements routines.system.IPersistableRow<tmap_INVDPTStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Double IDEPT;

				public Double getIDEPT () {
					return this.IDEPT;
				}

				public Boolean IDEPTIsNullable(){
				    return true;
				}
				public Boolean IDEPTIsKey(){
				    return false;
				}
				public Integer IDEPTLength(){
				    return null;
				}
				public Integer IDEPTPrecision(){
				    return null;
				}
				public String IDEPTDefault(){
				
					return "";
				
				}
				public String IDEPTComment(){
				
				    return "";
				
				}
				public String IDEPTPattern(){
				
					return "";
				
				}
				public String IDEPTOriginalDbColumnName(){
				
					return "IDEPT";
				
				}

				
			    public Double ISDEPT;

				public Double getISDEPT () {
					return this.ISDEPT;
				}

				public Boolean ISDEPTIsNullable(){
				    return true;
				}
				public Boolean ISDEPTIsKey(){
				    return false;
				}
				public Integer ISDEPTLength(){
				    return null;
				}
				public Integer ISDEPTPrecision(){
				    return null;
				}
				public String ISDEPTDefault(){
				
					return "";
				
				}
				public String ISDEPTComment(){
				
				    return "";
				
				}
				public String ISDEPTPattern(){
				
					return "";
				
				}
				public String ISDEPTOriginalDbColumnName(){
				
					return "ISDEPT";
				
				}

				
			    public Double ICLAS;

				public Double getICLAS () {
					return this.ICLAS;
				}

				public Boolean ICLASIsNullable(){
				    return true;
				}
				public Boolean ICLASIsKey(){
				    return false;
				}
				public Integer ICLASLength(){
				    return null;
				}
				public Integer ICLASPrecision(){
				    return null;
				}
				public String ICLASDefault(){
				
					return "";
				
				}
				public String ICLASComment(){
				
				    return "";
				
				}
				public String ICLASPattern(){
				
					return "";
				
				}
				public String ICLASOriginalDbColumnName(){
				
					return "ICLAS";
				
				}

				
			    public Double ISCLAS;

				public Double getISCLAS () {
					return this.ISCLAS;
				}

				public Boolean ISCLASIsNullable(){
				    return true;
				}
				public Boolean ISCLASIsKey(){
				    return false;
				}
				public Integer ISCLASLength(){
				    return null;
				}
				public Integer ISCLASPrecision(){
				    return null;
				}
				public String ISCLASDefault(){
				
					return "";
				
				}
				public String ISCLASComment(){
				
				    return "";
				
				}
				public String ISCLASPattern(){
				
					return "";
				
				}
				public String ISCLASOriginalDbColumnName(){
				
					return "ISCLAS";
				
				}

				
			    public String DPTNAM;

				public String getDPTNAM () {
					return this.DPTNAM;
				}

				public Boolean DPTNAMIsNullable(){
				    return true;
				}
				public Boolean DPTNAMIsKey(){
				    return false;
				}
				public Integer DPTNAMLength(){
				    return null;
				}
				public Integer DPTNAMPrecision(){
				    return null;
				}
				public String DPTNAMDefault(){
				
					return null;
				
				}
				public String DPTNAMComment(){
				
				    return "";
				
				}
				public String DPTNAMPattern(){
				
					return "";
				
				}
				public String DPTNAMOriginalDbColumnName(){
				
					return "DPTNAM";
				
				}

				
			    public String DPTSHT;

				public String getDPTSHT () {
					return this.DPTSHT;
				}

				public Boolean DPTSHTIsNullable(){
				    return true;
				}
				public Boolean DPTSHTIsKey(){
				    return false;
				}
				public Integer DPTSHTLength(){
				    return null;
				}
				public Integer DPTSHTPrecision(){
				    return null;
				}
				public String DPTSHTDefault(){
				
					return null;
				
				}
				public String DPTSHTComment(){
				
				    return "";
				
				}
				public String DPTSHTPattern(){
				
					return "";
				
				}
				public String DPTSHTOriginalDbColumnName(){
				
					return "DPTSHT";
				
				}

				
			    public Double IDPLAN;

				public Double getIDPLAN () {
					return this.IDPLAN;
				}

				public Boolean IDPLANIsNullable(){
				    return true;
				}
				public Boolean IDPLANIsKey(){
				    return false;
				}
				public Integer IDPLANLength(){
				    return null;
				}
				public Integer IDPLANPrecision(){
				    return null;
				}
				public String IDPLANDefault(){
				
					return "";
				
				}
				public String IDPLANComment(){
				
				    return "";
				
				}
				public String IDPLANPattern(){
				
					return "";
				
				}
				public String IDPLANOriginalDbColumnName(){
				
					return "IDPLAN";
				
				}

				
			    public String IDBUYR;

				public String getIDBUYR () {
					return this.IDBUYR;
				}

				public Boolean IDBUYRIsNullable(){
				    return true;
				}
				public Boolean IDBUYRIsKey(){
				    return false;
				}
				public Integer IDBUYRLength(){
				    return null;
				}
				public Integer IDBUYRPrecision(){
				    return null;
				}
				public String IDBUYRDefault(){
				
					return null;
				
				}
				public String IDBUYRComment(){
				
				    return "";
				
				}
				public String IDBUYRPattern(){
				
					return "";
				
				}
				public String IDBUYROriginalDbColumnName(){
				
					return "IDBUYR";
				
				}

				
			    public String IDRESP;

				public String getIDRESP () {
					return this.IDRESP;
				}

				public Boolean IDRESPIsNullable(){
				    return true;
				}
				public Boolean IDRESPIsKey(){
				    return false;
				}
				public Integer IDRESPLength(){
				    return null;
				}
				public Integer IDRESPPrecision(){
				    return null;
				}
				public String IDRESPDefault(){
				
					return null;
				
				}
				public String IDRESPComment(){
				
				    return "";
				
				}
				public String IDRESPPattern(){
				
					return "";
				
				}
				public String IDRESPOriginalDbColumnName(){
				
					return "IDRESP";
				
				}

				
			    public String IDSLVL;

				public String getIDSLVL () {
					return this.IDSLVL;
				}

				public Boolean IDSLVLIsNullable(){
				    return true;
				}
				public Boolean IDSLVLIsKey(){
				    return false;
				}
				public Integer IDSLVLLength(){
				    return null;
				}
				public Integer IDSLVLPrecision(){
				    return null;
				}
				public String IDSLVLDefault(){
				
					return null;
				
				}
				public String IDSLVLComment(){
				
				    return "";
				
				}
				public String IDSLVLPattern(){
				
					return "";
				
				}
				public String IDSLVLOriginalDbColumnName(){
				
					return "IDSLVL";
				
				}

				
			    public String IDSFRQ;

				public String getIDSFRQ () {
					return this.IDSFRQ;
				}

				public Boolean IDSFRQIsNullable(){
				    return true;
				}
				public Boolean IDSFRQIsKey(){
				    return false;
				}
				public Integer IDSFRQLength(){
				    return null;
				}
				public Integer IDSFRQPrecision(){
				    return null;
				}
				public String IDSFRQDefault(){
				
					return null;
				
				}
				public String IDSFRQComment(){
				
				    return "";
				
				}
				public String IDSFRQPattern(){
				
					return "";
				
				}
				public String IDSFRQOriginalDbColumnName(){
				
					return "IDSFRQ";
				
				}

				
			    public BigDecimal IDSRTD;

				public BigDecimal getIDSRTD () {
					return this.IDSRTD;
				}

				public Boolean IDSRTDIsNullable(){
				    return true;
				}
				public Boolean IDSRTDIsKey(){
				    return false;
				}
				public Integer IDSRTDLength(){
				    return null;
				}
				public Integer IDSRTDPrecision(){
				    return null;
				}
				public String IDSRTDDefault(){
				
					return "";
				
				}
				public String IDSRTDComment(){
				
				    return "";
				
				}
				public String IDSRTDPattern(){
				
					return "";
				
				}
				public String IDSRTDOriginalDbColumnName(){
				
					return "IDSRTD";
				
				}

				
			    public BigDecimal IDSRTW;

				public BigDecimal getIDSRTW () {
					return this.IDSRTW;
				}

				public Boolean IDSRTWIsNullable(){
				    return true;
				}
				public Boolean IDSRTWIsKey(){
				    return false;
				}
				public Integer IDSRTWLength(){
				    return null;
				}
				public Integer IDSRTWPrecision(){
				    return null;
				}
				public String IDSRTWDefault(){
				
					return "";
				
				}
				public String IDSRTWComment(){
				
				    return "";
				
				}
				public String IDSRTWPattern(){
				
					return "";
				
				}
				public String IDSRTWOriginalDbColumnName(){
				
					return "IDSRTW";
				
				}

				
			    public BigDecimal IDSRTP;

				public BigDecimal getIDSRTP () {
					return this.IDSRTP;
				}

				public Boolean IDSRTPIsNullable(){
				    return true;
				}
				public Boolean IDSRTPIsKey(){
				    return false;
				}
				public Integer IDSRTPLength(){
				    return null;
				}
				public Integer IDSRTPPrecision(){
				    return null;
				}
				public String IDSRTPDefault(){
				
					return "";
				
				}
				public String IDSRTPComment(){
				
				    return "";
				
				}
				public String IDSRTPPattern(){
				
					return "";
				
				}
				public String IDSRTPOriginalDbColumnName(){
				
					return "IDSRTP";
				
				}

				
			    public BigDecimal IDSRTY;

				public BigDecimal getIDSRTY () {
					return this.IDSRTY;
				}

				public Boolean IDSRTYIsNullable(){
				    return true;
				}
				public Boolean IDSRTYIsKey(){
				    return false;
				}
				public Integer IDSRTYLength(){
				    return null;
				}
				public Integer IDSRTYPrecision(){
				    return null;
				}
				public String IDSRTYDefault(){
				
					return "";
				
				}
				public String IDSRTYComment(){
				
				    return "";
				
				}
				public String IDSRTYPattern(){
				
					return "";
				
				}
				public String IDSRTYOriginalDbColumnName(){
				
					return "IDSRTY";
				
				}

				
			    public BigDecimal ARTSCL;

				public BigDecimal getARTSCL () {
					return this.ARTSCL;
				}

				public Boolean ARTSCLIsNullable(){
				    return true;
				}
				public Boolean ARTSCLIsKey(){
				    return false;
				}
				public Integer ARTSCLLength(){
				    return null;
				}
				public Integer ARTSCLPrecision(){
				    return null;
				}
				public String ARTSCLDefault(){
				
					return "";
				
				}
				public String ARTSCLComment(){
				
				    return "";
				
				}
				public String ARTSCLPattern(){
				
					return "";
				
				}
				public String ARTSCLOriginalDbColumnName(){
				
					return "ARTSCL";
				
				}

				
			    public java.util.Date LOAD_DATE;

				public java.util.Date getLOAD_DATE () {
					return this.LOAD_DATE;
				}

				public Boolean LOAD_DATEIsNullable(){
				    return true;
				}
				public Boolean LOAD_DATEIsKey(){
				    return false;
				}
				public Integer LOAD_DATELength(){
				    return null;
				}
				public Integer LOAD_DATEPrecision(){
				    return null;
				}
				public String LOAD_DATEDefault(){
				
					return null;
				
				}
				public String LOAD_DATEComment(){
				
				    return "";
				
				}
				public String LOAD_DATEPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String LOAD_DATEOriginalDbColumnName(){
				
					return "LOAD_DATE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDEPT = null;
           				} else {
           			    	this.IDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISDEPT = null;
           				} else {
           			    	this.ISDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ICLAS = null;
           				} else {
           			    	this.ICLAS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISCLAS = null;
           				} else {
           			    	this.ISCLAS = dis.readDouble();
           				}
					
					this.DPTNAM = readString(dis);
					
					this.DPTSHT = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDPLAN = null;
           				} else {
           			    	this.IDPLAN = dis.readDouble();
           				}
					
					this.IDBUYR = readString(dis);
					
					this.IDRESP = readString(dis);
					
					this.IDSLVL = readString(dis);
					
					this.IDSFRQ = readString(dis);
					
						this.IDSRTD = (BigDecimal) dis.readObject();
					
						this.IDSRTW = (BigDecimal) dis.readObject();
					
						this.IDSRTP = (BigDecimal) dis.readObject();
					
						this.IDSRTY = (BigDecimal) dis.readObject();
					
						this.ARTSCL = (BigDecimal) dis.readObject();
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDEPT = null;
           				} else {
           			    	this.IDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISDEPT = null;
           				} else {
           			    	this.ISDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ICLAS = null;
           				} else {
           			    	this.ICLAS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISCLAS = null;
           				} else {
           			    	this.ISCLAS = dis.readDouble();
           				}
					
					this.DPTNAM = readString(dis);
					
					this.DPTSHT = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDPLAN = null;
           				} else {
           			    	this.IDPLAN = dis.readDouble();
           				}
					
					this.IDBUYR = readString(dis);
					
					this.IDRESP = readString(dis);
					
					this.IDSLVL = readString(dis);
					
					this.IDSFRQ = readString(dis);
					
						this.IDSRTD = (BigDecimal) dis.readObject();
					
						this.IDSRTW = (BigDecimal) dis.readObject();
					
						this.IDSRTP = (BigDecimal) dis.readObject();
					
						this.IDSRTY = (BigDecimal) dis.readObject();
					
						this.ARTSCL = (BigDecimal) dis.readObject();
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.IDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDEPT);
		            	}
					
					// Double
				
						if(this.ISDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISDEPT);
		            	}
					
					// Double
				
						if(this.ICLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ICLAS);
		            	}
					
					// Double
				
						if(this.ISCLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISCLAS);
		            	}
					
					// String
				
						writeString(this.DPTNAM,dos);
					
					// String
				
						writeString(this.DPTSHT,dos);
					
					// Double
				
						if(this.IDPLAN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDPLAN);
		            	}
					
					// String
				
						writeString(this.IDBUYR,dos);
					
					// String
				
						writeString(this.IDRESP,dos);
					
					// String
				
						writeString(this.IDSLVL,dos);
					
					// String
				
						writeString(this.IDSFRQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARTSCL);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.IDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDEPT);
		            	}
					
					// Double
				
						if(this.ISDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISDEPT);
		            	}
					
					// Double
				
						if(this.ICLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ICLAS);
		            	}
					
					// Double
				
						if(this.ISCLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISCLAS);
		            	}
					
					// String
				
						writeString(this.DPTNAM,dos);
					
					// String
				
						writeString(this.DPTSHT,dos);
					
					// Double
				
						if(this.IDPLAN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDPLAN);
		            	}
					
					// String
				
						writeString(this.IDBUYR,dos);
					
					// String
				
						writeString(this.IDRESP,dos);
					
					// String
				
						writeString(this.IDSLVL,dos);
					
					// String
				
						writeString(this.IDSFRQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARTSCL);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDEPT="+String.valueOf(IDEPT));
		sb.append(",ISDEPT="+String.valueOf(ISDEPT));
		sb.append(",ICLAS="+String.valueOf(ICLAS));
		sb.append(",ISCLAS="+String.valueOf(ISCLAS));
		sb.append(",DPTNAM="+DPTNAM);
		sb.append(",DPTSHT="+DPTSHT);
		sb.append(",IDPLAN="+String.valueOf(IDPLAN));
		sb.append(",IDBUYR="+IDBUYR);
		sb.append(",IDRESP="+IDRESP);
		sb.append(",IDSLVL="+IDSLVL);
		sb.append(",IDSFRQ="+IDSFRQ);
		sb.append(",IDSRTD="+String.valueOf(IDSRTD));
		sb.append(",IDSRTW="+String.valueOf(IDSRTW));
		sb.append(",IDSRTP="+String.valueOf(IDSRTP));
		sb.append(",IDSRTY="+String.valueOf(IDSRTY));
		sb.append(",ARTSCL="+String.valueOf(ARTSCL));
		sb.append(",LOAD_DATE="+String.valueOf(LOAD_DATE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(IDEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDEPT);
            			}
            		
        			sb.append("|");
        		
        				if(ISDEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISDEPT);
            			}
            		
        			sb.append("|");
        		
        				if(ICLAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ICLAS);
            			}
            		
        			sb.append("|");
        		
        				if(ISCLAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISCLAS);
            			}
            		
        			sb.append("|");
        		
        				if(DPTNAM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DPTNAM);
            			}
            		
        			sb.append("|");
        		
        				if(DPTSHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DPTSHT);
            			}
            		
        			sb.append("|");
        		
        				if(IDPLAN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDPLAN);
            			}
            		
        			sb.append("|");
        		
        				if(IDBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(IDRESP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDRESP);
            			}
            		
        			sb.append("|");
        		
        				if(IDSLVL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSLVL);
            			}
            		
        			sb.append("|");
        		
        				if(IDSFRQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSFRQ);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTD);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTW);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTP);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTY);
            			}
            		
        			sb.append("|");
        		
        				if(ARTSCL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ARTSCL);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_DATE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(tmap_INVDPTStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Double IDEPT;

				public Double getIDEPT () {
					return this.IDEPT;
				}

				public Boolean IDEPTIsNullable(){
				    return true;
				}
				public Boolean IDEPTIsKey(){
				    return false;
				}
				public Integer IDEPTLength(){
				    return null;
				}
				public Integer IDEPTPrecision(){
				    return null;
				}
				public String IDEPTDefault(){
				
					return "";
				
				}
				public String IDEPTComment(){
				
				    return "";
				
				}
				public String IDEPTPattern(){
				
					return "";
				
				}
				public String IDEPTOriginalDbColumnName(){
				
					return "IDEPT";
				
				}

				
			    public Double ISDEPT;

				public Double getISDEPT () {
					return this.ISDEPT;
				}

				public Boolean ISDEPTIsNullable(){
				    return true;
				}
				public Boolean ISDEPTIsKey(){
				    return false;
				}
				public Integer ISDEPTLength(){
				    return null;
				}
				public Integer ISDEPTPrecision(){
				    return null;
				}
				public String ISDEPTDefault(){
				
					return "";
				
				}
				public String ISDEPTComment(){
				
				    return "";
				
				}
				public String ISDEPTPattern(){
				
					return "";
				
				}
				public String ISDEPTOriginalDbColumnName(){
				
					return "ISDEPT";
				
				}

				
			    public Double ICLAS;

				public Double getICLAS () {
					return this.ICLAS;
				}

				public Boolean ICLASIsNullable(){
				    return true;
				}
				public Boolean ICLASIsKey(){
				    return false;
				}
				public Integer ICLASLength(){
				    return null;
				}
				public Integer ICLASPrecision(){
				    return null;
				}
				public String ICLASDefault(){
				
					return "";
				
				}
				public String ICLASComment(){
				
				    return "";
				
				}
				public String ICLASPattern(){
				
					return "";
				
				}
				public String ICLASOriginalDbColumnName(){
				
					return "ICLAS";
				
				}

				
			    public Double ISCLAS;

				public Double getISCLAS () {
					return this.ISCLAS;
				}

				public Boolean ISCLASIsNullable(){
				    return true;
				}
				public Boolean ISCLASIsKey(){
				    return false;
				}
				public Integer ISCLASLength(){
				    return null;
				}
				public Integer ISCLASPrecision(){
				    return null;
				}
				public String ISCLASDefault(){
				
					return "";
				
				}
				public String ISCLASComment(){
				
				    return "";
				
				}
				public String ISCLASPattern(){
				
					return "";
				
				}
				public String ISCLASOriginalDbColumnName(){
				
					return "ISCLAS";
				
				}

				
			    public String DPTNAM;

				public String getDPTNAM () {
					return this.DPTNAM;
				}

				public Boolean DPTNAMIsNullable(){
				    return true;
				}
				public Boolean DPTNAMIsKey(){
				    return false;
				}
				public Integer DPTNAMLength(){
				    return null;
				}
				public Integer DPTNAMPrecision(){
				    return null;
				}
				public String DPTNAMDefault(){
				
					return null;
				
				}
				public String DPTNAMComment(){
				
				    return "";
				
				}
				public String DPTNAMPattern(){
				
					return "";
				
				}
				public String DPTNAMOriginalDbColumnName(){
				
					return "DPTNAM";
				
				}

				
			    public String DPTSHT;

				public String getDPTSHT () {
					return this.DPTSHT;
				}

				public Boolean DPTSHTIsNullable(){
				    return true;
				}
				public Boolean DPTSHTIsKey(){
				    return false;
				}
				public Integer DPTSHTLength(){
				    return null;
				}
				public Integer DPTSHTPrecision(){
				    return null;
				}
				public String DPTSHTDefault(){
				
					return null;
				
				}
				public String DPTSHTComment(){
				
				    return "";
				
				}
				public String DPTSHTPattern(){
				
					return "";
				
				}
				public String DPTSHTOriginalDbColumnName(){
				
					return "DPTSHT";
				
				}

				
			    public Double IDPLAN;

				public Double getIDPLAN () {
					return this.IDPLAN;
				}

				public Boolean IDPLANIsNullable(){
				    return true;
				}
				public Boolean IDPLANIsKey(){
				    return false;
				}
				public Integer IDPLANLength(){
				    return null;
				}
				public Integer IDPLANPrecision(){
				    return null;
				}
				public String IDPLANDefault(){
				
					return "";
				
				}
				public String IDPLANComment(){
				
				    return "";
				
				}
				public String IDPLANPattern(){
				
					return "";
				
				}
				public String IDPLANOriginalDbColumnName(){
				
					return "IDPLAN";
				
				}

				
			    public String IDBUYR;

				public String getIDBUYR () {
					return this.IDBUYR;
				}

				public Boolean IDBUYRIsNullable(){
				    return true;
				}
				public Boolean IDBUYRIsKey(){
				    return false;
				}
				public Integer IDBUYRLength(){
				    return null;
				}
				public Integer IDBUYRPrecision(){
				    return null;
				}
				public String IDBUYRDefault(){
				
					return null;
				
				}
				public String IDBUYRComment(){
				
				    return "";
				
				}
				public String IDBUYRPattern(){
				
					return "";
				
				}
				public String IDBUYROriginalDbColumnName(){
				
					return "IDBUYR";
				
				}

				
			    public String IDRESP;

				public String getIDRESP () {
					return this.IDRESP;
				}

				public Boolean IDRESPIsNullable(){
				    return true;
				}
				public Boolean IDRESPIsKey(){
				    return false;
				}
				public Integer IDRESPLength(){
				    return null;
				}
				public Integer IDRESPPrecision(){
				    return null;
				}
				public String IDRESPDefault(){
				
					return null;
				
				}
				public String IDRESPComment(){
				
				    return "";
				
				}
				public String IDRESPPattern(){
				
					return "";
				
				}
				public String IDRESPOriginalDbColumnName(){
				
					return "IDRESP";
				
				}

				
			    public String IDSLVL;

				public String getIDSLVL () {
					return this.IDSLVL;
				}

				public Boolean IDSLVLIsNullable(){
				    return true;
				}
				public Boolean IDSLVLIsKey(){
				    return false;
				}
				public Integer IDSLVLLength(){
				    return null;
				}
				public Integer IDSLVLPrecision(){
				    return null;
				}
				public String IDSLVLDefault(){
				
					return null;
				
				}
				public String IDSLVLComment(){
				
				    return "";
				
				}
				public String IDSLVLPattern(){
				
					return "";
				
				}
				public String IDSLVLOriginalDbColumnName(){
				
					return "IDSLVL";
				
				}

				
			    public String IDSFRQ;

				public String getIDSFRQ () {
					return this.IDSFRQ;
				}

				public Boolean IDSFRQIsNullable(){
				    return true;
				}
				public Boolean IDSFRQIsKey(){
				    return false;
				}
				public Integer IDSFRQLength(){
				    return null;
				}
				public Integer IDSFRQPrecision(){
				    return null;
				}
				public String IDSFRQDefault(){
				
					return null;
				
				}
				public String IDSFRQComment(){
				
				    return "";
				
				}
				public String IDSFRQPattern(){
				
					return "";
				
				}
				public String IDSFRQOriginalDbColumnName(){
				
					return "IDSFRQ";
				
				}

				
			    public BigDecimal IDSRTD;

				public BigDecimal getIDSRTD () {
					return this.IDSRTD;
				}

				public Boolean IDSRTDIsNullable(){
				    return true;
				}
				public Boolean IDSRTDIsKey(){
				    return false;
				}
				public Integer IDSRTDLength(){
				    return null;
				}
				public Integer IDSRTDPrecision(){
				    return null;
				}
				public String IDSRTDDefault(){
				
					return "";
				
				}
				public String IDSRTDComment(){
				
				    return "";
				
				}
				public String IDSRTDPattern(){
				
					return "";
				
				}
				public String IDSRTDOriginalDbColumnName(){
				
					return "IDSRTD";
				
				}

				
			    public BigDecimal IDSRTW;

				public BigDecimal getIDSRTW () {
					return this.IDSRTW;
				}

				public Boolean IDSRTWIsNullable(){
				    return true;
				}
				public Boolean IDSRTWIsKey(){
				    return false;
				}
				public Integer IDSRTWLength(){
				    return null;
				}
				public Integer IDSRTWPrecision(){
				    return null;
				}
				public String IDSRTWDefault(){
				
					return "";
				
				}
				public String IDSRTWComment(){
				
				    return "";
				
				}
				public String IDSRTWPattern(){
				
					return "";
				
				}
				public String IDSRTWOriginalDbColumnName(){
				
					return "IDSRTW";
				
				}

				
			    public BigDecimal IDSRTP;

				public BigDecimal getIDSRTP () {
					return this.IDSRTP;
				}

				public Boolean IDSRTPIsNullable(){
				    return true;
				}
				public Boolean IDSRTPIsKey(){
				    return false;
				}
				public Integer IDSRTPLength(){
				    return null;
				}
				public Integer IDSRTPPrecision(){
				    return null;
				}
				public String IDSRTPDefault(){
				
					return "";
				
				}
				public String IDSRTPComment(){
				
				    return "";
				
				}
				public String IDSRTPPattern(){
				
					return "";
				
				}
				public String IDSRTPOriginalDbColumnName(){
				
					return "IDSRTP";
				
				}

				
			    public BigDecimal IDSRTY;

				public BigDecimal getIDSRTY () {
					return this.IDSRTY;
				}

				public Boolean IDSRTYIsNullable(){
				    return true;
				}
				public Boolean IDSRTYIsKey(){
				    return false;
				}
				public Integer IDSRTYLength(){
				    return null;
				}
				public Integer IDSRTYPrecision(){
				    return null;
				}
				public String IDSRTYDefault(){
				
					return "";
				
				}
				public String IDSRTYComment(){
				
				    return "";
				
				}
				public String IDSRTYPattern(){
				
					return "";
				
				}
				public String IDSRTYOriginalDbColumnName(){
				
					return "IDSRTY";
				
				}

				
			    public BigDecimal ARTSCL;

				public BigDecimal getARTSCL () {
					return this.ARTSCL;
				}

				public Boolean ARTSCLIsNullable(){
				    return true;
				}
				public Boolean ARTSCLIsKey(){
				    return false;
				}
				public Integer ARTSCLLength(){
				    return null;
				}
				public Integer ARTSCLPrecision(){
				    return null;
				}
				public String ARTSCLDefault(){
				
					return "";
				
				}
				public String ARTSCLComment(){
				
				    return "";
				
				}
				public String ARTSCLPattern(){
				
					return "";
				
				}
				public String ARTSCLOriginalDbColumnName(){
				
					return "ARTSCL";
				
				}

				
			    public java.util.Date DATELOADED;

				public java.util.Date getDATELOADED () {
					return this.DATELOADED;
				}

				public Boolean DATELOADEDIsNullable(){
				    return true;
				}
				public Boolean DATELOADEDIsKey(){
				    return false;
				}
				public Integer DATELOADEDLength(){
				    return null;
				}
				public Integer DATELOADEDPrecision(){
				    return null;
				}
				public String DATELOADEDDefault(){
				
					return "";
				
				}
				public String DATELOADEDComment(){
				
				    return "";
				
				}
				public String DATELOADEDPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DATELOADEDOriginalDbColumnName(){
				
					return "DATELOADED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDEPT = null;
           				} else {
           			    	this.IDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISDEPT = null;
           				} else {
           			    	this.ISDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ICLAS = null;
           				} else {
           			    	this.ICLAS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISCLAS = null;
           				} else {
           			    	this.ISCLAS = dis.readDouble();
           				}
					
					this.DPTNAM = readString(dis);
					
					this.DPTSHT = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDPLAN = null;
           				} else {
           			    	this.IDPLAN = dis.readDouble();
           				}
					
					this.IDBUYR = readString(dis);
					
					this.IDRESP = readString(dis);
					
					this.IDSLVL = readString(dis);
					
					this.IDSFRQ = readString(dis);
					
						this.IDSRTD = (BigDecimal) dis.readObject();
					
						this.IDSRTW = (BigDecimal) dis.readObject();
					
						this.IDSRTP = (BigDecimal) dis.readObject();
					
						this.IDSRTY = (BigDecimal) dis.readObject();
					
						this.ARTSCL = (BigDecimal) dis.readObject();
					
					this.DATELOADED = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDEPT = null;
           				} else {
           			    	this.IDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISDEPT = null;
           				} else {
           			    	this.ISDEPT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ICLAS = null;
           				} else {
           			    	this.ICLAS = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ISCLAS = null;
           				} else {
           			    	this.ISCLAS = dis.readDouble();
           				}
					
					this.DPTNAM = readString(dis);
					
					this.DPTSHT = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IDPLAN = null;
           				} else {
           			    	this.IDPLAN = dis.readDouble();
           				}
					
					this.IDBUYR = readString(dis);
					
					this.IDRESP = readString(dis);
					
					this.IDSLVL = readString(dis);
					
					this.IDSFRQ = readString(dis);
					
						this.IDSRTD = (BigDecimal) dis.readObject();
					
						this.IDSRTW = (BigDecimal) dis.readObject();
					
						this.IDSRTP = (BigDecimal) dis.readObject();
					
						this.IDSRTY = (BigDecimal) dis.readObject();
					
						this.ARTSCL = (BigDecimal) dis.readObject();
					
					this.DATELOADED = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.IDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDEPT);
		            	}
					
					// Double
				
						if(this.ISDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISDEPT);
		            	}
					
					// Double
				
						if(this.ICLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ICLAS);
		            	}
					
					// Double
				
						if(this.ISCLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISCLAS);
		            	}
					
					// String
				
						writeString(this.DPTNAM,dos);
					
					// String
				
						writeString(this.DPTSHT,dos);
					
					// Double
				
						if(this.IDPLAN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDPLAN);
		            	}
					
					// String
				
						writeString(this.IDBUYR,dos);
					
					// String
				
						writeString(this.IDRESP,dos);
					
					// String
				
						writeString(this.IDSLVL,dos);
					
					// String
				
						writeString(this.IDSFRQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARTSCL);
					
					// java.util.Date
				
						writeDate(this.DATELOADED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.IDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDEPT);
		            	}
					
					// Double
				
						if(this.ISDEPT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISDEPT);
		            	}
					
					// Double
				
						if(this.ICLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ICLAS);
		            	}
					
					// Double
				
						if(this.ISCLAS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ISCLAS);
		            	}
					
					// String
				
						writeString(this.DPTNAM,dos);
					
					// String
				
						writeString(this.DPTSHT,dos);
					
					// Double
				
						if(this.IDPLAN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.IDPLAN);
		            	}
					
					// String
				
						writeString(this.IDBUYR,dos);
					
					// String
				
						writeString(this.IDRESP,dos);
					
					// String
				
						writeString(this.IDSLVL,dos);
					
					// String
				
						writeString(this.IDSFRQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDSRTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARTSCL);
					
					// java.util.Date
				
						writeDate(this.DATELOADED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDEPT="+String.valueOf(IDEPT));
		sb.append(",ISDEPT="+String.valueOf(ISDEPT));
		sb.append(",ICLAS="+String.valueOf(ICLAS));
		sb.append(",ISCLAS="+String.valueOf(ISCLAS));
		sb.append(",DPTNAM="+DPTNAM);
		sb.append(",DPTSHT="+DPTSHT);
		sb.append(",IDPLAN="+String.valueOf(IDPLAN));
		sb.append(",IDBUYR="+IDBUYR);
		sb.append(",IDRESP="+IDRESP);
		sb.append(",IDSLVL="+IDSLVL);
		sb.append(",IDSFRQ="+IDSFRQ);
		sb.append(",IDSRTD="+String.valueOf(IDSRTD));
		sb.append(",IDSRTW="+String.valueOf(IDSRTW));
		sb.append(",IDSRTP="+String.valueOf(IDSRTP));
		sb.append(",IDSRTY="+String.valueOf(IDSRTY));
		sb.append(",ARTSCL="+String.valueOf(ARTSCL));
		sb.append(",DATELOADED="+String.valueOf(DATELOADED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(IDEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDEPT);
            			}
            		
        			sb.append("|");
        		
        				if(ISDEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISDEPT);
            			}
            		
        			sb.append("|");
        		
        				if(ICLAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ICLAS);
            			}
            		
        			sb.append("|");
        		
        				if(ISCLAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ISCLAS);
            			}
            		
        			sb.append("|");
        		
        				if(DPTNAM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DPTNAM);
            			}
            		
        			sb.append("|");
        		
        				if(DPTSHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DPTSHT);
            			}
            		
        			sb.append("|");
        		
        				if(IDPLAN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDPLAN);
            			}
            		
        			sb.append("|");
        		
        				if(IDBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(IDRESP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDRESP);
            			}
            		
        			sb.append("|");
        		
        				if(IDSLVL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSLVL);
            			}
            		
        			sb.append("|");
        		
        				if(IDSFRQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSFRQ);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTD);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTW);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTP);
            			}
            		
        			sb.append("|");
        		
        				if(IDSRTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IDSRTY);
            			}
            		
        			sb.append("|");
        		
        				if(ARTSCL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ARTSCL);
            			}
            		
        			sb.append("|");
        		
        				if(DATELOADED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DATELOADED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
tmap_INVDPTStruct tmap_INVDPT = new tmap_INVDPTStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"tmap_INVDPT");
			
		int tos_count_tDBOutput_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_2", "tDBOutput_2", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_2 = (String)(restRequest_tDBOutput_2 != null ? restRequest_tDBOutput_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_2 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_2 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_2 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_2 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_2.createRuntimeProperties();
 		                    props_tDBOutput_2.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_2.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_2.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_2.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_2_1_fisrt sst_tDBOutput_2_1_fisrt = new SchemaSettingTool_tDBOutput_2_1_fisrt();
 		                    
 		                    props_tDBOutput_2.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_2_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_2.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_2.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_2.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_2.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_2.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_2.table.setValue("tableName",
 		                    "DEPARTMENT_DESCRIPTIONS_INVDPT");
 		                    
 		                    props_tDBOutput_2.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_2.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_2.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_2.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_2.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_2.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_2_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tDBOutput_10\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"IDEPT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDEPT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDEPT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDEPT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ISDEPT\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ISDEPT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ISDEPT\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ISDEPT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ICLAS\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ICLAS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ICLAS\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ICLAS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ISCLAS\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ISCLAS\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ISCLAS\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ISCLAS\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DPTNAM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DPTNAM\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DPTNAM\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DPTNAM\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"DPTSHT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"DPTSHT\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"DPTSHT\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"DPTSHT\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDPLAN\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDPLAN\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDPLAN\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDPLAN\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDBUYR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDBUYR\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDBUYR\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDBUYR\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDRESP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDRESP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDRESP\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDRESP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDSLVL\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDSLVL\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDSLVL\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDSLVL\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDSFRQ\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDSFRQ\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDSFRQ\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDSFRQ\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDSRTD\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDSRTD\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDSRTD\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDSRTD\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDSRTW\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDSRTW\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDSRTW\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDSRTW\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDSRTP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDSRTP\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDSRTP\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDSRTP\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IDSRTY\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IDSRTY\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"IDSRTY\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IDSRTY\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ARTSCL\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ARTSCL\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ARTSCL\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ARTSCL\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"LOAD_DATE\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"LOAD_DATE\",\"di.prop.di.date.date\":\"true\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"di.column.relationshipType\":\"\",\"di.prop.di.column.logicalType\":\"date\",\"di.table.label\":\"LOAD_DATE\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_10\",\"di.table.label\":\"tDBOutput_10\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_2_2_fisrt sst_tDBOutput_2_2_fisrt = new SchemaSettingTool_tDBOutput_2_2_fisrt();
 		                    
 		                    props_tDBOutput_2.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_2_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_2.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_2 = props_tDBOutput_2.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_2.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_2);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_2.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_2 = props_tDBOutput_2.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_2.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_2);
        }
    }
globalMap.put("tDBOutput_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_2_MAPPINGS_URL", mappings_url_tDBOutput_2);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_2 = null;
topology_tDBOutput_2 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_2 = def_tDBOutput_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_2, topology_tDBOutput_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_2 = def_tDBOutput_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_2 = componentRuntime_tDBOutput_2.initialize(container_tDBOutput_2, props_tDBOutput_2);

if (initVr_tDBOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_2.getMessage());
}

if(componentRuntime_tDBOutput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_2;
	compDriverInitialization_tDBOutput_2.runAtDriver(container_tDBOutput_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_2 = null;
if(componentRuntime_tDBOutput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_2;
	if (doesNodeBelongToRequest_tDBOutput_2) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_2 = sourceOrSink_tDBOutput_2.validate(container_tDBOutput_2);
        if (vr_tDBOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_2.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_2 = null;
    if (sourceOrSink_tDBOutput_2 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_2 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_2;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_2 = sink_tDBOutput_2.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_2) {
            writeOperation_tDBOutput_2.initialize(container_tDBOutput_2);
        }
        writer_tDBOutput_2 = writeOperation_tDBOutput_2.createWriter(container_tDBOutput_2);
        if (doesNodeBelongToRequest_tDBOutput_2) {
            writer_tDBOutput_2.open("tDBOutput_2");
        }

        resourceMap.put("writer_tDBOutput_2", writer_tDBOutput_2);
    } // end of "sourceOrSink_tDBOutput_2 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_2 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_2.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_2 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_2 = props_tDBOutput_2.getSchema(c_tDBOutput_2, false);
    incomingEnforcer_tDBOutput_2 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_2);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_2 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_2 = null;


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row11");
			
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_2", "tMap_2", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row11_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	java.util.Date var1;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_tmap_INVDPT_tMap_2 = 0;
				
tmap_INVDPTStruct tmap_INVDPT_tmp = new tmap_INVDPTStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";
	
	
		int tos_count_tFileInputDelimited_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_3 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_3.append("Parameters:");
                            log4jParamters_tFileInputDelimited_3.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVDPT.zip\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("DIE_ON_ERROR" + " = " + "true");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("IDEPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISDEPT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ICLAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ISCLAS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DPTNAM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DPTSHT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDPLAN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDBUYR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDRESP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSLVL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSFRQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTW")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("IDSRTY")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ARTSCL")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DATELOADED")+"}]");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                            log4jParamters_tFileInputDelimited_3.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_3 - "  + (log4jParamters_tFileInputDelimited_3) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_3", "tFileInputDelimited_3", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = "/data/talend/data_repository/INVDPT.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_3 = null;
						try {
							if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
								zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_3));
							}else{
								zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								throw e;
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_3 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_3 = zis_tFileInputDelimited_3.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
								
									throw e;
								
							}
							if(entry_tFileInputDelimited_3 == null) {
								break;
							}
							if(entry_tFileInputDelimited_3.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_3, "ISO-8859-15","|","\n",false,1,0,
								
									limit_tFileInputDelimited_3
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
								
									throw e;
								
							}
					
				    
				    	log.info("tFileInputDelimited_3 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row11 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row11 = new row11Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.IDEPT = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IDEPT", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.IDEPT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.ISDEPT = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ISDEPT", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.ISDEPT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.ICLAS = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ICLAS", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.ICLAS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.ISCLAS = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ISCLAS", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.ISCLAS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row11.DPTNAM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
							row11.DPTSHT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.IDPLAN = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IDPLAN", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.IDPLAN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
							row11.IDBUYR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
							row11.IDRESP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 9;
					
							row11.IDSLVL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 10;
					
							row11.IDSFRQ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 11;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.IDSRTD = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IDSRTD", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.IDSRTD = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 12;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.IDSRTW = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IDSRTW", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.IDSRTW = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 13;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.IDSRTP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IDSRTP", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.IDSRTP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 14;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.IDSRTY = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IDSRTY", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.IDSRTY = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 15;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row11.ARTSCL = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ARTSCL", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.ARTSCL = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 16;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row11.DATELOADED = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DATELOADED", "row11", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row11.DATELOADED = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			            					throw(e);
			            				
			    					}
								
			log.debug("tFileInputDelimited_3 - Retrieving the record " + fid_tFileInputDelimited_3.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row11","tFileInputDelimited_3","tFileInputDelimited_3","tFileInputDelimited","tMap_2","tMap_2","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row11 - " + (row11==null? "": row11.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var1 = TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")) ;// ###############################
        // ###############################
        // # Output tables

tmap_INVDPT = null;


// # Output table : 'tmap_INVDPT'
count_tmap_INVDPT_tMap_2++;

tmap_INVDPT_tmp.IDEPT = row11.IDEPT;
tmap_INVDPT_tmp.ISDEPT = row11.ISDEPT;
tmap_INVDPT_tmp.ICLAS = row11.ICLAS;
tmap_INVDPT_tmp.ISCLAS = row11.ISCLAS;
tmap_INVDPT_tmp.DPTNAM = row11.DPTNAM;
tmap_INVDPT_tmp.DPTSHT = row11.DPTSHT;
tmap_INVDPT_tmp.IDPLAN = row11.IDPLAN;
tmap_INVDPT_tmp.IDBUYR = row11.IDBUYR;
tmap_INVDPT_tmp.IDRESP = row11.IDRESP;
tmap_INVDPT_tmp.IDSLVL = row11.IDSLVL;
tmap_INVDPT_tmp.IDSFRQ = row11.IDSFRQ;
tmap_INVDPT_tmp.IDSRTD = row11.IDSRTD;
tmap_INVDPT_tmp.IDSRTW = row11.IDSRTW;
tmap_INVDPT_tmp.IDSRTP = row11.IDSRTP;
tmap_INVDPT_tmp.IDSRTY = row11.IDSRTY;
tmap_INVDPT_tmp.ARTSCL = row11.ARTSCL;
tmap_INVDPT_tmp.LOAD_DATE = Var.var1 ;
tmap_INVDPT = tmap_INVDPT_tmp;
log.debug("tMap_2 - Outputting the record " + count_tmap_INVDPT_tMap_2 + " of the output table 'tmap_INVDPT'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "tmap_INVDPT"
if(tmap_INVDPT != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"tmap_INVDPT","tMap_2","tMap_2","tMap","tDBOutput_2","tDBOutput_2","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("tmap_INVDPT - " + (tmap_INVDPT==null? "": tmap_INVDPT.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_2 != null) {
            incomingEnforcer_tDBOutput_2.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDEPT") != null){
                    incomingEnforcer_tDBOutput_2.put("IDEPT", tmap_INVDPT.IDEPT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("ISDEPT") != null){
                    incomingEnforcer_tDBOutput_2.put("ISDEPT", tmap_INVDPT.ISDEPT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("ICLAS") != null){
                    incomingEnforcer_tDBOutput_2.put("ICLAS", tmap_INVDPT.ICLAS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("ISCLAS") != null){
                    incomingEnforcer_tDBOutput_2.put("ISCLAS", tmap_INVDPT.ISCLAS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("DPTNAM") != null){
                    incomingEnforcer_tDBOutput_2.put("DPTNAM", tmap_INVDPT.DPTNAM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("DPTSHT") != null){
                    incomingEnforcer_tDBOutput_2.put("DPTSHT", tmap_INVDPT.DPTSHT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDPLAN") != null){
                    incomingEnforcer_tDBOutput_2.put("IDPLAN", tmap_INVDPT.IDPLAN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDBUYR") != null){
                    incomingEnforcer_tDBOutput_2.put("IDBUYR", tmap_INVDPT.IDBUYR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDRESP") != null){
                    incomingEnforcer_tDBOutput_2.put("IDRESP", tmap_INVDPT.IDRESP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDSLVL") != null){
                    incomingEnforcer_tDBOutput_2.put("IDSLVL", tmap_INVDPT.IDSLVL);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDSFRQ") != null){
                    incomingEnforcer_tDBOutput_2.put("IDSFRQ", tmap_INVDPT.IDSFRQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDSRTD") != null){
                    incomingEnforcer_tDBOutput_2.put("IDSRTD", tmap_INVDPT.IDSRTD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDSRTW") != null){
                    incomingEnforcer_tDBOutput_2.put("IDSRTW", tmap_INVDPT.IDSRTW);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDSRTP") != null){
                    incomingEnforcer_tDBOutput_2.put("IDSRTP", tmap_INVDPT.IDSRTP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("IDSRTY") != null){
                    incomingEnforcer_tDBOutput_2.put("IDSRTY", tmap_INVDPT.IDSRTY);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("ARTSCL") != null){
                    incomingEnforcer_tDBOutput_2.put("ARTSCL", tmap_INVDPT.ARTSCL);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_2 != null && incomingEnforcer_tDBOutput_2.getRuntimeSchema().getField("LOAD_DATE") != null){
                    incomingEnforcer_tDBOutput_2.put("LOAD_DATE", tmap_INVDPT.LOAD_DATE);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_2 = null;
        if (incomingEnforcer_tDBOutput_2 != null) {
            data_tDBOutput_2 = incomingEnforcer_tDBOutput_2.getCurrentRecord();
        }
        
        if (writer_tDBOutput_2 != null && data_tDBOutput_2 != null) {
        	writer_tDBOutput_2.write(data_tDBOutput_2);
        }
        
        nb_line_tDBOutput_2++;

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	


 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	


 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "tmap_INVDPT"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	


				
            }
            nb_line_tFileInputDelimited_3+=fid_tFileInputDelimited_3.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/INVDPT.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_3!=null){
            		fid_tFileInputDelimited_3.close();
            	}
            }
            if(fid_tFileInputDelimited_3!=null){
            	globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
            }
					
						log.info("tFileInputDelimited_3- Retrieved records count: "+ nb_line_tFileInputDelimited_3 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_3 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'tmap_INVDPT': " + count_tmap_INVDPT_tMap_2 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row11",2,0,
			 			"tFileInputDelimited_3","tFileInputDelimited_3","tFileInputDelimited","tMap_2","tMap_2","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_2", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_2 = null;
    if (writer_tDBOutput_2 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_2 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_2.close();
        resultMap_tDBOutput_2 = writer_tDBOutput_2.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_2), container_tDBOutput_2);
    }
if(resultMap_tDBOutput_2!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_2 : resultMap_tDBOutput_2.entrySet()) {
		switch(entry_tDBOutput_2.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "ERROR_MESSAGE", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_LINE", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_SUCCESS", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_REJECT", entry_tDBOutput_2.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_2 = new StringBuilder();
            for (int i_tDBOutput_2 = 0; i_tDBOutput_2 < entry_tDBOutput_2.getKey().length(); i_tDBOutput_2++) {
                char ch_tDBOutput_2 = entry_tDBOutput_2.getKey().charAt(i_tDBOutput_2);
                if(Character.isUpperCase(ch_tDBOutput_2) && i_tDBOutput_2> 0) {
                	studio_key_tDBOutput_2.append('_');
                }
                studio_key_tDBOutput_2.append(ch_tDBOutput_2);
            }
			container_tDBOutput_2.setComponentData("tDBOutput_2", studio_key_tDBOutput_2.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_2.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"tmap_INVDPT",2,0,
			 			"tMap_2","tMap_2","tMap","tDBOutput_2","tDBOutput_2","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFileDelete_3Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";
	
	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_2")==null){
    if(resourceMap.get("writer_tDBOutput_2")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_2")).close();
		} catch (java.io.IOException e_tDBOutput_2) {
			String errorMessage_tDBOutput_2 = "failed to release the resource in tDBOutput_2 :" + e_tDBOutput_2.getMessage();
			System.err.println(errorMessage_tDBOutput_2);
		}
	}
}
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_3");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_3", false);
		start_Hash.put("tFileDelete_3", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_3";
	
	
		int tos_count_tFileDelete_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_3 = new StringBuilder();
                    log4jParamters_tFileDelete_3.append("Parameters:");
                            log4jParamters_tFileDelete_3.append("PATH" + " = " + "\"/data/talend/data_repository/INVDPT.zip\"");
                        log4jParamters_tFileDelete_3.append(" | ");
                            log4jParamters_tFileDelete_3.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_3.append(" | ");
                            log4jParamters_tFileDelete_3.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_3 - "  + (log4jParamters_tFileDelete_3) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_3", "tFileDelete_3", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_3 begin ] stop
 */
	
	/**
	 * [tFileDelete_3 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 

				final StringBuffer log4jSb_tFileDelete_3 = new StringBuffer();
			
class DeleteFoldertFileDelete_3{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_3=new java.io.File("/data/talend/data_repository/INVDPT.zip");
	if(path_tFileDelete_3.exists()){
		if(path_tFileDelete_3.isFile()){
	    	if(path_tFileDelete_3.delete()){
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_3 - File : "+ path_tFileDelete_3.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_3.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_3.isDirectory()){ 
	    	DeleteFoldertFileDelete_3 dftFileDelete_3 = new DeleteFoldertFileDelete_3();
	    	if(dftFileDelete_3.delete(path_tFileDelete_3)){
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_3 - Directory : "+ path_tFileDelete_3.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_3.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_3_DELETE_PATH","/data/talend/data_repository/INVDPT.zip");
 


	tos_count_tFileDelete_3++;

/**
 * [tFileDelete_3 main ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 



/**
 * [tFileDelete_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 



/**
 * [tFileDelete_3 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_3 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_3 - "  + ("Done.") );

ok_Hash.put("tFileDelete_3", true);
end_Hash.put("tFileDelete_3", System.currentTimeMillis());




/**
 * [tFileDelete_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_3 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 



/**
 * [tFileDelete_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";
	
	
		int tos_count_tDBRow_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_1", "tDBRow_1", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_1 = (String)(restRequest_tDBRow_1 != null ? restRequest_tDBRow_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_1 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_1 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_1 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_1.createRuntimeProperties();
 		                    props_tDBRow_1.setValue("query",
 		                    "DELETE from ADI_STORE_FILE_INVADI\nWHERE LOAD_DATE = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_1.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_1.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_1.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_1_1_fisrt sst_tDBRow_1_1_fisrt = new SchemaSettingTool_tDBRow_1_1_fisrt();
 		                    
 		                    props_tDBRow_1.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_1_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_1_2_fisrt sst_tDBRow_1_2_fisrt = new SchemaSettingTool_tDBRow_1_2_fisrt();
 		                    
 		                    props_tDBRow_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_1.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_1.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_1.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_1.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_1.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_1.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_1.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_1.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_1.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_1.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_1_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_1_3_fisrt sst_tDBRow_1_3_fisrt = new SchemaSettingTool_tDBRow_1_3_fisrt();
 		                    
 		                    props_tDBRow_1.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_1.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_1.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_1);
        }
    }
globalMap.put("tDBRow_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_1_MAPPINGS_URL", mappings_url_tDBRow_1);

org.talend.components.api.container.RuntimeContainer container_tDBRow_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_1 = null;
topology_tDBRow_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_1 = def_tDBRow_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_1, topology_tDBRow_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_1 = def_tDBRow_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_1 = componentRuntime_tDBRow_1.initialize(container_tDBRow_1, props_tDBRow_1);

if (initVr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_1.getMessage());
}

if(componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_1;
	compDriverInitialization_tDBRow_1.runAtDriver(container_tDBRow_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_1 = null;
if(componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_1;
	if (doesNodeBelongToRequest_tDBRow_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_1 = sourceOrSink_tDBRow_1.validate(container_tDBRow_1);
        if (vr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_1.getMessage());
        }
	}
}

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	


 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	


 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	


 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	
// end of generic


resourceMap.put("finish_tDBRow_1", Boolean.TRUE);

 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_1")==null){
}
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Float ADINUM;

				public Float getADINUM () {
					return this.ADINUM;
				}

				public Boolean ADINUMIsNullable(){
				    return true;
				}
				public Boolean ADINUMIsKey(){
				    return false;
				}
				public Integer ADINUMLength(){
				    return 3;
				}
				public Integer ADINUMPrecision(){
				    return 0;
				}
				public String ADINUMDefault(){
				
					return "";
				
				}
				public String ADINUMComment(){
				
				    return "";
				
				}
				public String ADINUMPattern(){
				
					return "";
				
				}
				public String ADINUMOriginalDbColumnName(){
				
					return "ADINUM";
				
				}

				
			    public BigDecimal STRNUM;

				public BigDecimal getSTRNUM () {
					return this.STRNUM;
				}

				public Boolean STRNUMIsNullable(){
				    return true;
				}
				public Boolean STRNUMIsKey(){
				    return false;
				}
				public Integer STRNUMLength(){
				    return 5;
				}
				public Integer STRNUMPrecision(){
				    return 0;
				}
				public String STRNUMDefault(){
				
					return "";
				
				}
				public String STRNUMComment(){
				
				    return "";
				
				}
				public String STRNUMPattern(){
				
					return "";
				
				}
				public String STRNUMOriginalDbColumnName(){
				
					return "STRNUM";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ADINUM = null;
           				} else {
           			    	this.ADINUM = dis.readFloat();
           				}
					
						this.STRNUM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ADINUM = null;
           				} else {
           			    	this.ADINUM = dis.readFloat();
           				}
					
						this.STRNUM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.ADINUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ADINUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.STRNUM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Float
				
						if(this.ADINUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ADINUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.STRNUM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ADINUM="+String.valueOf(ADINUM));
		sb.append(",STRNUM="+String.valueOf(STRNUM));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ADINUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADINUM);
            			}
            		
        			sb.append("|");
        		
        				if(STRNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STRNUM);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row24");
			
		int tos_count_tFileOutputDelimited_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_1 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_1.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_1.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVADI.csv\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                            log4jParamters_tFileOutputDelimited_1.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_1 - "  + (log4jParamters_tFileOutputDelimited_1) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_1", "tFileOutputDelimited_1", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("/data/talend/data_repository/INVADI.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                                log.info("tFileOutputDelimited_1 - Creating directory '" + dir_tFileOutputDelimited_1.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_1.mkdirs();
                                log.info("tFileOutputDelimited_1 - The directory '"+ dir_tFileOutputDelimited_1.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        String zipName_tFileOutputDelimited_1 = fullName_tFileOutputDelimited_1 + ".zip";
                        java.io.File file_tFileOutputDelimited_1 = new java.io.File(zipName_tFileOutputDelimited_1);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_1= null;
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        if(file_tFileOutputDelimited_1.exists()) {
                            file_tFileOutputDelimited_1.delete();
                        }
                        zipOut_tFileOutputDelimited_1= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_1)));
                        zipOut_tFileOutputDelimited_1.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_1.getName()));
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_1,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("ADINUM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("STRNUM");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"select * from MM4R5LIB.INVADI\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ADINUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("STRNUM")+"}]");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_1", "tDBInput_1", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_1 = context.jda_password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select * from MM4R5LIB.INVADI";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row24.ADINUM = null;
							} else {
		                          
            row24.ADINUM = rs_tDBInput_1.getFloat(1);
            if(rs_tDBInput_1.wasNull()){
                    row24.ADINUM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row24.STRNUM = null;
							} else {
		                          
            row24.STRNUM = rs_tDBInput_1.getBigDecimal(2);
            if(rs_tDBInput_1.wasNull()){
                    row24.STRNUM = null;
            }
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row24","tDBInput_1","tDBInput_1","tAS400Input","tFileOutputDelimited_1","tFileOutputDelimited_1","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row24 - " + (row24==null? "": row24.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row24.ADINUM != null) {
                        sb_tFileOutputDelimited_1.append(
                            row24.ADINUM
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row24.STRNUM != null) {
                        sb_tFileOutputDelimited_1.append(
                            row24.STRNUM.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());
                        log.debug("tFileOutputDelimited_1 - Writing the record " + nb_line_tFileOutputDelimited_1 + ".");

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	
				log.debug("tFileOutputDelimited_1 - Written records count: " + nb_line_tFileOutputDelimited_1 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row24",2,0,
			 			"tDBInput_1","tDBInput_1","tAS400Input","tFileOutputDelimited_1","tFileOutputDelimited_1","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_1 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileInputDelimited_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class INVADIStruct implements routines.system.IPersistableRow<INVADIStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Double ADINUM;

				public Double getADINUM () {
					return this.ADINUM;
				}

				public Boolean ADINUMIsNullable(){
				    return true;
				}
				public Boolean ADINUMIsKey(){
				    return false;
				}
				public Integer ADINUMLength(){
				    return null;
				}
				public Integer ADINUMPrecision(){
				    return null;
				}
				public String ADINUMDefault(){
				
					return "";
				
				}
				public String ADINUMComment(){
				
				    return "";
				
				}
				public String ADINUMPattern(){
				
					return "";
				
				}
				public String ADINUMOriginalDbColumnName(){
				
					return "ADINUM";
				
				}

				
			    public BigDecimal STRNUM;

				public BigDecimal getSTRNUM () {
					return this.STRNUM;
				}

				public Boolean STRNUMIsNullable(){
				    return true;
				}
				public Boolean STRNUMIsKey(){
				    return false;
				}
				public Integer STRNUMLength(){
				    return null;
				}
				public Integer STRNUMPrecision(){
				    return null;
				}
				public String STRNUMDefault(){
				
					return "";
				
				}
				public String STRNUMComment(){
				
				    return "";
				
				}
				public String STRNUMPattern(){
				
					return "";
				
				}
				public String STRNUMOriginalDbColumnName(){
				
					return "STRNUM";
				
				}

				
			    public java.util.Date LOAD_DATE;

				public java.util.Date getLOAD_DATE () {
					return this.LOAD_DATE;
				}

				public Boolean LOAD_DATEIsNullable(){
				    return true;
				}
				public Boolean LOAD_DATEIsKey(){
				    return false;
				}
				public Integer LOAD_DATELength(){
				    return null;
				}
				public Integer LOAD_DATEPrecision(){
				    return null;
				}
				public String LOAD_DATEDefault(){
				
					return null;
				
				}
				public String LOAD_DATEComment(){
				
				    return "";
				
				}
				public String LOAD_DATEPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String LOAD_DATEOriginalDbColumnName(){
				
					return "LOAD_DATE";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ADINUM = null;
           				} else {
           			    	this.ADINUM = dis.readDouble();
           				}
					
						this.STRNUM = (BigDecimal) dis.readObject();
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ADINUM = null;
           				} else {
           			    	this.ADINUM = dis.readDouble();
           				}
					
						this.STRNUM = (BigDecimal) dis.readObject();
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.ADINUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ADINUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.STRNUM);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.ADINUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ADINUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.STRNUM);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ADINUM="+String.valueOf(ADINUM));
		sb.append(",STRNUM="+String.valueOf(STRNUM));
		sb.append(",LOAD_DATE="+String.valueOf(LOAD_DATE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ADINUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADINUM);
            			}
            		
        			sb.append("|");
        		
        				if(STRNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STRNUM);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_DATE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(INVADIStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Double ADINUM;

				public Double getADINUM () {
					return this.ADINUM;
				}

				public Boolean ADINUMIsNullable(){
				    return true;
				}
				public Boolean ADINUMIsKey(){
				    return false;
				}
				public Integer ADINUMLength(){
				    return null;
				}
				public Integer ADINUMPrecision(){
				    return null;
				}
				public String ADINUMDefault(){
				
					return "";
				
				}
				public String ADINUMComment(){
				
				    return "";
				
				}
				public String ADINUMPattern(){
				
					return "";
				
				}
				public String ADINUMOriginalDbColumnName(){
				
					return "ADINUM";
				
				}

				
			    public BigDecimal STRNUM;

				public BigDecimal getSTRNUM () {
					return this.STRNUM;
				}

				public Boolean STRNUMIsNullable(){
				    return true;
				}
				public Boolean STRNUMIsKey(){
				    return false;
				}
				public Integer STRNUMLength(){
				    return null;
				}
				public Integer STRNUMPrecision(){
				    return null;
				}
				public String STRNUMDefault(){
				
					return "";
				
				}
				public String STRNUMComment(){
				
				    return "";
				
				}
				public String STRNUMPattern(){
				
					return "";
				
				}
				public String STRNUMOriginalDbColumnName(){
				
					return "STRNUM";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ADINUM = null;
           				} else {
           			    	this.ADINUM = dis.readDouble();
           				}
					
						this.STRNUM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ADINUM = null;
           				} else {
           			    	this.ADINUM = dis.readDouble();
           				}
					
						this.STRNUM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.ADINUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ADINUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.STRNUM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.ADINUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ADINUM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.STRNUM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ADINUM="+String.valueOf(ADINUM));
		sb.append(",STRNUM="+String.valueOf(STRNUM));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ADINUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADINUM);
            			}
            		
        			sb.append("|");
        		
        				if(STRNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STRNUM);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
INVADIStruct INVADI = new INVADIStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"INVADI");
			
		int tos_count_tDBOutput_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_1", "tDBOutput_1", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_1 = (String)(restRequest_tDBOutput_1 != null ? restRequest_tDBOutput_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_1 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_1 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_1 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_1 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_1.createRuntimeProperties();
 		                    props_tDBOutput_1.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_1.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_1.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_1.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_1_1_fisrt sst_tDBOutput_1_1_fisrt = new SchemaSettingTool_tDBOutput_1_1_fisrt();
 		                    
 		                    props_tDBOutput_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_1.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_1.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_1.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_1.table.setValue("tableName",
 		                    "ADI_STORE_FILE_INVADI");
 		                    
 		                    props_tDBOutput_1.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_1.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_1.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_1.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_1.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_1.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_1_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"ADI_STORE_FILE_INVADI\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"ADINUM\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ADINUM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"STRNUM\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"STRNUM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"talend.field.dbType\":91,\"talend.field.dbColumnName\":\"LOAD_DATE\",\"talend.field.default\":\"\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_1_2_fisrt sst_tDBOutput_1_2_fisrt = new SchemaSettingTool_tDBOutput_1_2_fisrt();
 		                    
 		                    props_tDBOutput_1.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_1.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_1.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_1);
        }
    }
globalMap.put("tDBOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_1_MAPPINGS_URL", mappings_url_tDBOutput_1);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_1 = null;
topology_tDBOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_1 = def_tDBOutput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_1, topology_tDBOutput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_1 = def_tDBOutput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_1 = componentRuntime_tDBOutput_1.initialize(container_tDBOutput_1, props_tDBOutput_1);

if (initVr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_1.getMessage());
}

if(componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_1;
	compDriverInitialization_tDBOutput_1.runAtDriver(container_tDBOutput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_1 = null;
if(componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_1;
	if (doesNodeBelongToRequest_tDBOutput_1) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_1 = sourceOrSink_tDBOutput_1.validate(container_tDBOutput_1);
        if (vr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_1.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_1 = null;
    if (sourceOrSink_tDBOutput_1 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_1 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_1;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_1 = sink_tDBOutput_1.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_1) {
            writeOperation_tDBOutput_1.initialize(container_tDBOutput_1);
        }
        writer_tDBOutput_1 = writeOperation_tDBOutput_1.createWriter(container_tDBOutput_1);
        if (doesNodeBelongToRequest_tDBOutput_1) {
            writer_tDBOutput_1.open("tDBOutput_1");
        }

        resourceMap.put("writer_tDBOutput_1", writer_tDBOutput_1);
    } // end of "sourceOrSink_tDBOutput_1 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_1 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_1.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_1 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_1 = props_tDBOutput_1.getSchema(c_tDBOutput_1, false);
    incomingEnforcer_tDBOutput_1 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_1);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_1 = null;


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row7");
			
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row7_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date var1;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_INVADI_tMap_1 = 0;
				
INVADIStruct INVADI_tmp = new INVADIStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_1 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_1.append("Parameters:");
                            log4jParamters_tFileInputDelimited_1.append("FILENAME" + " = " + "\"/data/talend/data_repository/INVADI.zip\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("FIELDSEPARATOR" + " = " + "\",\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ADINUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("STRNUM")+"}]");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                            log4jParamters_tFileInputDelimited_1.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_1 - "  + (log4jParamters_tFileInputDelimited_1) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_1", "tFileInputDelimited_1", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "/data/talend/data_repository/INVADI.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_1 = null;
						try {
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
								zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_1));
							}else{
								zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
									log.error("tFileInputDelimited_1 - " +e.getMessage());
								
								System.err.println(e.getMessage());
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_1 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_1 = zis_tFileInputDelimited_1.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_1 - " +e.getMessage());
									
									System.err.println(e.getMessage());
									break;
								
							}
							if(entry_tFileInputDelimited_1 == null) {
								break;
							}
							if(entry_tFileInputDelimited_1.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_1, "ISO-8859-15",",","\n",false,1,0,
								
									limit_tFileInputDelimited_1
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
								
									
										log.error("tFileInputDelimited_1 - " +e.getMessage());
									
									System.err.println(e.getMessage());
								
							}
					
				    
				    	log.info("tFileInputDelimited_1 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row7 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row7 = new row7Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.ADINUM = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ADINUM", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.ADINUM = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row7.STRNUM = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"STRNUM", "row7", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row7.STRNUM = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
												log.error("tFileInputDelimited_1 - " +e.getMessage());
											
			                					System.err.println(e.getMessage());
			                					row7 = null;
			                				
										
			    					}
								
			log.debug("tFileInputDelimited_1 - Retrieving the record " + fid_tFileInputDelimited_1.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row7","tFileInputDelimited_1","tFileInputDelimited_1","tFileInputDelimited","tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row7 - " + (row7==null? "": row7.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")) ;// ###############################
        // ###############################
        // # Output tables

INVADI = null;


// # Output table : 'INVADI'
count_INVADI_tMap_1++;

INVADI_tmp.ADINUM = row7.ADINUM;
INVADI_tmp.STRNUM = row7.STRNUM;
INVADI_tmp.LOAD_DATE = Var.var1 ;
INVADI = INVADI_tmp;
log.debug("tMap_1 - Outputting the record " + count_INVADI_tMap_1 + " of the output table 'INVADI'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "INVADI"
if(INVADI != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"INVADI","tMap_1","tMap_1","tMap","tDBOutput_1","tDBOutput_1","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("INVADI - " + (INVADI==null? "": INVADI.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_1 != null) {
            incomingEnforcer_tDBOutput_1.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("ADINUM") != null){
                    incomingEnforcer_tDBOutput_1.put("ADINUM", INVADI.ADINUM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("STRNUM") != null){
                    incomingEnforcer_tDBOutput_1.put("STRNUM", INVADI.STRNUM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_1 != null && incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("LOAD_DATE") != null){
                    incomingEnforcer_tDBOutput_1.put("LOAD_DATE", INVADI.LOAD_DATE);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_1 = null;
        if (incomingEnforcer_tDBOutput_1 != null) {
            data_tDBOutput_1 = incomingEnforcer_tDBOutput_1.getCurrentRecord();
        }
        
        if (writer_tDBOutput_1 != null && data_tDBOutput_1 != null) {
        	writer_tDBOutput_1.write(data_tDBOutput_1);
        }
        
        nb_line_tDBOutput_1++;

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	


 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	


 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "INVADI"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	


				
            }
            nb_line_tFileInputDelimited_1+=fid_tFileInputDelimited_1.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/INVADI.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_1!=null){
            		fid_tFileInputDelimited_1.close();
            	}
            }
            if(fid_tFileInputDelimited_1!=null){
            	globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
            }
					
						log.info("tFileInputDelimited_1- Retrieved records count: "+ nb_line_tFileInputDelimited_1 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_1 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'INVADI': " + count_INVADI_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row7",2,0,
			 			"tFileInputDelimited_1","tFileInputDelimited_1","tFileInputDelimited","tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_1", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_1 = null;
    if (writer_tDBOutput_1 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_1 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_1.close();
        resultMap_tDBOutput_1 = writer_tDBOutput_1.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_1), container_tDBOutput_1);
    }
if(resultMap_tDBOutput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_1 : resultMap_tDBOutput_1.entrySet()) {
		switch(entry_tDBOutput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "ERROR_MESSAGE", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_LINE", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_SUCCESS", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_REJECT", entry_tDBOutput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_1 = new StringBuilder();
            for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < entry_tDBOutput_1.getKey().length(); i_tDBOutput_1++) {
                char ch_tDBOutput_1 = entry_tDBOutput_1.getKey().charAt(i_tDBOutput_1);
                if(Character.isUpperCase(ch_tDBOutput_1) && i_tDBOutput_1> 0) {
                	studio_key_tDBOutput_1.append('_');
                }
                studio_key_tDBOutput_1.append(ch_tDBOutput_1);
            }
			container_tDBOutput_1.setComponentData("tDBOutput_1", studio_key_tDBOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_1.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"INVADI",2,0,
			 			"tMap_1","tMap_1","tMap","tDBOutput_1","tDBOutput_1","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileDelete_2Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_1")==null){
    if(resourceMap.get("writer_tDBOutput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_1")).close();
		} catch (java.io.IOException e_tDBOutput_1) {
			String errorMessage_tDBOutput_1 = "failed to release the resource in tDBOutput_1 :" + e_tDBOutput_1.getMessage();
			System.err.println(errorMessage_tDBOutput_1);
		}
	}
}
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";
	
	
		int tos_count_tFileDelete_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_2 = new StringBuilder();
                    log4jParamters_tFileDelete_2.append("Parameters:");
                            log4jParamters_tFileDelete_2.append("PATH" + " = " + "\"/data/talend/data_repository/INVADI.zip\"");
                        log4jParamters_tFileDelete_2.append(" | ");
                            log4jParamters_tFileDelete_2.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_2.append(" | ");
                            log4jParamters_tFileDelete_2.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_2 - "  + (log4jParamters_tFileDelete_2) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_2", "tFileDelete_2", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 

				final StringBuffer log4jSb_tFileDelete_2 = new StringBuffer();
			
class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_2=new java.io.File("/data/talend/data_repository/INVADI.zip");
	if(path_tFileDelete_2.exists()){
		if(path_tFileDelete_2.isFile()){
	    	if(path_tFileDelete_2.delete()){
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_2 - File : "+ path_tFileDelete_2.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_2.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_2.isDirectory()){ 
	    	DeleteFoldertFileDelete_2 dftFileDelete_2 = new DeleteFoldertFileDelete_2();
	    	if(dftFileDelete_2.delete(path_tFileDelete_2)){
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_2 - Directory : "+ path_tFileDelete_2.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_2_DELETE_PATH","/data/talend/data_repository/INVADI.zip");
 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_2 - "  + ("Done.") );

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBRow_8");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_8", false);
		start_Hash.put("tDBRow_8", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_8";
	
	
		int tos_count_tDBRow_8 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBRow_8", "tDBRow_1", "tSnowflakeRow");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBRow_8 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBRow_8 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBRow_8 = (String)(restRequest_tDBRow_8 != null ? restRequest_tDBRow_8.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBRow_8 =
        new org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBRow_8 = null;
org.talend.components.api.component.runtime.Reader reader_tDBRow_8 = null;


org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties props_tDBRow_8 =
        (org.talend.components.snowflake.tsnowflakerow.TSnowflakeRowProperties) def_tDBRow_8.createRuntimeProperties();
 		                    props_tDBRow_8.setValue("query",
 		                    "DELETE from MMS_VENDOR_MASTER_FILE_APSUPP\nWHERE LOAD_DATE = CURRENT_DATE()");
 		                    
 		                    props_tDBRow_8.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_8.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_8.setValue("commitCount",
 		                    10000);
 		                    
 		                    class SchemaSettingTool_tDBRow_8_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_8_1_fisrt sst_tDBRow_8_1_fisrt = new SchemaSettingTool_tDBRow_8_1_fisrt();
 		                    
 		                    props_tDBRow_8.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_8_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tDBRow_8_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_8_2_fisrt sst_tDBRow_8_2_fisrt = new SchemaSettingTool_tDBRow_8_2_fisrt();
 		                    
 		                    props_tDBRow_8.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_8_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBRow_8.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_8.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_8.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_8.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_8.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_8.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBRow_8.table.setValue("tableName",
 		                    "");
 		                    
 		                    props_tDBRow_8.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBRow_8.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBRow_8.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_8.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_8.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBRow_8.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBRow_8_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBRow_8_3_fisrt sst_tDBRow_8_3_fisrt = new SchemaSettingTool_tDBRow_8_3_fisrt();
 		                    
 		                    props_tDBRow_8.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBRow_8_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_8.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_8 = props_tDBRow_8.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_8 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_8 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_8 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_8.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_8);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_8.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_8 = props_tDBRow_8.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_8 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_8 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_8 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_8.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBRow_8);
        }
    }
globalMap.put("tDBRow_8_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_8);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBRow_8= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_8_MAPPINGS_URL", mappings_url_tDBRow_8);

org.talend.components.api.container.RuntimeContainer container_tDBRow_8 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_8";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_8 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_8 = null;
topology_tDBRow_8 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_8 = def_tDBRow_8.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_8, topology_tDBRow_8);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_8 = def_tDBRow_8.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_8 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_8.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_8 = componentRuntime_tDBRow_8.initialize(container_tDBRow_8, props_tDBRow_8);

if (initVr_tDBRow_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_8.getMessage());
}

if(componentRuntime_tDBRow_8 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_8 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_8;
	compDriverInitialization_tDBRow_8.runAtDriver(container_tDBRow_8);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_8 = null;
if(componentRuntime_tDBRow_8 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_8 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_8;
	if (doesNodeBelongToRequest_tDBRow_8) {
        org.talend.daikon.properties.ValidationResult vr_tDBRow_8 = sourceOrSink_tDBRow_8.validate(container_tDBRow_8);
        if (vr_tDBRow_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBRow_8.getMessage());
        }
	}
}

 



/**
 * [tDBRow_8 begin ] stop
 */
	
	/**
	 * [tDBRow_8 main ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	


 


	tos_count_tDBRow_8++;

/**
 * [tDBRow_8 main ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	


 



/**
 * [tDBRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	


 



/**
 * [tDBRow_8 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_8 end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	
// end of generic


resourceMap.put("finish_tDBRow_8", Boolean.TRUE);

 

ok_Hash.put("tDBRow_8", true);
end_Hash.put("tDBRow_8", System.currentTimeMillis());




/**
 * [tDBRow_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_8 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_8";
	
	
// finally of generic


if(resourceMap.get("finish_tDBRow_8")==null){
}
 



/**
 * [tDBRow_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Float ASNUM;

				public Float getASNUM () {
					return this.ASNUM;
				}

				public Boolean ASNUMIsNullable(){
				    return true;
				}
				public Boolean ASNUMIsKey(){
				    return false;
				}
				public Integer ASNUMLength(){
				    return 6;
				}
				public Integer ASNUMPrecision(){
				    return 0;
				}
				public String ASNUMDefault(){
				
					return "";
				
				}
				public String ASNUMComment(){
				
				    return "";
				
				}
				public String ASNUMPattern(){
				
					return "";
				
				}
				public String ASNUMOriginalDbColumnName(){
				
					return "ASNUM";
				
				}

				
			    public String ASNAME;

				public String getASNAME () {
					return this.ASNAME;
				}

				public Boolean ASNAMEIsNullable(){
				    return true;
				}
				public Boolean ASNAMEIsKey(){
				    return false;
				}
				public Integer ASNAMELength(){
				    return 35;
				}
				public Integer ASNAMEPrecision(){
				    return 0;
				}
				public String ASNAMEDefault(){
				
					return null;
				
				}
				public String ASNAMEComment(){
				
				    return "";
				
				}
				public String ASNAMEPattern(){
				
					return "";
				
				}
				public String ASNAMEOriginalDbColumnName(){
				
					return "ASNAME";
				
				}

				
			    public String ASADAD;

				public String getASADAD () {
					return this.ASADAD;
				}

				public Boolean ASADADIsNullable(){
				    return true;
				}
				public Boolean ASADADIsKey(){
				    return false;
				}
				public Integer ASADADLength(){
				    return 1;
				}
				public Integer ASADADPrecision(){
				    return 0;
				}
				public String ASADADDefault(){
				
					return null;
				
				}
				public String ASADADComment(){
				
				    return "";
				
				}
				public String ASADADPattern(){
				
					return "";
				
				}
				public String ASADADOriginalDbColumnName(){
				
					return "ASADAD";
				
				}

				
			    public String ASALPH;

				public String getASALPH () {
					return this.ASALPH;
				}

				public Boolean ASALPHIsNullable(){
				    return true;
				}
				public Boolean ASALPHIsKey(){
				    return false;
				}
				public Integer ASALPHLength(){
				    return 6;
				}
				public Integer ASALPHPrecision(){
				    return 0;
				}
				public String ASALPHDefault(){
				
					return null;
				
				}
				public String ASALPHComment(){
				
				    return "";
				
				}
				public String ASALPHPattern(){
				
					return "";
				
				}
				public String ASALPHOriginalDbColumnName(){
				
					return "ASALPH";
				
				}

				
			    public String ASSTAT;

				public String getASSTAT () {
					return this.ASSTAT;
				}

				public Boolean ASSTATIsNullable(){
				    return true;
				}
				public Boolean ASSTATIsKey(){
				    return false;
				}
				public Integer ASSTATLength(){
				    return 1;
				}
				public Integer ASSTATPrecision(){
				    return 0;
				}
				public String ASSTATDefault(){
				
					return null;
				
				}
				public String ASSTATComment(){
				
				    return "";
				
				}
				public String ASSTATPattern(){
				
					return "";
				
				}
				public String ASSTATOriginalDbColumnName(){
				
					return "ASSTAT";
				
				}

				
			    public String ASTYPE;

				public String getASTYPE () {
					return this.ASTYPE;
				}

				public Boolean ASTYPEIsNullable(){
				    return true;
				}
				public Boolean ASTYPEIsKey(){
				    return false;
				}
				public Integer ASTYPELength(){
				    return 1;
				}
				public Integer ASTYPEPrecision(){
				    return 0;
				}
				public String ASTYPEDefault(){
				
					return null;
				
				}
				public String ASTYPEComment(){
				
				    return "";
				
				}
				public String ASTYPEPattern(){
				
					return "";
				
				}
				public String ASTYPEOriginalDbColumnName(){
				
					return "ASTYPE";
				
				}

				
			    public String ASBOYN;

				public String getASBOYN () {
					return this.ASBOYN;
				}

				public Boolean ASBOYNIsNullable(){
				    return true;
				}
				public Boolean ASBOYNIsKey(){
				    return false;
				}
				public Integer ASBOYNLength(){
				    return 1;
				}
				public Integer ASBOYNPrecision(){
				    return 0;
				}
				public String ASBOYNDefault(){
				
					return null;
				
				}
				public String ASBOYNComment(){
				
				    return "";
				
				}
				public String ASBOYNPattern(){
				
					return "";
				
				}
				public String ASBOYNOriginalDbColumnName(){
				
					return "ASBOYN";
				
				}

				
			    public String ASAUTO;

				public String getASAUTO () {
					return this.ASAUTO;
				}

				public Boolean ASAUTOIsNullable(){
				    return true;
				}
				public Boolean ASAUTOIsKey(){
				    return false;
				}
				public Integer ASAUTOLength(){
				    return 1;
				}
				public Integer ASAUTOPrecision(){
				    return 0;
				}
				public String ASAUTODefault(){
				
					return null;
				
				}
				public String ASAUTOComment(){
				
				    return "";
				
				}
				public String ASAUTOPattern(){
				
					return "";
				
				}
				public String ASAUTOOriginalDbColumnName(){
				
					return "ASAUTO";
				
				}

				
			    public BigDecimal ASCNUM;

				public BigDecimal getASCNUM () {
					return this.ASCNUM;
				}

				public Boolean ASCNUMIsNullable(){
				    return true;
				}
				public Boolean ASCNUMIsKey(){
				    return false;
				}
				public Integer ASCNUMLength(){
				    return 6;
				}
				public Integer ASCNUMPrecision(){
				    return 0;
				}
				public String ASCNUMDefault(){
				
					return "";
				
				}
				public String ASCNUMComment(){
				
				    return "";
				
				}
				public String ASCNUMPattern(){
				
					return "";
				
				}
				public String ASCNUMOriginalDbColumnName(){
				
					return "ASCNUM";
				
				}

				
			    public Float ASCLRK;

				public Float getASCLRK () {
					return this.ASCLRK;
				}

				public Boolean ASCLRKIsNullable(){
				    return true;
				}
				public Boolean ASCLRKIsKey(){
				    return false;
				}
				public Integer ASCLRKLength(){
				    return 3;
				}
				public Integer ASCLRKPrecision(){
				    return 0;
				}
				public String ASCLRKDefault(){
				
					return "";
				
				}
				public String ASCLRKComment(){
				
				    return "";
				
				}
				public String ASCLRKPattern(){
				
					return "";
				
				}
				public String ASCLRKOriginalDbColumnName(){
				
					return "ASCLRK";
				
				}

				
			    public BigDecimal ASDFAC;

				public BigDecimal getASDFAC () {
					return this.ASDFAC;
				}

				public Boolean ASDFACIsNullable(){
				    return true;
				}
				public Boolean ASDFACIsKey(){
				    return false;
				}
				public Integer ASDFACLength(){
				    return 6;
				}
				public Integer ASDFACPrecision(){
				    return 0;
				}
				public String ASDFACDefault(){
				
					return "";
				
				}
				public String ASDFACComment(){
				
				    return "";
				
				}
				public String ASDFACPattern(){
				
					return "";
				
				}
				public String ASDFACOriginalDbColumnName(){
				
					return "ASDFAC";
				
				}

				
			    public BigDecimal ASSTR;

				public BigDecimal getASSTR () {
					return this.ASSTR;
				}

				public Boolean ASSTRIsNullable(){
				    return true;
				}
				public Boolean ASSTRIsKey(){
				    return false;
				}
				public Integer ASSTRLength(){
				    return 5;
				}
				public Integer ASSTRPrecision(){
				    return 0;
				}
				public String ASSTRDefault(){
				
					return "";
				
				}
				public String ASSTRComment(){
				
				    return "";
				
				}
				public String ASSTRPattern(){
				
					return "";
				
				}
				public String ASSTROriginalDbColumnName(){
				
					return "ASSTR";
				
				}

				
			    public Float ASVOTH;

				public Float getASVOTH () {
					return this.ASVOTH;
				}

				public Boolean ASVOTHIsNullable(){
				    return true;
				}
				public Boolean ASVOTHIsKey(){
				    return false;
				}
				public Integer ASVOTHLength(){
				    return 6;
				}
				public Integer ASVOTHPrecision(){
				    return 0;
				}
				public String ASVOTHDefault(){
				
					return "";
				
				}
				public String ASVOTHComment(){
				
				    return "";
				
				}
				public String ASVOTHPattern(){
				
					return "";
				
				}
				public String ASVOTHOriginalDbColumnName(){
				
					return "ASVOTH";
				
				}

				
			    public String ASBUYR;

				public String getASBUYR () {
					return this.ASBUYR;
				}

				public Boolean ASBUYRIsNullable(){
				    return true;
				}
				public Boolean ASBUYRIsKey(){
				    return false;
				}
				public Integer ASBUYRLength(){
				    return 3;
				}
				public Integer ASBUYRPrecision(){
				    return 0;
				}
				public String ASBUYRDefault(){
				
					return "";
				
				}
				public String ASBUYRComment(){
				
				    return "";
				
				}
				public String ASBUYRPattern(){
				
					return "";
				
				}
				public String ASBUYROriginalDbColumnName(){
				
					return "ASBUYR";
				
				}

				
			    public String ASCUST;

				public String getASCUST () {
					return this.ASCUST;
				}

				public Boolean ASCUSTIsNullable(){
				    return true;
				}
				public Boolean ASCUSTIsKey(){
				    return false;
				}
				public Integer ASCUSTLength(){
				    return 8;
				}
				public Integer ASCUSTPrecision(){
				    return 0;
				}
				public String ASCUSTDefault(){
				
					return "";
				
				}
				public String ASCUSTComment(){
				
				    return "";
				
				}
				public String ASCUSTPattern(){
				
					return "";
				
				}
				public String ASCUSTOriginalDbColumnName(){
				
					return "ASCUST";
				
				}

				
			    public BigDecimal ASCNIN;

				public BigDecimal getASCNIN () {
					return this.ASCNIN;
				}

				public Boolean ASCNINIsNullable(){
				    return true;
				}
				public Boolean ASCNINIsKey(){
				    return false;
				}
				public Integer ASCNINLength(){
				    return 1;
				}
				public Integer ASCNINPrecision(){
				    return 0;
				}
				public String ASCNINDefault(){
				
					return "";
				
				}
				public String ASCNINComment(){
				
				    return "";
				
				}
				public String ASCNINPattern(){
				
					return "";
				
				}
				public String ASCNINOriginalDbColumnName(){
				
					return "ASCNIN";
				
				}

				
			    public BigDecimal ASDTIN;

				public BigDecimal getASDTIN () {
					return this.ASDTIN;
				}

				public Boolean ASDTINIsNullable(){
				    return true;
				}
				public Boolean ASDTINIsKey(){
				    return false;
				}
				public Integer ASDTINLength(){
				    return 6;
				}
				public Integer ASDTINPrecision(){
				    return 0;
				}
				public String ASDTINDefault(){
				
					return "";
				
				}
				public String ASDTINComment(){
				
				    return "";
				
				}
				public String ASDTINPattern(){
				
					return "";
				
				}
				public String ASDTINOriginalDbColumnName(){
				
					return "ASDTIN";
				
				}

				
			    public BigDecimal ASCNLP;

				public BigDecimal getASCNLP () {
					return this.ASCNLP;
				}

				public Boolean ASCNLPIsNullable(){
				    return true;
				}
				public Boolean ASCNLPIsKey(){
				    return false;
				}
				public Integer ASCNLPLength(){
				    return 1;
				}
				public Integer ASCNLPPrecision(){
				    return 0;
				}
				public String ASCNLPDefault(){
				
					return "";
				
				}
				public String ASCNLPComment(){
				
				    return "";
				
				}
				public String ASCNLPPattern(){
				
					return "";
				
				}
				public String ASCNLPOriginalDbColumnName(){
				
					return "ASCNLP";
				
				}

				
			    public BigDecimal ASDTLP;

				public BigDecimal getASDTLP () {
					return this.ASDTLP;
				}

				public Boolean ASDTLPIsNullable(){
				    return true;
				}
				public Boolean ASDTLPIsKey(){
				    return false;
				}
				public Integer ASDTLPLength(){
				    return 6;
				}
				public Integer ASDTLPPrecision(){
				    return 0;
				}
				public String ASDTLPDefault(){
				
					return "";
				
				}
				public String ASDTLPComment(){
				
				    return "";
				
				}
				public String ASDTLPPattern(){
				
					return "";
				
				}
				public String ASDTLPOriginalDbColumnName(){
				
					return "ASDTLP";
				
				}

				
			    public BigDecimal ASAMLP;

				public BigDecimal getASAMLP () {
					return this.ASAMLP;
				}

				public Boolean ASAMLPIsNullable(){
				    return true;
				}
				public Boolean ASAMLPIsKey(){
				    return false;
				}
				public Integer ASAMLPLength(){
				    return 9;
				}
				public Integer ASAMLPPrecision(){
				    return 2;
				}
				public String ASAMLPDefault(){
				
					return "";
				
				}
				public String ASAMLPComment(){
				
				    return "";
				
				}
				public String ASAMLPPattern(){
				
					return "";
				
				}
				public String ASAMLPOriginalDbColumnName(){
				
					return "ASAMLP";
				
				}

				
			    public BigDecimal ASCKLP;

				public BigDecimal getASCKLP () {
					return this.ASCKLP;
				}

				public Boolean ASCKLPIsNullable(){
				    return true;
				}
				public Boolean ASCKLPIsKey(){
				    return false;
				}
				public Integer ASCKLPLength(){
				    return 6;
				}
				public Integer ASCKLPPrecision(){
				    return 0;
				}
				public String ASCKLPDefault(){
				
					return "";
				
				}
				public String ASCKLPComment(){
				
				    return "";
				
				}
				public String ASCKLPPattern(){
				
					return "";
				
				}
				public String ASCKLPOriginalDbColumnName(){
				
					return "ASCKLP";
				
				}

				
			    public BigDecimal ASBAL1;

				public BigDecimal getASBAL1 () {
					return this.ASBAL1;
				}

				public Boolean ASBAL1IsNullable(){
				    return true;
				}
				public Boolean ASBAL1IsKey(){
				    return false;
				}
				public Integer ASBAL1Length(){
				    return 9;
				}
				public Integer ASBAL1Precision(){
				    return 2;
				}
				public String ASBAL1Default(){
				
					return "";
				
				}
				public String ASBAL1Comment(){
				
				    return "";
				
				}
				public String ASBAL1Pattern(){
				
					return "";
				
				}
				public String ASBAL1OriginalDbColumnName(){
				
					return "ASBAL1";
				
				}

				
			    public BigDecimal ASBAL2;

				public BigDecimal getASBAL2 () {
					return this.ASBAL2;
				}

				public Boolean ASBAL2IsNullable(){
				    return true;
				}
				public Boolean ASBAL2IsKey(){
				    return false;
				}
				public Integer ASBAL2Length(){
				    return 9;
				}
				public Integer ASBAL2Precision(){
				    return 2;
				}
				public String ASBAL2Default(){
				
					return "";
				
				}
				public String ASBAL2Comment(){
				
				    return "";
				
				}
				public String ASBAL2Pattern(){
				
					return "";
				
				}
				public String ASBAL2OriginalDbColumnName(){
				
					return "ASBAL2";
				
				}

				
			    public String PONOT1;

				public String getPONOT1 () {
					return this.PONOT1;
				}

				public Boolean PONOT1IsNullable(){
				    return true;
				}
				public Boolean PONOT1IsKey(){
				    return false;
				}
				public Integer PONOT1Length(){
				    return 50;
				}
				public Integer PONOT1Precision(){
				    return 0;
				}
				public String PONOT1Default(){
				
					return "";
				
				}
				public String PONOT1Comment(){
				
				    return "";
				
				}
				public String PONOT1Pattern(){
				
					return "";
				
				}
				public String PONOT1OriginalDbColumnName(){
				
					return "PONOT1";
				
				}

				
			    public String PONOT2;

				public String getPONOT2 () {
					return this.PONOT2;
				}

				public Boolean PONOT2IsNullable(){
				    return true;
				}
				public Boolean PONOT2IsKey(){
				    return false;
				}
				public Integer PONOT2Length(){
				    return 50;
				}
				public Integer PONOT2Precision(){
				    return 0;
				}
				public String PONOT2Default(){
				
					return "";
				
				}
				public String PONOT2Comment(){
				
				    return "";
				
				}
				public String PONOT2Pattern(){
				
					return "";
				
				}
				public String PONOT2OriginalDbColumnName(){
				
					return "PONOT2";
				
				}

				
			    public String PONOT3;

				public String getPONOT3 () {
					return this.PONOT3;
				}

				public Boolean PONOT3IsNullable(){
				    return true;
				}
				public Boolean PONOT3IsKey(){
				    return false;
				}
				public Integer PONOT3Length(){
				    return 50;
				}
				public Integer PONOT3Precision(){
				    return 0;
				}
				public String PONOT3Default(){
				
					return "";
				
				}
				public String PONOT3Comment(){
				
				    return "";
				
				}
				public String PONOT3Pattern(){
				
					return "";
				
				}
				public String PONOT3OriginalDbColumnName(){
				
					return "PONOT3";
				
				}

				
			    public String RCNOT1;

				public String getRCNOT1 () {
					return this.RCNOT1;
				}

				public Boolean RCNOT1IsNullable(){
				    return true;
				}
				public Boolean RCNOT1IsKey(){
				    return false;
				}
				public Integer RCNOT1Length(){
				    return 50;
				}
				public Integer RCNOT1Precision(){
				    return 0;
				}
				public String RCNOT1Default(){
				
					return "";
				
				}
				public String RCNOT1Comment(){
				
				    return "";
				
				}
				public String RCNOT1Pattern(){
				
					return "";
				
				}
				public String RCNOT1OriginalDbColumnName(){
				
					return "RCNOT1";
				
				}

				
			    public String RCNOT2;

				public String getRCNOT2 () {
					return this.RCNOT2;
				}

				public Boolean RCNOT2IsNullable(){
				    return true;
				}
				public Boolean RCNOT2IsKey(){
				    return false;
				}
				public Integer RCNOT2Length(){
				    return 50;
				}
				public Integer RCNOT2Precision(){
				    return 0;
				}
				public String RCNOT2Default(){
				
					return "";
				
				}
				public String RCNOT2Comment(){
				
				    return "";
				
				}
				public String RCNOT2Pattern(){
				
					return "";
				
				}
				public String RCNOT2OriginalDbColumnName(){
				
					return "RCNOT2";
				
				}

				
			    public String RCNOT3;

				public String getRCNOT3 () {
					return this.RCNOT3;
				}

				public Boolean RCNOT3IsNullable(){
				    return true;
				}
				public Boolean RCNOT3IsKey(){
				    return false;
				}
				public Integer RCNOT3Length(){
				    return 50;
				}
				public Integer RCNOT3Precision(){
				    return 0;
				}
				public String RCNOT3Default(){
				
					return "";
				
				}
				public String RCNOT3Comment(){
				
				    return "";
				
				}
				public String RCNOT3Pattern(){
				
					return "";
				
				}
				public String RCNOT3OriginalDbColumnName(){
				
					return "RCNOT3";
				
				}

				
			    public String BYNOT1;

				public String getBYNOT1 () {
					return this.BYNOT1;
				}

				public Boolean BYNOT1IsNullable(){
				    return true;
				}
				public Boolean BYNOT1IsKey(){
				    return false;
				}
				public Integer BYNOT1Length(){
				    return 50;
				}
				public Integer BYNOT1Precision(){
				    return 0;
				}
				public String BYNOT1Default(){
				
					return "";
				
				}
				public String BYNOT1Comment(){
				
				    return "";
				
				}
				public String BYNOT1Pattern(){
				
					return "";
				
				}
				public String BYNOT1OriginalDbColumnName(){
				
					return "BYNOT1";
				
				}

				
			    public String BYNOT2;

				public String getBYNOT2 () {
					return this.BYNOT2;
				}

				public Boolean BYNOT2IsNullable(){
				    return true;
				}
				public Boolean BYNOT2IsKey(){
				    return false;
				}
				public Integer BYNOT2Length(){
				    return 50;
				}
				public Integer BYNOT2Precision(){
				    return 0;
				}
				public String BYNOT2Default(){
				
					return "";
				
				}
				public String BYNOT2Comment(){
				
				    return "";
				
				}
				public String BYNOT2Pattern(){
				
					return "";
				
				}
				public String BYNOT2OriginalDbColumnName(){
				
					return "BYNOT2";
				
				}

				
			    public String BYNOT3;

				public String getBYNOT3 () {
					return this.BYNOT3;
				}

				public Boolean BYNOT3IsNullable(){
				    return true;
				}
				public Boolean BYNOT3IsKey(){
				    return false;
				}
				public Integer BYNOT3Length(){
				    return 50;
				}
				public Integer BYNOT3Precision(){
				    return 0;
				}
				public String BYNOT3Default(){
				
					return "";
				
				}
				public String BYNOT3Comment(){
				
				    return "";
				
				}
				public String BYNOT3Pattern(){
				
					return "";
				
				}
				public String BYNOT3OriginalDbColumnName(){
				
					return "BYNOT3";
				
				}

				
			    public BigDecimal ASRVFR;

				public BigDecimal getASRVFR () {
					return this.ASRVFR;
				}

				public Boolean ASRVFRIsNullable(){
				    return true;
				}
				public Boolean ASRVFRIsKey(){
				    return false;
				}
				public Integer ASRVFRLength(){
				    return 3;
				}
				public Integer ASRVFRPrecision(){
				    return 0;
				}
				public String ASRVFRDefault(){
				
					return "";
				
				}
				public String ASRVFRComment(){
				
				    return "";
				
				}
				public String ASRVFRPattern(){
				
					return "";
				
				}
				public String ASRVFROriginalDbColumnName(){
				
					return "ASRVFR";
				
				}

				
			    public BigDecimal ASLEAD;

				public BigDecimal getASLEAD () {
					return this.ASLEAD;
				}

				public Boolean ASLEADIsNullable(){
				    return true;
				}
				public Boolean ASLEADIsKey(){
				    return false;
				}
				public Integer ASLEADLength(){
				    return 3;
				}
				public Integer ASLEADPrecision(){
				    return 0;
				}
				public String ASLEADDefault(){
				
					return "";
				
				}
				public String ASLEADComment(){
				
				    return "";
				
				}
				public String ASLEADPattern(){
				
					return "";
				
				}
				public String ASLEADOriginalDbColumnName(){
				
					return "ASLEAD";
				
				}

				
			    public BigDecimal ASTPO;

				public BigDecimal getASTPO () {
					return this.ASTPO;
				}

				public Boolean ASTPOIsNullable(){
				    return true;
				}
				public Boolean ASTPOIsKey(){
				    return false;
				}
				public Integer ASTPOLength(){
				    return 6;
				}
				public Integer ASTPOPrecision(){
				    return 0;
				}
				public String ASTPODefault(){
				
					return "";
				
				}
				public String ASTPOComment(){
				
				    return "";
				
				}
				public String ASTPOPattern(){
				
					return "";
				
				}
				public String ASTPOOriginalDbColumnName(){
				
					return "ASTPO";
				
				}

				
			    public BigDecimal ASTLT;

				public BigDecimal getASTLT () {
					return this.ASTLT;
				}

				public Boolean ASTLTIsNullable(){
				    return true;
				}
				public Boolean ASTLTIsKey(){
				    return false;
				}
				public Integer ASTLTLength(){
				    return 9;
				}
				public Integer ASTLTPrecision(){
				    return 0;
				}
				public String ASTLTDefault(){
				
					return "";
				
				}
				public String ASTLTComment(){
				
				    return "";
				
				}
				public String ASTLTPattern(){
				
					return "";
				
				}
				public String ASTLTOriginalDbColumnName(){
				
					return "ASTLT";
				
				}

				
			    public Float ASTRMS;

				public Float getASTRMS () {
					return this.ASTRMS;
				}

				public Boolean ASTRMSIsNullable(){
				    return true;
				}
				public Boolean ASTRMSIsKey(){
				    return false;
				}
				public Integer ASTRMSLength(){
				    return 3;
				}
				public Integer ASTRMSPrecision(){
				    return 0;
				}
				public String ASTRMSDefault(){
				
					return "";
				
				}
				public String ASTRMSComment(){
				
				    return "";
				
				}
				public String ASTRMSPattern(){
				
					return "";
				
				}
				public String ASTRMSOriginalDbColumnName(){
				
					return "ASTRMS";
				
				}

				
			    public String ASTIND;

				public String getASTIND () {
					return this.ASTIND;
				}

				public Boolean ASTINDIsNullable(){
				    return true;
				}
				public Boolean ASTINDIsKey(){
				    return false;
				}
				public Integer ASTINDLength(){
				    return 1;
				}
				public Integer ASTINDPrecision(){
				    return 0;
				}
				public String ASTINDDefault(){
				
					return "";
				
				}
				public String ASTINDComment(){
				
				    return "";
				
				}
				public String ASTINDPattern(){
				
					return "";
				
				}
				public String ASTINDOriginalDbColumnName(){
				
					return "ASTIND";
				
				}

				
			    public BigDecimal ASPUSH;

				public BigDecimal getASPUSH () {
					return this.ASPUSH;
				}

				public Boolean ASPUSHIsNullable(){
				    return true;
				}
				public Boolean ASPUSHIsKey(){
				    return false;
				}
				public Integer ASPUSHLength(){
				    return 3;
				}
				public Integer ASPUSHPrecision(){
				    return 0;
				}
				public String ASPUSHDefault(){
				
					return "";
				
				}
				public String ASPUSHComment(){
				
				    return "";
				
				}
				public String ASPUSHPattern(){
				
					return "";
				
				}
				public String ASPUSHOriginalDbColumnName(){
				
					return "ASPUSH";
				
				}

				
			    public String ASTDSC;

				public String getASTDSC () {
					return this.ASTDSC;
				}

				public Boolean ASTDSCIsNullable(){
				    return true;
				}
				public Boolean ASTDSCIsKey(){
				    return false;
				}
				public Integer ASTDSCLength(){
				    return 1;
				}
				public Integer ASTDSCPrecision(){
				    return 0;
				}
				public String ASTDSCDefault(){
				
					return "";
				
				}
				public String ASTDSCComment(){
				
				    return "";
				
				}
				public String ASTDSCPattern(){
				
					return "";
				
				}
				public String ASTDSCOriginalDbColumnName(){
				
					return "ASTDSC";
				
				}

				
			    public String ASFPCD;

				public String getASFPCD () {
					return this.ASFPCD;
				}

				public Boolean ASFPCDIsNullable(){
				    return true;
				}
				public Boolean ASFPCDIsKey(){
				    return false;
				}
				public Integer ASFPCDLength(){
				    return 1;
				}
				public Integer ASFPCDPrecision(){
				    return 0;
				}
				public String ASFPCDDefault(){
				
					return "";
				
				}
				public String ASFPCDComment(){
				
				    return "";
				
				}
				public String ASFPCDPattern(){
				
					return "";
				
				}
				public String ASFPCDOriginalDbColumnName(){
				
					return "ASFPCD";
				
				}

				
			    public BigDecimal ASFALP;

				public BigDecimal getASFALP () {
					return this.ASFALP;
				}

				public Boolean ASFALPIsNullable(){
				    return true;
				}
				public Boolean ASFALPIsKey(){
				    return false;
				}
				public Integer ASFALPLength(){
				    return 5;
				}
				public Integer ASFALPPrecision(){
				    return 3;
				}
				public String ASFALPDefault(){
				
					return "";
				
				}
				public String ASFALPComment(){
				
				    return "";
				
				}
				public String ASFALPPattern(){
				
					return "";
				
				}
				public String ASFALPOriginalDbColumnName(){
				
					return "ASFALP";
				
				}

				
			    public BigDecimal ASFALN;

				public BigDecimal getASFALN () {
					return this.ASFALN;
				}

				public Boolean ASFALNIsNullable(){
				    return true;
				}
				public Boolean ASFALNIsKey(){
				    return false;
				}
				public Integer ASFALNLength(){
				    return 6;
				}
				public Integer ASFALNPrecision(){
				    return 2;
				}
				public String ASFALNDefault(){
				
					return "";
				
				}
				public String ASFALNComment(){
				
				    return "";
				
				}
				public String ASFALNPattern(){
				
					return "";
				
				}
				public String ASFALNOriginalDbColumnName(){
				
					return "ASFALN";
				
				}

				
			    public String ASFOBC;

				public String getASFOBC () {
					return this.ASFOBC;
				}

				public Boolean ASFOBCIsNullable(){
				    return true;
				}
				public Boolean ASFOBCIsKey(){
				    return false;
				}
				public Integer ASFOBCLength(){
				    return 1;
				}
				public Integer ASFOBCPrecision(){
				    return 0;
				}
				public String ASFOBCDefault(){
				
					return "";
				
				}
				public String ASFOBCComment(){
				
				    return "";
				
				}
				public String ASFOBCPattern(){
				
					return "";
				
				}
				public String ASFOBCOriginalDbColumnName(){
				
					return "ASFOBC";
				
				}

				
			    public String ASSHP1;

				public String getASSHP1 () {
					return this.ASSHP1;
				}

				public Boolean ASSHP1IsNullable(){
				    return true;
				}
				public Boolean ASSHP1IsKey(){
				    return false;
				}
				public Integer ASSHP1Length(){
				    return 20;
				}
				public Integer ASSHP1Precision(){
				    return 0;
				}
				public String ASSHP1Default(){
				
					return "";
				
				}
				public String ASSHP1Comment(){
				
				    return "";
				
				}
				public String ASSHP1Pattern(){
				
					return "";
				
				}
				public String ASSHP1OriginalDbColumnName(){
				
					return "ASSHP1";
				
				}

				
			    public String ASSHP2;

				public String getASSHP2 () {
					return this.ASSHP2;
				}

				public Boolean ASSHP2IsNullable(){
				    return true;
				}
				public Boolean ASSHP2IsKey(){
				    return false;
				}
				public Integer ASSHP2Length(){
				    return 20;
				}
				public Integer ASSHP2Precision(){
				    return 0;
				}
				public String ASSHP2Default(){
				
					return "";
				
				}
				public String ASSHP2Comment(){
				
				    return "";
				
				}
				public String ASSHP2Pattern(){
				
					return "";
				
				}
				public String ASSHP2OriginalDbColumnName(){
				
					return "ASSHP2";
				
				}

				
			    public String ASSHPP;

				public String getASSHPP () {
					return this.ASSHPP;
				}

				public Boolean ASSHPPIsNullable(){
				    return true;
				}
				public Boolean ASSHPPIsKey(){
				    return false;
				}
				public Integer ASSHPPLength(){
				    return 20;
				}
				public Integer ASSHPPPrecision(){
				    return 0;
				}
				public String ASSHPPDefault(){
				
					return "";
				
				}
				public String ASSHPPComment(){
				
				    return "";
				
				}
				public String ASSHPPPattern(){
				
					return "";
				
				}
				public String ASSHPPOriginalDbColumnName(){
				
					return "ASSHPP";
				
				}

				
			    public String ASSHPC;

				public String getASSHPC () {
					return this.ASSHPC;
				}

				public Boolean ASSHPCIsNullable(){
				    return true;
				}
				public Boolean ASSHPCIsKey(){
				    return false;
				}
				public Integer ASSHPCLength(){
				    return 20;
				}
				public Integer ASSHPCPrecision(){
				    return 0;
				}
				public String ASSHPCDefault(){
				
					return "";
				
				}
				public String ASSHPCComment(){
				
				    return "";
				
				}
				public String ASSHPCPattern(){
				
					return "";
				
				}
				public String ASSHPCOriginalDbColumnName(){
				
					return "ASSHPC";
				
				}

				
			    public String ASMINC;

				public String getASMINC () {
					return this.ASMINC;
				}

				public Boolean ASMINCIsNullable(){
				    return true;
				}
				public Boolean ASMINCIsKey(){
				    return false;
				}
				public Integer ASMINCLength(){
				    return 1;
				}
				public Integer ASMINCPrecision(){
				    return 0;
				}
				public String ASMINCDefault(){
				
					return "";
				
				}
				public String ASMINCComment(){
				
				    return "";
				
				}
				public String ASMINCPattern(){
				
					return "";
				
				}
				public String ASMINCOriginalDbColumnName(){
				
					return "ASMINC";
				
				}

				
			    public BigDecimal ASMINA;

				public BigDecimal getASMINA () {
					return this.ASMINA;
				}

				public Boolean ASMINAIsNullable(){
				    return true;
				}
				public Boolean ASMINAIsKey(){
				    return false;
				}
				public Integer ASMINALength(){
				    return 6;
				}
				public Integer ASMINAPrecision(){
				    return 0;
				}
				public String ASMINADefault(){
				
					return "";
				
				}
				public String ASMINAComment(){
				
				    return "";
				
				}
				public String ASMINAPattern(){
				
					return "";
				
				}
				public String ASMINAOriginalDbColumnName(){
				
					return "ASMINA";
				
				}

				
			    public BigDecimal ASTRKP;

				public BigDecimal getASTRKP () {
					return this.ASTRKP;
				}

				public Boolean ASTRKPIsNullable(){
				    return true;
				}
				public Boolean ASTRKPIsKey(){
				    return false;
				}
				public Integer ASTRKPLength(){
				    return 5;
				}
				public Integer ASTRKPPrecision(){
				    return 3;
				}
				public String ASTRKPDefault(){
				
					return "";
				
				}
				public String ASTRKPComment(){
				
				    return "";
				
				}
				public String ASTRKPPattern(){
				
					return "";
				
				}
				public String ASTRKPOriginalDbColumnName(){
				
					return "ASTRKP";
				
				}

				
			    public BigDecimal ASTRKA;

				public BigDecimal getASTRKA () {
					return this.ASTRKA;
				}

				public Boolean ASTRKAIsNullable(){
				    return true;
				}
				public Boolean ASTRKAIsKey(){
				    return false;
				}
				public Integer ASTRKALength(){
				    return 6;
				}
				public Integer ASTRKAPrecision(){
				    return 2;
				}
				public String ASTRKADefault(){
				
					return "";
				
				}
				public String ASTRKAComment(){
				
				    return "";
				
				}
				public String ASTRKAPattern(){
				
					return "";
				
				}
				public String ASTRKAOriginalDbColumnName(){
				
					return "ASTRKA";
				
				}

				
			    public BigDecimal ASTARP;

				public BigDecimal getASTARP () {
					return this.ASTARP;
				}

				public Boolean ASTARPIsNullable(){
				    return true;
				}
				public Boolean ASTARPIsKey(){
				    return false;
				}
				public Integer ASTARPLength(){
				    return 5;
				}
				public Integer ASTARPPrecision(){
				    return 2;
				}
				public String ASTARPDefault(){
				
					return "";
				
				}
				public String ASTARPComment(){
				
				    return "";
				
				}
				public String ASTARPPattern(){
				
					return "";
				
				}
				public String ASTARPOriginalDbColumnName(){
				
					return "ASTARP";
				
				}

				
			    public BigDecimal ASSTOP;

				public BigDecimal getASSTOP () {
					return this.ASSTOP;
				}

				public Boolean ASSTOPIsNullable(){
				    return true;
				}
				public Boolean ASSTOPIsKey(){
				    return false;
				}
				public Integer ASSTOPLength(){
				    return 5;
				}
				public Integer ASSTOPPrecision(){
				    return 2;
				}
				public String ASSTOPDefault(){
				
					return "";
				
				}
				public String ASSTOPComment(){
				
				    return "";
				
				}
				public String ASSTOPPattern(){
				
					return "";
				
				}
				public String ASSTOPOriginalDbColumnName(){
				
					return "ASSTOP";
				
				}

				
			    public BigDecimal ASSKID;

				public BigDecimal getASSKID () {
					return this.ASSKID;
				}

				public Boolean ASSKIDIsNullable(){
				    return true;
				}
				public Boolean ASSKIDIsKey(){
				    return false;
				}
				public Integer ASSKIDLength(){
				    return 5;
				}
				public Integer ASSKIDPrecision(){
				    return 2;
				}
				public String ASSKIDDefault(){
				
					return "";
				
				}
				public String ASSKIDComment(){
				
				    return "";
				
				}
				public String ASSKIDPattern(){
				
					return "";
				
				}
				public String ASSKIDOriginalDbColumnName(){
				
					return "ASSKID";
				
				}

				
			    public BigDecimal ASOTHQ;

				public BigDecimal getASOTHQ () {
					return this.ASOTHQ;
				}

				public Boolean ASOTHQIsNullable(){
				    return true;
				}
				public Boolean ASOTHQIsKey(){
				    return false;
				}
				public Integer ASOTHQLength(){
				    return 5;
				}
				public Integer ASOTHQPrecision(){
				    return 2;
				}
				public String ASOTHQDefault(){
				
					return "";
				
				}
				public String ASOTHQComment(){
				
				    return "";
				
				}
				public String ASOTHQPattern(){
				
					return "";
				
				}
				public String ASOTHQOriginalDbColumnName(){
				
					return "ASOTHQ";
				
				}

				
			    public BigDecimal ASOTHP;

				public BigDecimal getASOTHP () {
					return this.ASOTHP;
				}

				public Boolean ASOTHPIsNullable(){
				    return true;
				}
				public Boolean ASOTHPIsKey(){
				    return false;
				}
				public Integer ASOTHPLength(){
				    return 5;
				}
				public Integer ASOTHPPrecision(){
				    return 3;
				}
				public String ASOTHPDefault(){
				
					return "";
				
				}
				public String ASOTHPComment(){
				
				    return "";
				
				}
				public String ASOTHPPattern(){
				
					return "";
				
				}
				public String ASOTHPOriginalDbColumnName(){
				
					return "ASOTHP";
				
				}

				
			    public String ASRTCD;

				public String getASRTCD () {
					return this.ASRTCD;
				}

				public Boolean ASRTCDIsNullable(){
				    return true;
				}
				public Boolean ASRTCDIsKey(){
				    return false;
				}
				public Integer ASRTCDLength(){
				    return 1;
				}
				public Integer ASRTCDPrecision(){
				    return 0;
				}
				public String ASRTCDDefault(){
				
					return "";
				
				}
				public String ASRTCDComment(){
				
				    return "";
				
				}
				public String ASRTCDPattern(){
				
					return "";
				
				}
				public String ASRTCDOriginalDbColumnName(){
				
					return "ASRTCD";
				
				}

				
			    public BigDecimal ASVOLP;

				public BigDecimal getASVOLP () {
					return this.ASVOLP;
				}

				public Boolean ASVOLPIsNullable(){
				    return true;
				}
				public Boolean ASVOLPIsKey(){
				    return false;
				}
				public Integer ASVOLPLength(){
				    return 5;
				}
				public Integer ASVOLPPrecision(){
				    return 3;
				}
				public String ASVOLPDefault(){
				
					return "";
				
				}
				public String ASVOLPComment(){
				
				    return "";
				
				}
				public String ASVOLPPattern(){
				
					return "";
				
				}
				public String ASVOLPOriginalDbColumnName(){
				
					return "ASVOLP";
				
				}

				
			    public BigDecimal ASVOLN;

				public BigDecimal getASVOLN () {
					return this.ASVOLN;
				}

				public Boolean ASVOLNIsNullable(){
				    return true;
				}
				public Boolean ASVOLNIsKey(){
				    return false;
				}
				public Integer ASVOLNLength(){
				    return 6;
				}
				public Integer ASVOLNPrecision(){
				    return 2;
				}
				public String ASVOLNDefault(){
				
					return "";
				
				}
				public String ASVOLNComment(){
				
				    return "";
				
				}
				public String ASVOLNPattern(){
				
					return "";
				
				}
				public String ASVOLNOriginalDbColumnName(){
				
					return "ASVOLN";
				
				}

				
			    public BigDecimal ASREBP;

				public BigDecimal getASREBP () {
					return this.ASREBP;
				}

				public Boolean ASREBPIsNullable(){
				    return true;
				}
				public Boolean ASREBPIsKey(){
				    return false;
				}
				public Integer ASREBPLength(){
				    return 5;
				}
				public Integer ASREBPPrecision(){
				    return 3;
				}
				public String ASREBPDefault(){
				
					return "";
				
				}
				public String ASREBPComment(){
				
				    return "";
				
				}
				public String ASREBPPattern(){
				
					return "";
				
				}
				public String ASREBPOriginalDbColumnName(){
				
					return "ASREBP";
				
				}

				
			    public BigDecimal ASREBN;

				public BigDecimal getASREBN () {
					return this.ASREBN;
				}

				public Boolean ASREBNIsNullable(){
				    return true;
				}
				public Boolean ASREBNIsKey(){
				    return false;
				}
				public Integer ASREBNLength(){
				    return 6;
				}
				public Integer ASREBNPrecision(){
				    return 2;
				}
				public String ASREBNDefault(){
				
					return "";
				
				}
				public String ASREBNComment(){
				
				    return "";
				
				}
				public String ASREBNPattern(){
				
					return "";
				
				}
				public String ASREBNOriginalDbColumnName(){
				
					return "ASREBN";
				
				}

				
			    public BigDecimal ASALLP;

				public BigDecimal getASALLP () {
					return this.ASALLP;
				}

				public Boolean ASALLPIsNullable(){
				    return true;
				}
				public Boolean ASALLPIsKey(){
				    return false;
				}
				public Integer ASALLPLength(){
				    return 5;
				}
				public Integer ASALLPPrecision(){
				    return 3;
				}
				public String ASALLPDefault(){
				
					return "";
				
				}
				public String ASALLPComment(){
				
				    return "";
				
				}
				public String ASALLPPattern(){
				
					return "";
				
				}
				public String ASALLPOriginalDbColumnName(){
				
					return "ASALLP";
				
				}

				
			    public BigDecimal ASALLN;

				public BigDecimal getASALLN () {
					return this.ASALLN;
				}

				public Boolean ASALLNIsNullable(){
				    return true;
				}
				public Boolean ASALLNIsKey(){
				    return false;
				}
				public Integer ASALLNLength(){
				    return 6;
				}
				public Integer ASALLNPrecision(){
				    return 2;
				}
				public String ASALLNDefault(){
				
					return "";
				
				}
				public String ASALLNComment(){
				
				    return "";
				
				}
				public String ASALLNPattern(){
				
					return "";
				
				}
				public String ASALLNOriginalDbColumnName(){
				
					return "ASALLN";
				
				}

				
			    public BigDecimal APPR01;

				public BigDecimal getAPPR01 () {
					return this.APPR01;
				}

				public Boolean APPR01IsNullable(){
				    return true;
				}
				public Boolean APPR01IsKey(){
				    return false;
				}
				public Integer APPR01Length(){
				    return 10;
				}
				public Integer APPR01Precision(){
				    return 2;
				}
				public String APPR01Default(){
				
					return "";
				
				}
				public String APPR01Comment(){
				
				    return "";
				
				}
				public String APPR01Pattern(){
				
					return "";
				
				}
				public String APPR01OriginalDbColumnName(){
				
					return "APPR01";
				
				}

				
			    public BigDecimal APPR02;

				public BigDecimal getAPPR02 () {
					return this.APPR02;
				}

				public Boolean APPR02IsNullable(){
				    return true;
				}
				public Boolean APPR02IsKey(){
				    return false;
				}
				public Integer APPR02Length(){
				    return 10;
				}
				public Integer APPR02Precision(){
				    return 2;
				}
				public String APPR02Default(){
				
					return "";
				
				}
				public String APPR02Comment(){
				
				    return "";
				
				}
				public String APPR02Pattern(){
				
					return "";
				
				}
				public String APPR02OriginalDbColumnName(){
				
					return "APPR02";
				
				}

				
			    public BigDecimal APPR03;

				public BigDecimal getAPPR03 () {
					return this.APPR03;
				}

				public Boolean APPR03IsNullable(){
				    return true;
				}
				public Boolean APPR03IsKey(){
				    return false;
				}
				public Integer APPR03Length(){
				    return 10;
				}
				public Integer APPR03Precision(){
				    return 2;
				}
				public String APPR03Default(){
				
					return "";
				
				}
				public String APPR03Comment(){
				
				    return "";
				
				}
				public String APPR03Pattern(){
				
					return "";
				
				}
				public String APPR03OriginalDbColumnName(){
				
					return "APPR03";
				
				}

				
			    public BigDecimal APPR04;

				public BigDecimal getAPPR04 () {
					return this.APPR04;
				}

				public Boolean APPR04IsNullable(){
				    return true;
				}
				public Boolean APPR04IsKey(){
				    return false;
				}
				public Integer APPR04Length(){
				    return 10;
				}
				public Integer APPR04Precision(){
				    return 2;
				}
				public String APPR04Default(){
				
					return "";
				
				}
				public String APPR04Comment(){
				
				    return "";
				
				}
				public String APPR04Pattern(){
				
					return "";
				
				}
				public String APPR04OriginalDbColumnName(){
				
					return "APPR04";
				
				}

				
			    public BigDecimal APPR05;

				public BigDecimal getAPPR05 () {
					return this.APPR05;
				}

				public Boolean APPR05IsNullable(){
				    return true;
				}
				public Boolean APPR05IsKey(){
				    return false;
				}
				public Integer APPR05Length(){
				    return 10;
				}
				public Integer APPR05Precision(){
				    return 2;
				}
				public String APPR05Default(){
				
					return "";
				
				}
				public String APPR05Comment(){
				
				    return "";
				
				}
				public String APPR05Pattern(){
				
					return "";
				
				}
				public String APPR05OriginalDbColumnName(){
				
					return "APPR05";
				
				}

				
			    public BigDecimal APPR06;

				public BigDecimal getAPPR06 () {
					return this.APPR06;
				}

				public Boolean APPR06IsNullable(){
				    return true;
				}
				public Boolean APPR06IsKey(){
				    return false;
				}
				public Integer APPR06Length(){
				    return 10;
				}
				public Integer APPR06Precision(){
				    return 2;
				}
				public String APPR06Default(){
				
					return "";
				
				}
				public String APPR06Comment(){
				
				    return "";
				
				}
				public String APPR06Pattern(){
				
					return "";
				
				}
				public String APPR06OriginalDbColumnName(){
				
					return "APPR06";
				
				}

				
			    public BigDecimal APPR07;

				public BigDecimal getAPPR07 () {
					return this.APPR07;
				}

				public Boolean APPR07IsNullable(){
				    return true;
				}
				public Boolean APPR07IsKey(){
				    return false;
				}
				public Integer APPR07Length(){
				    return 10;
				}
				public Integer APPR07Precision(){
				    return 2;
				}
				public String APPR07Default(){
				
					return "";
				
				}
				public String APPR07Comment(){
				
				    return "";
				
				}
				public String APPR07Pattern(){
				
					return "";
				
				}
				public String APPR07OriginalDbColumnName(){
				
					return "APPR07";
				
				}

				
			    public BigDecimal APPR08;

				public BigDecimal getAPPR08 () {
					return this.APPR08;
				}

				public Boolean APPR08IsNullable(){
				    return true;
				}
				public Boolean APPR08IsKey(){
				    return false;
				}
				public Integer APPR08Length(){
				    return 10;
				}
				public Integer APPR08Precision(){
				    return 2;
				}
				public String APPR08Default(){
				
					return "";
				
				}
				public String APPR08Comment(){
				
				    return "";
				
				}
				public String APPR08Pattern(){
				
					return "";
				
				}
				public String APPR08OriginalDbColumnName(){
				
					return "APPR08";
				
				}

				
			    public BigDecimal APPR09;

				public BigDecimal getAPPR09 () {
					return this.APPR09;
				}

				public Boolean APPR09IsNullable(){
				    return true;
				}
				public Boolean APPR09IsKey(){
				    return false;
				}
				public Integer APPR09Length(){
				    return 10;
				}
				public Integer APPR09Precision(){
				    return 2;
				}
				public String APPR09Default(){
				
					return "";
				
				}
				public String APPR09Comment(){
				
				    return "";
				
				}
				public String APPR09Pattern(){
				
					return "";
				
				}
				public String APPR09OriginalDbColumnName(){
				
					return "APPR09";
				
				}

				
			    public BigDecimal APPR10;

				public BigDecimal getAPPR10 () {
					return this.APPR10;
				}

				public Boolean APPR10IsNullable(){
				    return true;
				}
				public Boolean APPR10IsKey(){
				    return false;
				}
				public Integer APPR10Length(){
				    return 10;
				}
				public Integer APPR10Precision(){
				    return 2;
				}
				public String APPR10Default(){
				
					return "";
				
				}
				public String APPR10Comment(){
				
				    return "";
				
				}
				public String APPR10Pattern(){
				
					return "";
				
				}
				public String APPR10OriginalDbColumnName(){
				
					return "APPR10";
				
				}

				
			    public BigDecimal APPR11;

				public BigDecimal getAPPR11 () {
					return this.APPR11;
				}

				public Boolean APPR11IsNullable(){
				    return true;
				}
				public Boolean APPR11IsKey(){
				    return false;
				}
				public Integer APPR11Length(){
				    return 10;
				}
				public Integer APPR11Precision(){
				    return 2;
				}
				public String APPR11Default(){
				
					return "";
				
				}
				public String APPR11Comment(){
				
				    return "";
				
				}
				public String APPR11Pattern(){
				
					return "";
				
				}
				public String APPR11OriginalDbColumnName(){
				
					return "APPR11";
				
				}

				
			    public BigDecimal APPR12;

				public BigDecimal getAPPR12 () {
					return this.APPR12;
				}

				public Boolean APPR12IsNullable(){
				    return true;
				}
				public Boolean APPR12IsKey(){
				    return false;
				}
				public Integer APPR12Length(){
				    return 10;
				}
				public Integer APPR12Precision(){
				    return 2;
				}
				public String APPR12Default(){
				
					return "";
				
				}
				public String APPR12Comment(){
				
				    return "";
				
				}
				public String APPR12Pattern(){
				
					return "";
				
				}
				public String APPR12OriginalDbColumnName(){
				
					return "APPR12";
				
				}

				
			    public BigDecimal APPR13;

				public BigDecimal getAPPR13 () {
					return this.APPR13;
				}

				public Boolean APPR13IsNullable(){
				    return true;
				}
				public Boolean APPR13IsKey(){
				    return false;
				}
				public Integer APPR13Length(){
				    return 10;
				}
				public Integer APPR13Precision(){
				    return 2;
				}
				public String APPR13Default(){
				
					return "";
				
				}
				public String APPR13Comment(){
				
				    return "";
				
				}
				public String APPR13Pattern(){
				
					return "";
				
				}
				public String APPR13OriginalDbColumnName(){
				
					return "APPR13";
				
				}

				
			    public BigDecimal APMRGP;

				public BigDecimal getAPMRGP () {
					return this.APMRGP;
				}

				public Boolean APMRGPIsNullable(){
				    return true;
				}
				public Boolean APMRGPIsKey(){
				    return false;
				}
				public Integer APMRGPLength(){
				    return 5;
				}
				public Integer APMRGPPrecision(){
				    return 1;
				}
				public String APMRGPDefault(){
				
					return "";
				
				}
				public String APMRGPComment(){
				
				    return "";
				
				}
				public String APMRGPPattern(){
				
					return "";
				
				}
				public String APMRGPOriginalDbColumnName(){
				
					return "APMRGP";
				
				}

				
			    public BigDecimal AGMROI;

				public BigDecimal getAGMROI () {
					return this.AGMROI;
				}

				public Boolean AGMROIIsNullable(){
				    return true;
				}
				public Boolean AGMROIIsKey(){
				    return false;
				}
				public Integer AGMROILength(){
				    return 5;
				}
				public Integer AGMROIPrecision(){
				    return 1;
				}
				public String AGMROIDefault(){
				
					return "";
				
				}
				public String AGMROIComment(){
				
				    return "";
				
				}
				public String AGMROIPattern(){
				
					return "";
				
				}
				public String AGMROIOriginalDbColumnName(){
				
					return "AGMROI";
				
				}

				
			    public BigDecimal APTRNS;

				public BigDecimal getAPTRNS () {
					return this.APTRNS;
				}

				public Boolean APTRNSIsNullable(){
				    return true;
				}
				public Boolean APTRNSIsKey(){
				    return false;
				}
				public Integer APTRNSLength(){
				    return 5;
				}
				public Integer APTRNSPrecision(){
				    return 1;
				}
				public String APTRNSDefault(){
				
					return "";
				
				}
				public String APTRNSComment(){
				
				    return "";
				
				}
				public String APTRNSPattern(){
				
					return "";
				
				}
				public String APTRNSOriginalDbColumnName(){
				
					return "APTRNS";
				
				}

				
			    public BigDecimal APAVOH;

				public BigDecimal getAPAVOH () {
					return this.APAVOH;
				}

				public Boolean APAVOHIsNullable(){
				    return true;
				}
				public Boolean APAVOHIsKey(){
				    return false;
				}
				public Integer APAVOHLength(){
				    return 10;
				}
				public Integer APAVOHPrecision(){
				    return 2;
				}
				public String APAVOHDefault(){
				
					return "";
				
				}
				public String APAVOHComment(){
				
				    return "";
				
				}
				public String APAVOHPattern(){
				
					return "";
				
				}
				public String APAVOHOriginalDbColumnName(){
				
					return "APAVOH";
				
				}

				
			    public BigDecimal APPOBO;

				public BigDecimal getAPPOBO () {
					return this.APPOBO;
				}

				public Boolean APPOBOIsNullable(){
				    return true;
				}
				public Boolean APPOBOIsKey(){
				    return false;
				}
				public Integer APPOBOLength(){
				    return 3;
				}
				public Integer APPOBOPrecision(){
				    return 0;
				}
				public String APPOBODefault(){
				
					return "";
				
				}
				public String APPOBOComment(){
				
				    return "";
				
				}
				public String APPOBOPattern(){
				
					return "";
				
				}
				public String APPOBOOriginalDbColumnName(){
				
					return "APPOBO";
				
				}

				
			    public BigDecimal APPOSS;

				public BigDecimal getAPPOSS () {
					return this.APPOSS;
				}

				public Boolean APPOSSIsNullable(){
				    return true;
				}
				public Boolean APPOSSIsKey(){
				    return false;
				}
				public Integer APPOSSLength(){
				    return 3;
				}
				public Integer APPOSSPrecision(){
				    return 0;
				}
				public String APPOSSDefault(){
				
					return "";
				
				}
				public String APPOSSComment(){
				
				    return "";
				
				}
				public String APPOSSPattern(){
				
					return "";
				
				}
				public String APPOSSOriginalDbColumnName(){
				
					return "APPOSS";
				
				}

				
			    public BigDecimal APPOLT;

				public BigDecimal getAPPOLT () {
					return this.APPOLT;
				}

				public Boolean APPOLTIsNullable(){
				    return true;
				}
				public Boolean APPOLTIsKey(){
				    return false;
				}
				public Integer APPOLTLength(){
				    return 3;
				}
				public Integer APPOLTPrecision(){
				    return 0;
				}
				public String APPOLTDefault(){
				
					return "";
				
				}
				public String APPOLTComment(){
				
				    return "";
				
				}
				public String APPOLTPattern(){
				
					return "";
				
				}
				public String APPOLTOriginalDbColumnName(){
				
					return "APPOLT";
				
				}

				
			    public BigDecimal APLY01;

				public BigDecimal getAPLY01 () {
					return this.APLY01;
				}

				public Boolean APLY01IsNullable(){
				    return true;
				}
				public Boolean APLY01IsKey(){
				    return false;
				}
				public Integer APLY01Length(){
				    return 5;
				}
				public Integer APLY01Precision(){
				    return 0;
				}
				public String APLY01Default(){
				
					return "";
				
				}
				public String APLY01Comment(){
				
				    return "";
				
				}
				public String APLY01Pattern(){
				
					return "";
				
				}
				public String APLY01OriginalDbColumnName(){
				
					return "APLY01";
				
				}

				
			    public BigDecimal APLY02;

				public BigDecimal getAPLY02 () {
					return this.APLY02;
				}

				public Boolean APLY02IsNullable(){
				    return true;
				}
				public Boolean APLY02IsKey(){
				    return false;
				}
				public Integer APLY02Length(){
				    return 5;
				}
				public Integer APLY02Precision(){
				    return 0;
				}
				public String APLY02Default(){
				
					return "";
				
				}
				public String APLY02Comment(){
				
				    return "";
				
				}
				public String APLY02Pattern(){
				
					return "";
				
				}
				public String APLY02OriginalDbColumnName(){
				
					return "APLY02";
				
				}

				
			    public BigDecimal APLY03;

				public BigDecimal getAPLY03 () {
					return this.APLY03;
				}

				public Boolean APLY03IsNullable(){
				    return true;
				}
				public Boolean APLY03IsKey(){
				    return false;
				}
				public Integer APLY03Length(){
				    return 5;
				}
				public Integer APLY03Precision(){
				    return 0;
				}
				public String APLY03Default(){
				
					return "";
				
				}
				public String APLY03Comment(){
				
				    return "";
				
				}
				public String APLY03Pattern(){
				
					return "";
				
				}
				public String APLY03OriginalDbColumnName(){
				
					return "APLY03";
				
				}

				
			    public BigDecimal APLY04;

				public BigDecimal getAPLY04 () {
					return this.APLY04;
				}

				public Boolean APLY04IsNullable(){
				    return true;
				}
				public Boolean APLY04IsKey(){
				    return false;
				}
				public Integer APLY04Length(){
				    return 5;
				}
				public Integer APLY04Precision(){
				    return 0;
				}
				public String APLY04Default(){
				
					return "";
				
				}
				public String APLY04Comment(){
				
				    return "";
				
				}
				public String APLY04Pattern(){
				
					return "";
				
				}
				public String APLY04OriginalDbColumnName(){
				
					return "APLY04";
				
				}

				
			    public BigDecimal APTY01;

				public BigDecimal getAPTY01 () {
					return this.APTY01;
				}

				public Boolean APTY01IsNullable(){
				    return true;
				}
				public Boolean APTY01IsKey(){
				    return false;
				}
				public Integer APTY01Length(){
				    return 5;
				}
				public Integer APTY01Precision(){
				    return 0;
				}
				public String APTY01Default(){
				
					return "";
				
				}
				public String APTY01Comment(){
				
				    return "";
				
				}
				public String APTY01Pattern(){
				
					return "";
				
				}
				public String APTY01OriginalDbColumnName(){
				
					return "APTY01";
				
				}

				
			    public BigDecimal APTY02;

				public BigDecimal getAPTY02 () {
					return this.APTY02;
				}

				public Boolean APTY02IsNullable(){
				    return true;
				}
				public Boolean APTY02IsKey(){
				    return false;
				}
				public Integer APTY02Length(){
				    return 5;
				}
				public Integer APTY02Precision(){
				    return 0;
				}
				public String APTY02Default(){
				
					return "";
				
				}
				public String APTY02Comment(){
				
				    return "";
				
				}
				public String APTY02Pattern(){
				
					return "";
				
				}
				public String APTY02OriginalDbColumnName(){
				
					return "APTY02";
				
				}

				
			    public BigDecimal APTY03;

				public BigDecimal getAPTY03 () {
					return this.APTY03;
				}

				public Boolean APTY03IsNullable(){
				    return true;
				}
				public Boolean APTY03IsKey(){
				    return false;
				}
				public Integer APTY03Length(){
				    return 5;
				}
				public Integer APTY03Precision(){
				    return 0;
				}
				public String APTY03Default(){
				
					return "";
				
				}
				public String APTY03Comment(){
				
				    return "";
				
				}
				public String APTY03Pattern(){
				
					return "";
				
				}
				public String APTY03OriginalDbColumnName(){
				
					return "APTY03";
				
				}

				
			    public BigDecimal APTY04;

				public BigDecimal getAPTY04 () {
					return this.APTY04;
				}

				public Boolean APTY04IsNullable(){
				    return true;
				}
				public Boolean APTY04IsKey(){
				    return false;
				}
				public Integer APTY04Length(){
				    return 5;
				}
				public Integer APTY04Precision(){
				    return 0;
				}
				public String APTY04Default(){
				
					return "";
				
				}
				public String APTY04Comment(){
				
				    return "";
				
				}
				public String APTY04Pattern(){
				
					return "";
				
				}
				public String APTY04OriginalDbColumnName(){
				
					return "APTY04";
				
				}

				
			    public BigDecimal ASLST1;

				public BigDecimal getASLST1 () {
					return this.ASLST1;
				}

				public Boolean ASLST1IsNullable(){
				    return true;
				}
				public Boolean ASLST1IsKey(){
				    return false;
				}
				public Integer ASLST1Length(){
				    return 9;
				}
				public Integer ASLST1Precision(){
				    return 2;
				}
				public String ASLST1Default(){
				
					return "";
				
				}
				public String ASLST1Comment(){
				
				    return "";
				
				}
				public String ASLST1Pattern(){
				
					return "";
				
				}
				public String ASLST1OriginalDbColumnName(){
				
					return "ASLST1";
				
				}

				
			    public BigDecimal ASLST2;

				public BigDecimal getASLST2 () {
					return this.ASLST2;
				}

				public Boolean ASLST2IsNullable(){
				    return true;
				}
				public Boolean ASLST2IsKey(){
				    return false;
				}
				public Integer ASLST2Length(){
				    return 9;
				}
				public Integer ASLST2Precision(){
				    return 2;
				}
				public String ASLST2Default(){
				
					return "";
				
				}
				public String ASLST2Comment(){
				
				    return "";
				
				}
				public String ASLST2Pattern(){
				
					return "";
				
				}
				public String ASLST2OriginalDbColumnName(){
				
					return "ASLST2";
				
				}

				
			    public String AS1099;

				public String getAS1099 () {
					return this.AS1099;
				}

				public Boolean AS1099IsNullable(){
				    return true;
				}
				public Boolean AS1099IsKey(){
				    return false;
				}
				public Integer AS1099Length(){
				    return 9;
				}
				public Integer AS1099Precision(){
				    return 0;
				}
				public String AS1099Default(){
				
					return "";
				
				}
				public String AS1099Comment(){
				
				    return "";
				
				}
				public String AS1099Pattern(){
				
					return "";
				
				}
				public String AS1099OriginalDbColumnName(){
				
					return "AS1099";
				
				}

				
			    public String ASPCCD;

				public String getASPCCD () {
					return this.ASPCCD;
				}

				public Boolean ASPCCDIsNullable(){
				    return true;
				}
				public Boolean ASPCCDIsKey(){
				    return false;
				}
				public Integer ASPCCDLength(){
				    return 1;
				}
				public Integer ASPCCDPrecision(){
				    return 0;
				}
				public String ASPCCDDefault(){
				
					return "";
				
				}
				public String ASPCCDComment(){
				
				    return "";
				
				}
				public String ASPCCDPattern(){
				
					return "";
				
				}
				public String ASPCCDOriginalDbColumnName(){
				
					return "ASPCCD";
				
				}

				
			    public String ASOTHN;

				public String getASOTHN () {
					return this.ASOTHN;
				}

				public Boolean ASOTHNIsNullable(){
				    return true;
				}
				public Boolean ASOTHNIsKey(){
				    return false;
				}
				public Integer ASOTHNLength(){
				    return 35;
				}
				public Integer ASOTHNPrecision(){
				    return 0;
				}
				public String ASOTHNDefault(){
				
					return "";
				
				}
				public String ASOTHNComment(){
				
				    return "";
				
				}
				public String ASOTHNPattern(){
				
					return "";
				
				}
				public String ASOTHNOriginalDbColumnName(){
				
					return "ASOTHN";
				
				}

				
			    public String ASRAYN;

				public String getASRAYN () {
					return this.ASRAYN;
				}

				public Boolean ASRAYNIsNullable(){
				    return true;
				}
				public Boolean ASRAYNIsKey(){
				    return false;
				}
				public Integer ASRAYNLength(){
				    return 1;
				}
				public Integer ASRAYNPrecision(){
				    return 0;
				}
				public String ASRAYNDefault(){
				
					return "";
				
				}
				public String ASRAYNComment(){
				
				    return "";
				
				}
				public String ASRAYNPattern(){
				
					return "";
				
				}
				public String ASRAYNOriginalDbColumnName(){
				
					return "ASRAYN";
				
				}

				
			    public String ASCURC;

				public String getASCURC () {
					return this.ASCURC;
				}

				public Boolean ASCURCIsNullable(){
				    return true;
				}
				public Boolean ASCURCIsKey(){
				    return false;
				}
				public Integer ASCURCLength(){
				    return 3;
				}
				public Integer ASCURCPrecision(){
				    return 0;
				}
				public String ASCURCDefault(){
				
					return "";
				
				}
				public String ASCURCComment(){
				
				    return "";
				
				}
				public String ASCURCPattern(){
				
					return "";
				
				}
				public String ASCURCOriginalDbColumnName(){
				
					return "ASCURC";
				
				}

				
			    public String ASTAXC;

				public String getASTAXC () {
					return this.ASTAXC;
				}

				public Boolean ASTAXCIsNullable(){
				    return true;
				}
				public Boolean ASTAXCIsKey(){
				    return false;
				}
				public Integer ASTAXCLength(){
				    return 1;
				}
				public Integer ASTAXCPrecision(){
				    return 0;
				}
				public String ASTAXCDefault(){
				
					return "";
				
				}
				public String ASTAXCComment(){
				
				    return "";
				
				}
				public String ASTAXCPattern(){
				
					return "";
				
				}
				public String ASTAXCOriginalDbColumnName(){
				
					return "ASTAXC";
				
				}

				
			    public String ASSTYN;

				public String getASSTYN () {
					return this.ASSTYN;
				}

				public Boolean ASSTYNIsNullable(){
				    return true;
				}
				public Boolean ASSTYNIsKey(){
				    return false;
				}
				public Integer ASSTYNLength(){
				    return 1;
				}
				public Integer ASSTYNPrecision(){
				    return 0;
				}
				public String ASSTYNDefault(){
				
					return "";
				
				}
				public String ASSTYNComment(){
				
				    return "";
				
				}
				public String ASSTYNPattern(){
				
					return "";
				
				}
				public String ASSTYNOriginalDbColumnName(){
				
					return "ASSTYN";
				
				}

				
			    public BigDecimal ASTTPC;

				public BigDecimal getASTTPC () {
					return this.ASTTPC;
				}

				public Boolean ASTTPCIsNullable(){
				    return true;
				}
				public Boolean ASTTPCIsKey(){
				    return false;
				}
				public Integer ASTTPCLength(){
				    return 4;
				}
				public Integer ASTTPCPrecision(){
				    return 2;
				}
				public String ASTTPCDefault(){
				
					return "";
				
				}
				public String ASTTPCComment(){
				
				    return "";
				
				}
				public String ASTTPCPattern(){
				
					return "";
				
				}
				public String ASTTPCOriginalDbColumnName(){
				
					return "ASTTPC";
				
				}

				
			    public String ASTTDC;

				public String getASTTDC () {
					return this.ASTTDC;
				}

				public Boolean ASTTDCIsNullable(){
				    return true;
				}
				public Boolean ASTTDCIsKey(){
				    return false;
				}
				public Integer ASTTDCLength(){
				    return 10;
				}
				public Integer ASTTDCPrecision(){
				    return 0;
				}
				public String ASTTDCDefault(){
				
					return "";
				
				}
				public String ASTTDCComment(){
				
				    return "";
				
				}
				public String ASTTDCPattern(){
				
					return "";
				
				}
				public String ASTTDCOriginalDbColumnName(){
				
					return "ASTTDC";
				
				}

				
			    public BigDecimal ASTTPU;

				public BigDecimal getASTTPU () {
					return this.ASTTPU;
				}

				public Boolean ASTTPUIsNullable(){
				    return true;
				}
				public Boolean ASTTPUIsKey(){
				    return false;
				}
				public Integer ASTTPULength(){
				    return 4;
				}
				public Integer ASTTPUPrecision(){
				    return 2;
				}
				public String ASTTPUDefault(){
				
					return "";
				
				}
				public String ASTTPUComment(){
				
				    return "";
				
				}
				public String ASTTPUPattern(){
				
					return "";
				
				}
				public String ASTTPUOriginalDbColumnName(){
				
					return "ASTTPU";
				
				}

				
			    public String ASTTDU;

				public String getASTTDU () {
					return this.ASTTDU;
				}

				public Boolean ASTTDUIsNullable(){
				    return true;
				}
				public Boolean ASTTDUIsKey(){
				    return false;
				}
				public Integer ASTTDULength(){
				    return 10;
				}
				public Integer ASTTDUPrecision(){
				    return 0;
				}
				public String ASTTDUDefault(){
				
					return "";
				
				}
				public String ASTTDUComment(){
				
				    return "";
				
				}
				public String ASTTDUPattern(){
				
					return "";
				
				}
				public String ASTTDUOriginalDbColumnName(){
				
					return "ASTTDU";
				
				}

				
			    public BigDecimal ASTLPC;

				public BigDecimal getASTLPC () {
					return this.ASTLPC;
				}

				public Boolean ASTLPCIsNullable(){
				    return true;
				}
				public Boolean ASTLPCIsKey(){
				    return false;
				}
				public Integer ASTLPCLength(){
				    return 4;
				}
				public Integer ASTLPCPrecision(){
				    return 2;
				}
				public String ASTLPCDefault(){
				
					return "";
				
				}
				public String ASTLPCComment(){
				
				    return "";
				
				}
				public String ASTLPCPattern(){
				
					return "";
				
				}
				public String ASTLPCOriginalDbColumnName(){
				
					return "ASTLPC";
				
				}

				
			    public String ASTLDC;

				public String getASTLDC () {
					return this.ASTLDC;
				}

				public Boolean ASTLDCIsNullable(){
				    return true;
				}
				public Boolean ASTLDCIsKey(){
				    return false;
				}
				public Integer ASTLDCLength(){
				    return 10;
				}
				public Integer ASTLDCPrecision(){
				    return 0;
				}
				public String ASTLDCDefault(){
				
					return "";
				
				}
				public String ASTLDCComment(){
				
				    return "";
				
				}
				public String ASTLDCPattern(){
				
					return "";
				
				}
				public String ASTLDCOriginalDbColumnName(){
				
					return "ASTLDC";
				
				}

				
			    public BigDecimal ASTLPU;

				public BigDecimal getASTLPU () {
					return this.ASTLPU;
				}

				public Boolean ASTLPUIsNullable(){
				    return true;
				}
				public Boolean ASTLPUIsKey(){
				    return false;
				}
				public Integer ASTLPULength(){
				    return 4;
				}
				public Integer ASTLPUPrecision(){
				    return 2;
				}
				public String ASTLPUDefault(){
				
					return "";
				
				}
				public String ASTLPUComment(){
				
				    return "";
				
				}
				public String ASTLPUPattern(){
				
					return "";
				
				}
				public String ASTLPUOriginalDbColumnName(){
				
					return "ASTLPU";
				
				}

				
			    public String ASTLDU;

				public String getASTLDU () {
					return this.ASTLDU;
				}

				public Boolean ASTLDUIsNullable(){
				    return true;
				}
				public Boolean ASTLDUIsKey(){
				    return false;
				}
				public Integer ASTLDULength(){
				    return 10;
				}
				public Integer ASTLDUPrecision(){
				    return 0;
				}
				public String ASTLDUDefault(){
				
					return "";
				
				}
				public String ASTLDUComment(){
				
				    return "";
				
				}
				public String ASTLDUPattern(){
				
					return "";
				
				}
				public String ASTLDUOriginalDbColumnName(){
				
					return "ASTLDU";
				
				}

				
			    public String ASLINM;

				public String getASLINM () {
					return this.ASLINM;
				}

				public Boolean ASLINMIsNullable(){
				    return true;
				}
				public Boolean ASLINMIsKey(){
				    return false;
				}
				public Integer ASLINMLength(){
				    return 1;
				}
				public Integer ASLINMPrecision(){
				    return 0;
				}
				public String ASLINMDefault(){
				
					return "";
				
				}
				public String ASLINMComment(){
				
				    return "";
				
				}
				public String ASLINMPattern(){
				
					return "";
				
				}
				public String ASLINMOriginalDbColumnName(){
				
					return "ASLINM";
				
				}

				
			    public BigDecimal ASTTNC;

				public BigDecimal getASTTNC () {
					return this.ASTTNC;
				}

				public Boolean ASTTNCIsNullable(){
				    return true;
				}
				public Boolean ASTTNCIsKey(){
				    return false;
				}
				public Integer ASTTNCLength(){
				    return 9;
				}
				public Integer ASTTNCPrecision(){
				    return 2;
				}
				public String ASTTNCDefault(){
				
					return "";
				
				}
				public String ASTTNCComment(){
				
				    return "";
				
				}
				public String ASTTNCPattern(){
				
					return "";
				
				}
				public String ASTTNCOriginalDbColumnName(){
				
					return "ASTTNC";
				
				}

				
			    public String ASTTND;

				public String getASTTND () {
					return this.ASTTND;
				}

				public Boolean ASTTNDIsNullable(){
				    return true;
				}
				public Boolean ASTTNDIsKey(){
				    return false;
				}
				public Integer ASTTNDLength(){
				    return 10;
				}
				public Integer ASTTNDPrecision(){
				    return 0;
				}
				public String ASTTNDDefault(){
				
					return "";
				
				}
				public String ASTTNDComment(){
				
				    return "";
				
				}
				public String ASTTNDPattern(){
				
					return "";
				
				}
				public String ASTTNDOriginalDbColumnName(){
				
					return "ASTTND";
				
				}

				
			    public String ASGSTR;

				public String getASGSTR () {
					return this.ASGSTR;
				}

				public Boolean ASGSTRIsNullable(){
				    return true;
				}
				public Boolean ASGSTRIsKey(){
				    return false;
				}
				public Integer ASGSTRLength(){
				    return 1;
				}
				public Integer ASGSTRPrecision(){
				    return 0;
				}
				public String ASGSTRDefault(){
				
					return "";
				
				}
				public String ASGSTRComment(){
				
				    return "";
				
				}
				public String ASGSTRPattern(){
				
					return "";
				
				}
				public String ASGSTROriginalDbColumnName(){
				
					return "ASGSTR";
				
				}

				
			    public String ASGSTN;

				public String getASGSTN () {
					return this.ASGSTN;
				}

				public Boolean ASGSTNIsNullable(){
				    return true;
				}
				public Boolean ASGSTNIsKey(){
				    return false;
				}
				public Integer ASGSTNLength(){
				    return 20;
				}
				public Integer ASGSTNPrecision(){
				    return 0;
				}
				public String ASGSTNDefault(){
				
					return "";
				
				}
				public String ASGSTNComment(){
				
				    return "";
				
				}
				public String ASGSTNPattern(){
				
					return "";
				
				}
				public String ASGSTNOriginalDbColumnName(){
				
					return "ASGSTN";
				
				}

				
			    public BigDecimal ASGST1;

				public BigDecimal getASGST1 () {
					return this.ASGST1;
				}

				public Boolean ASGST1IsNullable(){
				    return true;
				}
				public Boolean ASGST1IsKey(){
				    return false;
				}
				public Integer ASGST1Length(){
				    return 10;
				}
				public Integer ASGST1Precision(){
				    return 2;
				}
				public String ASGST1Default(){
				
					return "";
				
				}
				public String ASGST1Comment(){
				
				    return "";
				
				}
				public String ASGST1Pattern(){
				
					return "";
				
				}
				public String ASGST1OriginalDbColumnName(){
				
					return "ASGST1";
				
				}

				
			    public BigDecimal ASGST2;

				public BigDecimal getASGST2 () {
					return this.ASGST2;
				}

				public Boolean ASGST2IsNullable(){
				    return true;
				}
				public Boolean ASGST2IsKey(){
				    return false;
				}
				public Integer ASGST2Length(){
				    return 10;
				}
				public Integer ASGST2Precision(){
				    return 2;
				}
				public String ASGST2Default(){
				
					return "";
				
				}
				public String ASGST2Comment(){
				
				    return "";
				
				}
				public String ASGST2Pattern(){
				
					return "";
				
				}
				public String ASGST2OriginalDbColumnName(){
				
					return "ASGST2";
				
				}

				
			    public String ASFRTF;

				public String getASFRTF () {
					return this.ASFRTF;
				}

				public Boolean ASFRTFIsNullable(){
				    return true;
				}
				public Boolean ASFRTFIsKey(){
				    return false;
				}
				public Integer ASFRTFLength(){
				    return 1;
				}
				public Integer ASFRTFPrecision(){
				    return 0;
				}
				public String ASFRTFDefault(){
				
					return "";
				
				}
				public String ASFRTFComment(){
				
				    return "";
				
				}
				public String ASFRTFPattern(){
				
					return "";
				
				}
				public String ASFRTFOriginalDbColumnName(){
				
					return "ASFRTF";
				
				}

				
			    public String ASMSCF;

				public String getASMSCF () {
					return this.ASMSCF;
				}

				public Boolean ASMSCFIsNullable(){
				    return true;
				}
				public Boolean ASMSCFIsKey(){
				    return false;
				}
				public Integer ASMSCFLength(){
				    return 1;
				}
				public Integer ASMSCFPrecision(){
				    return 0;
				}
				public String ASMSCFDefault(){
				
					return "";
				
				}
				public String ASMSCFComment(){
				
				    return "";
				
				}
				public String ASMSCFPattern(){
				
					return "";
				
				}
				public String ASMSCFOriginalDbColumnName(){
				
					return "ASMSCF";
				
				}

				
			    public String ASALWF;

				public String getASALWF () {
					return this.ASALWF;
				}

				public Boolean ASALWFIsNullable(){
				    return true;
				}
				public Boolean ASALWFIsKey(){
				    return false;
				}
				public Integer ASALWFLength(){
				    return 1;
				}
				public Integer ASALWFPrecision(){
				    return 0;
				}
				public String ASALWFDefault(){
				
					return "";
				
				}
				public String ASALWFComment(){
				
				    return "";
				
				}
				public String ASALWFPattern(){
				
					return "";
				
				}
				public String ASALWFOriginalDbColumnName(){
				
					return "ASALWF";
				
				}

				
			    public String ASHSHQ;

				public String getASHSHQ () {
					return this.ASHSHQ;
				}

				public Boolean ASHSHQIsNullable(){
				    return true;
				}
				public Boolean ASHSHQIsKey(){
				    return false;
				}
				public Integer ASHSHQLength(){
				    return 1;
				}
				public Integer ASHSHQPrecision(){
				    return 0;
				}
				public String ASHSHQDefault(){
				
					return "";
				
				}
				public String ASHSHQComment(){
				
				    return "";
				
				}
				public String ASHSHQPattern(){
				
					return "";
				
				}
				public String ASHSHQOriginalDbColumnName(){
				
					return "ASHSHQ";
				
				}

				
			    public String ASLNOG;

				public String getASLNOG () {
					return this.ASLNOG;
				}

				public Boolean ASLNOGIsNullable(){
				    return true;
				}
				public Boolean ASLNOGIsKey(){
				    return false;
				}
				public Integer ASLNOGLength(){
				    return 1;
				}
				public Integer ASLNOGPrecision(){
				    return 0;
				}
				public String ASLNOGDefault(){
				
					return "";
				
				}
				public String ASLNOGComment(){
				
				    return "";
				
				}
				public String ASLNOGPattern(){
				
					return "";
				
				}
				public String ASLNOGOriginalDbColumnName(){
				
					return "ASLNOG";
				
				}

				
			    public String ASLUOE;

				public String getASLUOE () {
					return this.ASLUOE;
				}

				public Boolean ASLUOEIsNullable(){
				    return true;
				}
				public Boolean ASLUOEIsKey(){
				    return false;
				}
				public Integer ASLUOELength(){
				    return 1;
				}
				public Integer ASLUOEPrecision(){
				    return 0;
				}
				public String ASLUOEDefault(){
				
					return "";
				
				}
				public String ASLUOEComment(){
				
				    return "";
				
				}
				public String ASLUOEPattern(){
				
					return "";
				
				}
				public String ASLUOEOriginalDbColumnName(){
				
					return "ASLUOE";
				
				}

				
			    public String ASLSOP;

				public String getASLSOP () {
					return this.ASLSOP;
				}

				public Boolean ASLSOPIsNullable(){
				    return true;
				}
				public Boolean ASLSOPIsKey(){
				    return false;
				}
				public Integer ASLSOPLength(){
				    return 1;
				}
				public Integer ASLSOPPrecision(){
				    return 0;
				}
				public String ASLSOPDefault(){
				
					return "";
				
				}
				public String ASLSOPComment(){
				
				    return "";
				
				}
				public String ASLSOPPattern(){
				
					return "";
				
				}
				public String ASLSOPOriginalDbColumnName(){
				
					return "ASLSOP";
				
				}

				
			    public String ASMTCH;

				public String getASMTCH () {
					return this.ASMTCH;
				}

				public Boolean ASMTCHIsNullable(){
				    return true;
				}
				public Boolean ASMTCHIsKey(){
				    return false;
				}
				public Integer ASMTCHLength(){
				    return 1;
				}
				public Integer ASMTCHPrecision(){
				    return 0;
				}
				public String ASMTCHDefault(){
				
					return "";
				
				}
				public String ASMTCHComment(){
				
				    return "";
				
				}
				public String ASMTCHPattern(){
				
					return "";
				
				}
				public String ASMTCHOriginalDbColumnName(){
				
					return "ASMTCH";
				
				}

				
			    public String ASCAUT;

				public String getASCAUT () {
					return this.ASCAUT;
				}

				public Boolean ASCAUTIsNullable(){
				    return true;
				}
				public Boolean ASCAUTIsKey(){
				    return false;
				}
				public Integer ASCAUTLength(){
				    return 1;
				}
				public Integer ASCAUTPrecision(){
				    return 0;
				}
				public String ASCAUTDefault(){
				
					return "";
				
				}
				public String ASCAUTComment(){
				
				    return "";
				
				}
				public String ASCAUTPattern(){
				
					return "";
				
				}
				public String ASCAUTOriginalDbColumnName(){
				
					return "ASCAUT";
				
				}

				
			    public String ASTAXD;

				public String getASTAXD () {
					return this.ASTAXD;
				}

				public Boolean ASTAXDIsNullable(){
				    return true;
				}
				public Boolean ASTAXDIsKey(){
				    return false;
				}
				public Integer ASTAXDLength(){
				    return 1;
				}
				public Integer ASTAXDPrecision(){
				    return 0;
				}
				public String ASTAXDDefault(){
				
					return "";
				
				}
				public String ASTAXDComment(){
				
				    return "";
				
				}
				public String ASTAXDPattern(){
				
					return "";
				
				}
				public String ASTAXDOriginalDbColumnName(){
				
					return "ASTAXD";
				
				}

				
			    public String ASALLC;

				public String getASALLC () {
					return this.ASALLC;
				}

				public Boolean ASALLCIsNullable(){
				    return true;
				}
				public Boolean ASALLCIsKey(){
				    return false;
				}
				public Integer ASALLCLength(){
				    return 5;
				}
				public Integer ASALLCPrecision(){
				    return 0;
				}
				public String ASALLCDefault(){
				
					return "";
				
				}
				public String ASALLCComment(){
				
				    return "";
				
				}
				public String ASALLCPattern(){
				
					return "";
				
				}
				public String ASALLCOriginalDbColumnName(){
				
					return "ASALLC";
				
				}

				
			    public String ASMCHT;

				public String getASMCHT () {
					return this.ASMCHT;
				}

				public Boolean ASMCHTIsNullable(){
				    return true;
				}
				public Boolean ASMCHTIsKey(){
				    return false;
				}
				public Integer ASMCHTLength(){
				    return 1;
				}
				public Integer ASMCHTPrecision(){
				    return 0;
				}
				public String ASMCHTDefault(){
				
					return "";
				
				}
				public String ASMCHTComment(){
				
				    return "";
				
				}
				public String ASMCHTPattern(){
				
					return "";
				
				}
				public String ASMCHTOriginalDbColumnName(){
				
					return "ASMCHT";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASNUM = null;
           				} else {
           			    	this.ASNUM = dis.readFloat();
           				}
					
					this.ASNAME = readString(dis);
					
					this.ASADAD = readString(dis);
					
					this.ASALPH = readString(dis);
					
					this.ASSTAT = readString(dis);
					
					this.ASTYPE = readString(dis);
					
					this.ASBOYN = readString(dis);
					
					this.ASAUTO = readString(dis);
					
						this.ASCNUM = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASCLRK = null;
           				} else {
           			    	this.ASCLRK = dis.readFloat();
           				}
					
						this.ASDFAC = (BigDecimal) dis.readObject();
					
						this.ASSTR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASVOTH = null;
           				} else {
           			    	this.ASVOTH = dis.readFloat();
           				}
					
					this.ASBUYR = readString(dis);
					
					this.ASCUST = readString(dis);
					
						this.ASCNIN = (BigDecimal) dis.readObject();
					
						this.ASDTIN = (BigDecimal) dis.readObject();
					
						this.ASCNLP = (BigDecimal) dis.readObject();
					
						this.ASDTLP = (BigDecimal) dis.readObject();
					
						this.ASAMLP = (BigDecimal) dis.readObject();
					
						this.ASCKLP = (BigDecimal) dis.readObject();
					
						this.ASBAL1 = (BigDecimal) dis.readObject();
					
						this.ASBAL2 = (BigDecimal) dis.readObject();
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
					this.RCNOT1 = readString(dis);
					
					this.RCNOT2 = readString(dis);
					
					this.RCNOT3 = readString(dis);
					
					this.BYNOT1 = readString(dis);
					
					this.BYNOT2 = readString(dis);
					
					this.BYNOT3 = readString(dis);
					
						this.ASRVFR = (BigDecimal) dis.readObject();
					
						this.ASLEAD = (BigDecimal) dis.readObject();
					
						this.ASTPO = (BigDecimal) dis.readObject();
					
						this.ASTLT = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASTRMS = null;
           				} else {
           			    	this.ASTRMS = dis.readFloat();
           				}
					
					this.ASTIND = readString(dis);
					
						this.ASPUSH = (BigDecimal) dis.readObject();
					
					this.ASTDSC = readString(dis);
					
					this.ASFPCD = readString(dis);
					
						this.ASFALP = (BigDecimal) dis.readObject();
					
						this.ASFALN = (BigDecimal) dis.readObject();
					
					this.ASFOBC = readString(dis);
					
					this.ASSHP1 = readString(dis);
					
					this.ASSHP2 = readString(dis);
					
					this.ASSHPP = readString(dis);
					
					this.ASSHPC = readString(dis);
					
					this.ASMINC = readString(dis);
					
						this.ASMINA = (BigDecimal) dis.readObject();
					
						this.ASTRKP = (BigDecimal) dis.readObject();
					
						this.ASTRKA = (BigDecimal) dis.readObject();
					
						this.ASTARP = (BigDecimal) dis.readObject();
					
						this.ASSTOP = (BigDecimal) dis.readObject();
					
						this.ASSKID = (BigDecimal) dis.readObject();
					
						this.ASOTHQ = (BigDecimal) dis.readObject();
					
						this.ASOTHP = (BigDecimal) dis.readObject();
					
					this.ASRTCD = readString(dis);
					
						this.ASVOLP = (BigDecimal) dis.readObject();
					
						this.ASVOLN = (BigDecimal) dis.readObject();
					
						this.ASREBP = (BigDecimal) dis.readObject();
					
						this.ASREBN = (BigDecimal) dis.readObject();
					
						this.ASALLP = (BigDecimal) dis.readObject();
					
						this.ASALLN = (BigDecimal) dis.readObject();
					
						this.APPR01 = (BigDecimal) dis.readObject();
					
						this.APPR02 = (BigDecimal) dis.readObject();
					
						this.APPR03 = (BigDecimal) dis.readObject();
					
						this.APPR04 = (BigDecimal) dis.readObject();
					
						this.APPR05 = (BigDecimal) dis.readObject();
					
						this.APPR06 = (BigDecimal) dis.readObject();
					
						this.APPR07 = (BigDecimal) dis.readObject();
					
						this.APPR08 = (BigDecimal) dis.readObject();
					
						this.APPR09 = (BigDecimal) dis.readObject();
					
						this.APPR10 = (BigDecimal) dis.readObject();
					
						this.APPR11 = (BigDecimal) dis.readObject();
					
						this.APPR12 = (BigDecimal) dis.readObject();
					
						this.APPR13 = (BigDecimal) dis.readObject();
					
						this.APMRGP = (BigDecimal) dis.readObject();
					
						this.AGMROI = (BigDecimal) dis.readObject();
					
						this.APTRNS = (BigDecimal) dis.readObject();
					
						this.APAVOH = (BigDecimal) dis.readObject();
					
						this.APPOBO = (BigDecimal) dis.readObject();
					
						this.APPOSS = (BigDecimal) dis.readObject();
					
						this.APPOLT = (BigDecimal) dis.readObject();
					
						this.APLY01 = (BigDecimal) dis.readObject();
					
						this.APLY02 = (BigDecimal) dis.readObject();
					
						this.APLY03 = (BigDecimal) dis.readObject();
					
						this.APLY04 = (BigDecimal) dis.readObject();
					
						this.APTY01 = (BigDecimal) dis.readObject();
					
						this.APTY02 = (BigDecimal) dis.readObject();
					
						this.APTY03 = (BigDecimal) dis.readObject();
					
						this.APTY04 = (BigDecimal) dis.readObject();
					
						this.ASLST1 = (BigDecimal) dis.readObject();
					
						this.ASLST2 = (BigDecimal) dis.readObject();
					
					this.AS1099 = readString(dis);
					
					this.ASPCCD = readString(dis);
					
					this.ASOTHN = readString(dis);
					
					this.ASRAYN = readString(dis);
					
					this.ASCURC = readString(dis);
					
					this.ASTAXC = readString(dis);
					
					this.ASSTYN = readString(dis);
					
						this.ASTTPC = (BigDecimal) dis.readObject();
					
					this.ASTTDC = readString(dis);
					
						this.ASTTPU = (BigDecimal) dis.readObject();
					
					this.ASTTDU = readString(dis);
					
						this.ASTLPC = (BigDecimal) dis.readObject();
					
					this.ASTLDC = readString(dis);
					
						this.ASTLPU = (BigDecimal) dis.readObject();
					
					this.ASTLDU = readString(dis);
					
					this.ASLINM = readString(dis);
					
						this.ASTTNC = (BigDecimal) dis.readObject();
					
					this.ASTTND = readString(dis);
					
					this.ASGSTR = readString(dis);
					
					this.ASGSTN = readString(dis);
					
						this.ASGST1 = (BigDecimal) dis.readObject();
					
						this.ASGST2 = (BigDecimal) dis.readObject();
					
					this.ASFRTF = readString(dis);
					
					this.ASMSCF = readString(dis);
					
					this.ASALWF = readString(dis);
					
					this.ASHSHQ = readString(dis);
					
					this.ASLNOG = readString(dis);
					
					this.ASLUOE = readString(dis);
					
					this.ASLSOP = readString(dis);
					
					this.ASMTCH = readString(dis);
					
					this.ASCAUT = readString(dis);
					
					this.ASTAXD = readString(dis);
					
					this.ASALLC = readString(dis);
					
					this.ASMCHT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASNUM = null;
           				} else {
           			    	this.ASNUM = dis.readFloat();
           				}
					
					this.ASNAME = readString(dis);
					
					this.ASADAD = readString(dis);
					
					this.ASALPH = readString(dis);
					
					this.ASSTAT = readString(dis);
					
					this.ASTYPE = readString(dis);
					
					this.ASBOYN = readString(dis);
					
					this.ASAUTO = readString(dis);
					
						this.ASCNUM = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASCLRK = null;
           				} else {
           			    	this.ASCLRK = dis.readFloat();
           				}
					
						this.ASDFAC = (BigDecimal) dis.readObject();
					
						this.ASSTR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASVOTH = null;
           				} else {
           			    	this.ASVOTH = dis.readFloat();
           				}
					
					this.ASBUYR = readString(dis);
					
					this.ASCUST = readString(dis);
					
						this.ASCNIN = (BigDecimal) dis.readObject();
					
						this.ASDTIN = (BigDecimal) dis.readObject();
					
						this.ASCNLP = (BigDecimal) dis.readObject();
					
						this.ASDTLP = (BigDecimal) dis.readObject();
					
						this.ASAMLP = (BigDecimal) dis.readObject();
					
						this.ASCKLP = (BigDecimal) dis.readObject();
					
						this.ASBAL1 = (BigDecimal) dis.readObject();
					
						this.ASBAL2 = (BigDecimal) dis.readObject();
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
					this.RCNOT1 = readString(dis);
					
					this.RCNOT2 = readString(dis);
					
					this.RCNOT3 = readString(dis);
					
					this.BYNOT1 = readString(dis);
					
					this.BYNOT2 = readString(dis);
					
					this.BYNOT3 = readString(dis);
					
						this.ASRVFR = (BigDecimal) dis.readObject();
					
						this.ASLEAD = (BigDecimal) dis.readObject();
					
						this.ASTPO = (BigDecimal) dis.readObject();
					
						this.ASTLT = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASTRMS = null;
           				} else {
           			    	this.ASTRMS = dis.readFloat();
           				}
					
					this.ASTIND = readString(dis);
					
						this.ASPUSH = (BigDecimal) dis.readObject();
					
					this.ASTDSC = readString(dis);
					
					this.ASFPCD = readString(dis);
					
						this.ASFALP = (BigDecimal) dis.readObject();
					
						this.ASFALN = (BigDecimal) dis.readObject();
					
					this.ASFOBC = readString(dis);
					
					this.ASSHP1 = readString(dis);
					
					this.ASSHP2 = readString(dis);
					
					this.ASSHPP = readString(dis);
					
					this.ASSHPC = readString(dis);
					
					this.ASMINC = readString(dis);
					
						this.ASMINA = (BigDecimal) dis.readObject();
					
						this.ASTRKP = (BigDecimal) dis.readObject();
					
						this.ASTRKA = (BigDecimal) dis.readObject();
					
						this.ASTARP = (BigDecimal) dis.readObject();
					
						this.ASSTOP = (BigDecimal) dis.readObject();
					
						this.ASSKID = (BigDecimal) dis.readObject();
					
						this.ASOTHQ = (BigDecimal) dis.readObject();
					
						this.ASOTHP = (BigDecimal) dis.readObject();
					
					this.ASRTCD = readString(dis);
					
						this.ASVOLP = (BigDecimal) dis.readObject();
					
						this.ASVOLN = (BigDecimal) dis.readObject();
					
						this.ASREBP = (BigDecimal) dis.readObject();
					
						this.ASREBN = (BigDecimal) dis.readObject();
					
						this.ASALLP = (BigDecimal) dis.readObject();
					
						this.ASALLN = (BigDecimal) dis.readObject();
					
						this.APPR01 = (BigDecimal) dis.readObject();
					
						this.APPR02 = (BigDecimal) dis.readObject();
					
						this.APPR03 = (BigDecimal) dis.readObject();
					
						this.APPR04 = (BigDecimal) dis.readObject();
					
						this.APPR05 = (BigDecimal) dis.readObject();
					
						this.APPR06 = (BigDecimal) dis.readObject();
					
						this.APPR07 = (BigDecimal) dis.readObject();
					
						this.APPR08 = (BigDecimal) dis.readObject();
					
						this.APPR09 = (BigDecimal) dis.readObject();
					
						this.APPR10 = (BigDecimal) dis.readObject();
					
						this.APPR11 = (BigDecimal) dis.readObject();
					
						this.APPR12 = (BigDecimal) dis.readObject();
					
						this.APPR13 = (BigDecimal) dis.readObject();
					
						this.APMRGP = (BigDecimal) dis.readObject();
					
						this.AGMROI = (BigDecimal) dis.readObject();
					
						this.APTRNS = (BigDecimal) dis.readObject();
					
						this.APAVOH = (BigDecimal) dis.readObject();
					
						this.APPOBO = (BigDecimal) dis.readObject();
					
						this.APPOSS = (BigDecimal) dis.readObject();
					
						this.APPOLT = (BigDecimal) dis.readObject();
					
						this.APLY01 = (BigDecimal) dis.readObject();
					
						this.APLY02 = (BigDecimal) dis.readObject();
					
						this.APLY03 = (BigDecimal) dis.readObject();
					
						this.APLY04 = (BigDecimal) dis.readObject();
					
						this.APTY01 = (BigDecimal) dis.readObject();
					
						this.APTY02 = (BigDecimal) dis.readObject();
					
						this.APTY03 = (BigDecimal) dis.readObject();
					
						this.APTY04 = (BigDecimal) dis.readObject();
					
						this.ASLST1 = (BigDecimal) dis.readObject();
					
						this.ASLST2 = (BigDecimal) dis.readObject();
					
					this.AS1099 = readString(dis);
					
					this.ASPCCD = readString(dis);
					
					this.ASOTHN = readString(dis);
					
					this.ASRAYN = readString(dis);
					
					this.ASCURC = readString(dis);
					
					this.ASTAXC = readString(dis);
					
					this.ASSTYN = readString(dis);
					
						this.ASTTPC = (BigDecimal) dis.readObject();
					
					this.ASTTDC = readString(dis);
					
						this.ASTTPU = (BigDecimal) dis.readObject();
					
					this.ASTTDU = readString(dis);
					
						this.ASTLPC = (BigDecimal) dis.readObject();
					
					this.ASTLDC = readString(dis);
					
						this.ASTLPU = (BigDecimal) dis.readObject();
					
					this.ASTLDU = readString(dis);
					
					this.ASLINM = readString(dis);
					
						this.ASTTNC = (BigDecimal) dis.readObject();
					
					this.ASTTND = readString(dis);
					
					this.ASGSTR = readString(dis);
					
					this.ASGSTN = readString(dis);
					
						this.ASGST1 = (BigDecimal) dis.readObject();
					
						this.ASGST2 = (BigDecimal) dis.readObject();
					
					this.ASFRTF = readString(dis);
					
					this.ASMSCF = readString(dis);
					
					this.ASALWF = readString(dis);
					
					this.ASHSHQ = readString(dis);
					
					this.ASLNOG = readString(dis);
					
					this.ASLUOE = readString(dis);
					
					this.ASLSOP = readString(dis);
					
					this.ASMTCH = readString(dis);
					
					this.ASCAUT = readString(dis);
					
					this.ASTAXD = readString(dis);
					
					this.ASALLC = readString(dis);
					
					this.ASMCHT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.ASNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASNUM);
		            	}
					
					// String
				
						writeString(this.ASNAME,dos);
					
					// String
				
						writeString(this.ASADAD,dos);
					
					// String
				
						writeString(this.ASALPH,dos);
					
					// String
				
						writeString(this.ASSTAT,dos);
					
					// String
				
						writeString(this.ASTYPE,dos);
					
					// String
				
						writeString(this.ASBOYN,dos);
					
					// String
				
						writeString(this.ASAUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNUM);
					
					// Float
				
						if(this.ASCLRK == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASCLRK);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDFAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTR);
					
					// Float
				
						if(this.ASVOTH == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASVOTH);
		            	}
					
					// String
				
						writeString(this.ASBUYR,dos);
					
					// String
				
						writeString(this.ASCUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASAMLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCKLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL2);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// String
				
						writeString(this.RCNOT1,dos);
					
					// String
				
						writeString(this.RCNOT2,dos);
					
					// String
				
						writeString(this.RCNOT3,dos);
					
					// String
				
						writeString(this.BYNOT1,dos);
					
					// String
				
						writeString(this.BYNOT2,dos);
					
					// String
				
						writeString(this.BYNOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASRVFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLEAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTPO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLT);
					
					// Float
				
						if(this.ASTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASTRMS);
		            	}
					
					// String
				
						writeString(this.ASTIND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASPUSH);
					
					// String
				
						writeString(this.ASTDSC,dos);
					
					// String
				
						writeString(this.ASFPCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALN);
					
					// String
				
						writeString(this.ASFOBC,dos);
					
					// String
				
						writeString(this.ASSHP1,dos);
					
					// String
				
						writeString(this.ASSHP2,dos);
					
					// String
				
						writeString(this.ASSHPP,dos);
					
					// String
				
						writeString(this.ASSHPC,dos);
					
					// String
				
						writeString(this.ASMINC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASMINA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHP);
					
					// String
				
						writeString(this.ASRTCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR09);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR10);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR12);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR13);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APMRGP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AGMROI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOBO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOSS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST2);
					
					// String
				
						writeString(this.AS1099,dos);
					
					// String
				
						writeString(this.ASPCCD,dos);
					
					// String
				
						writeString(this.ASOTHN,dos);
					
					// String
				
						writeString(this.ASRAYN,dos);
					
					// String
				
						writeString(this.ASCURC,dos);
					
					// String
				
						writeString(this.ASTAXC,dos);
					
					// String
				
						writeString(this.ASSTYN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPC);
					
					// String
				
						writeString(this.ASTTDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPU);
					
					// String
				
						writeString(this.ASTTDU,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPC);
					
					// String
				
						writeString(this.ASTLDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPU);
					
					// String
				
						writeString(this.ASTLDU,dos);
					
					// String
				
						writeString(this.ASLINM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTNC);
					
					// String
				
						writeString(this.ASTTND,dos);
					
					// String
				
						writeString(this.ASGSTR,dos);
					
					// String
				
						writeString(this.ASGSTN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST2);
					
					// String
				
						writeString(this.ASFRTF,dos);
					
					// String
				
						writeString(this.ASMSCF,dos);
					
					// String
				
						writeString(this.ASALWF,dos);
					
					// String
				
						writeString(this.ASHSHQ,dos);
					
					// String
				
						writeString(this.ASLNOG,dos);
					
					// String
				
						writeString(this.ASLUOE,dos);
					
					// String
				
						writeString(this.ASLSOP,dos);
					
					// String
				
						writeString(this.ASMTCH,dos);
					
					// String
				
						writeString(this.ASCAUT,dos);
					
					// String
				
						writeString(this.ASTAXD,dos);
					
					// String
				
						writeString(this.ASALLC,dos);
					
					// String
				
						writeString(this.ASMCHT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Float
				
						if(this.ASNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASNUM);
		            	}
					
					// String
				
						writeString(this.ASNAME,dos);
					
					// String
				
						writeString(this.ASADAD,dos);
					
					// String
				
						writeString(this.ASALPH,dos);
					
					// String
				
						writeString(this.ASSTAT,dos);
					
					// String
				
						writeString(this.ASTYPE,dos);
					
					// String
				
						writeString(this.ASBOYN,dos);
					
					// String
				
						writeString(this.ASAUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNUM);
					
					// Float
				
						if(this.ASCLRK == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASCLRK);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDFAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTR);
					
					// Float
				
						if(this.ASVOTH == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASVOTH);
		            	}
					
					// String
				
						writeString(this.ASBUYR,dos);
					
					// String
				
						writeString(this.ASCUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASAMLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCKLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL2);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// String
				
						writeString(this.RCNOT1,dos);
					
					// String
				
						writeString(this.RCNOT2,dos);
					
					// String
				
						writeString(this.RCNOT3,dos);
					
					// String
				
						writeString(this.BYNOT1,dos);
					
					// String
				
						writeString(this.BYNOT2,dos);
					
					// String
				
						writeString(this.BYNOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASRVFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLEAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTPO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLT);
					
					// Float
				
						if(this.ASTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ASTRMS);
		            	}
					
					// String
				
						writeString(this.ASTIND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASPUSH);
					
					// String
				
						writeString(this.ASTDSC,dos);
					
					// String
				
						writeString(this.ASFPCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALN);
					
					// String
				
						writeString(this.ASFOBC,dos);
					
					// String
				
						writeString(this.ASSHP1,dos);
					
					// String
				
						writeString(this.ASSHP2,dos);
					
					// String
				
						writeString(this.ASSHPP,dos);
					
					// String
				
						writeString(this.ASSHPC,dos);
					
					// String
				
						writeString(this.ASMINC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASMINA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHP);
					
					// String
				
						writeString(this.ASRTCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR09);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR10);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR12);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR13);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APMRGP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AGMROI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOBO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOSS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST2);
					
					// String
				
						writeString(this.AS1099,dos);
					
					// String
				
						writeString(this.ASPCCD,dos);
					
					// String
				
						writeString(this.ASOTHN,dos);
					
					// String
				
						writeString(this.ASRAYN,dos);
					
					// String
				
						writeString(this.ASCURC,dos);
					
					// String
				
						writeString(this.ASTAXC,dos);
					
					// String
				
						writeString(this.ASSTYN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPC);
					
					// String
				
						writeString(this.ASTTDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPU);
					
					// String
				
						writeString(this.ASTTDU,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPC);
					
					// String
				
						writeString(this.ASTLDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPU);
					
					// String
				
						writeString(this.ASTLDU,dos);
					
					// String
				
						writeString(this.ASLINM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTNC);
					
					// String
				
						writeString(this.ASTTND,dos);
					
					// String
				
						writeString(this.ASGSTR,dos);
					
					// String
				
						writeString(this.ASGSTN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST2);
					
					// String
				
						writeString(this.ASFRTF,dos);
					
					// String
				
						writeString(this.ASMSCF,dos);
					
					// String
				
						writeString(this.ASALWF,dos);
					
					// String
				
						writeString(this.ASHSHQ,dos);
					
					// String
				
						writeString(this.ASLNOG,dos);
					
					// String
				
						writeString(this.ASLUOE,dos);
					
					// String
				
						writeString(this.ASLSOP,dos);
					
					// String
				
						writeString(this.ASMTCH,dos);
					
					// String
				
						writeString(this.ASCAUT,dos);
					
					// String
				
						writeString(this.ASTAXD,dos);
					
					// String
				
						writeString(this.ASALLC,dos);
					
					// String
				
						writeString(this.ASMCHT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ASNUM="+String.valueOf(ASNUM));
		sb.append(",ASNAME="+ASNAME);
		sb.append(",ASADAD="+ASADAD);
		sb.append(",ASALPH="+ASALPH);
		sb.append(",ASSTAT="+ASSTAT);
		sb.append(",ASTYPE="+ASTYPE);
		sb.append(",ASBOYN="+ASBOYN);
		sb.append(",ASAUTO="+ASAUTO);
		sb.append(",ASCNUM="+String.valueOf(ASCNUM));
		sb.append(",ASCLRK="+String.valueOf(ASCLRK));
		sb.append(",ASDFAC="+String.valueOf(ASDFAC));
		sb.append(",ASSTR="+String.valueOf(ASSTR));
		sb.append(",ASVOTH="+String.valueOf(ASVOTH));
		sb.append(",ASBUYR="+ASBUYR);
		sb.append(",ASCUST="+ASCUST);
		sb.append(",ASCNIN="+String.valueOf(ASCNIN));
		sb.append(",ASDTIN="+String.valueOf(ASDTIN));
		sb.append(",ASCNLP="+String.valueOf(ASCNLP));
		sb.append(",ASDTLP="+String.valueOf(ASDTLP));
		sb.append(",ASAMLP="+String.valueOf(ASAMLP));
		sb.append(",ASCKLP="+String.valueOf(ASCKLP));
		sb.append(",ASBAL1="+String.valueOf(ASBAL1));
		sb.append(",ASBAL2="+String.valueOf(ASBAL2));
		sb.append(",PONOT1="+PONOT1);
		sb.append(",PONOT2="+PONOT2);
		sb.append(",PONOT3="+PONOT3);
		sb.append(",RCNOT1="+RCNOT1);
		sb.append(",RCNOT2="+RCNOT2);
		sb.append(",RCNOT3="+RCNOT3);
		sb.append(",BYNOT1="+BYNOT1);
		sb.append(",BYNOT2="+BYNOT2);
		sb.append(",BYNOT3="+BYNOT3);
		sb.append(",ASRVFR="+String.valueOf(ASRVFR));
		sb.append(",ASLEAD="+String.valueOf(ASLEAD));
		sb.append(",ASTPO="+String.valueOf(ASTPO));
		sb.append(",ASTLT="+String.valueOf(ASTLT));
		sb.append(",ASTRMS="+String.valueOf(ASTRMS));
		sb.append(",ASTIND="+ASTIND);
		sb.append(",ASPUSH="+String.valueOf(ASPUSH));
		sb.append(",ASTDSC="+ASTDSC);
		sb.append(",ASFPCD="+ASFPCD);
		sb.append(",ASFALP="+String.valueOf(ASFALP));
		sb.append(",ASFALN="+String.valueOf(ASFALN));
		sb.append(",ASFOBC="+ASFOBC);
		sb.append(",ASSHP1="+ASSHP1);
		sb.append(",ASSHP2="+ASSHP2);
		sb.append(",ASSHPP="+ASSHPP);
		sb.append(",ASSHPC="+ASSHPC);
		sb.append(",ASMINC="+ASMINC);
		sb.append(",ASMINA="+String.valueOf(ASMINA));
		sb.append(",ASTRKP="+String.valueOf(ASTRKP));
		sb.append(",ASTRKA="+String.valueOf(ASTRKA));
		sb.append(",ASTARP="+String.valueOf(ASTARP));
		sb.append(",ASSTOP="+String.valueOf(ASSTOP));
		sb.append(",ASSKID="+String.valueOf(ASSKID));
		sb.append(",ASOTHQ="+String.valueOf(ASOTHQ));
		sb.append(",ASOTHP="+String.valueOf(ASOTHP));
		sb.append(",ASRTCD="+ASRTCD);
		sb.append(",ASVOLP="+String.valueOf(ASVOLP));
		sb.append(",ASVOLN="+String.valueOf(ASVOLN));
		sb.append(",ASREBP="+String.valueOf(ASREBP));
		sb.append(",ASREBN="+String.valueOf(ASREBN));
		sb.append(",ASALLP="+String.valueOf(ASALLP));
		sb.append(",ASALLN="+String.valueOf(ASALLN));
		sb.append(",APPR01="+String.valueOf(APPR01));
		sb.append(",APPR02="+String.valueOf(APPR02));
		sb.append(",APPR03="+String.valueOf(APPR03));
		sb.append(",APPR04="+String.valueOf(APPR04));
		sb.append(",APPR05="+String.valueOf(APPR05));
		sb.append(",APPR06="+String.valueOf(APPR06));
		sb.append(",APPR07="+String.valueOf(APPR07));
		sb.append(",APPR08="+String.valueOf(APPR08));
		sb.append(",APPR09="+String.valueOf(APPR09));
		sb.append(",APPR10="+String.valueOf(APPR10));
		sb.append(",APPR11="+String.valueOf(APPR11));
		sb.append(",APPR12="+String.valueOf(APPR12));
		sb.append(",APPR13="+String.valueOf(APPR13));
		sb.append(",APMRGP="+String.valueOf(APMRGP));
		sb.append(",AGMROI="+String.valueOf(AGMROI));
		sb.append(",APTRNS="+String.valueOf(APTRNS));
		sb.append(",APAVOH="+String.valueOf(APAVOH));
		sb.append(",APPOBO="+String.valueOf(APPOBO));
		sb.append(",APPOSS="+String.valueOf(APPOSS));
		sb.append(",APPOLT="+String.valueOf(APPOLT));
		sb.append(",APLY01="+String.valueOf(APLY01));
		sb.append(",APLY02="+String.valueOf(APLY02));
		sb.append(",APLY03="+String.valueOf(APLY03));
		sb.append(",APLY04="+String.valueOf(APLY04));
		sb.append(",APTY01="+String.valueOf(APTY01));
		sb.append(",APTY02="+String.valueOf(APTY02));
		sb.append(",APTY03="+String.valueOf(APTY03));
		sb.append(",APTY04="+String.valueOf(APTY04));
		sb.append(",ASLST1="+String.valueOf(ASLST1));
		sb.append(",ASLST2="+String.valueOf(ASLST2));
		sb.append(",AS1099="+AS1099);
		sb.append(",ASPCCD="+ASPCCD);
		sb.append(",ASOTHN="+ASOTHN);
		sb.append(",ASRAYN="+ASRAYN);
		sb.append(",ASCURC="+ASCURC);
		sb.append(",ASTAXC="+ASTAXC);
		sb.append(",ASSTYN="+ASSTYN);
		sb.append(",ASTTPC="+String.valueOf(ASTTPC));
		sb.append(",ASTTDC="+ASTTDC);
		sb.append(",ASTTPU="+String.valueOf(ASTTPU));
		sb.append(",ASTTDU="+ASTTDU);
		sb.append(",ASTLPC="+String.valueOf(ASTLPC));
		sb.append(",ASTLDC="+ASTLDC);
		sb.append(",ASTLPU="+String.valueOf(ASTLPU));
		sb.append(",ASTLDU="+ASTLDU);
		sb.append(",ASLINM="+ASLINM);
		sb.append(",ASTTNC="+String.valueOf(ASTTNC));
		sb.append(",ASTTND="+ASTTND);
		sb.append(",ASGSTR="+ASGSTR);
		sb.append(",ASGSTN="+ASGSTN);
		sb.append(",ASGST1="+String.valueOf(ASGST1));
		sb.append(",ASGST2="+String.valueOf(ASGST2));
		sb.append(",ASFRTF="+ASFRTF);
		sb.append(",ASMSCF="+ASMSCF);
		sb.append(",ASALWF="+ASALWF);
		sb.append(",ASHSHQ="+ASHSHQ);
		sb.append(",ASLNOG="+ASLNOG);
		sb.append(",ASLUOE="+ASLUOE);
		sb.append(",ASLSOP="+ASLSOP);
		sb.append(",ASMTCH="+ASMTCH);
		sb.append(",ASCAUT="+ASCAUT);
		sb.append(",ASTAXD="+ASTAXD);
		sb.append(",ASALLC="+ASALLC);
		sb.append(",ASMCHT="+ASMCHT);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ASNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASNUM);
            			}
            		
        			sb.append("|");
        		
        				if(ASNAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASNAME);
            			}
            		
        			sb.append("|");
        		
        				if(ASADAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASADAD);
            			}
            		
        			sb.append("|");
        		
        				if(ASALPH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALPH);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTAT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ASBOYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBOYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASAUTO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASAUTO);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNUM);
            			}
            		
        			sb.append("|");
        		
        				if(ASCLRK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCLRK);
            			}
            		
        			sb.append("|");
        		
        				if(ASDFAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDFAC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTR);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOTH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOTH);
            			}
            		
        			sb.append("|");
        		
        				if(ASBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(ASCUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCUST);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNIN);
            			}
            		
        			sb.append("|");
        		
        				if(ASDTIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDTIN);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASDTLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDTLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASAMLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASAMLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASCKLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCKLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASBAL1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBAL1);
            			}
            		
        			sb.append("|");
        		
        				if(ASBAL2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBAL2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT1);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT3);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT1);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT2);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT3);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT1);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT2);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT3);
            			}
            		
        			sb.append("|");
        		
        				if(ASRVFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRVFR);
            			}
            		
        			sb.append("|");
        		
        				if(ASLEAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLEAD);
            			}
            		
        			sb.append("|");
        		
        				if(ASTPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTPO);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRMS);
            			}
            		
        			sb.append("|");
        		
        				if(ASTIND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTIND);
            			}
            		
        			sb.append("|");
        		
        				if(ASPUSH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASPUSH);
            			}
            		
        			sb.append("|");
        		
        				if(ASTDSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTDSC);
            			}
            		
        			sb.append("|");
        		
        				if(ASFPCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFPCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASFALP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFALP);
            			}
            		
        			sb.append("|");
        		
        				if(ASFALN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFALN);
            			}
            		
        			sb.append("|");
        		
        				if(ASFOBC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFOBC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHP1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHP1);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHP2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHP2);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHPP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHPP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMINC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMINC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMINA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMINA);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRKP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRKP);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRKA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRKA);
            			}
            		
        			sb.append("|");
        		
        				if(ASTARP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTARP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTOP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSKID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSKID);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHQ);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHP);
            			}
            		
        			sb.append("|");
        		
        				if(ASRTCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRTCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOLN);
            			}
            		
        			sb.append("|");
        		
        				if(ASREBP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASREBP);
            			}
            		
        			sb.append("|");
        		
        				if(ASREBN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASREBN);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLN);
            			}
            		
        			sb.append("|");
        		
        				if(APPR01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR01);
            			}
            		
        			sb.append("|");
        		
        				if(APPR02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR02);
            			}
            		
        			sb.append("|");
        		
        				if(APPR03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR03);
            			}
            		
        			sb.append("|");
        		
        				if(APPR04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR04);
            			}
            		
        			sb.append("|");
        		
        				if(APPR05 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR05);
            			}
            		
        			sb.append("|");
        		
        				if(APPR06 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR06);
            			}
            		
        			sb.append("|");
        		
        				if(APPR07 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR07);
            			}
            		
        			sb.append("|");
        		
        				if(APPR08 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR08);
            			}
            		
        			sb.append("|");
        		
        				if(APPR09 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR09);
            			}
            		
        			sb.append("|");
        		
        				if(APPR10 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR10);
            			}
            		
        			sb.append("|");
        		
        				if(APPR11 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR11);
            			}
            		
        			sb.append("|");
        		
        				if(APPR12 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR12);
            			}
            		
        			sb.append("|");
        		
        				if(APPR13 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR13);
            			}
            		
        			sb.append("|");
        		
        				if(APMRGP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APMRGP);
            			}
            		
        			sb.append("|");
        		
        				if(AGMROI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGMROI);
            			}
            		
        			sb.append("|");
        		
        				if(APTRNS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTRNS);
            			}
            		
        			sb.append("|");
        		
        				if(APAVOH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APAVOH);
            			}
            		
        			sb.append("|");
        		
        				if(APPOBO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOBO);
            			}
            		
        			sb.append("|");
        		
        				if(APPOSS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOSS);
            			}
            		
        			sb.append("|");
        		
        				if(APPOLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOLT);
            			}
            		
        			sb.append("|");
        		
        				if(APLY01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY01);
            			}
            		
        			sb.append("|");
        		
        				if(APLY02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY02);
            			}
            		
        			sb.append("|");
        		
        				if(APLY03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY03);
            			}
            		
        			sb.append("|");
        		
        				if(APLY04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY04);
            			}
            		
        			sb.append("|");
        		
        				if(APTY01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY01);
            			}
            		
        			sb.append("|");
        		
        				if(APTY02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY02);
            			}
            		
        			sb.append("|");
        		
        				if(APTY03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY03);
            			}
            		
        			sb.append("|");
        		
        				if(APTY04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY04);
            			}
            		
        			sb.append("|");
        		
        				if(ASLST1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLST1);
            			}
            		
        			sb.append("|");
        		
        				if(ASLST2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLST2);
            			}
            		
        			sb.append("|");
        		
        				if(AS1099 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AS1099);
            			}
            		
        			sb.append("|");
        		
        				if(ASPCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASPCCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHN);
            			}
            		
        			sb.append("|");
        		
        				if(ASRAYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRAYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASCURC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCURC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTAXC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTAXC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTDC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTPU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTDU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTDU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLDC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLPU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLDU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLDU);
            			}
            		
        			sb.append("|");
        		
        				if(ASLINM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLINM);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTNC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTNC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTND);
            			}
            		
        			sb.append("|");
        		
        				if(ASGSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGSTR);
            			}
            		
        			sb.append("|");
        		
        				if(ASGSTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGSTN);
            			}
            		
        			sb.append("|");
        		
        				if(ASGST1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGST1);
            			}
            		
        			sb.append("|");
        		
        				if(ASGST2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGST2);
            			}
            		
        			sb.append("|");
        		
        				if(ASFRTF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFRTF);
            			}
            		
        			sb.append("|");
        		
        				if(ASMSCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMSCF);
            			}
            		
        			sb.append("|");
        		
        				if(ASALWF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALWF);
            			}
            		
        			sb.append("|");
        		
        				if(ASHSHQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASHSHQ);
            			}
            		
        			sb.append("|");
        		
        				if(ASLNOG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLNOG);
            			}
            		
        			sb.append("|");
        		
        				if(ASLUOE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLUOE);
            			}
            		
        			sb.append("|");
        		
        				if(ASLSOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLSOP);
            			}
            		
        			sb.append("|");
        		
        				if(ASMTCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMTCH);
            			}
            		
        			sb.append("|");
        		
        				if(ASCAUT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCAUT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTAXD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTAXD);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMCHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMCHT);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tDBInput_4");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row3");
			
		int tos_count_tFileOutputDelimited_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileOutputDelimited_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileOutputDelimited_4 = new StringBuilder();
                    log4jParamters_tFileOutputDelimited_4.append("Parameters:");
                            log4jParamters_tFileOutputDelimited_4.append("USESTREAM" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("FILENAME" + " = " + "\"/data/talend/data_repository/APSUPP.csv\"");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("APPEND" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("INCLUDEHEADER" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("COMPRESS" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("CREATE" + " = " + "true");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("SPLIT" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("FLUSHONROW" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("ROW_MODE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("DELETE_EMPTYFILE" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                            log4jParamters_tFileOutputDelimited_4.append("FILE_EXIST_EXCEPTION" + " = " + "false");
                        log4jParamters_tFileOutputDelimited_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_4 - "  + (log4jParamters_tFileOutputDelimited_4) );
                    } 
                } 
            new BytesLimit65535_tFileOutputDelimited_4().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileOutputDelimited_4", "tFileOutputDelimited_1", "tFileOutputDelimited");
				talendJobLogProcess(globalMap);
			}
			

String fileName_tFileOutputDelimited_4 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_4{
                                    public void putHeaderValue_0(java.io.Writer outtFileOutputDelimited_4,final String OUT_DELIM_tFileOutputDelimited_4)throws java.lang.Exception{
                                    outtFileOutputDelimited_4.write("ASNUM");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASNAME");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASADAD");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASALPH");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSTAT");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTYPE");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASBOYN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASAUTO");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCNUM");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCLRK");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASDFAC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSTR");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASVOTH");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASBUYR");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCUST");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCNIN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASDTIN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCNLP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASDTLP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASAMLP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCKLP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASBAL1");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASBAL2");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("PONOT1");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("PONOT2");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("PONOT3");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("RCNOT1");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("RCNOT2");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("RCNOT3");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("BYNOT1");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("BYNOT2");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("BYNOT3");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASRVFR");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASLEAD");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTPO");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTLT");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTRMS");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTIND");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASPUSH");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTDSC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASFPCD");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASFALP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASFALN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASFOBC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSHP1");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSHP2");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSHPP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSHPC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASMINC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASMINA");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTRKP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTRKA");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTARP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSTOP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSKID");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASOTHQ");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASOTHP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASRTCD");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASVOLP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASVOLN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASREBP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASREBN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASALLP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASALLN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR01");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR02");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR03");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR04");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR05");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR06");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR07");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR08");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR09");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR10");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR11");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR12");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPR13");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APMRGP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("AGMROI");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APTRNS");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APAVOH");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPOBO");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPOSS");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APPOLT");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APLY01");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APLY02");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APLY03");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APLY04");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APTY01");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APTY02");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    }
                                    public void putHeaderValue_1(java.io.Writer outtFileOutputDelimited_4,final String OUT_DELIM_tFileOutputDelimited_4)throws java.lang.Exception{
                                    outtFileOutputDelimited_4.write("APTY03");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("APTY04");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASLST1");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASLST2");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("AS1099");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASPCCD");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASOTHN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASRAYN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCURC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTAXC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASSTYN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTTPC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTTDC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTTPU");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTTDU");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTLPC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTLDC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTLPU");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTLDU");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASLINM");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTTNC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTTND");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASGSTR");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASGSTN");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASGST1");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASGST2");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASFRTF");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASMSCF");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASALWF");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASHSHQ");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASLNOG");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASLUOE");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASLSOP");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASMTCH");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASCAUT");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASTAXD");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASALLC");
                                    outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                    outtFileOutputDelimited_4.write("ASMCHT");
                                }
                                public void putValue_0(final row3Struct row3,StringBuilder sb_tFileOutputDelimited_4,final String OUT_DELIM_tFileOutputDelimited_4)throws java.lang.Exception {
                                if(row3.ASNUM != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASNUM
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASNAME != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASNAME
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASADAD != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASADAD
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASALPH != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASALPH
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSTAT != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSTAT
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTYPE != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTYPE
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASBOYN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASBOYN
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASAUTO != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASAUTO
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCNUM != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCNUM.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCLRK != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCLRK
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASDFAC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASDFAC.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSTR != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSTR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASVOTH != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASVOTH
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASBUYR != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASBUYR
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCUST != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCUST
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCNIN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCNIN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASDTIN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASDTIN.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCNLP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCNLP.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASDTLP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASDTLP.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASAMLP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASAMLP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCKLP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCKLP.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASBAL1 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASBAL1.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASBAL2 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASBAL2.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.PONOT1 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.PONOT1
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.PONOT2 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.PONOT2
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.PONOT3 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.PONOT3
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.RCNOT1 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.RCNOT1
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.RCNOT2 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.RCNOT2
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.RCNOT3 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.RCNOT3
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.BYNOT1 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.BYNOT1
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.BYNOT2 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.BYNOT2
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.BYNOT3 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.BYNOT3
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASRVFR != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASRVFR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASLEAD != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASLEAD.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTPO != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTPO.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTLT != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTLT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTRMS != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTRMS
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTIND != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTIND
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASPUSH != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASPUSH.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTDSC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTDSC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASFPCD != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASFPCD
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASFALP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASFALP.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASFALN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASFALN.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASFOBC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASFOBC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSHP1 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSHP1
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSHP2 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSHP2
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSHPP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSHPP
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSHPC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSHPC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASMINC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASMINC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASMINA != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASMINA.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTRKP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTRKP.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTRKA != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTRKA.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTARP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTARP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSTOP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSTOP.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSKID != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSKID.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASOTHQ != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASOTHQ.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASOTHP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASOTHP.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASRTCD != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASRTCD
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASVOLP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASVOLP.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASVOLN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASVOLN.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASREBP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASREBP.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASREBN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASREBN.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASALLP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASALLP.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASALLN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASALLN.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR01 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR01.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR02 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR02.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR03 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR03.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR04 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR04.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR05 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR05.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR06 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR06.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR07 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR07.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR08 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR08.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR09 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR09.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR10 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR10.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR11 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR11.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR12 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR12.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPR13 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPR13.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APMRGP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APMRGP.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.AGMROI != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.AGMROI.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APTRNS != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APTRNS.setScale(1, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APAVOH != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APAVOH.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPOBO != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPOBO.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPOSS != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPOSS.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APPOLT != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APPOLT.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APLY01 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APLY01.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APLY02 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APLY02.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APLY03 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APLY03.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APLY04 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APLY04.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APTY01 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APTY01.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APTY02 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APTY02.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                }
                                public void putValue_1(final row3Struct row3,StringBuilder sb_tFileOutputDelimited_4,final String OUT_DELIM_tFileOutputDelimited_4)throws java.lang.Exception {
                                if(row3.APTY03 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APTY03.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.APTY04 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.APTY04.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASLST1 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASLST1.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASLST2 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASLST2.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.AS1099 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.AS1099
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASPCCD != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASPCCD
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASOTHN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASOTHN
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASRAYN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASRAYN
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCURC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCURC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTAXC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTAXC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASSTYN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASSTYN
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTTPC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTTPC.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTTDC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTTDC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTTPU != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTTPU.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTTDU != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTTDU
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTLPC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTLPC.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTLDC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTLDC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTLPU != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTLPU.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTLDU != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTLDU
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASLINM != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASLINM
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTTNC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTTNC.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTTND != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTTND
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASGSTR != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASGSTR
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASGSTN != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASGSTN
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASGST1 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASGST1.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASGST2 != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASGST2.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASFRTF != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASFRTF
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASMSCF != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASMSCF
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASALWF != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASALWF
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASHSHQ != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASHSHQ
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASLNOG != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASLNOG
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASLUOE != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASLUOE
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASLSOP != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASLSOP
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASMTCH != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASMTCH
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASCAUT != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASCAUT
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASTAXD != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASTAXD
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASALLC != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASALLC
                                );
                                }
                                sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                                if(row3.ASMCHT != null) {
                                sb_tFileOutputDelimited_4.append(
                                        row3.ASMCHT
                                );
                                }
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_4 fileOutputDelimitedUtil_tFileOutputDelimited_4=new FileOutputDelimitedUtil_tFileOutputDelimited_4();
    fileName_tFileOutputDelimited_4 = (new java.io.File("/data/talend/data_repository/APSUPP.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                                log.info("tFileOutputDelimited_4 - Creating directory '" + dir_tFileOutputDelimited_4.getCanonicalPath() +"'.");
                            dir_tFileOutputDelimited_4.mkdirs();
                                log.info("tFileOutputDelimited_4 - The directory '"+ dir_tFileOutputDelimited_4.getCanonicalPath() + "' has been created successfully.");
                        }
                    }

                        filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        String zipName_tFileOutputDelimited_4 = fullName_tFileOutputDelimited_4 + ".zip";
                        java.io.File file_tFileOutputDelimited_4 = new java.io.File(zipName_tFileOutputDelimited_4);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_4= null;
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        if(file_tFileOutputDelimited_4.exists()) {
                            file_tFileOutputDelimited_4.delete();
                        }
                        zipOut_tFileOutputDelimited_4= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_4)));
                        zipOut_tFileOutputDelimited_4.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_4.getName()));
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_4,"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
                        synchronized (multiThreadLockWrite) {
                                    if(file_tFileOutputDelimited_4.length()==0){
                                            fileOutputDelimitedUtil_tFileOutputDelimited_4.putHeaderValue_0(outtFileOutputDelimited_4,OUT_DELIM_tFileOutputDelimited_4);
                                            fileOutputDelimitedUtil_tFileOutputDelimited_4.putHeaderValue_1(outtFileOutputDelimited_4,OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_4 = new StringBuilder();
                    log4jParamters_tDBInput_4.append("Parameters:");
                            log4jParamters_tDBInput_4.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("HOST" + " = " + "context.jda_host_name");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("DBNAME" + " = " + "context.jda_mm_lib");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("USER" + " = " + "context.jda_user_name");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.jda_password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("QUERY" + " = " + "\"select * from MM4R5LIB.APSUPP\"");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("PROPERTIES" + " = " + "\"prompt=false\"");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ASNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASNAME")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASADAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALPH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTYPE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBOYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASAUTO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCLRK")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASDFAC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASVOTH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBUYR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCUST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCNIN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASDTIN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCNLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASDTLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASAMLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCKLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBAL1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBAL2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("RCNOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("RCNOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("RCNOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("BYNOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("BYNOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("BYNOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASRVFR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLEAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTPO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTRMS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTIND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASPUSH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTDSC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFPCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFALP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFALN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFOBC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHP1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHP2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHPP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMINC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMINA")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTRKP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTRKA")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTARP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSKID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASOTHQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASOTHP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASRTCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASVOLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASVOLN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASREBP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASREBN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALLN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR05")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR06")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR07")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR08")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR09")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR10")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR11")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR12")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR13")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APMRGP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("AGMROI")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTRNS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APAVOH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPOBO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPOSS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPOLT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLST1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLST2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("AS1099")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASPCCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASOTHN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASRAYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCURC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTAXC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTDC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTPU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTDU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLDC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLPU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLDU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLINM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTNC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGSTR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGSTN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGST1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGST2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFRTF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMSCF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALWF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASHSHQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLNOG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLUOE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLSOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMTCH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCAUT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTAXD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALLC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMCHT")+"}]");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("SET_QUERY_TIMEOUT" + " = " + "false");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_4 - "  + (log4jParamters_tDBInput_4) );
                    } 
                } 
            new BytesLimit65535_tDBInput_4().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tDBInput_4", "tDBInput_1", "tAS400Input");
				talendJobLogProcess(globalMap);
			}
			
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.jda_user_name;
				
				
	final String decryptedPassword_tDBInput_4 = context.jda_password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				  
				String url_tDBInput_4 = "jdbc:as400://" + context.jda_host_name + "/" + context.jda_mm_lib + ";" + "prompt=false";
				
	    		log.debug("tDBInput_4 - Driver ClassName: "+driverClass_tDBInput_4+".");
			
	    		log.debug("tDBInput_4 - Connection attempt to '" + url_tDBInput_4 + "' with the username '" + dbUser_tDBInput_4 + "'.");
			
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
	    		log.debug("tDBInput_4 - Connection to '" + url_tDBInput_4 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "select * from MM4R5LIB.APSUPP";
		    
	    		log.debug("tDBInput_4 - Executing the query: '" + dbquery_tDBInput_4 + "'.");
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    	log.debug("tDBInput_4 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row3.ASNUM = null;
							} else {
		                          
            row3.ASNUM = rs_tDBInput_4.getFloat(1);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASNUM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row3.ASNAME = null;
							} else {
	                         		
        	row3.ASNAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row3.ASADAD = null;
							} else {
	                         		
        	row3.ASADAD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row3.ASALPH = null;
							} else {
	                         		
        	row3.ASALPH = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row3.ASSTAT = null;
							} else {
	                         		
        	row3.ASSTAT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row3.ASTYPE = null;
							} else {
	                         		
        	row3.ASTYPE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row3.ASBOYN = null;
							} else {
	                         		
        	row3.ASBOYN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row3.ASAUTO = null;
							} else {
	                         		
        	row3.ASAUTO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row3.ASCNUM = null;
							} else {
		                          
            row3.ASCNUM = rs_tDBInput_4.getBigDecimal(9);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASCNUM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row3.ASCLRK = null;
							} else {
		                          
            row3.ASCLRK = rs_tDBInput_4.getFloat(10);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASCLRK = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row3.ASDFAC = null;
							} else {
		                          
            row3.ASDFAC = rs_tDBInput_4.getBigDecimal(11);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASDFAC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row3.ASSTR = null;
							} else {
		                          
            row3.ASSTR = rs_tDBInput_4.getBigDecimal(12);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASSTR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row3.ASVOTH = null;
							} else {
		                          
            row3.ASVOTH = rs_tDBInput_4.getFloat(13);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASVOTH = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row3.ASBUYR = null;
							} else {
	                         		
        	row3.ASBUYR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 14, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row3.ASCUST = null;
							} else {
	                         		
        	row3.ASCUST = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row3.ASCNIN = null;
							} else {
		                          
            row3.ASCNIN = rs_tDBInput_4.getBigDecimal(16);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASCNIN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row3.ASDTIN = null;
							} else {
		                          
            row3.ASDTIN = rs_tDBInput_4.getBigDecimal(17);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASDTIN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row3.ASCNLP = null;
							} else {
		                          
            row3.ASCNLP = rs_tDBInput_4.getBigDecimal(18);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASCNLP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row3.ASDTLP = null;
							} else {
		                          
            row3.ASDTLP = rs_tDBInput_4.getBigDecimal(19);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASDTLP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row3.ASAMLP = null;
							} else {
		                          
            row3.ASAMLP = rs_tDBInput_4.getBigDecimal(20);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASAMLP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row3.ASCKLP = null;
							} else {
		                          
            row3.ASCKLP = rs_tDBInput_4.getBigDecimal(21);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASCKLP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row3.ASBAL1 = null;
							} else {
		                          
            row3.ASBAL1 = rs_tDBInput_4.getBigDecimal(22);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASBAL1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row3.ASBAL2 = null;
							} else {
		                          
            row3.ASBAL2 = rs_tDBInput_4.getBigDecimal(23);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASBAL2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row3.PONOT1 = null;
							} else {
	                         		
        	row3.PONOT1 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row3.PONOT2 = null;
							} else {
	                         		
        	row3.PONOT2 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 25, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 26) {
								row3.PONOT3 = null;
							} else {
	                         		
        	row3.PONOT3 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 26, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 27) {
								row3.RCNOT1 = null;
							} else {
	                         		
        	row3.RCNOT1 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 27, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 28) {
								row3.RCNOT2 = null;
							} else {
	                         		
        	row3.RCNOT2 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 28, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 29) {
								row3.RCNOT3 = null;
							} else {
	                         		
        	row3.RCNOT3 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 29, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 30) {
								row3.BYNOT1 = null;
							} else {
	                         		
        	row3.BYNOT1 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 30, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 31) {
								row3.BYNOT2 = null;
							} else {
	                         		
        	row3.BYNOT2 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 31, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 32) {
								row3.BYNOT3 = null;
							} else {
	                         		
        	row3.BYNOT3 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 32, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 33) {
								row3.ASRVFR = null;
							} else {
		                          
            row3.ASRVFR = rs_tDBInput_4.getBigDecimal(33);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASRVFR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 34) {
								row3.ASLEAD = null;
							} else {
		                          
            row3.ASLEAD = rs_tDBInput_4.getBigDecimal(34);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASLEAD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 35) {
								row3.ASTPO = null;
							} else {
		                          
            row3.ASTPO = rs_tDBInput_4.getBigDecimal(35);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTPO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 36) {
								row3.ASTLT = null;
							} else {
		                          
            row3.ASTLT = rs_tDBInput_4.getBigDecimal(36);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTLT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 37) {
								row3.ASTRMS = null;
							} else {
		                          
            row3.ASTRMS = rs_tDBInput_4.getFloat(37);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTRMS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 38) {
								row3.ASTIND = null;
							} else {
	                         		
        	row3.ASTIND = routines.system.JDBCUtil.getString(rs_tDBInput_4, 38, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 39) {
								row3.ASPUSH = null;
							} else {
		                          
            row3.ASPUSH = rs_tDBInput_4.getBigDecimal(39);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASPUSH = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 40) {
								row3.ASTDSC = null;
							} else {
	                         		
        	row3.ASTDSC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 40, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 41) {
								row3.ASFPCD = null;
							} else {
	                         		
        	row3.ASFPCD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 41, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 42) {
								row3.ASFALP = null;
							} else {
		                          
            row3.ASFALP = rs_tDBInput_4.getBigDecimal(42);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASFALP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 43) {
								row3.ASFALN = null;
							} else {
		                          
            row3.ASFALN = rs_tDBInput_4.getBigDecimal(43);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASFALN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 44) {
								row3.ASFOBC = null;
							} else {
	                         		
        	row3.ASFOBC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 44, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 45) {
								row3.ASSHP1 = null;
							} else {
	                         		
        	row3.ASSHP1 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 45, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 46) {
								row3.ASSHP2 = null;
							} else {
	                         		
        	row3.ASSHP2 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 46, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 47) {
								row3.ASSHPP = null;
							} else {
	                         		
        	row3.ASSHPP = routines.system.JDBCUtil.getString(rs_tDBInput_4, 47, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 48) {
								row3.ASSHPC = null;
							} else {
	                         		
        	row3.ASSHPC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 48, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 49) {
								row3.ASMINC = null;
							} else {
	                         		
        	row3.ASMINC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 49, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 50) {
								row3.ASMINA = null;
							} else {
		                          
            row3.ASMINA = rs_tDBInput_4.getBigDecimal(50);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASMINA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 51) {
								row3.ASTRKP = null;
							} else {
		                          
            row3.ASTRKP = rs_tDBInput_4.getBigDecimal(51);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTRKP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 52) {
								row3.ASTRKA = null;
							} else {
		                          
            row3.ASTRKA = rs_tDBInput_4.getBigDecimal(52);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTRKA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 53) {
								row3.ASTARP = null;
							} else {
		                          
            row3.ASTARP = rs_tDBInput_4.getBigDecimal(53);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTARP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 54) {
								row3.ASSTOP = null;
							} else {
		                          
            row3.ASSTOP = rs_tDBInput_4.getBigDecimal(54);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASSTOP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 55) {
								row3.ASSKID = null;
							} else {
		                          
            row3.ASSKID = rs_tDBInput_4.getBigDecimal(55);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASSKID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 56) {
								row3.ASOTHQ = null;
							} else {
		                          
            row3.ASOTHQ = rs_tDBInput_4.getBigDecimal(56);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASOTHQ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 57) {
								row3.ASOTHP = null;
							} else {
		                          
            row3.ASOTHP = rs_tDBInput_4.getBigDecimal(57);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASOTHP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 58) {
								row3.ASRTCD = null;
							} else {
	                         		
        	row3.ASRTCD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 58, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 59) {
								row3.ASVOLP = null;
							} else {
		                          
            row3.ASVOLP = rs_tDBInput_4.getBigDecimal(59);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASVOLP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 60) {
								row3.ASVOLN = null;
							} else {
		                          
            row3.ASVOLN = rs_tDBInput_4.getBigDecimal(60);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASVOLN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 61) {
								row3.ASREBP = null;
							} else {
		                          
            row3.ASREBP = rs_tDBInput_4.getBigDecimal(61);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASREBP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 62) {
								row3.ASREBN = null;
							} else {
		                          
            row3.ASREBN = rs_tDBInput_4.getBigDecimal(62);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASREBN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 63) {
								row3.ASALLP = null;
							} else {
		                          
            row3.ASALLP = rs_tDBInput_4.getBigDecimal(63);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASALLP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 64) {
								row3.ASALLN = null;
							} else {
		                          
            row3.ASALLN = rs_tDBInput_4.getBigDecimal(64);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASALLN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 65) {
								row3.APPR01 = null;
							} else {
		                          
            row3.APPR01 = rs_tDBInput_4.getBigDecimal(65);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR01 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 66) {
								row3.APPR02 = null;
							} else {
		                          
            row3.APPR02 = rs_tDBInput_4.getBigDecimal(66);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR02 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 67) {
								row3.APPR03 = null;
							} else {
		                          
            row3.APPR03 = rs_tDBInput_4.getBigDecimal(67);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR03 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 68) {
								row3.APPR04 = null;
							} else {
		                          
            row3.APPR04 = rs_tDBInput_4.getBigDecimal(68);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR04 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 69) {
								row3.APPR05 = null;
							} else {
		                          
            row3.APPR05 = rs_tDBInput_4.getBigDecimal(69);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR05 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 70) {
								row3.APPR06 = null;
							} else {
		                          
            row3.APPR06 = rs_tDBInput_4.getBigDecimal(70);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR06 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 71) {
								row3.APPR07 = null;
							} else {
		                          
            row3.APPR07 = rs_tDBInput_4.getBigDecimal(71);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR07 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 72) {
								row3.APPR08 = null;
							} else {
		                          
            row3.APPR08 = rs_tDBInput_4.getBigDecimal(72);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR08 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 73) {
								row3.APPR09 = null;
							} else {
		                          
            row3.APPR09 = rs_tDBInput_4.getBigDecimal(73);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR09 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 74) {
								row3.APPR10 = null;
							} else {
		                          
            row3.APPR10 = rs_tDBInput_4.getBigDecimal(74);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR10 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 75) {
								row3.APPR11 = null;
							} else {
		                          
            row3.APPR11 = rs_tDBInput_4.getBigDecimal(75);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR11 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 76) {
								row3.APPR12 = null;
							} else {
		                          
            row3.APPR12 = rs_tDBInput_4.getBigDecimal(76);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR12 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 77) {
								row3.APPR13 = null;
							} else {
		                          
            row3.APPR13 = rs_tDBInput_4.getBigDecimal(77);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPR13 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 78) {
								row3.APMRGP = null;
							} else {
		                          
            row3.APMRGP = rs_tDBInput_4.getBigDecimal(78);
            if(rs_tDBInput_4.wasNull()){
                    row3.APMRGP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 79) {
								row3.AGMROI = null;
							} else {
		                          
            row3.AGMROI = rs_tDBInput_4.getBigDecimal(79);
            if(rs_tDBInput_4.wasNull()){
                    row3.AGMROI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 80) {
								row3.APTRNS = null;
							} else {
		                          
            row3.APTRNS = rs_tDBInput_4.getBigDecimal(80);
            if(rs_tDBInput_4.wasNull()){
                    row3.APTRNS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 81) {
								row3.APAVOH = null;
							} else {
		                          
            row3.APAVOH = rs_tDBInput_4.getBigDecimal(81);
            if(rs_tDBInput_4.wasNull()){
                    row3.APAVOH = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 82) {
								row3.APPOBO = null;
							} else {
		                          
            row3.APPOBO = rs_tDBInput_4.getBigDecimal(82);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPOBO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 83) {
								row3.APPOSS = null;
							} else {
		                          
            row3.APPOSS = rs_tDBInput_4.getBigDecimal(83);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPOSS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 84) {
								row3.APPOLT = null;
							} else {
		                          
            row3.APPOLT = rs_tDBInput_4.getBigDecimal(84);
            if(rs_tDBInput_4.wasNull()){
                    row3.APPOLT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 85) {
								row3.APLY01 = null;
							} else {
		                          
            row3.APLY01 = rs_tDBInput_4.getBigDecimal(85);
            if(rs_tDBInput_4.wasNull()){
                    row3.APLY01 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 86) {
								row3.APLY02 = null;
							} else {
		                          
            row3.APLY02 = rs_tDBInput_4.getBigDecimal(86);
            if(rs_tDBInput_4.wasNull()){
                    row3.APLY02 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 87) {
								row3.APLY03 = null;
							} else {
		                          
            row3.APLY03 = rs_tDBInput_4.getBigDecimal(87);
            if(rs_tDBInput_4.wasNull()){
                    row3.APLY03 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 88) {
								row3.APLY04 = null;
							} else {
		                          
            row3.APLY04 = rs_tDBInput_4.getBigDecimal(88);
            if(rs_tDBInput_4.wasNull()){
                    row3.APLY04 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 89) {
								row3.APTY01 = null;
							} else {
		                          
            row3.APTY01 = rs_tDBInput_4.getBigDecimal(89);
            if(rs_tDBInput_4.wasNull()){
                    row3.APTY01 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 90) {
								row3.APTY02 = null;
							} else {
		                          
            row3.APTY02 = rs_tDBInput_4.getBigDecimal(90);
            if(rs_tDBInput_4.wasNull()){
                    row3.APTY02 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 91) {
								row3.APTY03 = null;
							} else {
		                          
            row3.APTY03 = rs_tDBInput_4.getBigDecimal(91);
            if(rs_tDBInput_4.wasNull()){
                    row3.APTY03 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 92) {
								row3.APTY04 = null;
							} else {
		                          
            row3.APTY04 = rs_tDBInput_4.getBigDecimal(92);
            if(rs_tDBInput_4.wasNull()){
                    row3.APTY04 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 93) {
								row3.ASLST1 = null;
							} else {
		                          
            row3.ASLST1 = rs_tDBInput_4.getBigDecimal(93);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASLST1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 94) {
								row3.ASLST2 = null;
							} else {
		                          
            row3.ASLST2 = rs_tDBInput_4.getBigDecimal(94);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASLST2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 95) {
								row3.AS1099 = null;
							} else {
	                         		
        	row3.AS1099 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 95, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 96) {
								row3.ASPCCD = null;
							} else {
	                         		
        	row3.ASPCCD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 96, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 97) {
								row3.ASOTHN = null;
							} else {
	                         		
        	row3.ASOTHN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 97, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 98) {
								row3.ASRAYN = null;
							} else {
	                         		
        	row3.ASRAYN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 98, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 99) {
								row3.ASCURC = null;
							} else {
	                         		
        	row3.ASCURC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 99, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 100) {
								row3.ASTAXC = null;
							} else {
	                         		
        	row3.ASTAXC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 100, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 101) {
								row3.ASSTYN = null;
							} else {
	                         		
        	row3.ASSTYN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 101, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 102) {
								row3.ASTTPC = null;
							} else {
		                          
            row3.ASTTPC = rs_tDBInput_4.getBigDecimal(102);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTTPC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 103) {
								row3.ASTTDC = null;
							} else {
	                         		
        	row3.ASTTDC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 103, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 104) {
								row3.ASTTPU = null;
							} else {
		                          
            row3.ASTTPU = rs_tDBInput_4.getBigDecimal(104);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTTPU = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 105) {
								row3.ASTTDU = null;
							} else {
	                         		
        	row3.ASTTDU = routines.system.JDBCUtil.getString(rs_tDBInput_4, 105, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 106) {
								row3.ASTLPC = null;
							} else {
		                          
            row3.ASTLPC = rs_tDBInput_4.getBigDecimal(106);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTLPC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 107) {
								row3.ASTLDC = null;
							} else {
	                         		
        	row3.ASTLDC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 107, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 108) {
								row3.ASTLPU = null;
							} else {
		                          
            row3.ASTLPU = rs_tDBInput_4.getBigDecimal(108);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTLPU = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 109) {
								row3.ASTLDU = null;
							} else {
	                         		
        	row3.ASTLDU = routines.system.JDBCUtil.getString(rs_tDBInput_4, 109, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 110) {
								row3.ASLINM = null;
							} else {
	                         		
        	row3.ASLINM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 110, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 111) {
								row3.ASTTNC = null;
							} else {
		                          
            row3.ASTTNC = rs_tDBInput_4.getBigDecimal(111);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASTTNC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 112) {
								row3.ASTTND = null;
							} else {
	                         		
        	row3.ASTTND = routines.system.JDBCUtil.getString(rs_tDBInput_4, 112, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 113) {
								row3.ASGSTR = null;
							} else {
	                         		
        	row3.ASGSTR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 113, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 114) {
								row3.ASGSTN = null;
							} else {
	                         		
        	row3.ASGSTN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 114, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 115) {
								row3.ASGST1 = null;
							} else {
		                          
            row3.ASGST1 = rs_tDBInput_4.getBigDecimal(115);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASGST1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 116) {
								row3.ASGST2 = null;
							} else {
		                          
            row3.ASGST2 = rs_tDBInput_4.getBigDecimal(116);
            if(rs_tDBInput_4.wasNull()){
                    row3.ASGST2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 117) {
								row3.ASFRTF = null;
							} else {
	                         		
        	row3.ASFRTF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 117, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 118) {
								row3.ASMSCF = null;
							} else {
	                         		
        	row3.ASMSCF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 118, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 119) {
								row3.ASALWF = null;
							} else {
	                         		
        	row3.ASALWF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 119, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 120) {
								row3.ASHSHQ = null;
							} else {
	                         		
        	row3.ASHSHQ = routines.system.JDBCUtil.getString(rs_tDBInput_4, 120, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 121) {
								row3.ASLNOG = null;
							} else {
	                         		
        	row3.ASLNOG = routines.system.JDBCUtil.getString(rs_tDBInput_4, 121, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 122) {
								row3.ASLUOE = null;
							} else {
	                         		
        	row3.ASLUOE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 122, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 123) {
								row3.ASLSOP = null;
							} else {
	                         		
        	row3.ASLSOP = routines.system.JDBCUtil.getString(rs_tDBInput_4, 123, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 124) {
								row3.ASMTCH = null;
							} else {
	                         		
        	row3.ASMTCH = routines.system.JDBCUtil.getString(rs_tDBInput_4, 124, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 125) {
								row3.ASCAUT = null;
							} else {
	                         		
        	row3.ASCAUT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 125, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 126) {
								row3.ASTAXD = null;
							} else {
	                         		
        	row3.ASTAXD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 126, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 127) {
								row3.ASALLC = null;
							} else {
	                         		
        	row3.ASALLC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 127, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 128) {
								row3.ASMCHT = null;
							} else {
	                         		
        	row3.ASMCHT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 128, false);
		                    }
					
						log.debug("tDBInput_4 - Retrieving the record " + nb_line_tDBInput_4 + ".");
					



 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row3","tDBInput_4","tDBInput_1","tAS400Input","tFileOutputDelimited_4","tFileOutputDelimited_1","tFileOutputDelimited"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row3 - " + (row3==null? "": row3.toLogString()));
    			}
    		


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            fileOutputDelimitedUtil_tFileOutputDelimited_4.putValue_0(row3,sb_tFileOutputDelimited_4,OUT_DELIM_tFileOutputDelimited_4);
                            fileOutputDelimitedUtil_tFileOutputDelimited_4.putValue_1(row3,sb_tFileOutputDelimited_4,OUT_DELIM_tFileOutputDelimited_4);
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());
                        log.debug("tFileOutputDelimited_4 - Writing the record " + nb_line_tFileOutputDelimited_4 + ".");

                    }



 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
	    		log.debug("tDBInput_4 - Closing the connection to the database.");
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_4 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
	    		log.debug("tDBInput_4 - Retrieved records count: "+nb_line_tDBInput_4 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_4 - "  + ("Done.") );

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	
				log.debug("tFileOutputDelimited_4 - Written records count: " + nb_line_tFileOutputDelimited_4 + " .");
			

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row3",2,0,
			 			"tDBInput_4","tDBInput_1","tAS400Input","tFileOutputDelimited_4","tFileOutputDelimited_1","tFileOutputDelimited","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tFileOutputDelimited_4 - "  + ("Done.") );

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputDelimited_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class APSUPPStruct implements routines.system.IPersistableRow<APSUPPStruct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Double ASNUM;

				public Double getASNUM () {
					return this.ASNUM;
				}

				public Boolean ASNUMIsNullable(){
				    return true;
				}
				public Boolean ASNUMIsKey(){
				    return false;
				}
				public Integer ASNUMLength(){
				    return null;
				}
				public Integer ASNUMPrecision(){
				    return null;
				}
				public String ASNUMDefault(){
				
					return "";
				
				}
				public String ASNUMComment(){
				
				    return "";
				
				}
				public String ASNUMPattern(){
				
					return "";
				
				}
				public String ASNUMOriginalDbColumnName(){
				
					return "ASNUM";
				
				}

				
			    public String ASNAME;

				public String getASNAME () {
					return this.ASNAME;
				}

				public Boolean ASNAMEIsNullable(){
				    return true;
				}
				public Boolean ASNAMEIsKey(){
				    return false;
				}
				public Integer ASNAMELength(){
				    return null;
				}
				public Integer ASNAMEPrecision(){
				    return null;
				}
				public String ASNAMEDefault(){
				
					return null;
				
				}
				public String ASNAMEComment(){
				
				    return "";
				
				}
				public String ASNAMEPattern(){
				
					return "";
				
				}
				public String ASNAMEOriginalDbColumnName(){
				
					return "ASNAME";
				
				}

				
			    public String ASADAD;

				public String getASADAD () {
					return this.ASADAD;
				}

				public Boolean ASADADIsNullable(){
				    return true;
				}
				public Boolean ASADADIsKey(){
				    return false;
				}
				public Integer ASADADLength(){
				    return null;
				}
				public Integer ASADADPrecision(){
				    return null;
				}
				public String ASADADDefault(){
				
					return null;
				
				}
				public String ASADADComment(){
				
				    return "";
				
				}
				public String ASADADPattern(){
				
					return "";
				
				}
				public String ASADADOriginalDbColumnName(){
				
					return "ASADAD";
				
				}

				
			    public String ASALPH;

				public String getASALPH () {
					return this.ASALPH;
				}

				public Boolean ASALPHIsNullable(){
				    return true;
				}
				public Boolean ASALPHIsKey(){
				    return false;
				}
				public Integer ASALPHLength(){
				    return null;
				}
				public Integer ASALPHPrecision(){
				    return null;
				}
				public String ASALPHDefault(){
				
					return null;
				
				}
				public String ASALPHComment(){
				
				    return "";
				
				}
				public String ASALPHPattern(){
				
					return "";
				
				}
				public String ASALPHOriginalDbColumnName(){
				
					return "ASALPH";
				
				}

				
			    public String ASSTAT;

				public String getASSTAT () {
					return this.ASSTAT;
				}

				public Boolean ASSTATIsNullable(){
				    return true;
				}
				public Boolean ASSTATIsKey(){
				    return false;
				}
				public Integer ASSTATLength(){
				    return null;
				}
				public Integer ASSTATPrecision(){
				    return null;
				}
				public String ASSTATDefault(){
				
					return null;
				
				}
				public String ASSTATComment(){
				
				    return "";
				
				}
				public String ASSTATPattern(){
				
					return "";
				
				}
				public String ASSTATOriginalDbColumnName(){
				
					return "ASSTAT";
				
				}

				
			    public String ASTYPE;

				public String getASTYPE () {
					return this.ASTYPE;
				}

				public Boolean ASTYPEIsNullable(){
				    return true;
				}
				public Boolean ASTYPEIsKey(){
				    return false;
				}
				public Integer ASTYPELength(){
				    return null;
				}
				public Integer ASTYPEPrecision(){
				    return null;
				}
				public String ASTYPEDefault(){
				
					return null;
				
				}
				public String ASTYPEComment(){
				
				    return "";
				
				}
				public String ASTYPEPattern(){
				
					return "";
				
				}
				public String ASTYPEOriginalDbColumnName(){
				
					return "ASTYPE";
				
				}

				
			    public String ASBOYN;

				public String getASBOYN () {
					return this.ASBOYN;
				}

				public Boolean ASBOYNIsNullable(){
				    return true;
				}
				public Boolean ASBOYNIsKey(){
				    return false;
				}
				public Integer ASBOYNLength(){
				    return null;
				}
				public Integer ASBOYNPrecision(){
				    return null;
				}
				public String ASBOYNDefault(){
				
					return null;
				
				}
				public String ASBOYNComment(){
				
				    return "";
				
				}
				public String ASBOYNPattern(){
				
					return "";
				
				}
				public String ASBOYNOriginalDbColumnName(){
				
					return "ASBOYN";
				
				}

				
			    public String ASAUTO;

				public String getASAUTO () {
					return this.ASAUTO;
				}

				public Boolean ASAUTOIsNullable(){
				    return true;
				}
				public Boolean ASAUTOIsKey(){
				    return false;
				}
				public Integer ASAUTOLength(){
				    return null;
				}
				public Integer ASAUTOPrecision(){
				    return null;
				}
				public String ASAUTODefault(){
				
					return null;
				
				}
				public String ASAUTOComment(){
				
				    return "";
				
				}
				public String ASAUTOPattern(){
				
					return "";
				
				}
				public String ASAUTOOriginalDbColumnName(){
				
					return "ASAUTO";
				
				}

				
			    public BigDecimal ASCNUM;

				public BigDecimal getASCNUM () {
					return this.ASCNUM;
				}

				public Boolean ASCNUMIsNullable(){
				    return true;
				}
				public Boolean ASCNUMIsKey(){
				    return false;
				}
				public Integer ASCNUMLength(){
				    return null;
				}
				public Integer ASCNUMPrecision(){
				    return null;
				}
				public String ASCNUMDefault(){
				
					return "";
				
				}
				public String ASCNUMComment(){
				
				    return "";
				
				}
				public String ASCNUMPattern(){
				
					return "";
				
				}
				public String ASCNUMOriginalDbColumnName(){
				
					return "ASCNUM";
				
				}

				
			    public Double ASCLRK;

				public Double getASCLRK () {
					return this.ASCLRK;
				}

				public Boolean ASCLRKIsNullable(){
				    return true;
				}
				public Boolean ASCLRKIsKey(){
				    return false;
				}
				public Integer ASCLRKLength(){
				    return null;
				}
				public Integer ASCLRKPrecision(){
				    return null;
				}
				public String ASCLRKDefault(){
				
					return "";
				
				}
				public String ASCLRKComment(){
				
				    return "";
				
				}
				public String ASCLRKPattern(){
				
					return "";
				
				}
				public String ASCLRKOriginalDbColumnName(){
				
					return "ASCLRK";
				
				}

				
			    public BigDecimal ASDFAC;

				public BigDecimal getASDFAC () {
					return this.ASDFAC;
				}

				public Boolean ASDFACIsNullable(){
				    return true;
				}
				public Boolean ASDFACIsKey(){
				    return false;
				}
				public Integer ASDFACLength(){
				    return null;
				}
				public Integer ASDFACPrecision(){
				    return null;
				}
				public String ASDFACDefault(){
				
					return "";
				
				}
				public String ASDFACComment(){
				
				    return "";
				
				}
				public String ASDFACPattern(){
				
					return "";
				
				}
				public String ASDFACOriginalDbColumnName(){
				
					return "ASDFAC";
				
				}

				
			    public BigDecimal ASSTR;

				public BigDecimal getASSTR () {
					return this.ASSTR;
				}

				public Boolean ASSTRIsNullable(){
				    return true;
				}
				public Boolean ASSTRIsKey(){
				    return false;
				}
				public Integer ASSTRLength(){
				    return null;
				}
				public Integer ASSTRPrecision(){
				    return null;
				}
				public String ASSTRDefault(){
				
					return "";
				
				}
				public String ASSTRComment(){
				
				    return "";
				
				}
				public String ASSTRPattern(){
				
					return "";
				
				}
				public String ASSTROriginalDbColumnName(){
				
					return "ASSTR";
				
				}

				
			    public Double ASVOTH;

				public Double getASVOTH () {
					return this.ASVOTH;
				}

				public Boolean ASVOTHIsNullable(){
				    return true;
				}
				public Boolean ASVOTHIsKey(){
				    return false;
				}
				public Integer ASVOTHLength(){
				    return null;
				}
				public Integer ASVOTHPrecision(){
				    return null;
				}
				public String ASVOTHDefault(){
				
					return "";
				
				}
				public String ASVOTHComment(){
				
				    return "";
				
				}
				public String ASVOTHPattern(){
				
					return "";
				
				}
				public String ASVOTHOriginalDbColumnName(){
				
					return "ASVOTH";
				
				}

				
			    public String ASBUYR;

				public String getASBUYR () {
					return this.ASBUYR;
				}

				public Boolean ASBUYRIsNullable(){
				    return true;
				}
				public Boolean ASBUYRIsKey(){
				    return false;
				}
				public Integer ASBUYRLength(){
				    return null;
				}
				public Integer ASBUYRPrecision(){
				    return null;
				}
				public String ASBUYRDefault(){
				
					return "";
				
				}
				public String ASBUYRComment(){
				
				    return "";
				
				}
				public String ASBUYRPattern(){
				
					return "";
				
				}
				public String ASBUYROriginalDbColumnName(){
				
					return "ASBUYR";
				
				}

				
			    public String ASCUST;

				public String getASCUST () {
					return this.ASCUST;
				}

				public Boolean ASCUSTIsNullable(){
				    return true;
				}
				public Boolean ASCUSTIsKey(){
				    return false;
				}
				public Integer ASCUSTLength(){
				    return null;
				}
				public Integer ASCUSTPrecision(){
				    return null;
				}
				public String ASCUSTDefault(){
				
					return "";
				
				}
				public String ASCUSTComment(){
				
				    return "";
				
				}
				public String ASCUSTPattern(){
				
					return "";
				
				}
				public String ASCUSTOriginalDbColumnName(){
				
					return "ASCUST";
				
				}

				
			    public BigDecimal ASCNIN;

				public BigDecimal getASCNIN () {
					return this.ASCNIN;
				}

				public Boolean ASCNINIsNullable(){
				    return true;
				}
				public Boolean ASCNINIsKey(){
				    return false;
				}
				public Integer ASCNINLength(){
				    return null;
				}
				public Integer ASCNINPrecision(){
				    return null;
				}
				public String ASCNINDefault(){
				
					return "";
				
				}
				public String ASCNINComment(){
				
				    return "";
				
				}
				public String ASCNINPattern(){
				
					return "";
				
				}
				public String ASCNINOriginalDbColumnName(){
				
					return "ASCNIN";
				
				}

				
			    public BigDecimal ASDTIN;

				public BigDecimal getASDTIN () {
					return this.ASDTIN;
				}

				public Boolean ASDTINIsNullable(){
				    return true;
				}
				public Boolean ASDTINIsKey(){
				    return false;
				}
				public Integer ASDTINLength(){
				    return null;
				}
				public Integer ASDTINPrecision(){
				    return null;
				}
				public String ASDTINDefault(){
				
					return "";
				
				}
				public String ASDTINComment(){
				
				    return "";
				
				}
				public String ASDTINPattern(){
				
					return "";
				
				}
				public String ASDTINOriginalDbColumnName(){
				
					return "ASDTIN";
				
				}

				
			    public BigDecimal ASCNLP;

				public BigDecimal getASCNLP () {
					return this.ASCNLP;
				}

				public Boolean ASCNLPIsNullable(){
				    return true;
				}
				public Boolean ASCNLPIsKey(){
				    return false;
				}
				public Integer ASCNLPLength(){
				    return null;
				}
				public Integer ASCNLPPrecision(){
				    return null;
				}
				public String ASCNLPDefault(){
				
					return "";
				
				}
				public String ASCNLPComment(){
				
				    return "";
				
				}
				public String ASCNLPPattern(){
				
					return "";
				
				}
				public String ASCNLPOriginalDbColumnName(){
				
					return "ASCNLP";
				
				}

				
			    public BigDecimal ASDTLP;

				public BigDecimal getASDTLP () {
					return this.ASDTLP;
				}

				public Boolean ASDTLPIsNullable(){
				    return true;
				}
				public Boolean ASDTLPIsKey(){
				    return false;
				}
				public Integer ASDTLPLength(){
				    return null;
				}
				public Integer ASDTLPPrecision(){
				    return null;
				}
				public String ASDTLPDefault(){
				
					return "";
				
				}
				public String ASDTLPComment(){
				
				    return "";
				
				}
				public String ASDTLPPattern(){
				
					return "";
				
				}
				public String ASDTLPOriginalDbColumnName(){
				
					return "ASDTLP";
				
				}

				
			    public BigDecimal ASAMLP;

				public BigDecimal getASAMLP () {
					return this.ASAMLP;
				}

				public Boolean ASAMLPIsNullable(){
				    return true;
				}
				public Boolean ASAMLPIsKey(){
				    return false;
				}
				public Integer ASAMLPLength(){
				    return null;
				}
				public Integer ASAMLPPrecision(){
				    return null;
				}
				public String ASAMLPDefault(){
				
					return "";
				
				}
				public String ASAMLPComment(){
				
				    return "";
				
				}
				public String ASAMLPPattern(){
				
					return "";
				
				}
				public String ASAMLPOriginalDbColumnName(){
				
					return "ASAMLP";
				
				}

				
			    public BigDecimal ASCKLP;

				public BigDecimal getASCKLP () {
					return this.ASCKLP;
				}

				public Boolean ASCKLPIsNullable(){
				    return true;
				}
				public Boolean ASCKLPIsKey(){
				    return false;
				}
				public Integer ASCKLPLength(){
				    return null;
				}
				public Integer ASCKLPPrecision(){
				    return null;
				}
				public String ASCKLPDefault(){
				
					return "";
				
				}
				public String ASCKLPComment(){
				
				    return "";
				
				}
				public String ASCKLPPattern(){
				
					return "";
				
				}
				public String ASCKLPOriginalDbColumnName(){
				
					return "ASCKLP";
				
				}

				
			    public BigDecimal ASBAL1;

				public BigDecimal getASBAL1 () {
					return this.ASBAL1;
				}

				public Boolean ASBAL1IsNullable(){
				    return true;
				}
				public Boolean ASBAL1IsKey(){
				    return false;
				}
				public Integer ASBAL1Length(){
				    return null;
				}
				public Integer ASBAL1Precision(){
				    return null;
				}
				public String ASBAL1Default(){
				
					return "";
				
				}
				public String ASBAL1Comment(){
				
				    return "";
				
				}
				public String ASBAL1Pattern(){
				
					return "";
				
				}
				public String ASBAL1OriginalDbColumnName(){
				
					return "ASBAL1";
				
				}

				
			    public BigDecimal ASBAL2;

				public BigDecimal getASBAL2 () {
					return this.ASBAL2;
				}

				public Boolean ASBAL2IsNullable(){
				    return true;
				}
				public Boolean ASBAL2IsKey(){
				    return false;
				}
				public Integer ASBAL2Length(){
				    return null;
				}
				public Integer ASBAL2Precision(){
				    return null;
				}
				public String ASBAL2Default(){
				
					return "";
				
				}
				public String ASBAL2Comment(){
				
				    return "";
				
				}
				public String ASBAL2Pattern(){
				
					return "";
				
				}
				public String ASBAL2OriginalDbColumnName(){
				
					return "ASBAL2";
				
				}

				
			    public String PONOT1;

				public String getPONOT1 () {
					return this.PONOT1;
				}

				public Boolean PONOT1IsNullable(){
				    return true;
				}
				public Boolean PONOT1IsKey(){
				    return false;
				}
				public Integer PONOT1Length(){
				    return null;
				}
				public Integer PONOT1Precision(){
				    return null;
				}
				public String PONOT1Default(){
				
					return "";
				
				}
				public String PONOT1Comment(){
				
				    return "";
				
				}
				public String PONOT1Pattern(){
				
					return "";
				
				}
				public String PONOT1OriginalDbColumnName(){
				
					return "PONOT1";
				
				}

				
			    public String PONOT2;

				public String getPONOT2 () {
					return this.PONOT2;
				}

				public Boolean PONOT2IsNullable(){
				    return true;
				}
				public Boolean PONOT2IsKey(){
				    return false;
				}
				public Integer PONOT2Length(){
				    return null;
				}
				public Integer PONOT2Precision(){
				    return null;
				}
				public String PONOT2Default(){
				
					return "";
				
				}
				public String PONOT2Comment(){
				
				    return "";
				
				}
				public String PONOT2Pattern(){
				
					return "";
				
				}
				public String PONOT2OriginalDbColumnName(){
				
					return "PONOT2";
				
				}

				
			    public String PONOT3;

				public String getPONOT3 () {
					return this.PONOT3;
				}

				public Boolean PONOT3IsNullable(){
				    return true;
				}
				public Boolean PONOT3IsKey(){
				    return false;
				}
				public Integer PONOT3Length(){
				    return null;
				}
				public Integer PONOT3Precision(){
				    return null;
				}
				public String PONOT3Default(){
				
					return "";
				
				}
				public String PONOT3Comment(){
				
				    return "";
				
				}
				public String PONOT3Pattern(){
				
					return "";
				
				}
				public String PONOT3OriginalDbColumnName(){
				
					return "PONOT3";
				
				}

				
			    public String RCNOT1;

				public String getRCNOT1 () {
					return this.RCNOT1;
				}

				public Boolean RCNOT1IsNullable(){
				    return true;
				}
				public Boolean RCNOT1IsKey(){
				    return false;
				}
				public Integer RCNOT1Length(){
				    return null;
				}
				public Integer RCNOT1Precision(){
				    return null;
				}
				public String RCNOT1Default(){
				
					return "";
				
				}
				public String RCNOT1Comment(){
				
				    return "";
				
				}
				public String RCNOT1Pattern(){
				
					return "";
				
				}
				public String RCNOT1OriginalDbColumnName(){
				
					return "RCNOT1";
				
				}

				
			    public String RCNOT2;

				public String getRCNOT2 () {
					return this.RCNOT2;
				}

				public Boolean RCNOT2IsNullable(){
				    return true;
				}
				public Boolean RCNOT2IsKey(){
				    return false;
				}
				public Integer RCNOT2Length(){
				    return null;
				}
				public Integer RCNOT2Precision(){
				    return null;
				}
				public String RCNOT2Default(){
				
					return "";
				
				}
				public String RCNOT2Comment(){
				
				    return "";
				
				}
				public String RCNOT2Pattern(){
				
					return "";
				
				}
				public String RCNOT2OriginalDbColumnName(){
				
					return "RCNOT2";
				
				}

				
			    public String RCNOT3;

				public String getRCNOT3 () {
					return this.RCNOT3;
				}

				public Boolean RCNOT3IsNullable(){
				    return true;
				}
				public Boolean RCNOT3IsKey(){
				    return false;
				}
				public Integer RCNOT3Length(){
				    return null;
				}
				public Integer RCNOT3Precision(){
				    return null;
				}
				public String RCNOT3Default(){
				
					return "";
				
				}
				public String RCNOT3Comment(){
				
				    return "";
				
				}
				public String RCNOT3Pattern(){
				
					return "";
				
				}
				public String RCNOT3OriginalDbColumnName(){
				
					return "RCNOT3";
				
				}

				
			    public String BYNOT1;

				public String getBYNOT1 () {
					return this.BYNOT1;
				}

				public Boolean BYNOT1IsNullable(){
				    return true;
				}
				public Boolean BYNOT1IsKey(){
				    return false;
				}
				public Integer BYNOT1Length(){
				    return null;
				}
				public Integer BYNOT1Precision(){
				    return null;
				}
				public String BYNOT1Default(){
				
					return "";
				
				}
				public String BYNOT1Comment(){
				
				    return "";
				
				}
				public String BYNOT1Pattern(){
				
					return "";
				
				}
				public String BYNOT1OriginalDbColumnName(){
				
					return "BYNOT1";
				
				}

				
			    public String BYNOT2;

				public String getBYNOT2 () {
					return this.BYNOT2;
				}

				public Boolean BYNOT2IsNullable(){
				    return true;
				}
				public Boolean BYNOT2IsKey(){
				    return false;
				}
				public Integer BYNOT2Length(){
				    return null;
				}
				public Integer BYNOT2Precision(){
				    return null;
				}
				public String BYNOT2Default(){
				
					return "";
				
				}
				public String BYNOT2Comment(){
				
				    return "";
				
				}
				public String BYNOT2Pattern(){
				
					return "";
				
				}
				public String BYNOT2OriginalDbColumnName(){
				
					return "BYNOT2";
				
				}

				
			    public String BYNOT3;

				public String getBYNOT3 () {
					return this.BYNOT3;
				}

				public Boolean BYNOT3IsNullable(){
				    return true;
				}
				public Boolean BYNOT3IsKey(){
				    return false;
				}
				public Integer BYNOT3Length(){
				    return null;
				}
				public Integer BYNOT3Precision(){
				    return null;
				}
				public String BYNOT3Default(){
				
					return "";
				
				}
				public String BYNOT3Comment(){
				
				    return "";
				
				}
				public String BYNOT3Pattern(){
				
					return "";
				
				}
				public String BYNOT3OriginalDbColumnName(){
				
					return "BYNOT3";
				
				}

				
			    public BigDecimal ASRVFR;

				public BigDecimal getASRVFR () {
					return this.ASRVFR;
				}

				public Boolean ASRVFRIsNullable(){
				    return true;
				}
				public Boolean ASRVFRIsKey(){
				    return false;
				}
				public Integer ASRVFRLength(){
				    return null;
				}
				public Integer ASRVFRPrecision(){
				    return null;
				}
				public String ASRVFRDefault(){
				
					return "";
				
				}
				public String ASRVFRComment(){
				
				    return "";
				
				}
				public String ASRVFRPattern(){
				
					return "";
				
				}
				public String ASRVFROriginalDbColumnName(){
				
					return "ASRVFR";
				
				}

				
			    public BigDecimal ASLEAD;

				public BigDecimal getASLEAD () {
					return this.ASLEAD;
				}

				public Boolean ASLEADIsNullable(){
				    return true;
				}
				public Boolean ASLEADIsKey(){
				    return false;
				}
				public Integer ASLEADLength(){
				    return null;
				}
				public Integer ASLEADPrecision(){
				    return null;
				}
				public String ASLEADDefault(){
				
					return "";
				
				}
				public String ASLEADComment(){
				
				    return "";
				
				}
				public String ASLEADPattern(){
				
					return "";
				
				}
				public String ASLEADOriginalDbColumnName(){
				
					return "ASLEAD";
				
				}

				
			    public BigDecimal ASTPO;

				public BigDecimal getASTPO () {
					return this.ASTPO;
				}

				public Boolean ASTPOIsNullable(){
				    return true;
				}
				public Boolean ASTPOIsKey(){
				    return false;
				}
				public Integer ASTPOLength(){
				    return null;
				}
				public Integer ASTPOPrecision(){
				    return null;
				}
				public String ASTPODefault(){
				
					return "";
				
				}
				public String ASTPOComment(){
				
				    return "";
				
				}
				public String ASTPOPattern(){
				
					return "";
				
				}
				public String ASTPOOriginalDbColumnName(){
				
					return "ASTPO";
				
				}

				
			    public BigDecimal ASTLT;

				public BigDecimal getASTLT () {
					return this.ASTLT;
				}

				public Boolean ASTLTIsNullable(){
				    return true;
				}
				public Boolean ASTLTIsKey(){
				    return false;
				}
				public Integer ASTLTLength(){
				    return null;
				}
				public Integer ASTLTPrecision(){
				    return null;
				}
				public String ASTLTDefault(){
				
					return "";
				
				}
				public String ASTLTComment(){
				
				    return "";
				
				}
				public String ASTLTPattern(){
				
					return "";
				
				}
				public String ASTLTOriginalDbColumnName(){
				
					return "ASTLT";
				
				}

				
			    public Double ASTRMS;

				public Double getASTRMS () {
					return this.ASTRMS;
				}

				public Boolean ASTRMSIsNullable(){
				    return true;
				}
				public Boolean ASTRMSIsKey(){
				    return false;
				}
				public Integer ASTRMSLength(){
				    return null;
				}
				public Integer ASTRMSPrecision(){
				    return null;
				}
				public String ASTRMSDefault(){
				
					return "";
				
				}
				public String ASTRMSComment(){
				
				    return "";
				
				}
				public String ASTRMSPattern(){
				
					return "";
				
				}
				public String ASTRMSOriginalDbColumnName(){
				
					return "ASTRMS";
				
				}

				
			    public String ASTIND;

				public String getASTIND () {
					return this.ASTIND;
				}

				public Boolean ASTINDIsNullable(){
				    return true;
				}
				public Boolean ASTINDIsKey(){
				    return false;
				}
				public Integer ASTINDLength(){
				    return null;
				}
				public Integer ASTINDPrecision(){
				    return null;
				}
				public String ASTINDDefault(){
				
					return "";
				
				}
				public String ASTINDComment(){
				
				    return "";
				
				}
				public String ASTINDPattern(){
				
					return "";
				
				}
				public String ASTINDOriginalDbColumnName(){
				
					return "ASTIND";
				
				}

				
			    public BigDecimal ASPUSH;

				public BigDecimal getASPUSH () {
					return this.ASPUSH;
				}

				public Boolean ASPUSHIsNullable(){
				    return true;
				}
				public Boolean ASPUSHIsKey(){
				    return false;
				}
				public Integer ASPUSHLength(){
				    return null;
				}
				public Integer ASPUSHPrecision(){
				    return null;
				}
				public String ASPUSHDefault(){
				
					return "";
				
				}
				public String ASPUSHComment(){
				
				    return "";
				
				}
				public String ASPUSHPattern(){
				
					return "";
				
				}
				public String ASPUSHOriginalDbColumnName(){
				
					return "ASPUSH";
				
				}

				
			    public String ASTDSC;

				public String getASTDSC () {
					return this.ASTDSC;
				}

				public Boolean ASTDSCIsNullable(){
				    return true;
				}
				public Boolean ASTDSCIsKey(){
				    return false;
				}
				public Integer ASTDSCLength(){
				    return null;
				}
				public Integer ASTDSCPrecision(){
				    return null;
				}
				public String ASTDSCDefault(){
				
					return "";
				
				}
				public String ASTDSCComment(){
				
				    return "";
				
				}
				public String ASTDSCPattern(){
				
					return "";
				
				}
				public String ASTDSCOriginalDbColumnName(){
				
					return "ASTDSC";
				
				}

				
			    public String ASFPCD;

				public String getASFPCD () {
					return this.ASFPCD;
				}

				public Boolean ASFPCDIsNullable(){
				    return true;
				}
				public Boolean ASFPCDIsKey(){
				    return false;
				}
				public Integer ASFPCDLength(){
				    return null;
				}
				public Integer ASFPCDPrecision(){
				    return null;
				}
				public String ASFPCDDefault(){
				
					return "";
				
				}
				public String ASFPCDComment(){
				
				    return "";
				
				}
				public String ASFPCDPattern(){
				
					return "";
				
				}
				public String ASFPCDOriginalDbColumnName(){
				
					return "ASFPCD";
				
				}

				
			    public BigDecimal ASFALP;

				public BigDecimal getASFALP () {
					return this.ASFALP;
				}

				public Boolean ASFALPIsNullable(){
				    return true;
				}
				public Boolean ASFALPIsKey(){
				    return false;
				}
				public Integer ASFALPLength(){
				    return null;
				}
				public Integer ASFALPPrecision(){
				    return null;
				}
				public String ASFALPDefault(){
				
					return "";
				
				}
				public String ASFALPComment(){
				
				    return "";
				
				}
				public String ASFALPPattern(){
				
					return "";
				
				}
				public String ASFALPOriginalDbColumnName(){
				
					return "ASFALP";
				
				}

				
			    public BigDecimal ASFALN;

				public BigDecimal getASFALN () {
					return this.ASFALN;
				}

				public Boolean ASFALNIsNullable(){
				    return true;
				}
				public Boolean ASFALNIsKey(){
				    return false;
				}
				public Integer ASFALNLength(){
				    return null;
				}
				public Integer ASFALNPrecision(){
				    return null;
				}
				public String ASFALNDefault(){
				
					return "";
				
				}
				public String ASFALNComment(){
				
				    return "";
				
				}
				public String ASFALNPattern(){
				
					return "";
				
				}
				public String ASFALNOriginalDbColumnName(){
				
					return "ASFALN";
				
				}

				
			    public String ASFOBC;

				public String getASFOBC () {
					return this.ASFOBC;
				}

				public Boolean ASFOBCIsNullable(){
				    return true;
				}
				public Boolean ASFOBCIsKey(){
				    return false;
				}
				public Integer ASFOBCLength(){
				    return null;
				}
				public Integer ASFOBCPrecision(){
				    return null;
				}
				public String ASFOBCDefault(){
				
					return "";
				
				}
				public String ASFOBCComment(){
				
				    return "";
				
				}
				public String ASFOBCPattern(){
				
					return "";
				
				}
				public String ASFOBCOriginalDbColumnName(){
				
					return "ASFOBC";
				
				}

				
			    public String ASSHP1;

				public String getASSHP1 () {
					return this.ASSHP1;
				}

				public Boolean ASSHP1IsNullable(){
				    return true;
				}
				public Boolean ASSHP1IsKey(){
				    return false;
				}
				public Integer ASSHP1Length(){
				    return null;
				}
				public Integer ASSHP1Precision(){
				    return null;
				}
				public String ASSHP1Default(){
				
					return "";
				
				}
				public String ASSHP1Comment(){
				
				    return "";
				
				}
				public String ASSHP1Pattern(){
				
					return "";
				
				}
				public String ASSHP1OriginalDbColumnName(){
				
					return "ASSHP1";
				
				}

				
			    public String ASSHP2;

				public String getASSHP2 () {
					return this.ASSHP2;
				}

				public Boolean ASSHP2IsNullable(){
				    return true;
				}
				public Boolean ASSHP2IsKey(){
				    return false;
				}
				public Integer ASSHP2Length(){
				    return null;
				}
				public Integer ASSHP2Precision(){
				    return null;
				}
				public String ASSHP2Default(){
				
					return "";
				
				}
				public String ASSHP2Comment(){
				
				    return "";
				
				}
				public String ASSHP2Pattern(){
				
					return "";
				
				}
				public String ASSHP2OriginalDbColumnName(){
				
					return "ASSHP2";
				
				}

				
			    public String ASSHPP;

				public String getASSHPP () {
					return this.ASSHPP;
				}

				public Boolean ASSHPPIsNullable(){
				    return true;
				}
				public Boolean ASSHPPIsKey(){
				    return false;
				}
				public Integer ASSHPPLength(){
				    return null;
				}
				public Integer ASSHPPPrecision(){
				    return null;
				}
				public String ASSHPPDefault(){
				
					return "";
				
				}
				public String ASSHPPComment(){
				
				    return "";
				
				}
				public String ASSHPPPattern(){
				
					return "";
				
				}
				public String ASSHPPOriginalDbColumnName(){
				
					return "ASSHPP";
				
				}

				
			    public String ASSHPC;

				public String getASSHPC () {
					return this.ASSHPC;
				}

				public Boolean ASSHPCIsNullable(){
				    return true;
				}
				public Boolean ASSHPCIsKey(){
				    return false;
				}
				public Integer ASSHPCLength(){
				    return null;
				}
				public Integer ASSHPCPrecision(){
				    return null;
				}
				public String ASSHPCDefault(){
				
					return "";
				
				}
				public String ASSHPCComment(){
				
				    return "";
				
				}
				public String ASSHPCPattern(){
				
					return "";
				
				}
				public String ASSHPCOriginalDbColumnName(){
				
					return "ASSHPC";
				
				}

				
			    public String ASMINC;

				public String getASMINC () {
					return this.ASMINC;
				}

				public Boolean ASMINCIsNullable(){
				    return true;
				}
				public Boolean ASMINCIsKey(){
				    return false;
				}
				public Integer ASMINCLength(){
				    return null;
				}
				public Integer ASMINCPrecision(){
				    return null;
				}
				public String ASMINCDefault(){
				
					return "";
				
				}
				public String ASMINCComment(){
				
				    return "";
				
				}
				public String ASMINCPattern(){
				
					return "";
				
				}
				public String ASMINCOriginalDbColumnName(){
				
					return "ASMINC";
				
				}

				
			    public BigDecimal ASMINA;

				public BigDecimal getASMINA () {
					return this.ASMINA;
				}

				public Boolean ASMINAIsNullable(){
				    return true;
				}
				public Boolean ASMINAIsKey(){
				    return false;
				}
				public Integer ASMINALength(){
				    return null;
				}
				public Integer ASMINAPrecision(){
				    return null;
				}
				public String ASMINADefault(){
				
					return "";
				
				}
				public String ASMINAComment(){
				
				    return "";
				
				}
				public String ASMINAPattern(){
				
					return "";
				
				}
				public String ASMINAOriginalDbColumnName(){
				
					return "ASMINA";
				
				}

				
			    public BigDecimal ASTRKP;

				public BigDecimal getASTRKP () {
					return this.ASTRKP;
				}

				public Boolean ASTRKPIsNullable(){
				    return true;
				}
				public Boolean ASTRKPIsKey(){
				    return false;
				}
				public Integer ASTRKPLength(){
				    return null;
				}
				public Integer ASTRKPPrecision(){
				    return null;
				}
				public String ASTRKPDefault(){
				
					return "";
				
				}
				public String ASTRKPComment(){
				
				    return "";
				
				}
				public String ASTRKPPattern(){
				
					return "";
				
				}
				public String ASTRKPOriginalDbColumnName(){
				
					return "ASTRKP";
				
				}

				
			    public BigDecimal ASTRKA;

				public BigDecimal getASTRKA () {
					return this.ASTRKA;
				}

				public Boolean ASTRKAIsNullable(){
				    return true;
				}
				public Boolean ASTRKAIsKey(){
				    return false;
				}
				public Integer ASTRKALength(){
				    return null;
				}
				public Integer ASTRKAPrecision(){
				    return null;
				}
				public String ASTRKADefault(){
				
					return "";
				
				}
				public String ASTRKAComment(){
				
				    return "";
				
				}
				public String ASTRKAPattern(){
				
					return "";
				
				}
				public String ASTRKAOriginalDbColumnName(){
				
					return "ASTRKA";
				
				}

				
			    public BigDecimal ASTARP;

				public BigDecimal getASTARP () {
					return this.ASTARP;
				}

				public Boolean ASTARPIsNullable(){
				    return true;
				}
				public Boolean ASTARPIsKey(){
				    return false;
				}
				public Integer ASTARPLength(){
				    return null;
				}
				public Integer ASTARPPrecision(){
				    return null;
				}
				public String ASTARPDefault(){
				
					return "";
				
				}
				public String ASTARPComment(){
				
				    return "";
				
				}
				public String ASTARPPattern(){
				
					return "";
				
				}
				public String ASTARPOriginalDbColumnName(){
				
					return "ASTARP";
				
				}

				
			    public BigDecimal ASSTOP;

				public BigDecimal getASSTOP () {
					return this.ASSTOP;
				}

				public Boolean ASSTOPIsNullable(){
				    return true;
				}
				public Boolean ASSTOPIsKey(){
				    return false;
				}
				public Integer ASSTOPLength(){
				    return null;
				}
				public Integer ASSTOPPrecision(){
				    return null;
				}
				public String ASSTOPDefault(){
				
					return "";
				
				}
				public String ASSTOPComment(){
				
				    return "";
				
				}
				public String ASSTOPPattern(){
				
					return "";
				
				}
				public String ASSTOPOriginalDbColumnName(){
				
					return "ASSTOP";
				
				}

				
			    public BigDecimal ASSKID;

				public BigDecimal getASSKID () {
					return this.ASSKID;
				}

				public Boolean ASSKIDIsNullable(){
				    return true;
				}
				public Boolean ASSKIDIsKey(){
				    return false;
				}
				public Integer ASSKIDLength(){
				    return null;
				}
				public Integer ASSKIDPrecision(){
				    return null;
				}
				public String ASSKIDDefault(){
				
					return "";
				
				}
				public String ASSKIDComment(){
				
				    return "";
				
				}
				public String ASSKIDPattern(){
				
					return "";
				
				}
				public String ASSKIDOriginalDbColumnName(){
				
					return "ASSKID";
				
				}

				
			    public BigDecimal ASOTHQ;

				public BigDecimal getASOTHQ () {
					return this.ASOTHQ;
				}

				public Boolean ASOTHQIsNullable(){
				    return true;
				}
				public Boolean ASOTHQIsKey(){
				    return false;
				}
				public Integer ASOTHQLength(){
				    return null;
				}
				public Integer ASOTHQPrecision(){
				    return null;
				}
				public String ASOTHQDefault(){
				
					return "";
				
				}
				public String ASOTHQComment(){
				
				    return "";
				
				}
				public String ASOTHQPattern(){
				
					return "";
				
				}
				public String ASOTHQOriginalDbColumnName(){
				
					return "ASOTHQ";
				
				}

				
			    public BigDecimal ASOTHP;

				public BigDecimal getASOTHP () {
					return this.ASOTHP;
				}

				public Boolean ASOTHPIsNullable(){
				    return true;
				}
				public Boolean ASOTHPIsKey(){
				    return false;
				}
				public Integer ASOTHPLength(){
				    return null;
				}
				public Integer ASOTHPPrecision(){
				    return null;
				}
				public String ASOTHPDefault(){
				
					return "";
				
				}
				public String ASOTHPComment(){
				
				    return "";
				
				}
				public String ASOTHPPattern(){
				
					return "";
				
				}
				public String ASOTHPOriginalDbColumnName(){
				
					return "ASOTHP";
				
				}

				
			    public String ASRTCD;

				public String getASRTCD () {
					return this.ASRTCD;
				}

				public Boolean ASRTCDIsNullable(){
				    return true;
				}
				public Boolean ASRTCDIsKey(){
				    return false;
				}
				public Integer ASRTCDLength(){
				    return null;
				}
				public Integer ASRTCDPrecision(){
				    return null;
				}
				public String ASRTCDDefault(){
				
					return "";
				
				}
				public String ASRTCDComment(){
				
				    return "";
				
				}
				public String ASRTCDPattern(){
				
					return "";
				
				}
				public String ASRTCDOriginalDbColumnName(){
				
					return "ASRTCD";
				
				}

				
			    public BigDecimal ASVOLP;

				public BigDecimal getASVOLP () {
					return this.ASVOLP;
				}

				public Boolean ASVOLPIsNullable(){
				    return true;
				}
				public Boolean ASVOLPIsKey(){
				    return false;
				}
				public Integer ASVOLPLength(){
				    return null;
				}
				public Integer ASVOLPPrecision(){
				    return null;
				}
				public String ASVOLPDefault(){
				
					return "";
				
				}
				public String ASVOLPComment(){
				
				    return "";
				
				}
				public String ASVOLPPattern(){
				
					return "";
				
				}
				public String ASVOLPOriginalDbColumnName(){
				
					return "ASVOLP";
				
				}

				
			    public BigDecimal ASVOLN;

				public BigDecimal getASVOLN () {
					return this.ASVOLN;
				}

				public Boolean ASVOLNIsNullable(){
				    return true;
				}
				public Boolean ASVOLNIsKey(){
				    return false;
				}
				public Integer ASVOLNLength(){
				    return null;
				}
				public Integer ASVOLNPrecision(){
				    return null;
				}
				public String ASVOLNDefault(){
				
					return "";
				
				}
				public String ASVOLNComment(){
				
				    return "";
				
				}
				public String ASVOLNPattern(){
				
					return "";
				
				}
				public String ASVOLNOriginalDbColumnName(){
				
					return "ASVOLN";
				
				}

				
			    public BigDecimal ASREBP;

				public BigDecimal getASREBP () {
					return this.ASREBP;
				}

				public Boolean ASREBPIsNullable(){
				    return true;
				}
				public Boolean ASREBPIsKey(){
				    return false;
				}
				public Integer ASREBPLength(){
				    return null;
				}
				public Integer ASREBPPrecision(){
				    return null;
				}
				public String ASREBPDefault(){
				
					return "";
				
				}
				public String ASREBPComment(){
				
				    return "";
				
				}
				public String ASREBPPattern(){
				
					return "";
				
				}
				public String ASREBPOriginalDbColumnName(){
				
					return "ASREBP";
				
				}

				
			    public BigDecimal ASREBN;

				public BigDecimal getASREBN () {
					return this.ASREBN;
				}

				public Boolean ASREBNIsNullable(){
				    return true;
				}
				public Boolean ASREBNIsKey(){
				    return false;
				}
				public Integer ASREBNLength(){
				    return null;
				}
				public Integer ASREBNPrecision(){
				    return null;
				}
				public String ASREBNDefault(){
				
					return "";
				
				}
				public String ASREBNComment(){
				
				    return "";
				
				}
				public String ASREBNPattern(){
				
					return "";
				
				}
				public String ASREBNOriginalDbColumnName(){
				
					return "ASREBN";
				
				}

				
			    public BigDecimal ASALLP;

				public BigDecimal getASALLP () {
					return this.ASALLP;
				}

				public Boolean ASALLPIsNullable(){
				    return true;
				}
				public Boolean ASALLPIsKey(){
				    return false;
				}
				public Integer ASALLPLength(){
				    return null;
				}
				public Integer ASALLPPrecision(){
				    return null;
				}
				public String ASALLPDefault(){
				
					return "";
				
				}
				public String ASALLPComment(){
				
				    return "";
				
				}
				public String ASALLPPattern(){
				
					return "";
				
				}
				public String ASALLPOriginalDbColumnName(){
				
					return "ASALLP";
				
				}

				
			    public BigDecimal ASALLN;

				public BigDecimal getASALLN () {
					return this.ASALLN;
				}

				public Boolean ASALLNIsNullable(){
				    return true;
				}
				public Boolean ASALLNIsKey(){
				    return false;
				}
				public Integer ASALLNLength(){
				    return null;
				}
				public Integer ASALLNPrecision(){
				    return null;
				}
				public String ASALLNDefault(){
				
					return "";
				
				}
				public String ASALLNComment(){
				
				    return "";
				
				}
				public String ASALLNPattern(){
				
					return "";
				
				}
				public String ASALLNOriginalDbColumnName(){
				
					return "ASALLN";
				
				}

				
			    public BigDecimal APPR01;

				public BigDecimal getAPPR01 () {
					return this.APPR01;
				}

				public Boolean APPR01IsNullable(){
				    return true;
				}
				public Boolean APPR01IsKey(){
				    return false;
				}
				public Integer APPR01Length(){
				    return null;
				}
				public Integer APPR01Precision(){
				    return null;
				}
				public String APPR01Default(){
				
					return "";
				
				}
				public String APPR01Comment(){
				
				    return "";
				
				}
				public String APPR01Pattern(){
				
					return "";
				
				}
				public String APPR01OriginalDbColumnName(){
				
					return "APPR01";
				
				}

				
			    public BigDecimal APPR02;

				public BigDecimal getAPPR02 () {
					return this.APPR02;
				}

				public Boolean APPR02IsNullable(){
				    return true;
				}
				public Boolean APPR02IsKey(){
				    return false;
				}
				public Integer APPR02Length(){
				    return null;
				}
				public Integer APPR02Precision(){
				    return null;
				}
				public String APPR02Default(){
				
					return "";
				
				}
				public String APPR02Comment(){
				
				    return "";
				
				}
				public String APPR02Pattern(){
				
					return "";
				
				}
				public String APPR02OriginalDbColumnName(){
				
					return "APPR02";
				
				}

				
			    public BigDecimal APPR03;

				public BigDecimal getAPPR03 () {
					return this.APPR03;
				}

				public Boolean APPR03IsNullable(){
				    return true;
				}
				public Boolean APPR03IsKey(){
				    return false;
				}
				public Integer APPR03Length(){
				    return null;
				}
				public Integer APPR03Precision(){
				    return null;
				}
				public String APPR03Default(){
				
					return "";
				
				}
				public String APPR03Comment(){
				
				    return "";
				
				}
				public String APPR03Pattern(){
				
					return "";
				
				}
				public String APPR03OriginalDbColumnName(){
				
					return "APPR03";
				
				}

				
			    public BigDecimal APPR04;

				public BigDecimal getAPPR04 () {
					return this.APPR04;
				}

				public Boolean APPR04IsNullable(){
				    return true;
				}
				public Boolean APPR04IsKey(){
				    return false;
				}
				public Integer APPR04Length(){
				    return null;
				}
				public Integer APPR04Precision(){
				    return null;
				}
				public String APPR04Default(){
				
					return "";
				
				}
				public String APPR04Comment(){
				
				    return "";
				
				}
				public String APPR04Pattern(){
				
					return "";
				
				}
				public String APPR04OriginalDbColumnName(){
				
					return "APPR04";
				
				}

				
			    public BigDecimal APPR05;

				public BigDecimal getAPPR05 () {
					return this.APPR05;
				}

				public Boolean APPR05IsNullable(){
				    return true;
				}
				public Boolean APPR05IsKey(){
				    return false;
				}
				public Integer APPR05Length(){
				    return null;
				}
				public Integer APPR05Precision(){
				    return null;
				}
				public String APPR05Default(){
				
					return "";
				
				}
				public String APPR05Comment(){
				
				    return "";
				
				}
				public String APPR05Pattern(){
				
					return "";
				
				}
				public String APPR05OriginalDbColumnName(){
				
					return "APPR05";
				
				}

				
			    public BigDecimal APPR06;

				public BigDecimal getAPPR06 () {
					return this.APPR06;
				}

				public Boolean APPR06IsNullable(){
				    return true;
				}
				public Boolean APPR06IsKey(){
				    return false;
				}
				public Integer APPR06Length(){
				    return null;
				}
				public Integer APPR06Precision(){
				    return null;
				}
				public String APPR06Default(){
				
					return "";
				
				}
				public String APPR06Comment(){
				
				    return "";
				
				}
				public String APPR06Pattern(){
				
					return "";
				
				}
				public String APPR06OriginalDbColumnName(){
				
					return "APPR06";
				
				}

				
			    public BigDecimal APPR07;

				public BigDecimal getAPPR07 () {
					return this.APPR07;
				}

				public Boolean APPR07IsNullable(){
				    return true;
				}
				public Boolean APPR07IsKey(){
				    return false;
				}
				public Integer APPR07Length(){
				    return null;
				}
				public Integer APPR07Precision(){
				    return null;
				}
				public String APPR07Default(){
				
					return "";
				
				}
				public String APPR07Comment(){
				
				    return "";
				
				}
				public String APPR07Pattern(){
				
					return "";
				
				}
				public String APPR07OriginalDbColumnName(){
				
					return "APPR07";
				
				}

				
			    public BigDecimal APPR08;

				public BigDecimal getAPPR08 () {
					return this.APPR08;
				}

				public Boolean APPR08IsNullable(){
				    return true;
				}
				public Boolean APPR08IsKey(){
				    return false;
				}
				public Integer APPR08Length(){
				    return null;
				}
				public Integer APPR08Precision(){
				    return null;
				}
				public String APPR08Default(){
				
					return "";
				
				}
				public String APPR08Comment(){
				
				    return "";
				
				}
				public String APPR08Pattern(){
				
					return "";
				
				}
				public String APPR08OriginalDbColumnName(){
				
					return "APPR08";
				
				}

				
			    public BigDecimal APPR09;

				public BigDecimal getAPPR09 () {
					return this.APPR09;
				}

				public Boolean APPR09IsNullable(){
				    return true;
				}
				public Boolean APPR09IsKey(){
				    return false;
				}
				public Integer APPR09Length(){
				    return null;
				}
				public Integer APPR09Precision(){
				    return null;
				}
				public String APPR09Default(){
				
					return "";
				
				}
				public String APPR09Comment(){
				
				    return "";
				
				}
				public String APPR09Pattern(){
				
					return "";
				
				}
				public String APPR09OriginalDbColumnName(){
				
					return "APPR09";
				
				}

				
			    public BigDecimal APPR10;

				public BigDecimal getAPPR10 () {
					return this.APPR10;
				}

				public Boolean APPR10IsNullable(){
				    return true;
				}
				public Boolean APPR10IsKey(){
				    return false;
				}
				public Integer APPR10Length(){
				    return null;
				}
				public Integer APPR10Precision(){
				    return null;
				}
				public String APPR10Default(){
				
					return "";
				
				}
				public String APPR10Comment(){
				
				    return "";
				
				}
				public String APPR10Pattern(){
				
					return "";
				
				}
				public String APPR10OriginalDbColumnName(){
				
					return "APPR10";
				
				}

				
			    public BigDecimal APPR11;

				public BigDecimal getAPPR11 () {
					return this.APPR11;
				}

				public Boolean APPR11IsNullable(){
				    return true;
				}
				public Boolean APPR11IsKey(){
				    return false;
				}
				public Integer APPR11Length(){
				    return null;
				}
				public Integer APPR11Precision(){
				    return null;
				}
				public String APPR11Default(){
				
					return "";
				
				}
				public String APPR11Comment(){
				
				    return "";
				
				}
				public String APPR11Pattern(){
				
					return "";
				
				}
				public String APPR11OriginalDbColumnName(){
				
					return "APPR11";
				
				}

				
			    public BigDecimal APPR12;

				public BigDecimal getAPPR12 () {
					return this.APPR12;
				}

				public Boolean APPR12IsNullable(){
				    return true;
				}
				public Boolean APPR12IsKey(){
				    return false;
				}
				public Integer APPR12Length(){
				    return null;
				}
				public Integer APPR12Precision(){
				    return null;
				}
				public String APPR12Default(){
				
					return "";
				
				}
				public String APPR12Comment(){
				
				    return "";
				
				}
				public String APPR12Pattern(){
				
					return "";
				
				}
				public String APPR12OriginalDbColumnName(){
				
					return "APPR12";
				
				}

				
			    public BigDecimal APPR13;

				public BigDecimal getAPPR13 () {
					return this.APPR13;
				}

				public Boolean APPR13IsNullable(){
				    return true;
				}
				public Boolean APPR13IsKey(){
				    return false;
				}
				public Integer APPR13Length(){
				    return null;
				}
				public Integer APPR13Precision(){
				    return null;
				}
				public String APPR13Default(){
				
					return "";
				
				}
				public String APPR13Comment(){
				
				    return "";
				
				}
				public String APPR13Pattern(){
				
					return "";
				
				}
				public String APPR13OriginalDbColumnName(){
				
					return "APPR13";
				
				}

				
			    public BigDecimal APMRGP;

				public BigDecimal getAPMRGP () {
					return this.APMRGP;
				}

				public Boolean APMRGPIsNullable(){
				    return true;
				}
				public Boolean APMRGPIsKey(){
				    return false;
				}
				public Integer APMRGPLength(){
				    return null;
				}
				public Integer APMRGPPrecision(){
				    return null;
				}
				public String APMRGPDefault(){
				
					return "";
				
				}
				public String APMRGPComment(){
				
				    return "";
				
				}
				public String APMRGPPattern(){
				
					return "";
				
				}
				public String APMRGPOriginalDbColumnName(){
				
					return "APMRGP";
				
				}

				
			    public BigDecimal AGMROI;

				public BigDecimal getAGMROI () {
					return this.AGMROI;
				}

				public Boolean AGMROIIsNullable(){
				    return true;
				}
				public Boolean AGMROIIsKey(){
				    return false;
				}
				public Integer AGMROILength(){
				    return null;
				}
				public Integer AGMROIPrecision(){
				    return null;
				}
				public String AGMROIDefault(){
				
					return "";
				
				}
				public String AGMROIComment(){
				
				    return "";
				
				}
				public String AGMROIPattern(){
				
					return "";
				
				}
				public String AGMROIOriginalDbColumnName(){
				
					return "AGMROI";
				
				}

				
			    public BigDecimal APTRNS;

				public BigDecimal getAPTRNS () {
					return this.APTRNS;
				}

				public Boolean APTRNSIsNullable(){
				    return true;
				}
				public Boolean APTRNSIsKey(){
				    return false;
				}
				public Integer APTRNSLength(){
				    return null;
				}
				public Integer APTRNSPrecision(){
				    return null;
				}
				public String APTRNSDefault(){
				
					return "";
				
				}
				public String APTRNSComment(){
				
				    return "";
				
				}
				public String APTRNSPattern(){
				
					return "";
				
				}
				public String APTRNSOriginalDbColumnName(){
				
					return "APTRNS";
				
				}

				
			    public BigDecimal APAVOH;

				public BigDecimal getAPAVOH () {
					return this.APAVOH;
				}

				public Boolean APAVOHIsNullable(){
				    return true;
				}
				public Boolean APAVOHIsKey(){
				    return false;
				}
				public Integer APAVOHLength(){
				    return null;
				}
				public Integer APAVOHPrecision(){
				    return null;
				}
				public String APAVOHDefault(){
				
					return "";
				
				}
				public String APAVOHComment(){
				
				    return "";
				
				}
				public String APAVOHPattern(){
				
					return "";
				
				}
				public String APAVOHOriginalDbColumnName(){
				
					return "APAVOH";
				
				}

				
			    public BigDecimal APPOBO;

				public BigDecimal getAPPOBO () {
					return this.APPOBO;
				}

				public Boolean APPOBOIsNullable(){
				    return true;
				}
				public Boolean APPOBOIsKey(){
				    return false;
				}
				public Integer APPOBOLength(){
				    return null;
				}
				public Integer APPOBOPrecision(){
				    return null;
				}
				public String APPOBODefault(){
				
					return "";
				
				}
				public String APPOBOComment(){
				
				    return "";
				
				}
				public String APPOBOPattern(){
				
					return "";
				
				}
				public String APPOBOOriginalDbColumnName(){
				
					return "APPOBO";
				
				}

				
			    public BigDecimal APPOSS;

				public BigDecimal getAPPOSS () {
					return this.APPOSS;
				}

				public Boolean APPOSSIsNullable(){
				    return true;
				}
				public Boolean APPOSSIsKey(){
				    return false;
				}
				public Integer APPOSSLength(){
				    return null;
				}
				public Integer APPOSSPrecision(){
				    return null;
				}
				public String APPOSSDefault(){
				
					return "";
				
				}
				public String APPOSSComment(){
				
				    return "";
				
				}
				public String APPOSSPattern(){
				
					return "";
				
				}
				public String APPOSSOriginalDbColumnName(){
				
					return "APPOSS";
				
				}

				
			    public BigDecimal APPOLT;

				public BigDecimal getAPPOLT () {
					return this.APPOLT;
				}

				public Boolean APPOLTIsNullable(){
				    return true;
				}
				public Boolean APPOLTIsKey(){
				    return false;
				}
				public Integer APPOLTLength(){
				    return null;
				}
				public Integer APPOLTPrecision(){
				    return null;
				}
				public String APPOLTDefault(){
				
					return "";
				
				}
				public String APPOLTComment(){
				
				    return "";
				
				}
				public String APPOLTPattern(){
				
					return "";
				
				}
				public String APPOLTOriginalDbColumnName(){
				
					return "APPOLT";
				
				}

				
			    public BigDecimal APLY01;

				public BigDecimal getAPLY01 () {
					return this.APLY01;
				}

				public Boolean APLY01IsNullable(){
				    return true;
				}
				public Boolean APLY01IsKey(){
				    return false;
				}
				public Integer APLY01Length(){
				    return null;
				}
				public Integer APLY01Precision(){
				    return null;
				}
				public String APLY01Default(){
				
					return "";
				
				}
				public String APLY01Comment(){
				
				    return "";
				
				}
				public String APLY01Pattern(){
				
					return "";
				
				}
				public String APLY01OriginalDbColumnName(){
				
					return "APLY01";
				
				}

				
			    public BigDecimal APLY02;

				public BigDecimal getAPLY02 () {
					return this.APLY02;
				}

				public Boolean APLY02IsNullable(){
				    return true;
				}
				public Boolean APLY02IsKey(){
				    return false;
				}
				public Integer APLY02Length(){
				    return null;
				}
				public Integer APLY02Precision(){
				    return null;
				}
				public String APLY02Default(){
				
					return "";
				
				}
				public String APLY02Comment(){
				
				    return "";
				
				}
				public String APLY02Pattern(){
				
					return "";
				
				}
				public String APLY02OriginalDbColumnName(){
				
					return "APLY02";
				
				}

				
			    public BigDecimal APLY03;

				public BigDecimal getAPLY03 () {
					return this.APLY03;
				}

				public Boolean APLY03IsNullable(){
				    return true;
				}
				public Boolean APLY03IsKey(){
				    return false;
				}
				public Integer APLY03Length(){
				    return null;
				}
				public Integer APLY03Precision(){
				    return null;
				}
				public String APLY03Default(){
				
					return "";
				
				}
				public String APLY03Comment(){
				
				    return "";
				
				}
				public String APLY03Pattern(){
				
					return "";
				
				}
				public String APLY03OriginalDbColumnName(){
				
					return "APLY03";
				
				}

				
			    public BigDecimal APLY04;

				public BigDecimal getAPLY04 () {
					return this.APLY04;
				}

				public Boolean APLY04IsNullable(){
				    return true;
				}
				public Boolean APLY04IsKey(){
				    return false;
				}
				public Integer APLY04Length(){
				    return null;
				}
				public Integer APLY04Precision(){
				    return null;
				}
				public String APLY04Default(){
				
					return "";
				
				}
				public String APLY04Comment(){
				
				    return "";
				
				}
				public String APLY04Pattern(){
				
					return "";
				
				}
				public String APLY04OriginalDbColumnName(){
				
					return "APLY04";
				
				}

				
			    public BigDecimal APTY01;

				public BigDecimal getAPTY01 () {
					return this.APTY01;
				}

				public Boolean APTY01IsNullable(){
				    return true;
				}
				public Boolean APTY01IsKey(){
				    return false;
				}
				public Integer APTY01Length(){
				    return null;
				}
				public Integer APTY01Precision(){
				    return null;
				}
				public String APTY01Default(){
				
					return "";
				
				}
				public String APTY01Comment(){
				
				    return "";
				
				}
				public String APTY01Pattern(){
				
					return "";
				
				}
				public String APTY01OriginalDbColumnName(){
				
					return "APTY01";
				
				}

				
			    public BigDecimal APTY02;

				public BigDecimal getAPTY02 () {
					return this.APTY02;
				}

				public Boolean APTY02IsNullable(){
				    return true;
				}
				public Boolean APTY02IsKey(){
				    return false;
				}
				public Integer APTY02Length(){
				    return null;
				}
				public Integer APTY02Precision(){
				    return null;
				}
				public String APTY02Default(){
				
					return "";
				
				}
				public String APTY02Comment(){
				
				    return "";
				
				}
				public String APTY02Pattern(){
				
					return "";
				
				}
				public String APTY02OriginalDbColumnName(){
				
					return "APTY02";
				
				}

				
			    public BigDecimal APTY03;

				public BigDecimal getAPTY03 () {
					return this.APTY03;
				}

				public Boolean APTY03IsNullable(){
				    return true;
				}
				public Boolean APTY03IsKey(){
				    return false;
				}
				public Integer APTY03Length(){
				    return null;
				}
				public Integer APTY03Precision(){
				    return null;
				}
				public String APTY03Default(){
				
					return "";
				
				}
				public String APTY03Comment(){
				
				    return "";
				
				}
				public String APTY03Pattern(){
				
					return "";
				
				}
				public String APTY03OriginalDbColumnName(){
				
					return "APTY03";
				
				}

				
			    public BigDecimal APTY04;

				public BigDecimal getAPTY04 () {
					return this.APTY04;
				}

				public Boolean APTY04IsNullable(){
				    return true;
				}
				public Boolean APTY04IsKey(){
				    return false;
				}
				public Integer APTY04Length(){
				    return null;
				}
				public Integer APTY04Precision(){
				    return null;
				}
				public String APTY04Default(){
				
					return "";
				
				}
				public String APTY04Comment(){
				
				    return "";
				
				}
				public String APTY04Pattern(){
				
					return "";
				
				}
				public String APTY04OriginalDbColumnName(){
				
					return "APTY04";
				
				}

				
			    public BigDecimal ASLST1;

				public BigDecimal getASLST1 () {
					return this.ASLST1;
				}

				public Boolean ASLST1IsNullable(){
				    return true;
				}
				public Boolean ASLST1IsKey(){
				    return false;
				}
				public Integer ASLST1Length(){
				    return null;
				}
				public Integer ASLST1Precision(){
				    return null;
				}
				public String ASLST1Default(){
				
					return "";
				
				}
				public String ASLST1Comment(){
				
				    return "";
				
				}
				public String ASLST1Pattern(){
				
					return "";
				
				}
				public String ASLST1OriginalDbColumnName(){
				
					return "ASLST1";
				
				}

				
			    public BigDecimal ASLST2;

				public BigDecimal getASLST2 () {
					return this.ASLST2;
				}

				public Boolean ASLST2IsNullable(){
				    return true;
				}
				public Boolean ASLST2IsKey(){
				    return false;
				}
				public Integer ASLST2Length(){
				    return null;
				}
				public Integer ASLST2Precision(){
				    return null;
				}
				public String ASLST2Default(){
				
					return "";
				
				}
				public String ASLST2Comment(){
				
				    return "";
				
				}
				public String ASLST2Pattern(){
				
					return "";
				
				}
				public String ASLST2OriginalDbColumnName(){
				
					return "ASLST2";
				
				}

				
			    public String AS1099;

				public String getAS1099 () {
					return this.AS1099;
				}

				public Boolean AS1099IsNullable(){
				    return true;
				}
				public Boolean AS1099IsKey(){
				    return false;
				}
				public Integer AS1099Length(){
				    return null;
				}
				public Integer AS1099Precision(){
				    return null;
				}
				public String AS1099Default(){
				
					return "";
				
				}
				public String AS1099Comment(){
				
				    return "";
				
				}
				public String AS1099Pattern(){
				
					return "";
				
				}
				public String AS1099OriginalDbColumnName(){
				
					return "AS1099";
				
				}

				
			    public String ASPCCD;

				public String getASPCCD () {
					return this.ASPCCD;
				}

				public Boolean ASPCCDIsNullable(){
				    return true;
				}
				public Boolean ASPCCDIsKey(){
				    return false;
				}
				public Integer ASPCCDLength(){
				    return null;
				}
				public Integer ASPCCDPrecision(){
				    return null;
				}
				public String ASPCCDDefault(){
				
					return "";
				
				}
				public String ASPCCDComment(){
				
				    return "";
				
				}
				public String ASPCCDPattern(){
				
					return "";
				
				}
				public String ASPCCDOriginalDbColumnName(){
				
					return "ASPCCD";
				
				}

				
			    public String ASOTHN;

				public String getASOTHN () {
					return this.ASOTHN;
				}

				public Boolean ASOTHNIsNullable(){
				    return true;
				}
				public Boolean ASOTHNIsKey(){
				    return false;
				}
				public Integer ASOTHNLength(){
				    return null;
				}
				public Integer ASOTHNPrecision(){
				    return null;
				}
				public String ASOTHNDefault(){
				
					return "";
				
				}
				public String ASOTHNComment(){
				
				    return "";
				
				}
				public String ASOTHNPattern(){
				
					return "";
				
				}
				public String ASOTHNOriginalDbColumnName(){
				
					return "ASOTHN";
				
				}

				
			    public String ASRAYN;

				public String getASRAYN () {
					return this.ASRAYN;
				}

				public Boolean ASRAYNIsNullable(){
				    return true;
				}
				public Boolean ASRAYNIsKey(){
				    return false;
				}
				public Integer ASRAYNLength(){
				    return null;
				}
				public Integer ASRAYNPrecision(){
				    return null;
				}
				public String ASRAYNDefault(){
				
					return "";
				
				}
				public String ASRAYNComment(){
				
				    return "";
				
				}
				public String ASRAYNPattern(){
				
					return "";
				
				}
				public String ASRAYNOriginalDbColumnName(){
				
					return "ASRAYN";
				
				}

				
			    public String ASCURC;

				public String getASCURC () {
					return this.ASCURC;
				}

				public Boolean ASCURCIsNullable(){
				    return true;
				}
				public Boolean ASCURCIsKey(){
				    return false;
				}
				public Integer ASCURCLength(){
				    return null;
				}
				public Integer ASCURCPrecision(){
				    return null;
				}
				public String ASCURCDefault(){
				
					return "";
				
				}
				public String ASCURCComment(){
				
				    return "";
				
				}
				public String ASCURCPattern(){
				
					return "";
				
				}
				public String ASCURCOriginalDbColumnName(){
				
					return "ASCURC";
				
				}

				
			    public String ASTAXC;

				public String getASTAXC () {
					return this.ASTAXC;
				}

				public Boolean ASTAXCIsNullable(){
				    return true;
				}
				public Boolean ASTAXCIsKey(){
				    return false;
				}
				public Integer ASTAXCLength(){
				    return null;
				}
				public Integer ASTAXCPrecision(){
				    return null;
				}
				public String ASTAXCDefault(){
				
					return "";
				
				}
				public String ASTAXCComment(){
				
				    return "";
				
				}
				public String ASTAXCPattern(){
				
					return "";
				
				}
				public String ASTAXCOriginalDbColumnName(){
				
					return "ASTAXC";
				
				}

				
			    public String ASSTYN;

				public String getASSTYN () {
					return this.ASSTYN;
				}

				public Boolean ASSTYNIsNullable(){
				    return true;
				}
				public Boolean ASSTYNIsKey(){
				    return false;
				}
				public Integer ASSTYNLength(){
				    return null;
				}
				public Integer ASSTYNPrecision(){
				    return null;
				}
				public String ASSTYNDefault(){
				
					return "";
				
				}
				public String ASSTYNComment(){
				
				    return "";
				
				}
				public String ASSTYNPattern(){
				
					return "";
				
				}
				public String ASSTYNOriginalDbColumnName(){
				
					return "ASSTYN";
				
				}

				
			    public BigDecimal ASTTPC;

				public BigDecimal getASTTPC () {
					return this.ASTTPC;
				}

				public Boolean ASTTPCIsNullable(){
				    return true;
				}
				public Boolean ASTTPCIsKey(){
				    return false;
				}
				public Integer ASTTPCLength(){
				    return null;
				}
				public Integer ASTTPCPrecision(){
				    return null;
				}
				public String ASTTPCDefault(){
				
					return "";
				
				}
				public String ASTTPCComment(){
				
				    return "";
				
				}
				public String ASTTPCPattern(){
				
					return "";
				
				}
				public String ASTTPCOriginalDbColumnName(){
				
					return "ASTTPC";
				
				}

				
			    public String ASTTDC;

				public String getASTTDC () {
					return this.ASTTDC;
				}

				public Boolean ASTTDCIsNullable(){
				    return true;
				}
				public Boolean ASTTDCIsKey(){
				    return false;
				}
				public Integer ASTTDCLength(){
				    return null;
				}
				public Integer ASTTDCPrecision(){
				    return null;
				}
				public String ASTTDCDefault(){
				
					return "";
				
				}
				public String ASTTDCComment(){
				
				    return "";
				
				}
				public String ASTTDCPattern(){
				
					return "";
				
				}
				public String ASTTDCOriginalDbColumnName(){
				
					return "ASTTDC";
				
				}

				
			    public BigDecimal ASTTPU;

				public BigDecimal getASTTPU () {
					return this.ASTTPU;
				}

				public Boolean ASTTPUIsNullable(){
				    return true;
				}
				public Boolean ASTTPUIsKey(){
				    return false;
				}
				public Integer ASTTPULength(){
				    return null;
				}
				public Integer ASTTPUPrecision(){
				    return null;
				}
				public String ASTTPUDefault(){
				
					return "";
				
				}
				public String ASTTPUComment(){
				
				    return "";
				
				}
				public String ASTTPUPattern(){
				
					return "";
				
				}
				public String ASTTPUOriginalDbColumnName(){
				
					return "ASTTPU";
				
				}

				
			    public String ASTTDU;

				public String getASTTDU () {
					return this.ASTTDU;
				}

				public Boolean ASTTDUIsNullable(){
				    return true;
				}
				public Boolean ASTTDUIsKey(){
				    return false;
				}
				public Integer ASTTDULength(){
				    return null;
				}
				public Integer ASTTDUPrecision(){
				    return null;
				}
				public String ASTTDUDefault(){
				
					return "";
				
				}
				public String ASTTDUComment(){
				
				    return "";
				
				}
				public String ASTTDUPattern(){
				
					return "";
				
				}
				public String ASTTDUOriginalDbColumnName(){
				
					return "ASTTDU";
				
				}

				
			    public BigDecimal ASTLPC;

				public BigDecimal getASTLPC () {
					return this.ASTLPC;
				}

				public Boolean ASTLPCIsNullable(){
				    return true;
				}
				public Boolean ASTLPCIsKey(){
				    return false;
				}
				public Integer ASTLPCLength(){
				    return null;
				}
				public Integer ASTLPCPrecision(){
				    return null;
				}
				public String ASTLPCDefault(){
				
					return "";
				
				}
				public String ASTLPCComment(){
				
				    return "";
				
				}
				public String ASTLPCPattern(){
				
					return "";
				
				}
				public String ASTLPCOriginalDbColumnName(){
				
					return "ASTLPC";
				
				}

				
			    public String ASTLDC;

				public String getASTLDC () {
					return this.ASTLDC;
				}

				public Boolean ASTLDCIsNullable(){
				    return true;
				}
				public Boolean ASTLDCIsKey(){
				    return false;
				}
				public Integer ASTLDCLength(){
				    return null;
				}
				public Integer ASTLDCPrecision(){
				    return null;
				}
				public String ASTLDCDefault(){
				
					return "";
				
				}
				public String ASTLDCComment(){
				
				    return "";
				
				}
				public String ASTLDCPattern(){
				
					return "";
				
				}
				public String ASTLDCOriginalDbColumnName(){
				
					return "ASTLDC";
				
				}

				
			    public BigDecimal ASTLPU;

				public BigDecimal getASTLPU () {
					return this.ASTLPU;
				}

				public Boolean ASTLPUIsNullable(){
				    return true;
				}
				public Boolean ASTLPUIsKey(){
				    return false;
				}
				public Integer ASTLPULength(){
				    return null;
				}
				public Integer ASTLPUPrecision(){
				    return null;
				}
				public String ASTLPUDefault(){
				
					return "";
				
				}
				public String ASTLPUComment(){
				
				    return "";
				
				}
				public String ASTLPUPattern(){
				
					return "";
				
				}
				public String ASTLPUOriginalDbColumnName(){
				
					return "ASTLPU";
				
				}

				
			    public String ASTLDU;

				public String getASTLDU () {
					return this.ASTLDU;
				}

				public Boolean ASTLDUIsNullable(){
				    return true;
				}
				public Boolean ASTLDUIsKey(){
				    return false;
				}
				public Integer ASTLDULength(){
				    return null;
				}
				public Integer ASTLDUPrecision(){
				    return null;
				}
				public String ASTLDUDefault(){
				
					return "";
				
				}
				public String ASTLDUComment(){
				
				    return "";
				
				}
				public String ASTLDUPattern(){
				
					return "";
				
				}
				public String ASTLDUOriginalDbColumnName(){
				
					return "ASTLDU";
				
				}

				
			    public String ASLINM;

				public String getASLINM () {
					return this.ASLINM;
				}

				public Boolean ASLINMIsNullable(){
				    return true;
				}
				public Boolean ASLINMIsKey(){
				    return false;
				}
				public Integer ASLINMLength(){
				    return null;
				}
				public Integer ASLINMPrecision(){
				    return null;
				}
				public String ASLINMDefault(){
				
					return "";
				
				}
				public String ASLINMComment(){
				
				    return "";
				
				}
				public String ASLINMPattern(){
				
					return "";
				
				}
				public String ASLINMOriginalDbColumnName(){
				
					return "ASLINM";
				
				}

				
			    public BigDecimal ASTTNC;

				public BigDecimal getASTTNC () {
					return this.ASTTNC;
				}

				public Boolean ASTTNCIsNullable(){
				    return true;
				}
				public Boolean ASTTNCIsKey(){
				    return false;
				}
				public Integer ASTTNCLength(){
				    return null;
				}
				public Integer ASTTNCPrecision(){
				    return null;
				}
				public String ASTTNCDefault(){
				
					return "";
				
				}
				public String ASTTNCComment(){
				
				    return "";
				
				}
				public String ASTTNCPattern(){
				
					return "";
				
				}
				public String ASTTNCOriginalDbColumnName(){
				
					return "ASTTNC";
				
				}

				
			    public String ASTTND;

				public String getASTTND () {
					return this.ASTTND;
				}

				public Boolean ASTTNDIsNullable(){
				    return true;
				}
				public Boolean ASTTNDIsKey(){
				    return false;
				}
				public Integer ASTTNDLength(){
				    return null;
				}
				public Integer ASTTNDPrecision(){
				    return null;
				}
				public String ASTTNDDefault(){
				
					return "";
				
				}
				public String ASTTNDComment(){
				
				    return "";
				
				}
				public String ASTTNDPattern(){
				
					return "";
				
				}
				public String ASTTNDOriginalDbColumnName(){
				
					return "ASTTND";
				
				}

				
			    public String ASGSTR;

				public String getASGSTR () {
					return this.ASGSTR;
				}

				public Boolean ASGSTRIsNullable(){
				    return true;
				}
				public Boolean ASGSTRIsKey(){
				    return false;
				}
				public Integer ASGSTRLength(){
				    return null;
				}
				public Integer ASGSTRPrecision(){
				    return null;
				}
				public String ASGSTRDefault(){
				
					return "";
				
				}
				public String ASGSTRComment(){
				
				    return "";
				
				}
				public String ASGSTRPattern(){
				
					return "";
				
				}
				public String ASGSTROriginalDbColumnName(){
				
					return "ASGSTR";
				
				}

				
			    public String ASGSTN;

				public String getASGSTN () {
					return this.ASGSTN;
				}

				public Boolean ASGSTNIsNullable(){
				    return true;
				}
				public Boolean ASGSTNIsKey(){
				    return false;
				}
				public Integer ASGSTNLength(){
				    return null;
				}
				public Integer ASGSTNPrecision(){
				    return null;
				}
				public String ASGSTNDefault(){
				
					return "";
				
				}
				public String ASGSTNComment(){
				
				    return "";
				
				}
				public String ASGSTNPattern(){
				
					return "";
				
				}
				public String ASGSTNOriginalDbColumnName(){
				
					return "ASGSTN";
				
				}

				
			    public BigDecimal ASGST1;

				public BigDecimal getASGST1 () {
					return this.ASGST1;
				}

				public Boolean ASGST1IsNullable(){
				    return true;
				}
				public Boolean ASGST1IsKey(){
				    return false;
				}
				public Integer ASGST1Length(){
				    return null;
				}
				public Integer ASGST1Precision(){
				    return null;
				}
				public String ASGST1Default(){
				
					return "";
				
				}
				public String ASGST1Comment(){
				
				    return "";
				
				}
				public String ASGST1Pattern(){
				
					return "";
				
				}
				public String ASGST1OriginalDbColumnName(){
				
					return "ASGST1";
				
				}

				
			    public BigDecimal ASGST2;

				public BigDecimal getASGST2 () {
					return this.ASGST2;
				}

				public Boolean ASGST2IsNullable(){
				    return true;
				}
				public Boolean ASGST2IsKey(){
				    return false;
				}
				public Integer ASGST2Length(){
				    return null;
				}
				public Integer ASGST2Precision(){
				    return null;
				}
				public String ASGST2Default(){
				
					return "";
				
				}
				public String ASGST2Comment(){
				
				    return "";
				
				}
				public String ASGST2Pattern(){
				
					return "";
				
				}
				public String ASGST2OriginalDbColumnName(){
				
					return "ASGST2";
				
				}

				
			    public String ASFRTF;

				public String getASFRTF () {
					return this.ASFRTF;
				}

				public Boolean ASFRTFIsNullable(){
				    return true;
				}
				public Boolean ASFRTFIsKey(){
				    return false;
				}
				public Integer ASFRTFLength(){
				    return null;
				}
				public Integer ASFRTFPrecision(){
				    return null;
				}
				public String ASFRTFDefault(){
				
					return "";
				
				}
				public String ASFRTFComment(){
				
				    return "";
				
				}
				public String ASFRTFPattern(){
				
					return "";
				
				}
				public String ASFRTFOriginalDbColumnName(){
				
					return "ASFRTF";
				
				}

				
			    public String ASMSCF;

				public String getASMSCF () {
					return this.ASMSCF;
				}

				public Boolean ASMSCFIsNullable(){
				    return true;
				}
				public Boolean ASMSCFIsKey(){
				    return false;
				}
				public Integer ASMSCFLength(){
				    return null;
				}
				public Integer ASMSCFPrecision(){
				    return null;
				}
				public String ASMSCFDefault(){
				
					return "";
				
				}
				public String ASMSCFComment(){
				
				    return "";
				
				}
				public String ASMSCFPattern(){
				
					return "";
				
				}
				public String ASMSCFOriginalDbColumnName(){
				
					return "ASMSCF";
				
				}

				
			    public String ASALWF;

				public String getASALWF () {
					return this.ASALWF;
				}

				public Boolean ASALWFIsNullable(){
				    return true;
				}
				public Boolean ASALWFIsKey(){
				    return false;
				}
				public Integer ASALWFLength(){
				    return null;
				}
				public Integer ASALWFPrecision(){
				    return null;
				}
				public String ASALWFDefault(){
				
					return "";
				
				}
				public String ASALWFComment(){
				
				    return "";
				
				}
				public String ASALWFPattern(){
				
					return "";
				
				}
				public String ASALWFOriginalDbColumnName(){
				
					return "ASALWF";
				
				}

				
			    public String ASHSHQ;

				public String getASHSHQ () {
					return this.ASHSHQ;
				}

				public Boolean ASHSHQIsNullable(){
				    return true;
				}
				public Boolean ASHSHQIsKey(){
				    return false;
				}
				public Integer ASHSHQLength(){
				    return null;
				}
				public Integer ASHSHQPrecision(){
				    return null;
				}
				public String ASHSHQDefault(){
				
					return "";
				
				}
				public String ASHSHQComment(){
				
				    return "";
				
				}
				public String ASHSHQPattern(){
				
					return "";
				
				}
				public String ASHSHQOriginalDbColumnName(){
				
					return "ASHSHQ";
				
				}

				
			    public String ASLNOG;

				public String getASLNOG () {
					return this.ASLNOG;
				}

				public Boolean ASLNOGIsNullable(){
				    return true;
				}
				public Boolean ASLNOGIsKey(){
				    return false;
				}
				public Integer ASLNOGLength(){
				    return null;
				}
				public Integer ASLNOGPrecision(){
				    return null;
				}
				public String ASLNOGDefault(){
				
					return "";
				
				}
				public String ASLNOGComment(){
				
				    return "";
				
				}
				public String ASLNOGPattern(){
				
					return "";
				
				}
				public String ASLNOGOriginalDbColumnName(){
				
					return "ASLNOG";
				
				}

				
			    public String ASLUOE;

				public String getASLUOE () {
					return this.ASLUOE;
				}

				public Boolean ASLUOEIsNullable(){
				    return true;
				}
				public Boolean ASLUOEIsKey(){
				    return false;
				}
				public Integer ASLUOELength(){
				    return null;
				}
				public Integer ASLUOEPrecision(){
				    return null;
				}
				public String ASLUOEDefault(){
				
					return "";
				
				}
				public String ASLUOEComment(){
				
				    return "";
				
				}
				public String ASLUOEPattern(){
				
					return "";
				
				}
				public String ASLUOEOriginalDbColumnName(){
				
					return "ASLUOE";
				
				}

				
			    public String ASLSOP;

				public String getASLSOP () {
					return this.ASLSOP;
				}

				public Boolean ASLSOPIsNullable(){
				    return true;
				}
				public Boolean ASLSOPIsKey(){
				    return false;
				}
				public Integer ASLSOPLength(){
				    return null;
				}
				public Integer ASLSOPPrecision(){
				    return null;
				}
				public String ASLSOPDefault(){
				
					return "";
				
				}
				public String ASLSOPComment(){
				
				    return "";
				
				}
				public String ASLSOPPattern(){
				
					return "";
				
				}
				public String ASLSOPOriginalDbColumnName(){
				
					return "ASLSOP";
				
				}

				
			    public String ASMTCH;

				public String getASMTCH () {
					return this.ASMTCH;
				}

				public Boolean ASMTCHIsNullable(){
				    return true;
				}
				public Boolean ASMTCHIsKey(){
				    return false;
				}
				public Integer ASMTCHLength(){
				    return null;
				}
				public Integer ASMTCHPrecision(){
				    return null;
				}
				public String ASMTCHDefault(){
				
					return "";
				
				}
				public String ASMTCHComment(){
				
				    return "";
				
				}
				public String ASMTCHPattern(){
				
					return "";
				
				}
				public String ASMTCHOriginalDbColumnName(){
				
					return "ASMTCH";
				
				}

				
			    public String ASCAUT;

				public String getASCAUT () {
					return this.ASCAUT;
				}

				public Boolean ASCAUTIsNullable(){
				    return true;
				}
				public Boolean ASCAUTIsKey(){
				    return false;
				}
				public Integer ASCAUTLength(){
				    return null;
				}
				public Integer ASCAUTPrecision(){
				    return null;
				}
				public String ASCAUTDefault(){
				
					return "";
				
				}
				public String ASCAUTComment(){
				
				    return "";
				
				}
				public String ASCAUTPattern(){
				
					return "";
				
				}
				public String ASCAUTOriginalDbColumnName(){
				
					return "ASCAUT";
				
				}

				
			    public String ASTAXD;

				public String getASTAXD () {
					return this.ASTAXD;
				}

				public Boolean ASTAXDIsNullable(){
				    return true;
				}
				public Boolean ASTAXDIsKey(){
				    return false;
				}
				public Integer ASTAXDLength(){
				    return null;
				}
				public Integer ASTAXDPrecision(){
				    return null;
				}
				public String ASTAXDDefault(){
				
					return "";
				
				}
				public String ASTAXDComment(){
				
				    return "";
				
				}
				public String ASTAXDPattern(){
				
					return "";
				
				}
				public String ASTAXDOriginalDbColumnName(){
				
					return "ASTAXD";
				
				}

				
			    public String ASALLC;

				public String getASALLC () {
					return this.ASALLC;
				}

				public Boolean ASALLCIsNullable(){
				    return true;
				}
				public Boolean ASALLCIsKey(){
				    return false;
				}
				public Integer ASALLCLength(){
				    return null;
				}
				public Integer ASALLCPrecision(){
				    return null;
				}
				public String ASALLCDefault(){
				
					return "";
				
				}
				public String ASALLCComment(){
				
				    return "";
				
				}
				public String ASALLCPattern(){
				
					return "";
				
				}
				public String ASALLCOriginalDbColumnName(){
				
					return "ASALLC";
				
				}

				
			    public String ASMCHT;

				public String getASMCHT () {
					return this.ASMCHT;
				}

				public Boolean ASMCHTIsNullable(){
				    return true;
				}
				public Boolean ASMCHTIsKey(){
				    return false;
				}
				public Integer ASMCHTLength(){
				    return null;
				}
				public Integer ASMCHTPrecision(){
				    return null;
				}
				public String ASMCHTDefault(){
				
					return "";
				
				}
				public String ASMCHTComment(){
				
				    return "";
				
				}
				public String ASMCHTPattern(){
				
					return "";
				
				}
				public String ASMCHTOriginalDbColumnName(){
				
					return "ASMCHT";
				
				}

				
			    public java.util.Date LOAD_DATE;

				public java.util.Date getLOAD_DATE () {
					return this.LOAD_DATE;
				}

				public Boolean LOAD_DATEIsNullable(){
				    return true;
				}
				public Boolean LOAD_DATEIsKey(){
				    return false;
				}
				public Integer LOAD_DATELength(){
				    return null;
				}
				public Integer LOAD_DATEPrecision(){
				    return null;
				}
				public String LOAD_DATEDefault(){
				
					return "";
				
				}
				public String LOAD_DATEComment(){
				
				    return "";
				
				}
				public String LOAD_DATEPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String LOAD_DATEOriginalDbColumnName(){
				
					return "LOAD_DATE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASNUM = null;
           				} else {
           			    	this.ASNUM = dis.readDouble();
           				}
					
					this.ASNAME = readString(dis);
					
					this.ASADAD = readString(dis);
					
					this.ASALPH = readString(dis);
					
					this.ASSTAT = readString(dis);
					
					this.ASTYPE = readString(dis);
					
					this.ASBOYN = readString(dis);
					
					this.ASAUTO = readString(dis);
					
						this.ASCNUM = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASCLRK = null;
           				} else {
           			    	this.ASCLRK = dis.readDouble();
           				}
					
						this.ASDFAC = (BigDecimal) dis.readObject();
					
						this.ASSTR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASVOTH = null;
           				} else {
           			    	this.ASVOTH = dis.readDouble();
           				}
					
					this.ASBUYR = readString(dis);
					
					this.ASCUST = readString(dis);
					
						this.ASCNIN = (BigDecimal) dis.readObject();
					
						this.ASDTIN = (BigDecimal) dis.readObject();
					
						this.ASCNLP = (BigDecimal) dis.readObject();
					
						this.ASDTLP = (BigDecimal) dis.readObject();
					
						this.ASAMLP = (BigDecimal) dis.readObject();
					
						this.ASCKLP = (BigDecimal) dis.readObject();
					
						this.ASBAL1 = (BigDecimal) dis.readObject();
					
						this.ASBAL2 = (BigDecimal) dis.readObject();
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
					this.RCNOT1 = readString(dis);
					
					this.RCNOT2 = readString(dis);
					
					this.RCNOT3 = readString(dis);
					
					this.BYNOT1 = readString(dis);
					
					this.BYNOT2 = readString(dis);
					
					this.BYNOT3 = readString(dis);
					
						this.ASRVFR = (BigDecimal) dis.readObject();
					
						this.ASLEAD = (BigDecimal) dis.readObject();
					
						this.ASTPO = (BigDecimal) dis.readObject();
					
						this.ASTLT = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASTRMS = null;
           				} else {
           			    	this.ASTRMS = dis.readDouble();
           				}
					
					this.ASTIND = readString(dis);
					
						this.ASPUSH = (BigDecimal) dis.readObject();
					
					this.ASTDSC = readString(dis);
					
					this.ASFPCD = readString(dis);
					
						this.ASFALP = (BigDecimal) dis.readObject();
					
						this.ASFALN = (BigDecimal) dis.readObject();
					
					this.ASFOBC = readString(dis);
					
					this.ASSHP1 = readString(dis);
					
					this.ASSHP2 = readString(dis);
					
					this.ASSHPP = readString(dis);
					
					this.ASSHPC = readString(dis);
					
					this.ASMINC = readString(dis);
					
						this.ASMINA = (BigDecimal) dis.readObject();
					
						this.ASTRKP = (BigDecimal) dis.readObject();
					
						this.ASTRKA = (BigDecimal) dis.readObject();
					
						this.ASTARP = (BigDecimal) dis.readObject();
					
						this.ASSTOP = (BigDecimal) dis.readObject();
					
						this.ASSKID = (BigDecimal) dis.readObject();
					
						this.ASOTHQ = (BigDecimal) dis.readObject();
					
						this.ASOTHP = (BigDecimal) dis.readObject();
					
					this.ASRTCD = readString(dis);
					
						this.ASVOLP = (BigDecimal) dis.readObject();
					
						this.ASVOLN = (BigDecimal) dis.readObject();
					
						this.ASREBP = (BigDecimal) dis.readObject();
					
						this.ASREBN = (BigDecimal) dis.readObject();
					
						this.ASALLP = (BigDecimal) dis.readObject();
					
						this.ASALLN = (BigDecimal) dis.readObject();
					
						this.APPR01 = (BigDecimal) dis.readObject();
					
						this.APPR02 = (BigDecimal) dis.readObject();
					
						this.APPR03 = (BigDecimal) dis.readObject();
					
						this.APPR04 = (BigDecimal) dis.readObject();
					
						this.APPR05 = (BigDecimal) dis.readObject();
					
						this.APPR06 = (BigDecimal) dis.readObject();
					
						this.APPR07 = (BigDecimal) dis.readObject();
					
						this.APPR08 = (BigDecimal) dis.readObject();
					
						this.APPR09 = (BigDecimal) dis.readObject();
					
						this.APPR10 = (BigDecimal) dis.readObject();
					
						this.APPR11 = (BigDecimal) dis.readObject();
					
						this.APPR12 = (BigDecimal) dis.readObject();
					
						this.APPR13 = (BigDecimal) dis.readObject();
					
						this.APMRGP = (BigDecimal) dis.readObject();
					
						this.AGMROI = (BigDecimal) dis.readObject();
					
						this.APTRNS = (BigDecimal) dis.readObject();
					
						this.APAVOH = (BigDecimal) dis.readObject();
					
						this.APPOBO = (BigDecimal) dis.readObject();
					
						this.APPOSS = (BigDecimal) dis.readObject();
					
						this.APPOLT = (BigDecimal) dis.readObject();
					
						this.APLY01 = (BigDecimal) dis.readObject();
					
						this.APLY02 = (BigDecimal) dis.readObject();
					
						this.APLY03 = (BigDecimal) dis.readObject();
					
						this.APLY04 = (BigDecimal) dis.readObject();
					
						this.APTY01 = (BigDecimal) dis.readObject();
					
						this.APTY02 = (BigDecimal) dis.readObject();
					
						this.APTY03 = (BigDecimal) dis.readObject();
					
						this.APTY04 = (BigDecimal) dis.readObject();
					
						this.ASLST1 = (BigDecimal) dis.readObject();
					
						this.ASLST2 = (BigDecimal) dis.readObject();
					
					this.AS1099 = readString(dis);
					
					this.ASPCCD = readString(dis);
					
					this.ASOTHN = readString(dis);
					
					this.ASRAYN = readString(dis);
					
					this.ASCURC = readString(dis);
					
					this.ASTAXC = readString(dis);
					
					this.ASSTYN = readString(dis);
					
						this.ASTTPC = (BigDecimal) dis.readObject();
					
					this.ASTTDC = readString(dis);
					
						this.ASTTPU = (BigDecimal) dis.readObject();
					
					this.ASTTDU = readString(dis);
					
						this.ASTLPC = (BigDecimal) dis.readObject();
					
					this.ASTLDC = readString(dis);
					
						this.ASTLPU = (BigDecimal) dis.readObject();
					
					this.ASTLDU = readString(dis);
					
					this.ASLINM = readString(dis);
					
						this.ASTTNC = (BigDecimal) dis.readObject();
					
					this.ASTTND = readString(dis);
					
					this.ASGSTR = readString(dis);
					
					this.ASGSTN = readString(dis);
					
						this.ASGST1 = (BigDecimal) dis.readObject();
					
						this.ASGST2 = (BigDecimal) dis.readObject();
					
					this.ASFRTF = readString(dis);
					
					this.ASMSCF = readString(dis);
					
					this.ASALWF = readString(dis);
					
					this.ASHSHQ = readString(dis);
					
					this.ASLNOG = readString(dis);
					
					this.ASLUOE = readString(dis);
					
					this.ASLSOP = readString(dis);
					
					this.ASMTCH = readString(dis);
					
					this.ASCAUT = readString(dis);
					
					this.ASTAXD = readString(dis);
					
					this.ASALLC = readString(dis);
					
					this.ASMCHT = readString(dis);
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASNUM = null;
           				} else {
           			    	this.ASNUM = dis.readDouble();
           				}
					
					this.ASNAME = readString(dis);
					
					this.ASADAD = readString(dis);
					
					this.ASALPH = readString(dis);
					
					this.ASSTAT = readString(dis);
					
					this.ASTYPE = readString(dis);
					
					this.ASBOYN = readString(dis);
					
					this.ASAUTO = readString(dis);
					
						this.ASCNUM = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASCLRK = null;
           				} else {
           			    	this.ASCLRK = dis.readDouble();
           				}
					
						this.ASDFAC = (BigDecimal) dis.readObject();
					
						this.ASSTR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASVOTH = null;
           				} else {
           			    	this.ASVOTH = dis.readDouble();
           				}
					
					this.ASBUYR = readString(dis);
					
					this.ASCUST = readString(dis);
					
						this.ASCNIN = (BigDecimal) dis.readObject();
					
						this.ASDTIN = (BigDecimal) dis.readObject();
					
						this.ASCNLP = (BigDecimal) dis.readObject();
					
						this.ASDTLP = (BigDecimal) dis.readObject();
					
						this.ASAMLP = (BigDecimal) dis.readObject();
					
						this.ASCKLP = (BigDecimal) dis.readObject();
					
						this.ASBAL1 = (BigDecimal) dis.readObject();
					
						this.ASBAL2 = (BigDecimal) dis.readObject();
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
					this.RCNOT1 = readString(dis);
					
					this.RCNOT2 = readString(dis);
					
					this.RCNOT3 = readString(dis);
					
					this.BYNOT1 = readString(dis);
					
					this.BYNOT2 = readString(dis);
					
					this.BYNOT3 = readString(dis);
					
						this.ASRVFR = (BigDecimal) dis.readObject();
					
						this.ASLEAD = (BigDecimal) dis.readObject();
					
						this.ASTPO = (BigDecimal) dis.readObject();
					
						this.ASTLT = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASTRMS = null;
           				} else {
           			    	this.ASTRMS = dis.readDouble();
           				}
					
					this.ASTIND = readString(dis);
					
						this.ASPUSH = (BigDecimal) dis.readObject();
					
					this.ASTDSC = readString(dis);
					
					this.ASFPCD = readString(dis);
					
						this.ASFALP = (BigDecimal) dis.readObject();
					
						this.ASFALN = (BigDecimal) dis.readObject();
					
					this.ASFOBC = readString(dis);
					
					this.ASSHP1 = readString(dis);
					
					this.ASSHP2 = readString(dis);
					
					this.ASSHPP = readString(dis);
					
					this.ASSHPC = readString(dis);
					
					this.ASMINC = readString(dis);
					
						this.ASMINA = (BigDecimal) dis.readObject();
					
						this.ASTRKP = (BigDecimal) dis.readObject();
					
						this.ASTRKA = (BigDecimal) dis.readObject();
					
						this.ASTARP = (BigDecimal) dis.readObject();
					
						this.ASSTOP = (BigDecimal) dis.readObject();
					
						this.ASSKID = (BigDecimal) dis.readObject();
					
						this.ASOTHQ = (BigDecimal) dis.readObject();
					
						this.ASOTHP = (BigDecimal) dis.readObject();
					
					this.ASRTCD = readString(dis);
					
						this.ASVOLP = (BigDecimal) dis.readObject();
					
						this.ASVOLN = (BigDecimal) dis.readObject();
					
						this.ASREBP = (BigDecimal) dis.readObject();
					
						this.ASREBN = (BigDecimal) dis.readObject();
					
						this.ASALLP = (BigDecimal) dis.readObject();
					
						this.ASALLN = (BigDecimal) dis.readObject();
					
						this.APPR01 = (BigDecimal) dis.readObject();
					
						this.APPR02 = (BigDecimal) dis.readObject();
					
						this.APPR03 = (BigDecimal) dis.readObject();
					
						this.APPR04 = (BigDecimal) dis.readObject();
					
						this.APPR05 = (BigDecimal) dis.readObject();
					
						this.APPR06 = (BigDecimal) dis.readObject();
					
						this.APPR07 = (BigDecimal) dis.readObject();
					
						this.APPR08 = (BigDecimal) dis.readObject();
					
						this.APPR09 = (BigDecimal) dis.readObject();
					
						this.APPR10 = (BigDecimal) dis.readObject();
					
						this.APPR11 = (BigDecimal) dis.readObject();
					
						this.APPR12 = (BigDecimal) dis.readObject();
					
						this.APPR13 = (BigDecimal) dis.readObject();
					
						this.APMRGP = (BigDecimal) dis.readObject();
					
						this.AGMROI = (BigDecimal) dis.readObject();
					
						this.APTRNS = (BigDecimal) dis.readObject();
					
						this.APAVOH = (BigDecimal) dis.readObject();
					
						this.APPOBO = (BigDecimal) dis.readObject();
					
						this.APPOSS = (BigDecimal) dis.readObject();
					
						this.APPOLT = (BigDecimal) dis.readObject();
					
						this.APLY01 = (BigDecimal) dis.readObject();
					
						this.APLY02 = (BigDecimal) dis.readObject();
					
						this.APLY03 = (BigDecimal) dis.readObject();
					
						this.APLY04 = (BigDecimal) dis.readObject();
					
						this.APTY01 = (BigDecimal) dis.readObject();
					
						this.APTY02 = (BigDecimal) dis.readObject();
					
						this.APTY03 = (BigDecimal) dis.readObject();
					
						this.APTY04 = (BigDecimal) dis.readObject();
					
						this.ASLST1 = (BigDecimal) dis.readObject();
					
						this.ASLST2 = (BigDecimal) dis.readObject();
					
					this.AS1099 = readString(dis);
					
					this.ASPCCD = readString(dis);
					
					this.ASOTHN = readString(dis);
					
					this.ASRAYN = readString(dis);
					
					this.ASCURC = readString(dis);
					
					this.ASTAXC = readString(dis);
					
					this.ASSTYN = readString(dis);
					
						this.ASTTPC = (BigDecimal) dis.readObject();
					
					this.ASTTDC = readString(dis);
					
						this.ASTTPU = (BigDecimal) dis.readObject();
					
					this.ASTTDU = readString(dis);
					
						this.ASTLPC = (BigDecimal) dis.readObject();
					
					this.ASTLDC = readString(dis);
					
						this.ASTLPU = (BigDecimal) dis.readObject();
					
					this.ASTLDU = readString(dis);
					
					this.ASLINM = readString(dis);
					
						this.ASTTNC = (BigDecimal) dis.readObject();
					
					this.ASTTND = readString(dis);
					
					this.ASGSTR = readString(dis);
					
					this.ASGSTN = readString(dis);
					
						this.ASGST1 = (BigDecimal) dis.readObject();
					
						this.ASGST2 = (BigDecimal) dis.readObject();
					
					this.ASFRTF = readString(dis);
					
					this.ASMSCF = readString(dis);
					
					this.ASALWF = readString(dis);
					
					this.ASHSHQ = readString(dis);
					
					this.ASLNOG = readString(dis);
					
					this.ASLUOE = readString(dis);
					
					this.ASLSOP = readString(dis);
					
					this.ASMTCH = readString(dis);
					
					this.ASCAUT = readString(dis);
					
					this.ASTAXD = readString(dis);
					
					this.ASALLC = readString(dis);
					
					this.ASMCHT = readString(dis);
					
					this.LOAD_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.ASNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASNUM);
		            	}
					
					// String
				
						writeString(this.ASNAME,dos);
					
					// String
				
						writeString(this.ASADAD,dos);
					
					// String
				
						writeString(this.ASALPH,dos);
					
					// String
				
						writeString(this.ASSTAT,dos);
					
					// String
				
						writeString(this.ASTYPE,dos);
					
					// String
				
						writeString(this.ASBOYN,dos);
					
					// String
				
						writeString(this.ASAUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNUM);
					
					// Double
				
						if(this.ASCLRK == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASCLRK);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDFAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTR);
					
					// Double
				
						if(this.ASVOTH == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASVOTH);
		            	}
					
					// String
				
						writeString(this.ASBUYR,dos);
					
					// String
				
						writeString(this.ASCUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASAMLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCKLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL2);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// String
				
						writeString(this.RCNOT1,dos);
					
					// String
				
						writeString(this.RCNOT2,dos);
					
					// String
				
						writeString(this.RCNOT3,dos);
					
					// String
				
						writeString(this.BYNOT1,dos);
					
					// String
				
						writeString(this.BYNOT2,dos);
					
					// String
				
						writeString(this.BYNOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASRVFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLEAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTPO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLT);
					
					// Double
				
						if(this.ASTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASTRMS);
		            	}
					
					// String
				
						writeString(this.ASTIND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASPUSH);
					
					// String
				
						writeString(this.ASTDSC,dos);
					
					// String
				
						writeString(this.ASFPCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALN);
					
					// String
				
						writeString(this.ASFOBC,dos);
					
					// String
				
						writeString(this.ASSHP1,dos);
					
					// String
				
						writeString(this.ASSHP2,dos);
					
					// String
				
						writeString(this.ASSHPP,dos);
					
					// String
				
						writeString(this.ASSHPC,dos);
					
					// String
				
						writeString(this.ASMINC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASMINA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHP);
					
					// String
				
						writeString(this.ASRTCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR09);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR10);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR12);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR13);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APMRGP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AGMROI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOBO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOSS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST2);
					
					// String
				
						writeString(this.AS1099,dos);
					
					// String
				
						writeString(this.ASPCCD,dos);
					
					// String
				
						writeString(this.ASOTHN,dos);
					
					// String
				
						writeString(this.ASRAYN,dos);
					
					// String
				
						writeString(this.ASCURC,dos);
					
					// String
				
						writeString(this.ASTAXC,dos);
					
					// String
				
						writeString(this.ASSTYN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPC);
					
					// String
				
						writeString(this.ASTTDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPU);
					
					// String
				
						writeString(this.ASTTDU,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPC);
					
					// String
				
						writeString(this.ASTLDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPU);
					
					// String
				
						writeString(this.ASTLDU,dos);
					
					// String
				
						writeString(this.ASLINM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTNC);
					
					// String
				
						writeString(this.ASTTND,dos);
					
					// String
				
						writeString(this.ASGSTR,dos);
					
					// String
				
						writeString(this.ASGSTN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST2);
					
					// String
				
						writeString(this.ASFRTF,dos);
					
					// String
				
						writeString(this.ASMSCF,dos);
					
					// String
				
						writeString(this.ASALWF,dos);
					
					// String
				
						writeString(this.ASHSHQ,dos);
					
					// String
				
						writeString(this.ASLNOG,dos);
					
					// String
				
						writeString(this.ASLUOE,dos);
					
					// String
				
						writeString(this.ASLSOP,dos);
					
					// String
				
						writeString(this.ASMTCH,dos);
					
					// String
				
						writeString(this.ASCAUT,dos);
					
					// String
				
						writeString(this.ASTAXD,dos);
					
					// String
				
						writeString(this.ASALLC,dos);
					
					// String
				
						writeString(this.ASMCHT,dos);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.ASNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASNUM);
		            	}
					
					// String
				
						writeString(this.ASNAME,dos);
					
					// String
				
						writeString(this.ASADAD,dos);
					
					// String
				
						writeString(this.ASALPH,dos);
					
					// String
				
						writeString(this.ASSTAT,dos);
					
					// String
				
						writeString(this.ASTYPE,dos);
					
					// String
				
						writeString(this.ASBOYN,dos);
					
					// String
				
						writeString(this.ASAUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNUM);
					
					// Double
				
						if(this.ASCLRK == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASCLRK);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDFAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTR);
					
					// Double
				
						if(this.ASVOTH == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASVOTH);
		            	}
					
					// String
				
						writeString(this.ASBUYR,dos);
					
					// String
				
						writeString(this.ASCUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASAMLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCKLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL2);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// String
				
						writeString(this.RCNOT1,dos);
					
					// String
				
						writeString(this.RCNOT2,dos);
					
					// String
				
						writeString(this.RCNOT3,dos);
					
					// String
				
						writeString(this.BYNOT1,dos);
					
					// String
				
						writeString(this.BYNOT2,dos);
					
					// String
				
						writeString(this.BYNOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASRVFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLEAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTPO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLT);
					
					// Double
				
						if(this.ASTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASTRMS);
		            	}
					
					// String
				
						writeString(this.ASTIND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASPUSH);
					
					// String
				
						writeString(this.ASTDSC,dos);
					
					// String
				
						writeString(this.ASFPCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALN);
					
					// String
				
						writeString(this.ASFOBC,dos);
					
					// String
				
						writeString(this.ASSHP1,dos);
					
					// String
				
						writeString(this.ASSHP2,dos);
					
					// String
				
						writeString(this.ASSHPP,dos);
					
					// String
				
						writeString(this.ASSHPC,dos);
					
					// String
				
						writeString(this.ASMINC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASMINA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHP);
					
					// String
				
						writeString(this.ASRTCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR09);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR10);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR12);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR13);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APMRGP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AGMROI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOBO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOSS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST2);
					
					// String
				
						writeString(this.AS1099,dos);
					
					// String
				
						writeString(this.ASPCCD,dos);
					
					// String
				
						writeString(this.ASOTHN,dos);
					
					// String
				
						writeString(this.ASRAYN,dos);
					
					// String
				
						writeString(this.ASCURC,dos);
					
					// String
				
						writeString(this.ASTAXC,dos);
					
					// String
				
						writeString(this.ASSTYN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPC);
					
					// String
				
						writeString(this.ASTTDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPU);
					
					// String
				
						writeString(this.ASTTDU,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPC);
					
					// String
				
						writeString(this.ASTLDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPU);
					
					// String
				
						writeString(this.ASTLDU,dos);
					
					// String
				
						writeString(this.ASLINM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTNC);
					
					// String
				
						writeString(this.ASTTND,dos);
					
					// String
				
						writeString(this.ASGSTR,dos);
					
					// String
				
						writeString(this.ASGSTN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST2);
					
					// String
				
						writeString(this.ASFRTF,dos);
					
					// String
				
						writeString(this.ASMSCF,dos);
					
					// String
				
						writeString(this.ASALWF,dos);
					
					// String
				
						writeString(this.ASHSHQ,dos);
					
					// String
				
						writeString(this.ASLNOG,dos);
					
					// String
				
						writeString(this.ASLUOE,dos);
					
					// String
				
						writeString(this.ASLSOP,dos);
					
					// String
				
						writeString(this.ASMTCH,dos);
					
					// String
				
						writeString(this.ASCAUT,dos);
					
					// String
				
						writeString(this.ASTAXD,dos);
					
					// String
				
						writeString(this.ASALLC,dos);
					
					// String
				
						writeString(this.ASMCHT,dos);
					
					// java.util.Date
				
						writeDate(this.LOAD_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ASNUM="+String.valueOf(ASNUM));
		sb.append(",ASNAME="+ASNAME);
		sb.append(",ASADAD="+ASADAD);
		sb.append(",ASALPH="+ASALPH);
		sb.append(",ASSTAT="+ASSTAT);
		sb.append(",ASTYPE="+ASTYPE);
		sb.append(",ASBOYN="+ASBOYN);
		sb.append(",ASAUTO="+ASAUTO);
		sb.append(",ASCNUM="+String.valueOf(ASCNUM));
		sb.append(",ASCLRK="+String.valueOf(ASCLRK));
		sb.append(",ASDFAC="+String.valueOf(ASDFAC));
		sb.append(",ASSTR="+String.valueOf(ASSTR));
		sb.append(",ASVOTH="+String.valueOf(ASVOTH));
		sb.append(",ASBUYR="+ASBUYR);
		sb.append(",ASCUST="+ASCUST);
		sb.append(",ASCNIN="+String.valueOf(ASCNIN));
		sb.append(",ASDTIN="+String.valueOf(ASDTIN));
		sb.append(",ASCNLP="+String.valueOf(ASCNLP));
		sb.append(",ASDTLP="+String.valueOf(ASDTLP));
		sb.append(",ASAMLP="+String.valueOf(ASAMLP));
		sb.append(",ASCKLP="+String.valueOf(ASCKLP));
		sb.append(",ASBAL1="+String.valueOf(ASBAL1));
		sb.append(",ASBAL2="+String.valueOf(ASBAL2));
		sb.append(",PONOT1="+PONOT1);
		sb.append(",PONOT2="+PONOT2);
		sb.append(",PONOT3="+PONOT3);
		sb.append(",RCNOT1="+RCNOT1);
		sb.append(",RCNOT2="+RCNOT2);
		sb.append(",RCNOT3="+RCNOT3);
		sb.append(",BYNOT1="+BYNOT1);
		sb.append(",BYNOT2="+BYNOT2);
		sb.append(",BYNOT3="+BYNOT3);
		sb.append(",ASRVFR="+String.valueOf(ASRVFR));
		sb.append(",ASLEAD="+String.valueOf(ASLEAD));
		sb.append(",ASTPO="+String.valueOf(ASTPO));
		sb.append(",ASTLT="+String.valueOf(ASTLT));
		sb.append(",ASTRMS="+String.valueOf(ASTRMS));
		sb.append(",ASTIND="+ASTIND);
		sb.append(",ASPUSH="+String.valueOf(ASPUSH));
		sb.append(",ASTDSC="+ASTDSC);
		sb.append(",ASFPCD="+ASFPCD);
		sb.append(",ASFALP="+String.valueOf(ASFALP));
		sb.append(",ASFALN="+String.valueOf(ASFALN));
		sb.append(",ASFOBC="+ASFOBC);
		sb.append(",ASSHP1="+ASSHP1);
		sb.append(",ASSHP2="+ASSHP2);
		sb.append(",ASSHPP="+ASSHPP);
		sb.append(",ASSHPC="+ASSHPC);
		sb.append(",ASMINC="+ASMINC);
		sb.append(",ASMINA="+String.valueOf(ASMINA));
		sb.append(",ASTRKP="+String.valueOf(ASTRKP));
		sb.append(",ASTRKA="+String.valueOf(ASTRKA));
		sb.append(",ASTARP="+String.valueOf(ASTARP));
		sb.append(",ASSTOP="+String.valueOf(ASSTOP));
		sb.append(",ASSKID="+String.valueOf(ASSKID));
		sb.append(",ASOTHQ="+String.valueOf(ASOTHQ));
		sb.append(",ASOTHP="+String.valueOf(ASOTHP));
		sb.append(",ASRTCD="+ASRTCD);
		sb.append(",ASVOLP="+String.valueOf(ASVOLP));
		sb.append(",ASVOLN="+String.valueOf(ASVOLN));
		sb.append(",ASREBP="+String.valueOf(ASREBP));
		sb.append(",ASREBN="+String.valueOf(ASREBN));
		sb.append(",ASALLP="+String.valueOf(ASALLP));
		sb.append(",ASALLN="+String.valueOf(ASALLN));
		sb.append(",APPR01="+String.valueOf(APPR01));
		sb.append(",APPR02="+String.valueOf(APPR02));
		sb.append(",APPR03="+String.valueOf(APPR03));
		sb.append(",APPR04="+String.valueOf(APPR04));
		sb.append(",APPR05="+String.valueOf(APPR05));
		sb.append(",APPR06="+String.valueOf(APPR06));
		sb.append(",APPR07="+String.valueOf(APPR07));
		sb.append(",APPR08="+String.valueOf(APPR08));
		sb.append(",APPR09="+String.valueOf(APPR09));
		sb.append(",APPR10="+String.valueOf(APPR10));
		sb.append(",APPR11="+String.valueOf(APPR11));
		sb.append(",APPR12="+String.valueOf(APPR12));
		sb.append(",APPR13="+String.valueOf(APPR13));
		sb.append(",APMRGP="+String.valueOf(APMRGP));
		sb.append(",AGMROI="+String.valueOf(AGMROI));
		sb.append(",APTRNS="+String.valueOf(APTRNS));
		sb.append(",APAVOH="+String.valueOf(APAVOH));
		sb.append(",APPOBO="+String.valueOf(APPOBO));
		sb.append(",APPOSS="+String.valueOf(APPOSS));
		sb.append(",APPOLT="+String.valueOf(APPOLT));
		sb.append(",APLY01="+String.valueOf(APLY01));
		sb.append(",APLY02="+String.valueOf(APLY02));
		sb.append(",APLY03="+String.valueOf(APLY03));
		sb.append(",APLY04="+String.valueOf(APLY04));
		sb.append(",APTY01="+String.valueOf(APTY01));
		sb.append(",APTY02="+String.valueOf(APTY02));
		sb.append(",APTY03="+String.valueOf(APTY03));
		sb.append(",APTY04="+String.valueOf(APTY04));
		sb.append(",ASLST1="+String.valueOf(ASLST1));
		sb.append(",ASLST2="+String.valueOf(ASLST2));
		sb.append(",AS1099="+AS1099);
		sb.append(",ASPCCD="+ASPCCD);
		sb.append(",ASOTHN="+ASOTHN);
		sb.append(",ASRAYN="+ASRAYN);
		sb.append(",ASCURC="+ASCURC);
		sb.append(",ASTAXC="+ASTAXC);
		sb.append(",ASSTYN="+ASSTYN);
		sb.append(",ASTTPC="+String.valueOf(ASTTPC));
		sb.append(",ASTTDC="+ASTTDC);
		sb.append(",ASTTPU="+String.valueOf(ASTTPU));
		sb.append(",ASTTDU="+ASTTDU);
		sb.append(",ASTLPC="+String.valueOf(ASTLPC));
		sb.append(",ASTLDC="+ASTLDC);
		sb.append(",ASTLPU="+String.valueOf(ASTLPU));
		sb.append(",ASTLDU="+ASTLDU);
		sb.append(",ASLINM="+ASLINM);
		sb.append(",ASTTNC="+String.valueOf(ASTTNC));
		sb.append(",ASTTND="+ASTTND);
		sb.append(",ASGSTR="+ASGSTR);
		sb.append(",ASGSTN="+ASGSTN);
		sb.append(",ASGST1="+String.valueOf(ASGST1));
		sb.append(",ASGST2="+String.valueOf(ASGST2));
		sb.append(",ASFRTF="+ASFRTF);
		sb.append(",ASMSCF="+ASMSCF);
		sb.append(",ASALWF="+ASALWF);
		sb.append(",ASHSHQ="+ASHSHQ);
		sb.append(",ASLNOG="+ASLNOG);
		sb.append(",ASLUOE="+ASLUOE);
		sb.append(",ASLSOP="+ASLSOP);
		sb.append(",ASMTCH="+ASMTCH);
		sb.append(",ASCAUT="+ASCAUT);
		sb.append(",ASTAXD="+ASTAXD);
		sb.append(",ASALLC="+ASALLC);
		sb.append(",ASMCHT="+ASMCHT);
		sb.append(",LOAD_DATE="+String.valueOf(LOAD_DATE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ASNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASNUM);
            			}
            		
        			sb.append("|");
        		
        				if(ASNAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASNAME);
            			}
            		
        			sb.append("|");
        		
        				if(ASADAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASADAD);
            			}
            		
        			sb.append("|");
        		
        				if(ASALPH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALPH);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTAT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ASBOYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBOYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASAUTO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASAUTO);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNUM);
            			}
            		
        			sb.append("|");
        		
        				if(ASCLRK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCLRK);
            			}
            		
        			sb.append("|");
        		
        				if(ASDFAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDFAC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTR);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOTH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOTH);
            			}
            		
        			sb.append("|");
        		
        				if(ASBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(ASCUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCUST);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNIN);
            			}
            		
        			sb.append("|");
        		
        				if(ASDTIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDTIN);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASDTLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDTLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASAMLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASAMLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASCKLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCKLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASBAL1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBAL1);
            			}
            		
        			sb.append("|");
        		
        				if(ASBAL2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBAL2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT1);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT3);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT1);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT2);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT3);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT1);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT2);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT3);
            			}
            		
        			sb.append("|");
        		
        				if(ASRVFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRVFR);
            			}
            		
        			sb.append("|");
        		
        				if(ASLEAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLEAD);
            			}
            		
        			sb.append("|");
        		
        				if(ASTPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTPO);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRMS);
            			}
            		
        			sb.append("|");
        		
        				if(ASTIND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTIND);
            			}
            		
        			sb.append("|");
        		
        				if(ASPUSH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASPUSH);
            			}
            		
        			sb.append("|");
        		
        				if(ASTDSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTDSC);
            			}
            		
        			sb.append("|");
        		
        				if(ASFPCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFPCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASFALP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFALP);
            			}
            		
        			sb.append("|");
        		
        				if(ASFALN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFALN);
            			}
            		
        			sb.append("|");
        		
        				if(ASFOBC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFOBC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHP1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHP1);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHP2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHP2);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHPP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHPP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMINC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMINC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMINA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMINA);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRKP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRKP);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRKA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRKA);
            			}
            		
        			sb.append("|");
        		
        				if(ASTARP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTARP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTOP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSKID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSKID);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHQ);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHP);
            			}
            		
        			sb.append("|");
        		
        				if(ASRTCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRTCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOLN);
            			}
            		
        			sb.append("|");
        		
        				if(ASREBP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASREBP);
            			}
            		
        			sb.append("|");
        		
        				if(ASREBN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASREBN);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLN);
            			}
            		
        			sb.append("|");
        		
        				if(APPR01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR01);
            			}
            		
        			sb.append("|");
        		
        				if(APPR02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR02);
            			}
            		
        			sb.append("|");
        		
        				if(APPR03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR03);
            			}
            		
        			sb.append("|");
        		
        				if(APPR04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR04);
            			}
            		
        			sb.append("|");
        		
        				if(APPR05 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR05);
            			}
            		
        			sb.append("|");
        		
        				if(APPR06 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR06);
            			}
            		
        			sb.append("|");
        		
        				if(APPR07 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR07);
            			}
            		
        			sb.append("|");
        		
        				if(APPR08 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR08);
            			}
            		
        			sb.append("|");
        		
        				if(APPR09 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR09);
            			}
            		
        			sb.append("|");
        		
        				if(APPR10 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR10);
            			}
            		
        			sb.append("|");
        		
        				if(APPR11 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR11);
            			}
            		
        			sb.append("|");
        		
        				if(APPR12 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR12);
            			}
            		
        			sb.append("|");
        		
        				if(APPR13 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR13);
            			}
            		
        			sb.append("|");
        		
        				if(APMRGP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APMRGP);
            			}
            		
        			sb.append("|");
        		
        				if(AGMROI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGMROI);
            			}
            		
        			sb.append("|");
        		
        				if(APTRNS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTRNS);
            			}
            		
        			sb.append("|");
        		
        				if(APAVOH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APAVOH);
            			}
            		
        			sb.append("|");
        		
        				if(APPOBO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOBO);
            			}
            		
        			sb.append("|");
        		
        				if(APPOSS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOSS);
            			}
            		
        			sb.append("|");
        		
        				if(APPOLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOLT);
            			}
            		
        			sb.append("|");
        		
        				if(APLY01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY01);
            			}
            		
        			sb.append("|");
        		
        				if(APLY02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY02);
            			}
            		
        			sb.append("|");
        		
        				if(APLY03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY03);
            			}
            		
        			sb.append("|");
        		
        				if(APLY04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY04);
            			}
            		
        			sb.append("|");
        		
        				if(APTY01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY01);
            			}
            		
        			sb.append("|");
        		
        				if(APTY02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY02);
            			}
            		
        			sb.append("|");
        		
        				if(APTY03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY03);
            			}
            		
        			sb.append("|");
        		
        				if(APTY04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY04);
            			}
            		
        			sb.append("|");
        		
        				if(ASLST1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLST1);
            			}
            		
        			sb.append("|");
        		
        				if(ASLST2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLST2);
            			}
            		
        			sb.append("|");
        		
        				if(AS1099 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AS1099);
            			}
            		
        			sb.append("|");
        		
        				if(ASPCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASPCCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHN);
            			}
            		
        			sb.append("|");
        		
        				if(ASRAYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRAYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASCURC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCURC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTAXC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTAXC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTDC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTPU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTDU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTDU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLDC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLPU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLDU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLDU);
            			}
            		
        			sb.append("|");
        		
        				if(ASLINM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLINM);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTNC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTNC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTND);
            			}
            		
        			sb.append("|");
        		
        				if(ASGSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGSTR);
            			}
            		
        			sb.append("|");
        		
        				if(ASGSTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGSTN);
            			}
            		
        			sb.append("|");
        		
        				if(ASGST1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGST1);
            			}
            		
        			sb.append("|");
        		
        				if(ASGST2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGST2);
            			}
            		
        			sb.append("|");
        		
        				if(ASFRTF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFRTF);
            			}
            		
        			sb.append("|");
        		
        				if(ASMSCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMSCF);
            			}
            		
        			sb.append("|");
        		
        				if(ASALWF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALWF);
            			}
            		
        			sb.append("|");
        		
        				if(ASHSHQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASHSHQ);
            			}
            		
        			sb.append("|");
        		
        				if(ASLNOG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLNOG);
            			}
            		
        			sb.append("|");
        		
        				if(ASLUOE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLUOE);
            			}
            		
        			sb.append("|");
        		
        				if(ASLSOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLSOP);
            			}
            		
        			sb.append("|");
        		
        				if(ASMTCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMTCH);
            			}
            		
        			sb.append("|");
        		
        				if(ASCAUT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCAUT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTAXD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTAXD);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMCHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMCHT);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_DATE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(APSUPPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];
    static byte[] commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[0];

	
			    public Double ASNUM;

				public Double getASNUM () {
					return this.ASNUM;
				}

				public Boolean ASNUMIsNullable(){
				    return true;
				}
				public Boolean ASNUMIsKey(){
				    return false;
				}
				public Integer ASNUMLength(){
				    return null;
				}
				public Integer ASNUMPrecision(){
				    return null;
				}
				public String ASNUMDefault(){
				
					return "";
				
				}
				public String ASNUMComment(){
				
				    return "";
				
				}
				public String ASNUMPattern(){
				
					return "";
				
				}
				public String ASNUMOriginalDbColumnName(){
				
					return "ASNUM";
				
				}

				
			    public String ASNAME;

				public String getASNAME () {
					return this.ASNAME;
				}

				public Boolean ASNAMEIsNullable(){
				    return true;
				}
				public Boolean ASNAMEIsKey(){
				    return false;
				}
				public Integer ASNAMELength(){
				    return null;
				}
				public Integer ASNAMEPrecision(){
				    return null;
				}
				public String ASNAMEDefault(){
				
					return null;
				
				}
				public String ASNAMEComment(){
				
				    return "";
				
				}
				public String ASNAMEPattern(){
				
					return "";
				
				}
				public String ASNAMEOriginalDbColumnName(){
				
					return "ASNAME";
				
				}

				
			    public String ASADAD;

				public String getASADAD () {
					return this.ASADAD;
				}

				public Boolean ASADADIsNullable(){
				    return true;
				}
				public Boolean ASADADIsKey(){
				    return false;
				}
				public Integer ASADADLength(){
				    return null;
				}
				public Integer ASADADPrecision(){
				    return null;
				}
				public String ASADADDefault(){
				
					return null;
				
				}
				public String ASADADComment(){
				
				    return "";
				
				}
				public String ASADADPattern(){
				
					return "";
				
				}
				public String ASADADOriginalDbColumnName(){
				
					return "ASADAD";
				
				}

				
			    public String ASALPH;

				public String getASALPH () {
					return this.ASALPH;
				}

				public Boolean ASALPHIsNullable(){
				    return true;
				}
				public Boolean ASALPHIsKey(){
				    return false;
				}
				public Integer ASALPHLength(){
				    return null;
				}
				public Integer ASALPHPrecision(){
				    return null;
				}
				public String ASALPHDefault(){
				
					return null;
				
				}
				public String ASALPHComment(){
				
				    return "";
				
				}
				public String ASALPHPattern(){
				
					return "";
				
				}
				public String ASALPHOriginalDbColumnName(){
				
					return "ASALPH";
				
				}

				
			    public String ASSTAT;

				public String getASSTAT () {
					return this.ASSTAT;
				}

				public Boolean ASSTATIsNullable(){
				    return true;
				}
				public Boolean ASSTATIsKey(){
				    return false;
				}
				public Integer ASSTATLength(){
				    return null;
				}
				public Integer ASSTATPrecision(){
				    return null;
				}
				public String ASSTATDefault(){
				
					return null;
				
				}
				public String ASSTATComment(){
				
				    return "";
				
				}
				public String ASSTATPattern(){
				
					return "";
				
				}
				public String ASSTATOriginalDbColumnName(){
				
					return "ASSTAT";
				
				}

				
			    public String ASTYPE;

				public String getASTYPE () {
					return this.ASTYPE;
				}

				public Boolean ASTYPEIsNullable(){
				    return true;
				}
				public Boolean ASTYPEIsKey(){
				    return false;
				}
				public Integer ASTYPELength(){
				    return null;
				}
				public Integer ASTYPEPrecision(){
				    return null;
				}
				public String ASTYPEDefault(){
				
					return null;
				
				}
				public String ASTYPEComment(){
				
				    return "";
				
				}
				public String ASTYPEPattern(){
				
					return "";
				
				}
				public String ASTYPEOriginalDbColumnName(){
				
					return "ASTYPE";
				
				}

				
			    public String ASBOYN;

				public String getASBOYN () {
					return this.ASBOYN;
				}

				public Boolean ASBOYNIsNullable(){
				    return true;
				}
				public Boolean ASBOYNIsKey(){
				    return false;
				}
				public Integer ASBOYNLength(){
				    return null;
				}
				public Integer ASBOYNPrecision(){
				    return null;
				}
				public String ASBOYNDefault(){
				
					return null;
				
				}
				public String ASBOYNComment(){
				
				    return "";
				
				}
				public String ASBOYNPattern(){
				
					return "";
				
				}
				public String ASBOYNOriginalDbColumnName(){
				
					return "ASBOYN";
				
				}

				
			    public String ASAUTO;

				public String getASAUTO () {
					return this.ASAUTO;
				}

				public Boolean ASAUTOIsNullable(){
				    return true;
				}
				public Boolean ASAUTOIsKey(){
				    return false;
				}
				public Integer ASAUTOLength(){
				    return null;
				}
				public Integer ASAUTOPrecision(){
				    return null;
				}
				public String ASAUTODefault(){
				
					return null;
				
				}
				public String ASAUTOComment(){
				
				    return "";
				
				}
				public String ASAUTOPattern(){
				
					return "";
				
				}
				public String ASAUTOOriginalDbColumnName(){
				
					return "ASAUTO";
				
				}

				
			    public BigDecimal ASCNUM;

				public BigDecimal getASCNUM () {
					return this.ASCNUM;
				}

				public Boolean ASCNUMIsNullable(){
				    return true;
				}
				public Boolean ASCNUMIsKey(){
				    return false;
				}
				public Integer ASCNUMLength(){
				    return null;
				}
				public Integer ASCNUMPrecision(){
				    return null;
				}
				public String ASCNUMDefault(){
				
					return "";
				
				}
				public String ASCNUMComment(){
				
				    return "";
				
				}
				public String ASCNUMPattern(){
				
					return "";
				
				}
				public String ASCNUMOriginalDbColumnName(){
				
					return "ASCNUM";
				
				}

				
			    public Double ASCLRK;

				public Double getASCLRK () {
					return this.ASCLRK;
				}

				public Boolean ASCLRKIsNullable(){
				    return true;
				}
				public Boolean ASCLRKIsKey(){
				    return false;
				}
				public Integer ASCLRKLength(){
				    return null;
				}
				public Integer ASCLRKPrecision(){
				    return null;
				}
				public String ASCLRKDefault(){
				
					return "";
				
				}
				public String ASCLRKComment(){
				
				    return "";
				
				}
				public String ASCLRKPattern(){
				
					return "";
				
				}
				public String ASCLRKOriginalDbColumnName(){
				
					return "ASCLRK";
				
				}

				
			    public BigDecimal ASDFAC;

				public BigDecimal getASDFAC () {
					return this.ASDFAC;
				}

				public Boolean ASDFACIsNullable(){
				    return true;
				}
				public Boolean ASDFACIsKey(){
				    return false;
				}
				public Integer ASDFACLength(){
				    return null;
				}
				public Integer ASDFACPrecision(){
				    return null;
				}
				public String ASDFACDefault(){
				
					return "";
				
				}
				public String ASDFACComment(){
				
				    return "";
				
				}
				public String ASDFACPattern(){
				
					return "";
				
				}
				public String ASDFACOriginalDbColumnName(){
				
					return "ASDFAC";
				
				}

				
			    public BigDecimal ASSTR;

				public BigDecimal getASSTR () {
					return this.ASSTR;
				}

				public Boolean ASSTRIsNullable(){
				    return true;
				}
				public Boolean ASSTRIsKey(){
				    return false;
				}
				public Integer ASSTRLength(){
				    return null;
				}
				public Integer ASSTRPrecision(){
				    return null;
				}
				public String ASSTRDefault(){
				
					return "";
				
				}
				public String ASSTRComment(){
				
				    return "";
				
				}
				public String ASSTRPattern(){
				
					return "";
				
				}
				public String ASSTROriginalDbColumnName(){
				
					return "ASSTR";
				
				}

				
			    public Double ASVOTH;

				public Double getASVOTH () {
					return this.ASVOTH;
				}

				public Boolean ASVOTHIsNullable(){
				    return true;
				}
				public Boolean ASVOTHIsKey(){
				    return false;
				}
				public Integer ASVOTHLength(){
				    return null;
				}
				public Integer ASVOTHPrecision(){
				    return null;
				}
				public String ASVOTHDefault(){
				
					return "";
				
				}
				public String ASVOTHComment(){
				
				    return "";
				
				}
				public String ASVOTHPattern(){
				
					return "";
				
				}
				public String ASVOTHOriginalDbColumnName(){
				
					return "ASVOTH";
				
				}

				
			    public String ASBUYR;

				public String getASBUYR () {
					return this.ASBUYR;
				}

				public Boolean ASBUYRIsNullable(){
				    return true;
				}
				public Boolean ASBUYRIsKey(){
				    return false;
				}
				public Integer ASBUYRLength(){
				    return null;
				}
				public Integer ASBUYRPrecision(){
				    return null;
				}
				public String ASBUYRDefault(){
				
					return "";
				
				}
				public String ASBUYRComment(){
				
				    return "";
				
				}
				public String ASBUYRPattern(){
				
					return "";
				
				}
				public String ASBUYROriginalDbColumnName(){
				
					return "ASBUYR";
				
				}

				
			    public String ASCUST;

				public String getASCUST () {
					return this.ASCUST;
				}

				public Boolean ASCUSTIsNullable(){
				    return true;
				}
				public Boolean ASCUSTIsKey(){
				    return false;
				}
				public Integer ASCUSTLength(){
				    return null;
				}
				public Integer ASCUSTPrecision(){
				    return null;
				}
				public String ASCUSTDefault(){
				
					return "";
				
				}
				public String ASCUSTComment(){
				
				    return "";
				
				}
				public String ASCUSTPattern(){
				
					return "";
				
				}
				public String ASCUSTOriginalDbColumnName(){
				
					return "ASCUST";
				
				}

				
			    public BigDecimal ASCNIN;

				public BigDecimal getASCNIN () {
					return this.ASCNIN;
				}

				public Boolean ASCNINIsNullable(){
				    return true;
				}
				public Boolean ASCNINIsKey(){
				    return false;
				}
				public Integer ASCNINLength(){
				    return null;
				}
				public Integer ASCNINPrecision(){
				    return null;
				}
				public String ASCNINDefault(){
				
					return "";
				
				}
				public String ASCNINComment(){
				
				    return "";
				
				}
				public String ASCNINPattern(){
				
					return "";
				
				}
				public String ASCNINOriginalDbColumnName(){
				
					return "ASCNIN";
				
				}

				
			    public BigDecimal ASDTIN;

				public BigDecimal getASDTIN () {
					return this.ASDTIN;
				}

				public Boolean ASDTINIsNullable(){
				    return true;
				}
				public Boolean ASDTINIsKey(){
				    return false;
				}
				public Integer ASDTINLength(){
				    return null;
				}
				public Integer ASDTINPrecision(){
				    return null;
				}
				public String ASDTINDefault(){
				
					return "";
				
				}
				public String ASDTINComment(){
				
				    return "";
				
				}
				public String ASDTINPattern(){
				
					return "";
				
				}
				public String ASDTINOriginalDbColumnName(){
				
					return "ASDTIN";
				
				}

				
			    public BigDecimal ASCNLP;

				public BigDecimal getASCNLP () {
					return this.ASCNLP;
				}

				public Boolean ASCNLPIsNullable(){
				    return true;
				}
				public Boolean ASCNLPIsKey(){
				    return false;
				}
				public Integer ASCNLPLength(){
				    return null;
				}
				public Integer ASCNLPPrecision(){
				    return null;
				}
				public String ASCNLPDefault(){
				
					return "";
				
				}
				public String ASCNLPComment(){
				
				    return "";
				
				}
				public String ASCNLPPattern(){
				
					return "";
				
				}
				public String ASCNLPOriginalDbColumnName(){
				
					return "ASCNLP";
				
				}

				
			    public BigDecimal ASDTLP;

				public BigDecimal getASDTLP () {
					return this.ASDTLP;
				}

				public Boolean ASDTLPIsNullable(){
				    return true;
				}
				public Boolean ASDTLPIsKey(){
				    return false;
				}
				public Integer ASDTLPLength(){
				    return null;
				}
				public Integer ASDTLPPrecision(){
				    return null;
				}
				public String ASDTLPDefault(){
				
					return "";
				
				}
				public String ASDTLPComment(){
				
				    return "";
				
				}
				public String ASDTLPPattern(){
				
					return "";
				
				}
				public String ASDTLPOriginalDbColumnName(){
				
					return "ASDTLP";
				
				}

				
			    public BigDecimal ASAMLP;

				public BigDecimal getASAMLP () {
					return this.ASAMLP;
				}

				public Boolean ASAMLPIsNullable(){
				    return true;
				}
				public Boolean ASAMLPIsKey(){
				    return false;
				}
				public Integer ASAMLPLength(){
				    return null;
				}
				public Integer ASAMLPPrecision(){
				    return null;
				}
				public String ASAMLPDefault(){
				
					return "";
				
				}
				public String ASAMLPComment(){
				
				    return "";
				
				}
				public String ASAMLPPattern(){
				
					return "";
				
				}
				public String ASAMLPOriginalDbColumnName(){
				
					return "ASAMLP";
				
				}

				
			    public BigDecimal ASCKLP;

				public BigDecimal getASCKLP () {
					return this.ASCKLP;
				}

				public Boolean ASCKLPIsNullable(){
				    return true;
				}
				public Boolean ASCKLPIsKey(){
				    return false;
				}
				public Integer ASCKLPLength(){
				    return null;
				}
				public Integer ASCKLPPrecision(){
				    return null;
				}
				public String ASCKLPDefault(){
				
					return "";
				
				}
				public String ASCKLPComment(){
				
				    return "";
				
				}
				public String ASCKLPPattern(){
				
					return "";
				
				}
				public String ASCKLPOriginalDbColumnName(){
				
					return "ASCKLP";
				
				}

				
			    public BigDecimal ASBAL1;

				public BigDecimal getASBAL1 () {
					return this.ASBAL1;
				}

				public Boolean ASBAL1IsNullable(){
				    return true;
				}
				public Boolean ASBAL1IsKey(){
				    return false;
				}
				public Integer ASBAL1Length(){
				    return null;
				}
				public Integer ASBAL1Precision(){
				    return null;
				}
				public String ASBAL1Default(){
				
					return "";
				
				}
				public String ASBAL1Comment(){
				
				    return "";
				
				}
				public String ASBAL1Pattern(){
				
					return "";
				
				}
				public String ASBAL1OriginalDbColumnName(){
				
					return "ASBAL1";
				
				}

				
			    public BigDecimal ASBAL2;

				public BigDecimal getASBAL2 () {
					return this.ASBAL2;
				}

				public Boolean ASBAL2IsNullable(){
				    return true;
				}
				public Boolean ASBAL2IsKey(){
				    return false;
				}
				public Integer ASBAL2Length(){
				    return null;
				}
				public Integer ASBAL2Precision(){
				    return null;
				}
				public String ASBAL2Default(){
				
					return "";
				
				}
				public String ASBAL2Comment(){
				
				    return "";
				
				}
				public String ASBAL2Pattern(){
				
					return "";
				
				}
				public String ASBAL2OriginalDbColumnName(){
				
					return "ASBAL2";
				
				}

				
			    public String PONOT1;

				public String getPONOT1 () {
					return this.PONOT1;
				}

				public Boolean PONOT1IsNullable(){
				    return true;
				}
				public Boolean PONOT1IsKey(){
				    return false;
				}
				public Integer PONOT1Length(){
				    return null;
				}
				public Integer PONOT1Precision(){
				    return null;
				}
				public String PONOT1Default(){
				
					return "";
				
				}
				public String PONOT1Comment(){
				
				    return "";
				
				}
				public String PONOT1Pattern(){
				
					return "";
				
				}
				public String PONOT1OriginalDbColumnName(){
				
					return "PONOT1";
				
				}

				
			    public String PONOT2;

				public String getPONOT2 () {
					return this.PONOT2;
				}

				public Boolean PONOT2IsNullable(){
				    return true;
				}
				public Boolean PONOT2IsKey(){
				    return false;
				}
				public Integer PONOT2Length(){
				    return null;
				}
				public Integer PONOT2Precision(){
				    return null;
				}
				public String PONOT2Default(){
				
					return "";
				
				}
				public String PONOT2Comment(){
				
				    return "";
				
				}
				public String PONOT2Pattern(){
				
					return "";
				
				}
				public String PONOT2OriginalDbColumnName(){
				
					return "PONOT2";
				
				}

				
			    public String PONOT3;

				public String getPONOT3 () {
					return this.PONOT3;
				}

				public Boolean PONOT3IsNullable(){
				    return true;
				}
				public Boolean PONOT3IsKey(){
				    return false;
				}
				public Integer PONOT3Length(){
				    return null;
				}
				public Integer PONOT3Precision(){
				    return null;
				}
				public String PONOT3Default(){
				
					return "";
				
				}
				public String PONOT3Comment(){
				
				    return "";
				
				}
				public String PONOT3Pattern(){
				
					return "";
				
				}
				public String PONOT3OriginalDbColumnName(){
				
					return "PONOT3";
				
				}

				
			    public String RCNOT1;

				public String getRCNOT1 () {
					return this.RCNOT1;
				}

				public Boolean RCNOT1IsNullable(){
				    return true;
				}
				public Boolean RCNOT1IsKey(){
				    return false;
				}
				public Integer RCNOT1Length(){
				    return null;
				}
				public Integer RCNOT1Precision(){
				    return null;
				}
				public String RCNOT1Default(){
				
					return "";
				
				}
				public String RCNOT1Comment(){
				
				    return "";
				
				}
				public String RCNOT1Pattern(){
				
					return "";
				
				}
				public String RCNOT1OriginalDbColumnName(){
				
					return "RCNOT1";
				
				}

				
			    public String RCNOT2;

				public String getRCNOT2 () {
					return this.RCNOT2;
				}

				public Boolean RCNOT2IsNullable(){
				    return true;
				}
				public Boolean RCNOT2IsKey(){
				    return false;
				}
				public Integer RCNOT2Length(){
				    return null;
				}
				public Integer RCNOT2Precision(){
				    return null;
				}
				public String RCNOT2Default(){
				
					return "";
				
				}
				public String RCNOT2Comment(){
				
				    return "";
				
				}
				public String RCNOT2Pattern(){
				
					return "";
				
				}
				public String RCNOT2OriginalDbColumnName(){
				
					return "RCNOT2";
				
				}

				
			    public String RCNOT3;

				public String getRCNOT3 () {
					return this.RCNOT3;
				}

				public Boolean RCNOT3IsNullable(){
				    return true;
				}
				public Boolean RCNOT3IsKey(){
				    return false;
				}
				public Integer RCNOT3Length(){
				    return null;
				}
				public Integer RCNOT3Precision(){
				    return null;
				}
				public String RCNOT3Default(){
				
					return "";
				
				}
				public String RCNOT3Comment(){
				
				    return "";
				
				}
				public String RCNOT3Pattern(){
				
					return "";
				
				}
				public String RCNOT3OriginalDbColumnName(){
				
					return "RCNOT3";
				
				}

				
			    public String BYNOT1;

				public String getBYNOT1 () {
					return this.BYNOT1;
				}

				public Boolean BYNOT1IsNullable(){
				    return true;
				}
				public Boolean BYNOT1IsKey(){
				    return false;
				}
				public Integer BYNOT1Length(){
				    return null;
				}
				public Integer BYNOT1Precision(){
				    return null;
				}
				public String BYNOT1Default(){
				
					return "";
				
				}
				public String BYNOT1Comment(){
				
				    return "";
				
				}
				public String BYNOT1Pattern(){
				
					return "";
				
				}
				public String BYNOT1OriginalDbColumnName(){
				
					return "BYNOT1";
				
				}

				
			    public String BYNOT2;

				public String getBYNOT2 () {
					return this.BYNOT2;
				}

				public Boolean BYNOT2IsNullable(){
				    return true;
				}
				public Boolean BYNOT2IsKey(){
				    return false;
				}
				public Integer BYNOT2Length(){
				    return null;
				}
				public Integer BYNOT2Precision(){
				    return null;
				}
				public String BYNOT2Default(){
				
					return "";
				
				}
				public String BYNOT2Comment(){
				
				    return "";
				
				}
				public String BYNOT2Pattern(){
				
					return "";
				
				}
				public String BYNOT2OriginalDbColumnName(){
				
					return "BYNOT2";
				
				}

				
			    public String BYNOT3;

				public String getBYNOT3 () {
					return this.BYNOT3;
				}

				public Boolean BYNOT3IsNullable(){
				    return true;
				}
				public Boolean BYNOT3IsKey(){
				    return false;
				}
				public Integer BYNOT3Length(){
				    return null;
				}
				public Integer BYNOT3Precision(){
				    return null;
				}
				public String BYNOT3Default(){
				
					return "";
				
				}
				public String BYNOT3Comment(){
				
				    return "";
				
				}
				public String BYNOT3Pattern(){
				
					return "";
				
				}
				public String BYNOT3OriginalDbColumnName(){
				
					return "BYNOT3";
				
				}

				
			    public BigDecimal ASRVFR;

				public BigDecimal getASRVFR () {
					return this.ASRVFR;
				}

				public Boolean ASRVFRIsNullable(){
				    return true;
				}
				public Boolean ASRVFRIsKey(){
				    return false;
				}
				public Integer ASRVFRLength(){
				    return null;
				}
				public Integer ASRVFRPrecision(){
				    return null;
				}
				public String ASRVFRDefault(){
				
					return "";
				
				}
				public String ASRVFRComment(){
				
				    return "";
				
				}
				public String ASRVFRPattern(){
				
					return "";
				
				}
				public String ASRVFROriginalDbColumnName(){
				
					return "ASRVFR";
				
				}

				
			    public BigDecimal ASLEAD;

				public BigDecimal getASLEAD () {
					return this.ASLEAD;
				}

				public Boolean ASLEADIsNullable(){
				    return true;
				}
				public Boolean ASLEADIsKey(){
				    return false;
				}
				public Integer ASLEADLength(){
				    return null;
				}
				public Integer ASLEADPrecision(){
				    return null;
				}
				public String ASLEADDefault(){
				
					return "";
				
				}
				public String ASLEADComment(){
				
				    return "";
				
				}
				public String ASLEADPattern(){
				
					return "";
				
				}
				public String ASLEADOriginalDbColumnName(){
				
					return "ASLEAD";
				
				}

				
			    public BigDecimal ASTPO;

				public BigDecimal getASTPO () {
					return this.ASTPO;
				}

				public Boolean ASTPOIsNullable(){
				    return true;
				}
				public Boolean ASTPOIsKey(){
				    return false;
				}
				public Integer ASTPOLength(){
				    return null;
				}
				public Integer ASTPOPrecision(){
				    return null;
				}
				public String ASTPODefault(){
				
					return "";
				
				}
				public String ASTPOComment(){
				
				    return "";
				
				}
				public String ASTPOPattern(){
				
					return "";
				
				}
				public String ASTPOOriginalDbColumnName(){
				
					return "ASTPO";
				
				}

				
			    public BigDecimal ASTLT;

				public BigDecimal getASTLT () {
					return this.ASTLT;
				}

				public Boolean ASTLTIsNullable(){
				    return true;
				}
				public Boolean ASTLTIsKey(){
				    return false;
				}
				public Integer ASTLTLength(){
				    return null;
				}
				public Integer ASTLTPrecision(){
				    return null;
				}
				public String ASTLTDefault(){
				
					return "";
				
				}
				public String ASTLTComment(){
				
				    return "";
				
				}
				public String ASTLTPattern(){
				
					return "";
				
				}
				public String ASTLTOriginalDbColumnName(){
				
					return "ASTLT";
				
				}

				
			    public Double ASTRMS;

				public Double getASTRMS () {
					return this.ASTRMS;
				}

				public Boolean ASTRMSIsNullable(){
				    return true;
				}
				public Boolean ASTRMSIsKey(){
				    return false;
				}
				public Integer ASTRMSLength(){
				    return null;
				}
				public Integer ASTRMSPrecision(){
				    return null;
				}
				public String ASTRMSDefault(){
				
					return "";
				
				}
				public String ASTRMSComment(){
				
				    return "";
				
				}
				public String ASTRMSPattern(){
				
					return "";
				
				}
				public String ASTRMSOriginalDbColumnName(){
				
					return "ASTRMS";
				
				}

				
			    public String ASTIND;

				public String getASTIND () {
					return this.ASTIND;
				}

				public Boolean ASTINDIsNullable(){
				    return true;
				}
				public Boolean ASTINDIsKey(){
				    return false;
				}
				public Integer ASTINDLength(){
				    return null;
				}
				public Integer ASTINDPrecision(){
				    return null;
				}
				public String ASTINDDefault(){
				
					return "";
				
				}
				public String ASTINDComment(){
				
				    return "";
				
				}
				public String ASTINDPattern(){
				
					return "";
				
				}
				public String ASTINDOriginalDbColumnName(){
				
					return "ASTIND";
				
				}

				
			    public BigDecimal ASPUSH;

				public BigDecimal getASPUSH () {
					return this.ASPUSH;
				}

				public Boolean ASPUSHIsNullable(){
				    return true;
				}
				public Boolean ASPUSHIsKey(){
				    return false;
				}
				public Integer ASPUSHLength(){
				    return null;
				}
				public Integer ASPUSHPrecision(){
				    return null;
				}
				public String ASPUSHDefault(){
				
					return "";
				
				}
				public String ASPUSHComment(){
				
				    return "";
				
				}
				public String ASPUSHPattern(){
				
					return "";
				
				}
				public String ASPUSHOriginalDbColumnName(){
				
					return "ASPUSH";
				
				}

				
			    public String ASTDSC;

				public String getASTDSC () {
					return this.ASTDSC;
				}

				public Boolean ASTDSCIsNullable(){
				    return true;
				}
				public Boolean ASTDSCIsKey(){
				    return false;
				}
				public Integer ASTDSCLength(){
				    return null;
				}
				public Integer ASTDSCPrecision(){
				    return null;
				}
				public String ASTDSCDefault(){
				
					return "";
				
				}
				public String ASTDSCComment(){
				
				    return "";
				
				}
				public String ASTDSCPattern(){
				
					return "";
				
				}
				public String ASTDSCOriginalDbColumnName(){
				
					return "ASTDSC";
				
				}

				
			    public String ASFPCD;

				public String getASFPCD () {
					return this.ASFPCD;
				}

				public Boolean ASFPCDIsNullable(){
				    return true;
				}
				public Boolean ASFPCDIsKey(){
				    return false;
				}
				public Integer ASFPCDLength(){
				    return null;
				}
				public Integer ASFPCDPrecision(){
				    return null;
				}
				public String ASFPCDDefault(){
				
					return "";
				
				}
				public String ASFPCDComment(){
				
				    return "";
				
				}
				public String ASFPCDPattern(){
				
					return "";
				
				}
				public String ASFPCDOriginalDbColumnName(){
				
					return "ASFPCD";
				
				}

				
			    public BigDecimal ASFALP;

				public BigDecimal getASFALP () {
					return this.ASFALP;
				}

				public Boolean ASFALPIsNullable(){
				    return true;
				}
				public Boolean ASFALPIsKey(){
				    return false;
				}
				public Integer ASFALPLength(){
				    return null;
				}
				public Integer ASFALPPrecision(){
				    return null;
				}
				public String ASFALPDefault(){
				
					return "";
				
				}
				public String ASFALPComment(){
				
				    return "";
				
				}
				public String ASFALPPattern(){
				
					return "";
				
				}
				public String ASFALPOriginalDbColumnName(){
				
					return "ASFALP";
				
				}

				
			    public BigDecimal ASFALN;

				public BigDecimal getASFALN () {
					return this.ASFALN;
				}

				public Boolean ASFALNIsNullable(){
				    return true;
				}
				public Boolean ASFALNIsKey(){
				    return false;
				}
				public Integer ASFALNLength(){
				    return null;
				}
				public Integer ASFALNPrecision(){
				    return null;
				}
				public String ASFALNDefault(){
				
					return "";
				
				}
				public String ASFALNComment(){
				
				    return "";
				
				}
				public String ASFALNPattern(){
				
					return "";
				
				}
				public String ASFALNOriginalDbColumnName(){
				
					return "ASFALN";
				
				}

				
			    public String ASFOBC;

				public String getASFOBC () {
					return this.ASFOBC;
				}

				public Boolean ASFOBCIsNullable(){
				    return true;
				}
				public Boolean ASFOBCIsKey(){
				    return false;
				}
				public Integer ASFOBCLength(){
				    return null;
				}
				public Integer ASFOBCPrecision(){
				    return null;
				}
				public String ASFOBCDefault(){
				
					return "";
				
				}
				public String ASFOBCComment(){
				
				    return "";
				
				}
				public String ASFOBCPattern(){
				
					return "";
				
				}
				public String ASFOBCOriginalDbColumnName(){
				
					return "ASFOBC";
				
				}

				
			    public String ASSHP1;

				public String getASSHP1 () {
					return this.ASSHP1;
				}

				public Boolean ASSHP1IsNullable(){
				    return true;
				}
				public Boolean ASSHP1IsKey(){
				    return false;
				}
				public Integer ASSHP1Length(){
				    return null;
				}
				public Integer ASSHP1Precision(){
				    return null;
				}
				public String ASSHP1Default(){
				
					return "";
				
				}
				public String ASSHP1Comment(){
				
				    return "";
				
				}
				public String ASSHP1Pattern(){
				
					return "";
				
				}
				public String ASSHP1OriginalDbColumnName(){
				
					return "ASSHP1";
				
				}

				
			    public String ASSHP2;

				public String getASSHP2 () {
					return this.ASSHP2;
				}

				public Boolean ASSHP2IsNullable(){
				    return true;
				}
				public Boolean ASSHP2IsKey(){
				    return false;
				}
				public Integer ASSHP2Length(){
				    return null;
				}
				public Integer ASSHP2Precision(){
				    return null;
				}
				public String ASSHP2Default(){
				
					return "";
				
				}
				public String ASSHP2Comment(){
				
				    return "";
				
				}
				public String ASSHP2Pattern(){
				
					return "";
				
				}
				public String ASSHP2OriginalDbColumnName(){
				
					return "ASSHP2";
				
				}

				
			    public String ASSHPP;

				public String getASSHPP () {
					return this.ASSHPP;
				}

				public Boolean ASSHPPIsNullable(){
				    return true;
				}
				public Boolean ASSHPPIsKey(){
				    return false;
				}
				public Integer ASSHPPLength(){
				    return null;
				}
				public Integer ASSHPPPrecision(){
				    return null;
				}
				public String ASSHPPDefault(){
				
					return "";
				
				}
				public String ASSHPPComment(){
				
				    return "";
				
				}
				public String ASSHPPPattern(){
				
					return "";
				
				}
				public String ASSHPPOriginalDbColumnName(){
				
					return "ASSHPP";
				
				}

				
			    public String ASSHPC;

				public String getASSHPC () {
					return this.ASSHPC;
				}

				public Boolean ASSHPCIsNullable(){
				    return true;
				}
				public Boolean ASSHPCIsKey(){
				    return false;
				}
				public Integer ASSHPCLength(){
				    return null;
				}
				public Integer ASSHPCPrecision(){
				    return null;
				}
				public String ASSHPCDefault(){
				
					return "";
				
				}
				public String ASSHPCComment(){
				
				    return "";
				
				}
				public String ASSHPCPattern(){
				
					return "";
				
				}
				public String ASSHPCOriginalDbColumnName(){
				
					return "ASSHPC";
				
				}

				
			    public String ASMINC;

				public String getASMINC () {
					return this.ASMINC;
				}

				public Boolean ASMINCIsNullable(){
				    return true;
				}
				public Boolean ASMINCIsKey(){
				    return false;
				}
				public Integer ASMINCLength(){
				    return null;
				}
				public Integer ASMINCPrecision(){
				    return null;
				}
				public String ASMINCDefault(){
				
					return "";
				
				}
				public String ASMINCComment(){
				
				    return "";
				
				}
				public String ASMINCPattern(){
				
					return "";
				
				}
				public String ASMINCOriginalDbColumnName(){
				
					return "ASMINC";
				
				}

				
			    public BigDecimal ASMINA;

				public BigDecimal getASMINA () {
					return this.ASMINA;
				}

				public Boolean ASMINAIsNullable(){
				    return true;
				}
				public Boolean ASMINAIsKey(){
				    return false;
				}
				public Integer ASMINALength(){
				    return null;
				}
				public Integer ASMINAPrecision(){
				    return null;
				}
				public String ASMINADefault(){
				
					return "";
				
				}
				public String ASMINAComment(){
				
				    return "";
				
				}
				public String ASMINAPattern(){
				
					return "";
				
				}
				public String ASMINAOriginalDbColumnName(){
				
					return "ASMINA";
				
				}

				
			    public BigDecimal ASTRKP;

				public BigDecimal getASTRKP () {
					return this.ASTRKP;
				}

				public Boolean ASTRKPIsNullable(){
				    return true;
				}
				public Boolean ASTRKPIsKey(){
				    return false;
				}
				public Integer ASTRKPLength(){
				    return null;
				}
				public Integer ASTRKPPrecision(){
				    return null;
				}
				public String ASTRKPDefault(){
				
					return "";
				
				}
				public String ASTRKPComment(){
				
				    return "";
				
				}
				public String ASTRKPPattern(){
				
					return "";
				
				}
				public String ASTRKPOriginalDbColumnName(){
				
					return "ASTRKP";
				
				}

				
			    public BigDecimal ASTRKA;

				public BigDecimal getASTRKA () {
					return this.ASTRKA;
				}

				public Boolean ASTRKAIsNullable(){
				    return true;
				}
				public Boolean ASTRKAIsKey(){
				    return false;
				}
				public Integer ASTRKALength(){
				    return null;
				}
				public Integer ASTRKAPrecision(){
				    return null;
				}
				public String ASTRKADefault(){
				
					return "";
				
				}
				public String ASTRKAComment(){
				
				    return "";
				
				}
				public String ASTRKAPattern(){
				
					return "";
				
				}
				public String ASTRKAOriginalDbColumnName(){
				
					return "ASTRKA";
				
				}

				
			    public BigDecimal ASTARP;

				public BigDecimal getASTARP () {
					return this.ASTARP;
				}

				public Boolean ASTARPIsNullable(){
				    return true;
				}
				public Boolean ASTARPIsKey(){
				    return false;
				}
				public Integer ASTARPLength(){
				    return null;
				}
				public Integer ASTARPPrecision(){
				    return null;
				}
				public String ASTARPDefault(){
				
					return "";
				
				}
				public String ASTARPComment(){
				
				    return "";
				
				}
				public String ASTARPPattern(){
				
					return "";
				
				}
				public String ASTARPOriginalDbColumnName(){
				
					return "ASTARP";
				
				}

				
			    public BigDecimal ASSTOP;

				public BigDecimal getASSTOP () {
					return this.ASSTOP;
				}

				public Boolean ASSTOPIsNullable(){
				    return true;
				}
				public Boolean ASSTOPIsKey(){
				    return false;
				}
				public Integer ASSTOPLength(){
				    return null;
				}
				public Integer ASSTOPPrecision(){
				    return null;
				}
				public String ASSTOPDefault(){
				
					return "";
				
				}
				public String ASSTOPComment(){
				
				    return "";
				
				}
				public String ASSTOPPattern(){
				
					return "";
				
				}
				public String ASSTOPOriginalDbColumnName(){
				
					return "ASSTOP";
				
				}

				
			    public BigDecimal ASSKID;

				public BigDecimal getASSKID () {
					return this.ASSKID;
				}

				public Boolean ASSKIDIsNullable(){
				    return true;
				}
				public Boolean ASSKIDIsKey(){
				    return false;
				}
				public Integer ASSKIDLength(){
				    return null;
				}
				public Integer ASSKIDPrecision(){
				    return null;
				}
				public String ASSKIDDefault(){
				
					return "";
				
				}
				public String ASSKIDComment(){
				
				    return "";
				
				}
				public String ASSKIDPattern(){
				
					return "";
				
				}
				public String ASSKIDOriginalDbColumnName(){
				
					return "ASSKID";
				
				}

				
			    public BigDecimal ASOTHQ;

				public BigDecimal getASOTHQ () {
					return this.ASOTHQ;
				}

				public Boolean ASOTHQIsNullable(){
				    return true;
				}
				public Boolean ASOTHQIsKey(){
				    return false;
				}
				public Integer ASOTHQLength(){
				    return null;
				}
				public Integer ASOTHQPrecision(){
				    return null;
				}
				public String ASOTHQDefault(){
				
					return "";
				
				}
				public String ASOTHQComment(){
				
				    return "";
				
				}
				public String ASOTHQPattern(){
				
					return "";
				
				}
				public String ASOTHQOriginalDbColumnName(){
				
					return "ASOTHQ";
				
				}

				
			    public BigDecimal ASOTHP;

				public BigDecimal getASOTHP () {
					return this.ASOTHP;
				}

				public Boolean ASOTHPIsNullable(){
				    return true;
				}
				public Boolean ASOTHPIsKey(){
				    return false;
				}
				public Integer ASOTHPLength(){
				    return null;
				}
				public Integer ASOTHPPrecision(){
				    return null;
				}
				public String ASOTHPDefault(){
				
					return "";
				
				}
				public String ASOTHPComment(){
				
				    return "";
				
				}
				public String ASOTHPPattern(){
				
					return "";
				
				}
				public String ASOTHPOriginalDbColumnName(){
				
					return "ASOTHP";
				
				}

				
			    public String ASRTCD;

				public String getASRTCD () {
					return this.ASRTCD;
				}

				public Boolean ASRTCDIsNullable(){
				    return true;
				}
				public Boolean ASRTCDIsKey(){
				    return false;
				}
				public Integer ASRTCDLength(){
				    return null;
				}
				public Integer ASRTCDPrecision(){
				    return null;
				}
				public String ASRTCDDefault(){
				
					return "";
				
				}
				public String ASRTCDComment(){
				
				    return "";
				
				}
				public String ASRTCDPattern(){
				
					return "";
				
				}
				public String ASRTCDOriginalDbColumnName(){
				
					return "ASRTCD";
				
				}

				
			    public BigDecimal ASVOLP;

				public BigDecimal getASVOLP () {
					return this.ASVOLP;
				}

				public Boolean ASVOLPIsNullable(){
				    return true;
				}
				public Boolean ASVOLPIsKey(){
				    return false;
				}
				public Integer ASVOLPLength(){
				    return null;
				}
				public Integer ASVOLPPrecision(){
				    return null;
				}
				public String ASVOLPDefault(){
				
					return "";
				
				}
				public String ASVOLPComment(){
				
				    return "";
				
				}
				public String ASVOLPPattern(){
				
					return "";
				
				}
				public String ASVOLPOriginalDbColumnName(){
				
					return "ASVOLP";
				
				}

				
			    public BigDecimal ASVOLN;

				public BigDecimal getASVOLN () {
					return this.ASVOLN;
				}

				public Boolean ASVOLNIsNullable(){
				    return true;
				}
				public Boolean ASVOLNIsKey(){
				    return false;
				}
				public Integer ASVOLNLength(){
				    return null;
				}
				public Integer ASVOLNPrecision(){
				    return null;
				}
				public String ASVOLNDefault(){
				
					return "";
				
				}
				public String ASVOLNComment(){
				
				    return "";
				
				}
				public String ASVOLNPattern(){
				
					return "";
				
				}
				public String ASVOLNOriginalDbColumnName(){
				
					return "ASVOLN";
				
				}

				
			    public BigDecimal ASREBP;

				public BigDecimal getASREBP () {
					return this.ASREBP;
				}

				public Boolean ASREBPIsNullable(){
				    return true;
				}
				public Boolean ASREBPIsKey(){
				    return false;
				}
				public Integer ASREBPLength(){
				    return null;
				}
				public Integer ASREBPPrecision(){
				    return null;
				}
				public String ASREBPDefault(){
				
					return "";
				
				}
				public String ASREBPComment(){
				
				    return "";
				
				}
				public String ASREBPPattern(){
				
					return "";
				
				}
				public String ASREBPOriginalDbColumnName(){
				
					return "ASREBP";
				
				}

				
			    public BigDecimal ASREBN;

				public BigDecimal getASREBN () {
					return this.ASREBN;
				}

				public Boolean ASREBNIsNullable(){
				    return true;
				}
				public Boolean ASREBNIsKey(){
				    return false;
				}
				public Integer ASREBNLength(){
				    return null;
				}
				public Integer ASREBNPrecision(){
				    return null;
				}
				public String ASREBNDefault(){
				
					return "";
				
				}
				public String ASREBNComment(){
				
				    return "";
				
				}
				public String ASREBNPattern(){
				
					return "";
				
				}
				public String ASREBNOriginalDbColumnName(){
				
					return "ASREBN";
				
				}

				
			    public BigDecimal ASALLP;

				public BigDecimal getASALLP () {
					return this.ASALLP;
				}

				public Boolean ASALLPIsNullable(){
				    return true;
				}
				public Boolean ASALLPIsKey(){
				    return false;
				}
				public Integer ASALLPLength(){
				    return null;
				}
				public Integer ASALLPPrecision(){
				    return null;
				}
				public String ASALLPDefault(){
				
					return "";
				
				}
				public String ASALLPComment(){
				
				    return "";
				
				}
				public String ASALLPPattern(){
				
					return "";
				
				}
				public String ASALLPOriginalDbColumnName(){
				
					return "ASALLP";
				
				}

				
			    public BigDecimal ASALLN;

				public BigDecimal getASALLN () {
					return this.ASALLN;
				}

				public Boolean ASALLNIsNullable(){
				    return true;
				}
				public Boolean ASALLNIsKey(){
				    return false;
				}
				public Integer ASALLNLength(){
				    return null;
				}
				public Integer ASALLNPrecision(){
				    return null;
				}
				public String ASALLNDefault(){
				
					return "";
				
				}
				public String ASALLNComment(){
				
				    return "";
				
				}
				public String ASALLNPattern(){
				
					return "";
				
				}
				public String ASALLNOriginalDbColumnName(){
				
					return "ASALLN";
				
				}

				
			    public BigDecimal APPR01;

				public BigDecimal getAPPR01 () {
					return this.APPR01;
				}

				public Boolean APPR01IsNullable(){
				    return true;
				}
				public Boolean APPR01IsKey(){
				    return false;
				}
				public Integer APPR01Length(){
				    return null;
				}
				public Integer APPR01Precision(){
				    return null;
				}
				public String APPR01Default(){
				
					return "";
				
				}
				public String APPR01Comment(){
				
				    return "";
				
				}
				public String APPR01Pattern(){
				
					return "";
				
				}
				public String APPR01OriginalDbColumnName(){
				
					return "APPR01";
				
				}

				
			    public BigDecimal APPR02;

				public BigDecimal getAPPR02 () {
					return this.APPR02;
				}

				public Boolean APPR02IsNullable(){
				    return true;
				}
				public Boolean APPR02IsKey(){
				    return false;
				}
				public Integer APPR02Length(){
				    return null;
				}
				public Integer APPR02Precision(){
				    return null;
				}
				public String APPR02Default(){
				
					return "";
				
				}
				public String APPR02Comment(){
				
				    return "";
				
				}
				public String APPR02Pattern(){
				
					return "";
				
				}
				public String APPR02OriginalDbColumnName(){
				
					return "APPR02";
				
				}

				
			    public BigDecimal APPR03;

				public BigDecimal getAPPR03 () {
					return this.APPR03;
				}

				public Boolean APPR03IsNullable(){
				    return true;
				}
				public Boolean APPR03IsKey(){
				    return false;
				}
				public Integer APPR03Length(){
				    return null;
				}
				public Integer APPR03Precision(){
				    return null;
				}
				public String APPR03Default(){
				
					return "";
				
				}
				public String APPR03Comment(){
				
				    return "";
				
				}
				public String APPR03Pattern(){
				
					return "";
				
				}
				public String APPR03OriginalDbColumnName(){
				
					return "APPR03";
				
				}

				
			    public BigDecimal APPR04;

				public BigDecimal getAPPR04 () {
					return this.APPR04;
				}

				public Boolean APPR04IsNullable(){
				    return true;
				}
				public Boolean APPR04IsKey(){
				    return false;
				}
				public Integer APPR04Length(){
				    return null;
				}
				public Integer APPR04Precision(){
				    return null;
				}
				public String APPR04Default(){
				
					return "";
				
				}
				public String APPR04Comment(){
				
				    return "";
				
				}
				public String APPR04Pattern(){
				
					return "";
				
				}
				public String APPR04OriginalDbColumnName(){
				
					return "APPR04";
				
				}

				
			    public BigDecimal APPR05;

				public BigDecimal getAPPR05 () {
					return this.APPR05;
				}

				public Boolean APPR05IsNullable(){
				    return true;
				}
				public Boolean APPR05IsKey(){
				    return false;
				}
				public Integer APPR05Length(){
				    return null;
				}
				public Integer APPR05Precision(){
				    return null;
				}
				public String APPR05Default(){
				
					return "";
				
				}
				public String APPR05Comment(){
				
				    return "";
				
				}
				public String APPR05Pattern(){
				
					return "";
				
				}
				public String APPR05OriginalDbColumnName(){
				
					return "APPR05";
				
				}

				
			    public BigDecimal APPR06;

				public BigDecimal getAPPR06 () {
					return this.APPR06;
				}

				public Boolean APPR06IsNullable(){
				    return true;
				}
				public Boolean APPR06IsKey(){
				    return false;
				}
				public Integer APPR06Length(){
				    return null;
				}
				public Integer APPR06Precision(){
				    return null;
				}
				public String APPR06Default(){
				
					return "";
				
				}
				public String APPR06Comment(){
				
				    return "";
				
				}
				public String APPR06Pattern(){
				
					return "";
				
				}
				public String APPR06OriginalDbColumnName(){
				
					return "APPR06";
				
				}

				
			    public BigDecimal APPR07;

				public BigDecimal getAPPR07 () {
					return this.APPR07;
				}

				public Boolean APPR07IsNullable(){
				    return true;
				}
				public Boolean APPR07IsKey(){
				    return false;
				}
				public Integer APPR07Length(){
				    return null;
				}
				public Integer APPR07Precision(){
				    return null;
				}
				public String APPR07Default(){
				
					return "";
				
				}
				public String APPR07Comment(){
				
				    return "";
				
				}
				public String APPR07Pattern(){
				
					return "";
				
				}
				public String APPR07OriginalDbColumnName(){
				
					return "APPR07";
				
				}

				
			    public BigDecimal APPR08;

				public BigDecimal getAPPR08 () {
					return this.APPR08;
				}

				public Boolean APPR08IsNullable(){
				    return true;
				}
				public Boolean APPR08IsKey(){
				    return false;
				}
				public Integer APPR08Length(){
				    return null;
				}
				public Integer APPR08Precision(){
				    return null;
				}
				public String APPR08Default(){
				
					return "";
				
				}
				public String APPR08Comment(){
				
				    return "";
				
				}
				public String APPR08Pattern(){
				
					return "";
				
				}
				public String APPR08OriginalDbColumnName(){
				
					return "APPR08";
				
				}

				
			    public BigDecimal APPR09;

				public BigDecimal getAPPR09 () {
					return this.APPR09;
				}

				public Boolean APPR09IsNullable(){
				    return true;
				}
				public Boolean APPR09IsKey(){
				    return false;
				}
				public Integer APPR09Length(){
				    return null;
				}
				public Integer APPR09Precision(){
				    return null;
				}
				public String APPR09Default(){
				
					return "";
				
				}
				public String APPR09Comment(){
				
				    return "";
				
				}
				public String APPR09Pattern(){
				
					return "";
				
				}
				public String APPR09OriginalDbColumnName(){
				
					return "APPR09";
				
				}

				
			    public BigDecimal APPR10;

				public BigDecimal getAPPR10 () {
					return this.APPR10;
				}

				public Boolean APPR10IsNullable(){
				    return true;
				}
				public Boolean APPR10IsKey(){
				    return false;
				}
				public Integer APPR10Length(){
				    return null;
				}
				public Integer APPR10Precision(){
				    return null;
				}
				public String APPR10Default(){
				
					return "";
				
				}
				public String APPR10Comment(){
				
				    return "";
				
				}
				public String APPR10Pattern(){
				
					return "";
				
				}
				public String APPR10OriginalDbColumnName(){
				
					return "APPR10";
				
				}

				
			    public BigDecimal APPR11;

				public BigDecimal getAPPR11 () {
					return this.APPR11;
				}

				public Boolean APPR11IsNullable(){
				    return true;
				}
				public Boolean APPR11IsKey(){
				    return false;
				}
				public Integer APPR11Length(){
				    return null;
				}
				public Integer APPR11Precision(){
				    return null;
				}
				public String APPR11Default(){
				
					return "";
				
				}
				public String APPR11Comment(){
				
				    return "";
				
				}
				public String APPR11Pattern(){
				
					return "";
				
				}
				public String APPR11OriginalDbColumnName(){
				
					return "APPR11";
				
				}

				
			    public BigDecimal APPR12;

				public BigDecimal getAPPR12 () {
					return this.APPR12;
				}

				public Boolean APPR12IsNullable(){
				    return true;
				}
				public Boolean APPR12IsKey(){
				    return false;
				}
				public Integer APPR12Length(){
				    return null;
				}
				public Integer APPR12Precision(){
				    return null;
				}
				public String APPR12Default(){
				
					return "";
				
				}
				public String APPR12Comment(){
				
				    return "";
				
				}
				public String APPR12Pattern(){
				
					return "";
				
				}
				public String APPR12OriginalDbColumnName(){
				
					return "APPR12";
				
				}

				
			    public BigDecimal APPR13;

				public BigDecimal getAPPR13 () {
					return this.APPR13;
				}

				public Boolean APPR13IsNullable(){
				    return true;
				}
				public Boolean APPR13IsKey(){
				    return false;
				}
				public Integer APPR13Length(){
				    return null;
				}
				public Integer APPR13Precision(){
				    return null;
				}
				public String APPR13Default(){
				
					return "";
				
				}
				public String APPR13Comment(){
				
				    return "";
				
				}
				public String APPR13Pattern(){
				
					return "";
				
				}
				public String APPR13OriginalDbColumnName(){
				
					return "APPR13";
				
				}

				
			    public BigDecimal APMRGP;

				public BigDecimal getAPMRGP () {
					return this.APMRGP;
				}

				public Boolean APMRGPIsNullable(){
				    return true;
				}
				public Boolean APMRGPIsKey(){
				    return false;
				}
				public Integer APMRGPLength(){
				    return null;
				}
				public Integer APMRGPPrecision(){
				    return null;
				}
				public String APMRGPDefault(){
				
					return "";
				
				}
				public String APMRGPComment(){
				
				    return "";
				
				}
				public String APMRGPPattern(){
				
					return "";
				
				}
				public String APMRGPOriginalDbColumnName(){
				
					return "APMRGP";
				
				}

				
			    public BigDecimal AGMROI;

				public BigDecimal getAGMROI () {
					return this.AGMROI;
				}

				public Boolean AGMROIIsNullable(){
				    return true;
				}
				public Boolean AGMROIIsKey(){
				    return false;
				}
				public Integer AGMROILength(){
				    return null;
				}
				public Integer AGMROIPrecision(){
				    return null;
				}
				public String AGMROIDefault(){
				
					return "";
				
				}
				public String AGMROIComment(){
				
				    return "";
				
				}
				public String AGMROIPattern(){
				
					return "";
				
				}
				public String AGMROIOriginalDbColumnName(){
				
					return "AGMROI";
				
				}

				
			    public BigDecimal APTRNS;

				public BigDecimal getAPTRNS () {
					return this.APTRNS;
				}

				public Boolean APTRNSIsNullable(){
				    return true;
				}
				public Boolean APTRNSIsKey(){
				    return false;
				}
				public Integer APTRNSLength(){
				    return null;
				}
				public Integer APTRNSPrecision(){
				    return null;
				}
				public String APTRNSDefault(){
				
					return "";
				
				}
				public String APTRNSComment(){
				
				    return "";
				
				}
				public String APTRNSPattern(){
				
					return "";
				
				}
				public String APTRNSOriginalDbColumnName(){
				
					return "APTRNS";
				
				}

				
			    public BigDecimal APAVOH;

				public BigDecimal getAPAVOH () {
					return this.APAVOH;
				}

				public Boolean APAVOHIsNullable(){
				    return true;
				}
				public Boolean APAVOHIsKey(){
				    return false;
				}
				public Integer APAVOHLength(){
				    return null;
				}
				public Integer APAVOHPrecision(){
				    return null;
				}
				public String APAVOHDefault(){
				
					return "";
				
				}
				public String APAVOHComment(){
				
				    return "";
				
				}
				public String APAVOHPattern(){
				
					return "";
				
				}
				public String APAVOHOriginalDbColumnName(){
				
					return "APAVOH";
				
				}

				
			    public BigDecimal APPOBO;

				public BigDecimal getAPPOBO () {
					return this.APPOBO;
				}

				public Boolean APPOBOIsNullable(){
				    return true;
				}
				public Boolean APPOBOIsKey(){
				    return false;
				}
				public Integer APPOBOLength(){
				    return null;
				}
				public Integer APPOBOPrecision(){
				    return null;
				}
				public String APPOBODefault(){
				
					return "";
				
				}
				public String APPOBOComment(){
				
				    return "";
				
				}
				public String APPOBOPattern(){
				
					return "";
				
				}
				public String APPOBOOriginalDbColumnName(){
				
					return "APPOBO";
				
				}

				
			    public BigDecimal APPOSS;

				public BigDecimal getAPPOSS () {
					return this.APPOSS;
				}

				public Boolean APPOSSIsNullable(){
				    return true;
				}
				public Boolean APPOSSIsKey(){
				    return false;
				}
				public Integer APPOSSLength(){
				    return null;
				}
				public Integer APPOSSPrecision(){
				    return null;
				}
				public String APPOSSDefault(){
				
					return "";
				
				}
				public String APPOSSComment(){
				
				    return "";
				
				}
				public String APPOSSPattern(){
				
					return "";
				
				}
				public String APPOSSOriginalDbColumnName(){
				
					return "APPOSS";
				
				}

				
			    public BigDecimal APPOLT;

				public BigDecimal getAPPOLT () {
					return this.APPOLT;
				}

				public Boolean APPOLTIsNullable(){
				    return true;
				}
				public Boolean APPOLTIsKey(){
				    return false;
				}
				public Integer APPOLTLength(){
				    return null;
				}
				public Integer APPOLTPrecision(){
				    return null;
				}
				public String APPOLTDefault(){
				
					return "";
				
				}
				public String APPOLTComment(){
				
				    return "";
				
				}
				public String APPOLTPattern(){
				
					return "";
				
				}
				public String APPOLTOriginalDbColumnName(){
				
					return "APPOLT";
				
				}

				
			    public BigDecimal APLY01;

				public BigDecimal getAPLY01 () {
					return this.APLY01;
				}

				public Boolean APLY01IsNullable(){
				    return true;
				}
				public Boolean APLY01IsKey(){
				    return false;
				}
				public Integer APLY01Length(){
				    return null;
				}
				public Integer APLY01Precision(){
				    return null;
				}
				public String APLY01Default(){
				
					return "";
				
				}
				public String APLY01Comment(){
				
				    return "";
				
				}
				public String APLY01Pattern(){
				
					return "";
				
				}
				public String APLY01OriginalDbColumnName(){
				
					return "APLY01";
				
				}

				
			    public BigDecimal APLY02;

				public BigDecimal getAPLY02 () {
					return this.APLY02;
				}

				public Boolean APLY02IsNullable(){
				    return true;
				}
				public Boolean APLY02IsKey(){
				    return false;
				}
				public Integer APLY02Length(){
				    return null;
				}
				public Integer APLY02Precision(){
				    return null;
				}
				public String APLY02Default(){
				
					return "";
				
				}
				public String APLY02Comment(){
				
				    return "";
				
				}
				public String APLY02Pattern(){
				
					return "";
				
				}
				public String APLY02OriginalDbColumnName(){
				
					return "APLY02";
				
				}

				
			    public BigDecimal APLY03;

				public BigDecimal getAPLY03 () {
					return this.APLY03;
				}

				public Boolean APLY03IsNullable(){
				    return true;
				}
				public Boolean APLY03IsKey(){
				    return false;
				}
				public Integer APLY03Length(){
				    return null;
				}
				public Integer APLY03Precision(){
				    return null;
				}
				public String APLY03Default(){
				
					return "";
				
				}
				public String APLY03Comment(){
				
				    return "";
				
				}
				public String APLY03Pattern(){
				
					return "";
				
				}
				public String APLY03OriginalDbColumnName(){
				
					return "APLY03";
				
				}

				
			    public BigDecimal APLY04;

				public BigDecimal getAPLY04 () {
					return this.APLY04;
				}

				public Boolean APLY04IsNullable(){
				    return true;
				}
				public Boolean APLY04IsKey(){
				    return false;
				}
				public Integer APLY04Length(){
				    return null;
				}
				public Integer APLY04Precision(){
				    return null;
				}
				public String APLY04Default(){
				
					return "";
				
				}
				public String APLY04Comment(){
				
				    return "";
				
				}
				public String APLY04Pattern(){
				
					return "";
				
				}
				public String APLY04OriginalDbColumnName(){
				
					return "APLY04";
				
				}

				
			    public BigDecimal APTY01;

				public BigDecimal getAPTY01 () {
					return this.APTY01;
				}

				public Boolean APTY01IsNullable(){
				    return true;
				}
				public Boolean APTY01IsKey(){
				    return false;
				}
				public Integer APTY01Length(){
				    return null;
				}
				public Integer APTY01Precision(){
				    return null;
				}
				public String APTY01Default(){
				
					return "";
				
				}
				public String APTY01Comment(){
				
				    return "";
				
				}
				public String APTY01Pattern(){
				
					return "";
				
				}
				public String APTY01OriginalDbColumnName(){
				
					return "APTY01";
				
				}

				
			    public BigDecimal APTY02;

				public BigDecimal getAPTY02 () {
					return this.APTY02;
				}

				public Boolean APTY02IsNullable(){
				    return true;
				}
				public Boolean APTY02IsKey(){
				    return false;
				}
				public Integer APTY02Length(){
				    return null;
				}
				public Integer APTY02Precision(){
				    return null;
				}
				public String APTY02Default(){
				
					return "";
				
				}
				public String APTY02Comment(){
				
				    return "";
				
				}
				public String APTY02Pattern(){
				
					return "";
				
				}
				public String APTY02OriginalDbColumnName(){
				
					return "APTY02";
				
				}

				
			    public BigDecimal APTY03;

				public BigDecimal getAPTY03 () {
					return this.APTY03;
				}

				public Boolean APTY03IsNullable(){
				    return true;
				}
				public Boolean APTY03IsKey(){
				    return false;
				}
				public Integer APTY03Length(){
				    return null;
				}
				public Integer APTY03Precision(){
				    return null;
				}
				public String APTY03Default(){
				
					return "";
				
				}
				public String APTY03Comment(){
				
				    return "";
				
				}
				public String APTY03Pattern(){
				
					return "";
				
				}
				public String APTY03OriginalDbColumnName(){
				
					return "APTY03";
				
				}

				
			    public BigDecimal APTY04;

				public BigDecimal getAPTY04 () {
					return this.APTY04;
				}

				public Boolean APTY04IsNullable(){
				    return true;
				}
				public Boolean APTY04IsKey(){
				    return false;
				}
				public Integer APTY04Length(){
				    return null;
				}
				public Integer APTY04Precision(){
				    return null;
				}
				public String APTY04Default(){
				
					return "";
				
				}
				public String APTY04Comment(){
				
				    return "";
				
				}
				public String APTY04Pattern(){
				
					return "";
				
				}
				public String APTY04OriginalDbColumnName(){
				
					return "APTY04";
				
				}

				
			    public BigDecimal ASLST1;

				public BigDecimal getASLST1 () {
					return this.ASLST1;
				}

				public Boolean ASLST1IsNullable(){
				    return true;
				}
				public Boolean ASLST1IsKey(){
				    return false;
				}
				public Integer ASLST1Length(){
				    return null;
				}
				public Integer ASLST1Precision(){
				    return null;
				}
				public String ASLST1Default(){
				
					return "";
				
				}
				public String ASLST1Comment(){
				
				    return "";
				
				}
				public String ASLST1Pattern(){
				
					return "";
				
				}
				public String ASLST1OriginalDbColumnName(){
				
					return "ASLST1";
				
				}

				
			    public BigDecimal ASLST2;

				public BigDecimal getASLST2 () {
					return this.ASLST2;
				}

				public Boolean ASLST2IsNullable(){
				    return true;
				}
				public Boolean ASLST2IsKey(){
				    return false;
				}
				public Integer ASLST2Length(){
				    return null;
				}
				public Integer ASLST2Precision(){
				    return null;
				}
				public String ASLST2Default(){
				
					return "";
				
				}
				public String ASLST2Comment(){
				
				    return "";
				
				}
				public String ASLST2Pattern(){
				
					return "";
				
				}
				public String ASLST2OriginalDbColumnName(){
				
					return "ASLST2";
				
				}

				
			    public String AS1099;

				public String getAS1099 () {
					return this.AS1099;
				}

				public Boolean AS1099IsNullable(){
				    return true;
				}
				public Boolean AS1099IsKey(){
				    return false;
				}
				public Integer AS1099Length(){
				    return null;
				}
				public Integer AS1099Precision(){
				    return null;
				}
				public String AS1099Default(){
				
					return "";
				
				}
				public String AS1099Comment(){
				
				    return "";
				
				}
				public String AS1099Pattern(){
				
					return "";
				
				}
				public String AS1099OriginalDbColumnName(){
				
					return "AS1099";
				
				}

				
			    public String ASPCCD;

				public String getASPCCD () {
					return this.ASPCCD;
				}

				public Boolean ASPCCDIsNullable(){
				    return true;
				}
				public Boolean ASPCCDIsKey(){
				    return false;
				}
				public Integer ASPCCDLength(){
				    return null;
				}
				public Integer ASPCCDPrecision(){
				    return null;
				}
				public String ASPCCDDefault(){
				
					return "";
				
				}
				public String ASPCCDComment(){
				
				    return "";
				
				}
				public String ASPCCDPattern(){
				
					return "";
				
				}
				public String ASPCCDOriginalDbColumnName(){
				
					return "ASPCCD";
				
				}

				
			    public String ASOTHN;

				public String getASOTHN () {
					return this.ASOTHN;
				}

				public Boolean ASOTHNIsNullable(){
				    return true;
				}
				public Boolean ASOTHNIsKey(){
				    return false;
				}
				public Integer ASOTHNLength(){
				    return null;
				}
				public Integer ASOTHNPrecision(){
				    return null;
				}
				public String ASOTHNDefault(){
				
					return "";
				
				}
				public String ASOTHNComment(){
				
				    return "";
				
				}
				public String ASOTHNPattern(){
				
					return "";
				
				}
				public String ASOTHNOriginalDbColumnName(){
				
					return "ASOTHN";
				
				}

				
			    public String ASRAYN;

				public String getASRAYN () {
					return this.ASRAYN;
				}

				public Boolean ASRAYNIsNullable(){
				    return true;
				}
				public Boolean ASRAYNIsKey(){
				    return false;
				}
				public Integer ASRAYNLength(){
				    return null;
				}
				public Integer ASRAYNPrecision(){
				    return null;
				}
				public String ASRAYNDefault(){
				
					return "";
				
				}
				public String ASRAYNComment(){
				
				    return "";
				
				}
				public String ASRAYNPattern(){
				
					return "";
				
				}
				public String ASRAYNOriginalDbColumnName(){
				
					return "ASRAYN";
				
				}

				
			    public String ASCURC;

				public String getASCURC () {
					return this.ASCURC;
				}

				public Boolean ASCURCIsNullable(){
				    return true;
				}
				public Boolean ASCURCIsKey(){
				    return false;
				}
				public Integer ASCURCLength(){
				    return null;
				}
				public Integer ASCURCPrecision(){
				    return null;
				}
				public String ASCURCDefault(){
				
					return "";
				
				}
				public String ASCURCComment(){
				
				    return "";
				
				}
				public String ASCURCPattern(){
				
					return "";
				
				}
				public String ASCURCOriginalDbColumnName(){
				
					return "ASCURC";
				
				}

				
			    public String ASTAXC;

				public String getASTAXC () {
					return this.ASTAXC;
				}

				public Boolean ASTAXCIsNullable(){
				    return true;
				}
				public Boolean ASTAXCIsKey(){
				    return false;
				}
				public Integer ASTAXCLength(){
				    return null;
				}
				public Integer ASTAXCPrecision(){
				    return null;
				}
				public String ASTAXCDefault(){
				
					return "";
				
				}
				public String ASTAXCComment(){
				
				    return "";
				
				}
				public String ASTAXCPattern(){
				
					return "";
				
				}
				public String ASTAXCOriginalDbColumnName(){
				
					return "ASTAXC";
				
				}

				
			    public String ASSTYN;

				public String getASSTYN () {
					return this.ASSTYN;
				}

				public Boolean ASSTYNIsNullable(){
				    return true;
				}
				public Boolean ASSTYNIsKey(){
				    return false;
				}
				public Integer ASSTYNLength(){
				    return null;
				}
				public Integer ASSTYNPrecision(){
				    return null;
				}
				public String ASSTYNDefault(){
				
					return "";
				
				}
				public String ASSTYNComment(){
				
				    return "";
				
				}
				public String ASSTYNPattern(){
				
					return "";
				
				}
				public String ASSTYNOriginalDbColumnName(){
				
					return "ASSTYN";
				
				}

				
			    public BigDecimal ASTTPC;

				public BigDecimal getASTTPC () {
					return this.ASTTPC;
				}

				public Boolean ASTTPCIsNullable(){
				    return true;
				}
				public Boolean ASTTPCIsKey(){
				    return false;
				}
				public Integer ASTTPCLength(){
				    return null;
				}
				public Integer ASTTPCPrecision(){
				    return null;
				}
				public String ASTTPCDefault(){
				
					return "";
				
				}
				public String ASTTPCComment(){
				
				    return "";
				
				}
				public String ASTTPCPattern(){
				
					return "";
				
				}
				public String ASTTPCOriginalDbColumnName(){
				
					return "ASTTPC";
				
				}

				
			    public String ASTTDC;

				public String getASTTDC () {
					return this.ASTTDC;
				}

				public Boolean ASTTDCIsNullable(){
				    return true;
				}
				public Boolean ASTTDCIsKey(){
				    return false;
				}
				public Integer ASTTDCLength(){
				    return null;
				}
				public Integer ASTTDCPrecision(){
				    return null;
				}
				public String ASTTDCDefault(){
				
					return "";
				
				}
				public String ASTTDCComment(){
				
				    return "";
				
				}
				public String ASTTDCPattern(){
				
					return "";
				
				}
				public String ASTTDCOriginalDbColumnName(){
				
					return "ASTTDC";
				
				}

				
			    public BigDecimal ASTTPU;

				public BigDecimal getASTTPU () {
					return this.ASTTPU;
				}

				public Boolean ASTTPUIsNullable(){
				    return true;
				}
				public Boolean ASTTPUIsKey(){
				    return false;
				}
				public Integer ASTTPULength(){
				    return null;
				}
				public Integer ASTTPUPrecision(){
				    return null;
				}
				public String ASTTPUDefault(){
				
					return "";
				
				}
				public String ASTTPUComment(){
				
				    return "";
				
				}
				public String ASTTPUPattern(){
				
					return "";
				
				}
				public String ASTTPUOriginalDbColumnName(){
				
					return "ASTTPU";
				
				}

				
			    public String ASTTDU;

				public String getASTTDU () {
					return this.ASTTDU;
				}

				public Boolean ASTTDUIsNullable(){
				    return true;
				}
				public Boolean ASTTDUIsKey(){
				    return false;
				}
				public Integer ASTTDULength(){
				    return null;
				}
				public Integer ASTTDUPrecision(){
				    return null;
				}
				public String ASTTDUDefault(){
				
					return "";
				
				}
				public String ASTTDUComment(){
				
				    return "";
				
				}
				public String ASTTDUPattern(){
				
					return "";
				
				}
				public String ASTTDUOriginalDbColumnName(){
				
					return "ASTTDU";
				
				}

				
			    public BigDecimal ASTLPC;

				public BigDecimal getASTLPC () {
					return this.ASTLPC;
				}

				public Boolean ASTLPCIsNullable(){
				    return true;
				}
				public Boolean ASTLPCIsKey(){
				    return false;
				}
				public Integer ASTLPCLength(){
				    return null;
				}
				public Integer ASTLPCPrecision(){
				    return null;
				}
				public String ASTLPCDefault(){
				
					return "";
				
				}
				public String ASTLPCComment(){
				
				    return "";
				
				}
				public String ASTLPCPattern(){
				
					return "";
				
				}
				public String ASTLPCOriginalDbColumnName(){
				
					return "ASTLPC";
				
				}

				
			    public String ASTLDC;

				public String getASTLDC () {
					return this.ASTLDC;
				}

				public Boolean ASTLDCIsNullable(){
				    return true;
				}
				public Boolean ASTLDCIsKey(){
				    return false;
				}
				public Integer ASTLDCLength(){
				    return null;
				}
				public Integer ASTLDCPrecision(){
				    return null;
				}
				public String ASTLDCDefault(){
				
					return "";
				
				}
				public String ASTLDCComment(){
				
				    return "";
				
				}
				public String ASTLDCPattern(){
				
					return "";
				
				}
				public String ASTLDCOriginalDbColumnName(){
				
					return "ASTLDC";
				
				}

				
			    public BigDecimal ASTLPU;

				public BigDecimal getASTLPU () {
					return this.ASTLPU;
				}

				public Boolean ASTLPUIsNullable(){
				    return true;
				}
				public Boolean ASTLPUIsKey(){
				    return false;
				}
				public Integer ASTLPULength(){
				    return null;
				}
				public Integer ASTLPUPrecision(){
				    return null;
				}
				public String ASTLPUDefault(){
				
					return "";
				
				}
				public String ASTLPUComment(){
				
				    return "";
				
				}
				public String ASTLPUPattern(){
				
					return "";
				
				}
				public String ASTLPUOriginalDbColumnName(){
				
					return "ASTLPU";
				
				}

				
			    public String ASTLDU;

				public String getASTLDU () {
					return this.ASTLDU;
				}

				public Boolean ASTLDUIsNullable(){
				    return true;
				}
				public Boolean ASTLDUIsKey(){
				    return false;
				}
				public Integer ASTLDULength(){
				    return null;
				}
				public Integer ASTLDUPrecision(){
				    return null;
				}
				public String ASTLDUDefault(){
				
					return "";
				
				}
				public String ASTLDUComment(){
				
				    return "";
				
				}
				public String ASTLDUPattern(){
				
					return "";
				
				}
				public String ASTLDUOriginalDbColumnName(){
				
					return "ASTLDU";
				
				}

				
			    public String ASLINM;

				public String getASLINM () {
					return this.ASLINM;
				}

				public Boolean ASLINMIsNullable(){
				    return true;
				}
				public Boolean ASLINMIsKey(){
				    return false;
				}
				public Integer ASLINMLength(){
				    return null;
				}
				public Integer ASLINMPrecision(){
				    return null;
				}
				public String ASLINMDefault(){
				
					return "";
				
				}
				public String ASLINMComment(){
				
				    return "";
				
				}
				public String ASLINMPattern(){
				
					return "";
				
				}
				public String ASLINMOriginalDbColumnName(){
				
					return "ASLINM";
				
				}

				
			    public BigDecimal ASTTNC;

				public BigDecimal getASTTNC () {
					return this.ASTTNC;
				}

				public Boolean ASTTNCIsNullable(){
				    return true;
				}
				public Boolean ASTTNCIsKey(){
				    return false;
				}
				public Integer ASTTNCLength(){
				    return null;
				}
				public Integer ASTTNCPrecision(){
				    return null;
				}
				public String ASTTNCDefault(){
				
					return "";
				
				}
				public String ASTTNCComment(){
				
				    return "";
				
				}
				public String ASTTNCPattern(){
				
					return "";
				
				}
				public String ASTTNCOriginalDbColumnName(){
				
					return "ASTTNC";
				
				}

				
			    public String ASTTND;

				public String getASTTND () {
					return this.ASTTND;
				}

				public Boolean ASTTNDIsNullable(){
				    return true;
				}
				public Boolean ASTTNDIsKey(){
				    return false;
				}
				public Integer ASTTNDLength(){
				    return null;
				}
				public Integer ASTTNDPrecision(){
				    return null;
				}
				public String ASTTNDDefault(){
				
					return "";
				
				}
				public String ASTTNDComment(){
				
				    return "";
				
				}
				public String ASTTNDPattern(){
				
					return "";
				
				}
				public String ASTTNDOriginalDbColumnName(){
				
					return "ASTTND";
				
				}

				
			    public String ASGSTR;

				public String getASGSTR () {
					return this.ASGSTR;
				}

				public Boolean ASGSTRIsNullable(){
				    return true;
				}
				public Boolean ASGSTRIsKey(){
				    return false;
				}
				public Integer ASGSTRLength(){
				    return null;
				}
				public Integer ASGSTRPrecision(){
				    return null;
				}
				public String ASGSTRDefault(){
				
					return "";
				
				}
				public String ASGSTRComment(){
				
				    return "";
				
				}
				public String ASGSTRPattern(){
				
					return "";
				
				}
				public String ASGSTROriginalDbColumnName(){
				
					return "ASGSTR";
				
				}

				
			    public String ASGSTN;

				public String getASGSTN () {
					return this.ASGSTN;
				}

				public Boolean ASGSTNIsNullable(){
				    return true;
				}
				public Boolean ASGSTNIsKey(){
				    return false;
				}
				public Integer ASGSTNLength(){
				    return null;
				}
				public Integer ASGSTNPrecision(){
				    return null;
				}
				public String ASGSTNDefault(){
				
					return "";
				
				}
				public String ASGSTNComment(){
				
				    return "";
				
				}
				public String ASGSTNPattern(){
				
					return "";
				
				}
				public String ASGSTNOriginalDbColumnName(){
				
					return "ASGSTN";
				
				}

				
			    public BigDecimal ASGST1;

				public BigDecimal getASGST1 () {
					return this.ASGST1;
				}

				public Boolean ASGST1IsNullable(){
				    return true;
				}
				public Boolean ASGST1IsKey(){
				    return false;
				}
				public Integer ASGST1Length(){
				    return null;
				}
				public Integer ASGST1Precision(){
				    return null;
				}
				public String ASGST1Default(){
				
					return "";
				
				}
				public String ASGST1Comment(){
				
				    return "";
				
				}
				public String ASGST1Pattern(){
				
					return "";
				
				}
				public String ASGST1OriginalDbColumnName(){
				
					return "ASGST1";
				
				}

				
			    public BigDecimal ASGST2;

				public BigDecimal getASGST2 () {
					return this.ASGST2;
				}

				public Boolean ASGST2IsNullable(){
				    return true;
				}
				public Boolean ASGST2IsKey(){
				    return false;
				}
				public Integer ASGST2Length(){
				    return null;
				}
				public Integer ASGST2Precision(){
				    return null;
				}
				public String ASGST2Default(){
				
					return "";
				
				}
				public String ASGST2Comment(){
				
				    return "";
				
				}
				public String ASGST2Pattern(){
				
					return "";
				
				}
				public String ASGST2OriginalDbColumnName(){
				
					return "ASGST2";
				
				}

				
			    public String ASFRTF;

				public String getASFRTF () {
					return this.ASFRTF;
				}

				public Boolean ASFRTFIsNullable(){
				    return true;
				}
				public Boolean ASFRTFIsKey(){
				    return false;
				}
				public Integer ASFRTFLength(){
				    return null;
				}
				public Integer ASFRTFPrecision(){
				    return null;
				}
				public String ASFRTFDefault(){
				
					return "";
				
				}
				public String ASFRTFComment(){
				
				    return "";
				
				}
				public String ASFRTFPattern(){
				
					return "";
				
				}
				public String ASFRTFOriginalDbColumnName(){
				
					return "ASFRTF";
				
				}

				
			    public String ASMSCF;

				public String getASMSCF () {
					return this.ASMSCF;
				}

				public Boolean ASMSCFIsNullable(){
				    return true;
				}
				public Boolean ASMSCFIsKey(){
				    return false;
				}
				public Integer ASMSCFLength(){
				    return null;
				}
				public Integer ASMSCFPrecision(){
				    return null;
				}
				public String ASMSCFDefault(){
				
					return "";
				
				}
				public String ASMSCFComment(){
				
				    return "";
				
				}
				public String ASMSCFPattern(){
				
					return "";
				
				}
				public String ASMSCFOriginalDbColumnName(){
				
					return "ASMSCF";
				
				}

				
			    public String ASALWF;

				public String getASALWF () {
					return this.ASALWF;
				}

				public Boolean ASALWFIsNullable(){
				    return true;
				}
				public Boolean ASALWFIsKey(){
				    return false;
				}
				public Integer ASALWFLength(){
				    return null;
				}
				public Integer ASALWFPrecision(){
				    return null;
				}
				public String ASALWFDefault(){
				
					return "";
				
				}
				public String ASALWFComment(){
				
				    return "";
				
				}
				public String ASALWFPattern(){
				
					return "";
				
				}
				public String ASALWFOriginalDbColumnName(){
				
					return "ASALWF";
				
				}

				
			    public String ASHSHQ;

				public String getASHSHQ () {
					return this.ASHSHQ;
				}

				public Boolean ASHSHQIsNullable(){
				    return true;
				}
				public Boolean ASHSHQIsKey(){
				    return false;
				}
				public Integer ASHSHQLength(){
				    return null;
				}
				public Integer ASHSHQPrecision(){
				    return null;
				}
				public String ASHSHQDefault(){
				
					return "";
				
				}
				public String ASHSHQComment(){
				
				    return "";
				
				}
				public String ASHSHQPattern(){
				
					return "";
				
				}
				public String ASHSHQOriginalDbColumnName(){
				
					return "ASHSHQ";
				
				}

				
			    public String ASLNOG;

				public String getASLNOG () {
					return this.ASLNOG;
				}

				public Boolean ASLNOGIsNullable(){
				    return true;
				}
				public Boolean ASLNOGIsKey(){
				    return false;
				}
				public Integer ASLNOGLength(){
				    return null;
				}
				public Integer ASLNOGPrecision(){
				    return null;
				}
				public String ASLNOGDefault(){
				
					return "";
				
				}
				public String ASLNOGComment(){
				
				    return "";
				
				}
				public String ASLNOGPattern(){
				
					return "";
				
				}
				public String ASLNOGOriginalDbColumnName(){
				
					return "ASLNOG";
				
				}

				
			    public String ASLUOE;

				public String getASLUOE () {
					return this.ASLUOE;
				}

				public Boolean ASLUOEIsNullable(){
				    return true;
				}
				public Boolean ASLUOEIsKey(){
				    return false;
				}
				public Integer ASLUOELength(){
				    return null;
				}
				public Integer ASLUOEPrecision(){
				    return null;
				}
				public String ASLUOEDefault(){
				
					return "";
				
				}
				public String ASLUOEComment(){
				
				    return "";
				
				}
				public String ASLUOEPattern(){
				
					return "";
				
				}
				public String ASLUOEOriginalDbColumnName(){
				
					return "ASLUOE";
				
				}

				
			    public String ASLSOP;

				public String getASLSOP () {
					return this.ASLSOP;
				}

				public Boolean ASLSOPIsNullable(){
				    return true;
				}
				public Boolean ASLSOPIsKey(){
				    return false;
				}
				public Integer ASLSOPLength(){
				    return null;
				}
				public Integer ASLSOPPrecision(){
				    return null;
				}
				public String ASLSOPDefault(){
				
					return "";
				
				}
				public String ASLSOPComment(){
				
				    return "";
				
				}
				public String ASLSOPPattern(){
				
					return "";
				
				}
				public String ASLSOPOriginalDbColumnName(){
				
					return "ASLSOP";
				
				}

				
			    public String ASMTCH;

				public String getASMTCH () {
					return this.ASMTCH;
				}

				public Boolean ASMTCHIsNullable(){
				    return true;
				}
				public Boolean ASMTCHIsKey(){
				    return false;
				}
				public Integer ASMTCHLength(){
				    return null;
				}
				public Integer ASMTCHPrecision(){
				    return null;
				}
				public String ASMTCHDefault(){
				
					return "";
				
				}
				public String ASMTCHComment(){
				
				    return "";
				
				}
				public String ASMTCHPattern(){
				
					return "";
				
				}
				public String ASMTCHOriginalDbColumnName(){
				
					return "ASMTCH";
				
				}

				
			    public String ASCAUT;

				public String getASCAUT () {
					return this.ASCAUT;
				}

				public Boolean ASCAUTIsNullable(){
				    return true;
				}
				public Boolean ASCAUTIsKey(){
				    return false;
				}
				public Integer ASCAUTLength(){
				    return null;
				}
				public Integer ASCAUTPrecision(){
				    return null;
				}
				public String ASCAUTDefault(){
				
					return "";
				
				}
				public String ASCAUTComment(){
				
				    return "";
				
				}
				public String ASCAUTPattern(){
				
					return "";
				
				}
				public String ASCAUTOriginalDbColumnName(){
				
					return "ASCAUT";
				
				}

				
			    public String ASTAXD;

				public String getASTAXD () {
					return this.ASTAXD;
				}

				public Boolean ASTAXDIsNullable(){
				    return true;
				}
				public Boolean ASTAXDIsKey(){
				    return false;
				}
				public Integer ASTAXDLength(){
				    return null;
				}
				public Integer ASTAXDPrecision(){
				    return null;
				}
				public String ASTAXDDefault(){
				
					return "";
				
				}
				public String ASTAXDComment(){
				
				    return "";
				
				}
				public String ASTAXDPattern(){
				
					return "";
				
				}
				public String ASTAXDOriginalDbColumnName(){
				
					return "ASTAXD";
				
				}

				
			    public String ASALLC;

				public String getASALLC () {
					return this.ASALLC;
				}

				public Boolean ASALLCIsNullable(){
				    return true;
				}
				public Boolean ASALLCIsKey(){
				    return false;
				}
				public Integer ASALLCLength(){
				    return null;
				}
				public Integer ASALLCPrecision(){
				    return null;
				}
				public String ASALLCDefault(){
				
					return "";
				
				}
				public String ASALLCComment(){
				
				    return "";
				
				}
				public String ASALLCPattern(){
				
					return "";
				
				}
				public String ASALLCOriginalDbColumnName(){
				
					return "ASALLC";
				
				}

				
			    public String ASMCHT;

				public String getASMCHT () {
					return this.ASMCHT;
				}

				public Boolean ASMCHTIsNullable(){
				    return true;
				}
				public Boolean ASMCHTIsKey(){
				    return false;
				}
				public Integer ASMCHTLength(){
				    return null;
				}
				public Integer ASMCHTPrecision(){
				    return null;
				}
				public String ASMCHTDefault(){
				
					return "";
				
				}
				public String ASMCHTComment(){
				
				    return "";
				
				}
				public String ASMCHTPattern(){
				
					return "";
				
				}
				public String ASMCHTOriginalDbColumnName(){
				
					return "ASMCHT";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length) {
				if(length < 1024 && commonByteArray_AT_TALEND_JOBS_TTAALLCL1.length == 0) {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[1024];
				} else {
   					commonByteArray_AT_TALEND_JOBS_TTAALLCL1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length);
			strReturn = new String(commonByteArray_AT_TALEND_JOBS_TTAALLCL1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASNUM = null;
           				} else {
           			    	this.ASNUM = dis.readDouble();
           				}
					
					this.ASNAME = readString(dis);
					
					this.ASADAD = readString(dis);
					
					this.ASALPH = readString(dis);
					
					this.ASSTAT = readString(dis);
					
					this.ASTYPE = readString(dis);
					
					this.ASBOYN = readString(dis);
					
					this.ASAUTO = readString(dis);
					
						this.ASCNUM = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASCLRK = null;
           				} else {
           			    	this.ASCLRK = dis.readDouble();
           				}
					
						this.ASDFAC = (BigDecimal) dis.readObject();
					
						this.ASSTR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASVOTH = null;
           				} else {
           			    	this.ASVOTH = dis.readDouble();
           				}
					
					this.ASBUYR = readString(dis);
					
					this.ASCUST = readString(dis);
					
						this.ASCNIN = (BigDecimal) dis.readObject();
					
						this.ASDTIN = (BigDecimal) dis.readObject();
					
						this.ASCNLP = (BigDecimal) dis.readObject();
					
						this.ASDTLP = (BigDecimal) dis.readObject();
					
						this.ASAMLP = (BigDecimal) dis.readObject();
					
						this.ASCKLP = (BigDecimal) dis.readObject();
					
						this.ASBAL1 = (BigDecimal) dis.readObject();
					
						this.ASBAL2 = (BigDecimal) dis.readObject();
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
					this.RCNOT1 = readString(dis);
					
					this.RCNOT2 = readString(dis);
					
					this.RCNOT3 = readString(dis);
					
					this.BYNOT1 = readString(dis);
					
					this.BYNOT2 = readString(dis);
					
					this.BYNOT3 = readString(dis);
					
						this.ASRVFR = (BigDecimal) dis.readObject();
					
						this.ASLEAD = (BigDecimal) dis.readObject();
					
						this.ASTPO = (BigDecimal) dis.readObject();
					
						this.ASTLT = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASTRMS = null;
           				} else {
           			    	this.ASTRMS = dis.readDouble();
           				}
					
					this.ASTIND = readString(dis);
					
						this.ASPUSH = (BigDecimal) dis.readObject();
					
					this.ASTDSC = readString(dis);
					
					this.ASFPCD = readString(dis);
					
						this.ASFALP = (BigDecimal) dis.readObject();
					
						this.ASFALN = (BigDecimal) dis.readObject();
					
					this.ASFOBC = readString(dis);
					
					this.ASSHP1 = readString(dis);
					
					this.ASSHP2 = readString(dis);
					
					this.ASSHPP = readString(dis);
					
					this.ASSHPC = readString(dis);
					
					this.ASMINC = readString(dis);
					
						this.ASMINA = (BigDecimal) dis.readObject();
					
						this.ASTRKP = (BigDecimal) dis.readObject();
					
						this.ASTRKA = (BigDecimal) dis.readObject();
					
						this.ASTARP = (BigDecimal) dis.readObject();
					
						this.ASSTOP = (BigDecimal) dis.readObject();
					
						this.ASSKID = (BigDecimal) dis.readObject();
					
						this.ASOTHQ = (BigDecimal) dis.readObject();
					
						this.ASOTHP = (BigDecimal) dis.readObject();
					
					this.ASRTCD = readString(dis);
					
						this.ASVOLP = (BigDecimal) dis.readObject();
					
						this.ASVOLN = (BigDecimal) dis.readObject();
					
						this.ASREBP = (BigDecimal) dis.readObject();
					
						this.ASREBN = (BigDecimal) dis.readObject();
					
						this.ASALLP = (BigDecimal) dis.readObject();
					
						this.ASALLN = (BigDecimal) dis.readObject();
					
						this.APPR01 = (BigDecimal) dis.readObject();
					
						this.APPR02 = (BigDecimal) dis.readObject();
					
						this.APPR03 = (BigDecimal) dis.readObject();
					
						this.APPR04 = (BigDecimal) dis.readObject();
					
						this.APPR05 = (BigDecimal) dis.readObject();
					
						this.APPR06 = (BigDecimal) dis.readObject();
					
						this.APPR07 = (BigDecimal) dis.readObject();
					
						this.APPR08 = (BigDecimal) dis.readObject();
					
						this.APPR09 = (BigDecimal) dis.readObject();
					
						this.APPR10 = (BigDecimal) dis.readObject();
					
						this.APPR11 = (BigDecimal) dis.readObject();
					
						this.APPR12 = (BigDecimal) dis.readObject();
					
						this.APPR13 = (BigDecimal) dis.readObject();
					
						this.APMRGP = (BigDecimal) dis.readObject();
					
						this.AGMROI = (BigDecimal) dis.readObject();
					
						this.APTRNS = (BigDecimal) dis.readObject();
					
						this.APAVOH = (BigDecimal) dis.readObject();
					
						this.APPOBO = (BigDecimal) dis.readObject();
					
						this.APPOSS = (BigDecimal) dis.readObject();
					
						this.APPOLT = (BigDecimal) dis.readObject();
					
						this.APLY01 = (BigDecimal) dis.readObject();
					
						this.APLY02 = (BigDecimal) dis.readObject();
					
						this.APLY03 = (BigDecimal) dis.readObject();
					
						this.APLY04 = (BigDecimal) dis.readObject();
					
						this.APTY01 = (BigDecimal) dis.readObject();
					
						this.APTY02 = (BigDecimal) dis.readObject();
					
						this.APTY03 = (BigDecimal) dis.readObject();
					
						this.APTY04 = (BigDecimal) dis.readObject();
					
						this.ASLST1 = (BigDecimal) dis.readObject();
					
						this.ASLST2 = (BigDecimal) dis.readObject();
					
					this.AS1099 = readString(dis);
					
					this.ASPCCD = readString(dis);
					
					this.ASOTHN = readString(dis);
					
					this.ASRAYN = readString(dis);
					
					this.ASCURC = readString(dis);
					
					this.ASTAXC = readString(dis);
					
					this.ASSTYN = readString(dis);
					
						this.ASTTPC = (BigDecimal) dis.readObject();
					
					this.ASTTDC = readString(dis);
					
						this.ASTTPU = (BigDecimal) dis.readObject();
					
					this.ASTTDU = readString(dis);
					
						this.ASTLPC = (BigDecimal) dis.readObject();
					
					this.ASTLDC = readString(dis);
					
						this.ASTLPU = (BigDecimal) dis.readObject();
					
					this.ASTLDU = readString(dis);
					
					this.ASLINM = readString(dis);
					
						this.ASTTNC = (BigDecimal) dis.readObject();
					
					this.ASTTND = readString(dis);
					
					this.ASGSTR = readString(dis);
					
					this.ASGSTN = readString(dis);
					
						this.ASGST1 = (BigDecimal) dis.readObject();
					
						this.ASGST2 = (BigDecimal) dis.readObject();
					
					this.ASFRTF = readString(dis);
					
					this.ASMSCF = readString(dis);
					
					this.ASALWF = readString(dis);
					
					this.ASHSHQ = readString(dis);
					
					this.ASLNOG = readString(dis);
					
					this.ASLUOE = readString(dis);
					
					this.ASLSOP = readString(dis);
					
					this.ASMTCH = readString(dis);
					
					this.ASCAUT = readString(dis);
					
					this.ASTAXD = readString(dis);
					
					this.ASALLC = readString(dis);
					
					this.ASMCHT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AT_TALEND_JOBS_TTAALLCL1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASNUM = null;
           				} else {
           			    	this.ASNUM = dis.readDouble();
           				}
					
					this.ASNAME = readString(dis);
					
					this.ASADAD = readString(dis);
					
					this.ASALPH = readString(dis);
					
					this.ASSTAT = readString(dis);
					
					this.ASTYPE = readString(dis);
					
					this.ASBOYN = readString(dis);
					
					this.ASAUTO = readString(dis);
					
						this.ASCNUM = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASCLRK = null;
           				} else {
           			    	this.ASCLRK = dis.readDouble();
           				}
					
						this.ASDFAC = (BigDecimal) dis.readObject();
					
						this.ASSTR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASVOTH = null;
           				} else {
           			    	this.ASVOTH = dis.readDouble();
           				}
					
					this.ASBUYR = readString(dis);
					
					this.ASCUST = readString(dis);
					
						this.ASCNIN = (BigDecimal) dis.readObject();
					
						this.ASDTIN = (BigDecimal) dis.readObject();
					
						this.ASCNLP = (BigDecimal) dis.readObject();
					
						this.ASDTLP = (BigDecimal) dis.readObject();
					
						this.ASAMLP = (BigDecimal) dis.readObject();
					
						this.ASCKLP = (BigDecimal) dis.readObject();
					
						this.ASBAL1 = (BigDecimal) dis.readObject();
					
						this.ASBAL2 = (BigDecimal) dis.readObject();
					
					this.PONOT1 = readString(dis);
					
					this.PONOT2 = readString(dis);
					
					this.PONOT3 = readString(dis);
					
					this.RCNOT1 = readString(dis);
					
					this.RCNOT2 = readString(dis);
					
					this.RCNOT3 = readString(dis);
					
					this.BYNOT1 = readString(dis);
					
					this.BYNOT2 = readString(dis);
					
					this.BYNOT3 = readString(dis);
					
						this.ASRVFR = (BigDecimal) dis.readObject();
					
						this.ASLEAD = (BigDecimal) dis.readObject();
					
						this.ASTPO = (BigDecimal) dis.readObject();
					
						this.ASTLT = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ASTRMS = null;
           				} else {
           			    	this.ASTRMS = dis.readDouble();
           				}
					
					this.ASTIND = readString(dis);
					
						this.ASPUSH = (BigDecimal) dis.readObject();
					
					this.ASTDSC = readString(dis);
					
					this.ASFPCD = readString(dis);
					
						this.ASFALP = (BigDecimal) dis.readObject();
					
						this.ASFALN = (BigDecimal) dis.readObject();
					
					this.ASFOBC = readString(dis);
					
					this.ASSHP1 = readString(dis);
					
					this.ASSHP2 = readString(dis);
					
					this.ASSHPP = readString(dis);
					
					this.ASSHPC = readString(dis);
					
					this.ASMINC = readString(dis);
					
						this.ASMINA = (BigDecimal) dis.readObject();
					
						this.ASTRKP = (BigDecimal) dis.readObject();
					
						this.ASTRKA = (BigDecimal) dis.readObject();
					
						this.ASTARP = (BigDecimal) dis.readObject();
					
						this.ASSTOP = (BigDecimal) dis.readObject();
					
						this.ASSKID = (BigDecimal) dis.readObject();
					
						this.ASOTHQ = (BigDecimal) dis.readObject();
					
						this.ASOTHP = (BigDecimal) dis.readObject();
					
					this.ASRTCD = readString(dis);
					
						this.ASVOLP = (BigDecimal) dis.readObject();
					
						this.ASVOLN = (BigDecimal) dis.readObject();
					
						this.ASREBP = (BigDecimal) dis.readObject();
					
						this.ASREBN = (BigDecimal) dis.readObject();
					
						this.ASALLP = (BigDecimal) dis.readObject();
					
						this.ASALLN = (BigDecimal) dis.readObject();
					
						this.APPR01 = (BigDecimal) dis.readObject();
					
						this.APPR02 = (BigDecimal) dis.readObject();
					
						this.APPR03 = (BigDecimal) dis.readObject();
					
						this.APPR04 = (BigDecimal) dis.readObject();
					
						this.APPR05 = (BigDecimal) dis.readObject();
					
						this.APPR06 = (BigDecimal) dis.readObject();
					
						this.APPR07 = (BigDecimal) dis.readObject();
					
						this.APPR08 = (BigDecimal) dis.readObject();
					
						this.APPR09 = (BigDecimal) dis.readObject();
					
						this.APPR10 = (BigDecimal) dis.readObject();
					
						this.APPR11 = (BigDecimal) dis.readObject();
					
						this.APPR12 = (BigDecimal) dis.readObject();
					
						this.APPR13 = (BigDecimal) dis.readObject();
					
						this.APMRGP = (BigDecimal) dis.readObject();
					
						this.AGMROI = (BigDecimal) dis.readObject();
					
						this.APTRNS = (BigDecimal) dis.readObject();
					
						this.APAVOH = (BigDecimal) dis.readObject();
					
						this.APPOBO = (BigDecimal) dis.readObject();
					
						this.APPOSS = (BigDecimal) dis.readObject();
					
						this.APPOLT = (BigDecimal) dis.readObject();
					
						this.APLY01 = (BigDecimal) dis.readObject();
					
						this.APLY02 = (BigDecimal) dis.readObject();
					
						this.APLY03 = (BigDecimal) dis.readObject();
					
						this.APLY04 = (BigDecimal) dis.readObject();
					
						this.APTY01 = (BigDecimal) dis.readObject();
					
						this.APTY02 = (BigDecimal) dis.readObject();
					
						this.APTY03 = (BigDecimal) dis.readObject();
					
						this.APTY04 = (BigDecimal) dis.readObject();
					
						this.ASLST1 = (BigDecimal) dis.readObject();
					
						this.ASLST2 = (BigDecimal) dis.readObject();
					
					this.AS1099 = readString(dis);
					
					this.ASPCCD = readString(dis);
					
					this.ASOTHN = readString(dis);
					
					this.ASRAYN = readString(dis);
					
					this.ASCURC = readString(dis);
					
					this.ASTAXC = readString(dis);
					
					this.ASSTYN = readString(dis);
					
						this.ASTTPC = (BigDecimal) dis.readObject();
					
					this.ASTTDC = readString(dis);
					
						this.ASTTPU = (BigDecimal) dis.readObject();
					
					this.ASTTDU = readString(dis);
					
						this.ASTLPC = (BigDecimal) dis.readObject();
					
					this.ASTLDC = readString(dis);
					
						this.ASTLPU = (BigDecimal) dis.readObject();
					
					this.ASTLDU = readString(dis);
					
					this.ASLINM = readString(dis);
					
						this.ASTTNC = (BigDecimal) dis.readObject();
					
					this.ASTTND = readString(dis);
					
					this.ASGSTR = readString(dis);
					
					this.ASGSTN = readString(dis);
					
						this.ASGST1 = (BigDecimal) dis.readObject();
					
						this.ASGST2 = (BigDecimal) dis.readObject();
					
					this.ASFRTF = readString(dis);
					
					this.ASMSCF = readString(dis);
					
					this.ASALWF = readString(dis);
					
					this.ASHSHQ = readString(dis);
					
					this.ASLNOG = readString(dis);
					
					this.ASLUOE = readString(dis);
					
					this.ASLSOP = readString(dis);
					
					this.ASMTCH = readString(dis);
					
					this.ASCAUT = readString(dis);
					
					this.ASTAXD = readString(dis);
					
					this.ASALLC = readString(dis);
					
					this.ASMCHT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.ASNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASNUM);
		            	}
					
					// String
				
						writeString(this.ASNAME,dos);
					
					// String
				
						writeString(this.ASADAD,dos);
					
					// String
				
						writeString(this.ASALPH,dos);
					
					// String
				
						writeString(this.ASSTAT,dos);
					
					// String
				
						writeString(this.ASTYPE,dos);
					
					// String
				
						writeString(this.ASBOYN,dos);
					
					// String
				
						writeString(this.ASAUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNUM);
					
					// Double
				
						if(this.ASCLRK == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASCLRK);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDFAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTR);
					
					// Double
				
						if(this.ASVOTH == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASVOTH);
		            	}
					
					// String
				
						writeString(this.ASBUYR,dos);
					
					// String
				
						writeString(this.ASCUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASAMLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCKLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL2);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// String
				
						writeString(this.RCNOT1,dos);
					
					// String
				
						writeString(this.RCNOT2,dos);
					
					// String
				
						writeString(this.RCNOT3,dos);
					
					// String
				
						writeString(this.BYNOT1,dos);
					
					// String
				
						writeString(this.BYNOT2,dos);
					
					// String
				
						writeString(this.BYNOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASRVFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLEAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTPO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLT);
					
					// Double
				
						if(this.ASTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASTRMS);
		            	}
					
					// String
				
						writeString(this.ASTIND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASPUSH);
					
					// String
				
						writeString(this.ASTDSC,dos);
					
					// String
				
						writeString(this.ASFPCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALN);
					
					// String
				
						writeString(this.ASFOBC,dos);
					
					// String
				
						writeString(this.ASSHP1,dos);
					
					// String
				
						writeString(this.ASSHP2,dos);
					
					// String
				
						writeString(this.ASSHPP,dos);
					
					// String
				
						writeString(this.ASSHPC,dos);
					
					// String
				
						writeString(this.ASMINC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASMINA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHP);
					
					// String
				
						writeString(this.ASRTCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR09);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR10);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR12);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR13);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APMRGP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AGMROI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOBO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOSS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST2);
					
					// String
				
						writeString(this.AS1099,dos);
					
					// String
				
						writeString(this.ASPCCD,dos);
					
					// String
				
						writeString(this.ASOTHN,dos);
					
					// String
				
						writeString(this.ASRAYN,dos);
					
					// String
				
						writeString(this.ASCURC,dos);
					
					// String
				
						writeString(this.ASTAXC,dos);
					
					// String
				
						writeString(this.ASSTYN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPC);
					
					// String
				
						writeString(this.ASTTDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPU);
					
					// String
				
						writeString(this.ASTTDU,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPC);
					
					// String
				
						writeString(this.ASTLDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPU);
					
					// String
				
						writeString(this.ASTLDU,dos);
					
					// String
				
						writeString(this.ASLINM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTNC);
					
					// String
				
						writeString(this.ASTTND,dos);
					
					// String
				
						writeString(this.ASGSTR,dos);
					
					// String
				
						writeString(this.ASGSTN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST2);
					
					// String
				
						writeString(this.ASFRTF,dos);
					
					// String
				
						writeString(this.ASMSCF,dos);
					
					// String
				
						writeString(this.ASALWF,dos);
					
					// String
				
						writeString(this.ASHSHQ,dos);
					
					// String
				
						writeString(this.ASLNOG,dos);
					
					// String
				
						writeString(this.ASLUOE,dos);
					
					// String
				
						writeString(this.ASLSOP,dos);
					
					// String
				
						writeString(this.ASMTCH,dos);
					
					// String
				
						writeString(this.ASCAUT,dos);
					
					// String
				
						writeString(this.ASTAXD,dos);
					
					// String
				
						writeString(this.ASALLC,dos);
					
					// String
				
						writeString(this.ASMCHT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.ASNUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASNUM);
		            	}
					
					// String
				
						writeString(this.ASNAME,dos);
					
					// String
				
						writeString(this.ASADAD,dos);
					
					// String
				
						writeString(this.ASALPH,dos);
					
					// String
				
						writeString(this.ASSTAT,dos);
					
					// String
				
						writeString(this.ASTYPE,dos);
					
					// String
				
						writeString(this.ASBOYN,dos);
					
					// String
				
						writeString(this.ASAUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNUM);
					
					// Double
				
						if(this.ASCLRK == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASCLRK);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDFAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTR);
					
					// Double
				
						if(this.ASVOTH == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASVOTH);
		            	}
					
					// String
				
						writeString(this.ASBUYR,dos);
					
					// String
				
						writeString(this.ASCUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCNLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASDTLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASAMLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASCKLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASBAL2);
					
					// String
				
						writeString(this.PONOT1,dos);
					
					// String
				
						writeString(this.PONOT2,dos);
					
					// String
				
						writeString(this.PONOT3,dos);
					
					// String
				
						writeString(this.RCNOT1,dos);
					
					// String
				
						writeString(this.RCNOT2,dos);
					
					// String
				
						writeString(this.RCNOT3,dos);
					
					// String
				
						writeString(this.BYNOT1,dos);
					
					// String
				
						writeString(this.BYNOT2,dos);
					
					// String
				
						writeString(this.BYNOT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASRVFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLEAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTPO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLT);
					
					// Double
				
						if(this.ASTRMS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ASTRMS);
		            	}
					
					// String
				
						writeString(this.ASTIND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASPUSH);
					
					// String
				
						writeString(this.ASTDSC,dos);
					
					// String
				
						writeString(this.ASFPCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASFALN);
					
					// String
				
						writeString(this.ASFOBC,dos);
					
					// String
				
						writeString(this.ASSHP1,dos);
					
					// String
				
						writeString(this.ASSHP2,dos);
					
					// String
				
						writeString(this.ASSHPP,dos);
					
					// String
				
						writeString(this.ASSHPC,dos);
					
					// String
				
						writeString(this.ASMINC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASMINA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTRKA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTARP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSTOP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASSKID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASOTHP);
					
					// String
				
						writeString(this.ASRTCD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASVOLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASREBN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASALLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR05);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR06);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR07);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR08);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR09);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR10);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR12);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPR13);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APMRGP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AGMROI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTRNS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APAVOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOBO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOSS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPOLT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY01);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY02);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY03);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APTY04);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASLST2);
					
					// String
				
						writeString(this.AS1099,dos);
					
					// String
				
						writeString(this.ASPCCD,dos);
					
					// String
				
						writeString(this.ASOTHN,dos);
					
					// String
				
						writeString(this.ASRAYN,dos);
					
					// String
				
						writeString(this.ASCURC,dos);
					
					// String
				
						writeString(this.ASTAXC,dos);
					
					// String
				
						writeString(this.ASSTYN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPC);
					
					// String
				
						writeString(this.ASTTDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTPU);
					
					// String
				
						writeString(this.ASTTDU,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPC);
					
					// String
				
						writeString(this.ASTLDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTLPU);
					
					// String
				
						writeString(this.ASTLDU,dos);
					
					// String
				
						writeString(this.ASLINM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASTTNC);
					
					// String
				
						writeString(this.ASTTND,dos);
					
					// String
				
						writeString(this.ASGSTR,dos);
					
					// String
				
						writeString(this.ASGSTN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ASGST2);
					
					// String
				
						writeString(this.ASFRTF,dos);
					
					// String
				
						writeString(this.ASMSCF,dos);
					
					// String
				
						writeString(this.ASALWF,dos);
					
					// String
				
						writeString(this.ASHSHQ,dos);
					
					// String
				
						writeString(this.ASLNOG,dos);
					
					// String
				
						writeString(this.ASLUOE,dos);
					
					// String
				
						writeString(this.ASLSOP,dos);
					
					// String
				
						writeString(this.ASMTCH,dos);
					
					// String
				
						writeString(this.ASCAUT,dos);
					
					// String
				
						writeString(this.ASTAXD,dos);
					
					// String
				
						writeString(this.ASALLC,dos);
					
					// String
				
						writeString(this.ASMCHT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ASNUM="+String.valueOf(ASNUM));
		sb.append(",ASNAME="+ASNAME);
		sb.append(",ASADAD="+ASADAD);
		sb.append(",ASALPH="+ASALPH);
		sb.append(",ASSTAT="+ASSTAT);
		sb.append(",ASTYPE="+ASTYPE);
		sb.append(",ASBOYN="+ASBOYN);
		sb.append(",ASAUTO="+ASAUTO);
		sb.append(",ASCNUM="+String.valueOf(ASCNUM));
		sb.append(",ASCLRK="+String.valueOf(ASCLRK));
		sb.append(",ASDFAC="+String.valueOf(ASDFAC));
		sb.append(",ASSTR="+String.valueOf(ASSTR));
		sb.append(",ASVOTH="+String.valueOf(ASVOTH));
		sb.append(",ASBUYR="+ASBUYR);
		sb.append(",ASCUST="+ASCUST);
		sb.append(",ASCNIN="+String.valueOf(ASCNIN));
		sb.append(",ASDTIN="+String.valueOf(ASDTIN));
		sb.append(",ASCNLP="+String.valueOf(ASCNLP));
		sb.append(",ASDTLP="+String.valueOf(ASDTLP));
		sb.append(",ASAMLP="+String.valueOf(ASAMLP));
		sb.append(",ASCKLP="+String.valueOf(ASCKLP));
		sb.append(",ASBAL1="+String.valueOf(ASBAL1));
		sb.append(",ASBAL2="+String.valueOf(ASBAL2));
		sb.append(",PONOT1="+PONOT1);
		sb.append(",PONOT2="+PONOT2);
		sb.append(",PONOT3="+PONOT3);
		sb.append(",RCNOT1="+RCNOT1);
		sb.append(",RCNOT2="+RCNOT2);
		sb.append(",RCNOT3="+RCNOT3);
		sb.append(",BYNOT1="+BYNOT1);
		sb.append(",BYNOT2="+BYNOT2);
		sb.append(",BYNOT3="+BYNOT3);
		sb.append(",ASRVFR="+String.valueOf(ASRVFR));
		sb.append(",ASLEAD="+String.valueOf(ASLEAD));
		sb.append(",ASTPO="+String.valueOf(ASTPO));
		sb.append(",ASTLT="+String.valueOf(ASTLT));
		sb.append(",ASTRMS="+String.valueOf(ASTRMS));
		sb.append(",ASTIND="+ASTIND);
		sb.append(",ASPUSH="+String.valueOf(ASPUSH));
		sb.append(",ASTDSC="+ASTDSC);
		sb.append(",ASFPCD="+ASFPCD);
		sb.append(",ASFALP="+String.valueOf(ASFALP));
		sb.append(",ASFALN="+String.valueOf(ASFALN));
		sb.append(",ASFOBC="+ASFOBC);
		sb.append(",ASSHP1="+ASSHP1);
		sb.append(",ASSHP2="+ASSHP2);
		sb.append(",ASSHPP="+ASSHPP);
		sb.append(",ASSHPC="+ASSHPC);
		sb.append(",ASMINC="+ASMINC);
		sb.append(",ASMINA="+String.valueOf(ASMINA));
		sb.append(",ASTRKP="+String.valueOf(ASTRKP));
		sb.append(",ASTRKA="+String.valueOf(ASTRKA));
		sb.append(",ASTARP="+String.valueOf(ASTARP));
		sb.append(",ASSTOP="+String.valueOf(ASSTOP));
		sb.append(",ASSKID="+String.valueOf(ASSKID));
		sb.append(",ASOTHQ="+String.valueOf(ASOTHQ));
		sb.append(",ASOTHP="+String.valueOf(ASOTHP));
		sb.append(",ASRTCD="+ASRTCD);
		sb.append(",ASVOLP="+String.valueOf(ASVOLP));
		sb.append(",ASVOLN="+String.valueOf(ASVOLN));
		sb.append(",ASREBP="+String.valueOf(ASREBP));
		sb.append(",ASREBN="+String.valueOf(ASREBN));
		sb.append(",ASALLP="+String.valueOf(ASALLP));
		sb.append(",ASALLN="+String.valueOf(ASALLN));
		sb.append(",APPR01="+String.valueOf(APPR01));
		sb.append(",APPR02="+String.valueOf(APPR02));
		sb.append(",APPR03="+String.valueOf(APPR03));
		sb.append(",APPR04="+String.valueOf(APPR04));
		sb.append(",APPR05="+String.valueOf(APPR05));
		sb.append(",APPR06="+String.valueOf(APPR06));
		sb.append(",APPR07="+String.valueOf(APPR07));
		sb.append(",APPR08="+String.valueOf(APPR08));
		sb.append(",APPR09="+String.valueOf(APPR09));
		sb.append(",APPR10="+String.valueOf(APPR10));
		sb.append(",APPR11="+String.valueOf(APPR11));
		sb.append(",APPR12="+String.valueOf(APPR12));
		sb.append(",APPR13="+String.valueOf(APPR13));
		sb.append(",APMRGP="+String.valueOf(APMRGP));
		sb.append(",AGMROI="+String.valueOf(AGMROI));
		sb.append(",APTRNS="+String.valueOf(APTRNS));
		sb.append(",APAVOH="+String.valueOf(APAVOH));
		sb.append(",APPOBO="+String.valueOf(APPOBO));
		sb.append(",APPOSS="+String.valueOf(APPOSS));
		sb.append(",APPOLT="+String.valueOf(APPOLT));
		sb.append(",APLY01="+String.valueOf(APLY01));
		sb.append(",APLY02="+String.valueOf(APLY02));
		sb.append(",APLY03="+String.valueOf(APLY03));
		sb.append(",APLY04="+String.valueOf(APLY04));
		sb.append(",APTY01="+String.valueOf(APTY01));
		sb.append(",APTY02="+String.valueOf(APTY02));
		sb.append(",APTY03="+String.valueOf(APTY03));
		sb.append(",APTY04="+String.valueOf(APTY04));
		sb.append(",ASLST1="+String.valueOf(ASLST1));
		sb.append(",ASLST2="+String.valueOf(ASLST2));
		sb.append(",AS1099="+AS1099);
		sb.append(",ASPCCD="+ASPCCD);
		sb.append(",ASOTHN="+ASOTHN);
		sb.append(",ASRAYN="+ASRAYN);
		sb.append(",ASCURC="+ASCURC);
		sb.append(",ASTAXC="+ASTAXC);
		sb.append(",ASSTYN="+ASSTYN);
		sb.append(",ASTTPC="+String.valueOf(ASTTPC));
		sb.append(",ASTTDC="+ASTTDC);
		sb.append(",ASTTPU="+String.valueOf(ASTTPU));
		sb.append(",ASTTDU="+ASTTDU);
		sb.append(",ASTLPC="+String.valueOf(ASTLPC));
		sb.append(",ASTLDC="+ASTLDC);
		sb.append(",ASTLPU="+String.valueOf(ASTLPU));
		sb.append(",ASTLDU="+ASTLDU);
		sb.append(",ASLINM="+ASLINM);
		sb.append(",ASTTNC="+String.valueOf(ASTTNC));
		sb.append(",ASTTND="+ASTTND);
		sb.append(",ASGSTR="+ASGSTR);
		sb.append(",ASGSTN="+ASGSTN);
		sb.append(",ASGST1="+String.valueOf(ASGST1));
		sb.append(",ASGST2="+String.valueOf(ASGST2));
		sb.append(",ASFRTF="+ASFRTF);
		sb.append(",ASMSCF="+ASMSCF);
		sb.append(",ASALWF="+ASALWF);
		sb.append(",ASHSHQ="+ASHSHQ);
		sb.append(",ASLNOG="+ASLNOG);
		sb.append(",ASLUOE="+ASLUOE);
		sb.append(",ASLSOP="+ASLSOP);
		sb.append(",ASMTCH="+ASMTCH);
		sb.append(",ASCAUT="+ASCAUT);
		sb.append(",ASTAXD="+ASTAXD);
		sb.append(",ASALLC="+ASALLC);
		sb.append(",ASMCHT="+ASMCHT);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ASNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASNUM);
            			}
            		
        			sb.append("|");
        		
        				if(ASNAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASNAME);
            			}
            		
        			sb.append("|");
        		
        				if(ASADAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASADAD);
            			}
            		
        			sb.append("|");
        		
        				if(ASALPH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALPH);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTAT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTAT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ASBOYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBOYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASAUTO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASAUTO);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNUM);
            			}
            		
        			sb.append("|");
        		
        				if(ASCLRK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCLRK);
            			}
            		
        			sb.append("|");
        		
        				if(ASDFAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDFAC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTR);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOTH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOTH);
            			}
            		
        			sb.append("|");
        		
        				if(ASBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(ASCUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCUST);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNIN);
            			}
            		
        			sb.append("|");
        		
        				if(ASDTIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDTIN);
            			}
            		
        			sb.append("|");
        		
        				if(ASCNLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCNLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASDTLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASDTLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASAMLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASAMLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASCKLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCKLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASBAL1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBAL1);
            			}
            		
        			sb.append("|");
        		
        				if(ASBAL2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASBAL2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT1);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT2);
            			}
            		
        			sb.append("|");
        		
        				if(PONOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PONOT3);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT1);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT2);
            			}
            		
        			sb.append("|");
        		
        				if(RCNOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RCNOT3);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT1);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT2);
            			}
            		
        			sb.append("|");
        		
        				if(BYNOT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BYNOT3);
            			}
            		
        			sb.append("|");
        		
        				if(ASRVFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRVFR);
            			}
            		
        			sb.append("|");
        		
        				if(ASLEAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLEAD);
            			}
            		
        			sb.append("|");
        		
        				if(ASTPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTPO);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRMS);
            			}
            		
        			sb.append("|");
        		
        				if(ASTIND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTIND);
            			}
            		
        			sb.append("|");
        		
        				if(ASPUSH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASPUSH);
            			}
            		
        			sb.append("|");
        		
        				if(ASTDSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTDSC);
            			}
            		
        			sb.append("|");
        		
        				if(ASFPCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFPCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASFALP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFALP);
            			}
            		
        			sb.append("|");
        		
        				if(ASFALN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFALN);
            			}
            		
        			sb.append("|");
        		
        				if(ASFOBC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFOBC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHP1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHP1);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHP2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHP2);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHPP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHPP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSHPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSHPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMINC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMINC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMINA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMINA);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRKP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRKP);
            			}
            		
        			sb.append("|");
        		
        				if(ASTRKA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTRKA);
            			}
            		
        			sb.append("|");
        		
        				if(ASTARP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTARP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTOP);
            			}
            		
        			sb.append("|");
        		
        				if(ASSKID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSKID);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHQ);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHP);
            			}
            		
        			sb.append("|");
        		
        				if(ASRTCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRTCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASVOLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASVOLN);
            			}
            		
        			sb.append("|");
        		
        				if(ASREBP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASREBP);
            			}
            		
        			sb.append("|");
        		
        				if(ASREBN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASREBN);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLP);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLN);
            			}
            		
        			sb.append("|");
        		
        				if(APPR01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR01);
            			}
            		
        			sb.append("|");
        		
        				if(APPR02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR02);
            			}
            		
        			sb.append("|");
        		
        				if(APPR03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR03);
            			}
            		
        			sb.append("|");
        		
        				if(APPR04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR04);
            			}
            		
        			sb.append("|");
        		
        				if(APPR05 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR05);
            			}
            		
        			sb.append("|");
        		
        				if(APPR06 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR06);
            			}
            		
        			sb.append("|");
        		
        				if(APPR07 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR07);
            			}
            		
        			sb.append("|");
        		
        				if(APPR08 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR08);
            			}
            		
        			sb.append("|");
        		
        				if(APPR09 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR09);
            			}
            		
        			sb.append("|");
        		
        				if(APPR10 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR10);
            			}
            		
        			sb.append("|");
        		
        				if(APPR11 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR11);
            			}
            		
        			sb.append("|");
        		
        				if(APPR12 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR12);
            			}
            		
        			sb.append("|");
        		
        				if(APPR13 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPR13);
            			}
            		
        			sb.append("|");
        		
        				if(APMRGP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APMRGP);
            			}
            		
        			sb.append("|");
        		
        				if(AGMROI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGMROI);
            			}
            		
        			sb.append("|");
        		
        				if(APTRNS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTRNS);
            			}
            		
        			sb.append("|");
        		
        				if(APAVOH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APAVOH);
            			}
            		
        			sb.append("|");
        		
        				if(APPOBO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOBO);
            			}
            		
        			sb.append("|");
        		
        				if(APPOSS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOSS);
            			}
            		
        			sb.append("|");
        		
        				if(APPOLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPOLT);
            			}
            		
        			sb.append("|");
        		
        				if(APLY01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY01);
            			}
            		
        			sb.append("|");
        		
        				if(APLY02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY02);
            			}
            		
        			sb.append("|");
        		
        				if(APLY03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY03);
            			}
            		
        			sb.append("|");
        		
        				if(APLY04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APLY04);
            			}
            		
        			sb.append("|");
        		
        				if(APTY01 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY01);
            			}
            		
        			sb.append("|");
        		
        				if(APTY02 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY02);
            			}
            		
        			sb.append("|");
        		
        				if(APTY03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY03);
            			}
            		
        			sb.append("|");
        		
        				if(APTY04 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APTY04);
            			}
            		
        			sb.append("|");
        		
        				if(ASLST1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLST1);
            			}
            		
        			sb.append("|");
        		
        				if(ASLST2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLST2);
            			}
            		
        			sb.append("|");
        		
        				if(AS1099 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AS1099);
            			}
            		
        			sb.append("|");
        		
        				if(ASPCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASPCCD);
            			}
            		
        			sb.append("|");
        		
        				if(ASOTHN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASOTHN);
            			}
            		
        			sb.append("|");
        		
        				if(ASRAYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASRAYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASCURC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCURC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTAXC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTAXC);
            			}
            		
        			sb.append("|");
        		
        				if(ASSTYN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSTYN);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTDC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTPU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTDU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTDU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLPC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLDC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLPU);
            			}
            		
        			sb.append("|");
        		
        				if(ASTLDU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTLDU);
            			}
            		
        			sb.append("|");
        		
        				if(ASLINM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLINM);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTNC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTNC);
            			}
            		
        			sb.append("|");
        		
        				if(ASTTND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTTND);
            			}
            		
        			sb.append("|");
        		
        				if(ASGSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGSTR);
            			}
            		
        			sb.append("|");
        		
        				if(ASGSTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGSTN);
            			}
            		
        			sb.append("|");
        		
        				if(ASGST1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGST1);
            			}
            		
        			sb.append("|");
        		
        				if(ASGST2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASGST2);
            			}
            		
        			sb.append("|");
        		
        				if(ASFRTF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASFRTF);
            			}
            		
        			sb.append("|");
        		
        				if(ASMSCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMSCF);
            			}
            		
        			sb.append("|");
        		
        				if(ASALWF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALWF);
            			}
            		
        			sb.append("|");
        		
        				if(ASHSHQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASHSHQ);
            			}
            		
        			sb.append("|");
        		
        				if(ASLNOG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLNOG);
            			}
            		
        			sb.append("|");
        		
        				if(ASLUOE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLUOE);
            			}
            		
        			sb.append("|");
        		
        				if(ASLSOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASLSOP);
            			}
            		
        			sb.append("|");
        		
        				if(ASMTCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMTCH);
            			}
            		
        			sb.append("|");
        		
        				if(ASCAUT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASCAUT);
            			}
            		
        			sb.append("|");
        		
        				if(ASTAXD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASTAXD);
            			}
            		
        			sb.append("|");
        		
        				if(ASALLC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASALLC);
            			}
            		
        			sb.append("|");
        		
        				if(ASMCHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASMCHT);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileInputDelimited_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
APSUPPStruct APSUPP = new APSUPPStruct();





	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"APSUPP");
			
		int tos_count_tDBOutput_7 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tDBOutput_7", "tDBOutput_1", "tSnowflakeOutput");
				talendJobLogProcess(globalMap);
			}
			

boolean doesNodeBelongToRequest_tDBOutput_7 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tDBOutput_7 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tDBOutput_7 = (String)(restRequest_tDBOutput_7 != null ? restRequest_tDBOutput_7.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tDBOutput_7 =
        new org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tDBOutput_7 = null;
org.talend.components.api.component.runtime.Reader reader_tDBOutput_7 = null;


org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties props_tDBOutput_7 =
        (org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties) def_tDBOutput_7.createRuntimeProperties();
 		                    props_tDBOutput_7.setValue("tableAction",
 		                        org.talend.components.common.tableaction.TableAction.TableActionEnum.NONE);
 		                    
 		                    props_tDBOutput_7.setValue("outputAction",
 		                        org.talend.components.snowflake.tsnowflakeoutput.TSnowflakeOutputProperties.OutputAction.INSERT);
 		                    
 		                    props_tDBOutput_7.setValue("convertColumnsAndTableToUppercase",
 		                    true);
 		                    
 		                    props_tDBOutput_7.setValue("convertEmptyStringsToNull",
 		                    false);
 		                    
 		                    props_tDBOutput_7.setValue("useSchemaDatePattern",
 		                    false);
 		                    
 		                    props_tDBOutput_7.setValue("dieOnError",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tDBOutput_7_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"columnName\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"rowNumber\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"category\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"character\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"byteOffset\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"line\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"sqlState\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"code\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_7_1_fisrt sst_tDBOutput_7_1_fisrt = new SchemaSettingTool_tDBOutput_7_1_fisrt();
 		                    
 		                    props_tDBOutput_7.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_7_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tDBOutput_7.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_7.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_7.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_7.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_7.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_7.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    props_tDBOutput_7.table.setValue("tableName",
 		                    "MMS_VENDOR_MASTER_FILE_APSUPP");
 		                    
 		                    props_tDBOutput_7.table.connection.setValue("region",
 		                        org.talend.components.snowflake.SnowflakeRegion.AWS_US_EAST_1);
 		                    
 		                    props_tDBOutput_7.table.connection.setValue("useCustomRegion",
 		                    false);
 		                    
 		                    props_tDBOutput_7.table.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_7.table.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_7.table.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tDBConnection_1");
 		                    
 		                    props_tDBOutput_7.table.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSnowflakeConnection");
 		                    
 		                    class SchemaSettingTool_tDBOutput_7_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"MMS_VENDOR_MASTER_FILE_APSUPP\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"ASNUM\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ASNUM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASNAME\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":35,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASNAME\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASADAD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASADAD\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASALPH\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":6,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASALPH\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSTAT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASSTAT\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTYPE\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTYPE\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASBOYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASBOYN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASAUTO\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASAUTO\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCNUM\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASCNUM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCLRK\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ASCLRK\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASDFAC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASDFAC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSTR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASSTR\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASVOTH\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ASVOTH\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASBUYR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASBUYR\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCUST\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":8,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASCUST\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCNIN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASCNIN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASDTIN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASDTIN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCNLP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":1,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASCNLP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASDTLP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASDTLP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASAMLP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASAMLP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCKLP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASCKLP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASBAL1\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASBAL1\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASBAL2\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASBAL2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PONOT1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"PONOT1\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PONOT2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"PONOT2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"PONOT3\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"PONOT3\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"RCNOT1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"RCNOT1\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"RCNOT2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"RCNOT2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"RCNOT3\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"RCNOT3\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"BYNOT1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"BYNOT1\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"BYNOT2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"BYNOT2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"BYNOT3\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":50,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"BYNOT3\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASRVFR\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASRVFR\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASLEAD\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASLEAD\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTPO\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASTPO\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTLT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASTLT\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTRMS\",\"type\":[\"double\",\"null\"],\"default\":\"\",\"talend.field.dbType\":8,\"talend.field.dbColumnName\":\"ASTRMS\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTIND\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTIND\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASPUSH\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASPUSH\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTDSC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTDSC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASFPCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASFPCD\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASFALP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASFALP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASFALN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASFALN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASFOBC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASFOBC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSHP1\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASSHP1\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSHP2\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASSHP2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSHPP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASSHPP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSHPC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASSHPC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASMINC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASMINC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASMINA\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"ASMINA\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTRKP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTRKP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTRKA\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTRKA\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTARP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTARP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSTOP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASSTOP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSKID\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASSKID\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASOTHQ\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASOTHQ\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASOTHP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASOTHP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASRTCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASRTCD\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASVOLP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASVOLP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASVOLN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASVOLN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASREBP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASREBP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASREBN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASREBN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASALLP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":3,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASALLP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASALLN\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":6,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASALLN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR01\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR01\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR02\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR02\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR03\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR03\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR04\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR04\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR05\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR05\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR06\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR06\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR07\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR07\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR08\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR08\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR09\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR09\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR10\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR10\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR11\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR11\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR12\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR12\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPR13\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APPR13\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APMRGP\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":1,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APMRGP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"AGMROI\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":1,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"AGMROI\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APTRNS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":1,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APTRNS\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APAVOH\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"APAVOH\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPOBO\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APPOBO\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPOSS\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APPOSS\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APPOLT\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":3,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APPOLT\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APLY01\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APLY01\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APLY02\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APLY02\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APLY03\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APLY03\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APLY04\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APLY04\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APTY01\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APTY01\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APTY02\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APTY02\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APTY03\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APTY03\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"APTY04\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":5,\"talend.field.scale\":0,\"talend.field.dbType\":-5,\"talend.field.dbColumnName\":\"APTY04\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASLST1\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASLST1\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASLST2\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASLST2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"AS1099\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":9,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"AS1099\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASPCCD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASPCCD\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASOTHN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":35,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASOTHN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASRAYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASRAYN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCURC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":3,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASCURC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTAXC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTAXC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASSTYN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASSTYN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTTPC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTTPC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTTDC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTTDC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTTPU\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTTPU\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTTDU\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTTDU\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTLPC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTLPC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTLDC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTLDC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTLPU\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":4,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTLPU\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTLDU\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTLDU\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASLINM\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASLINM\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTTNC\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":9,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASTTNC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTTND\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":10,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTTND\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASGSTR\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASGSTR\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASGSTN\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":20,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASGSTN\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASGST1\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASGST1\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASGST2\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"default\":\"\",\"talend.field.precision\":10,\"talend.field.scale\":2,\"talend.field.dbType\":3,\"talend.field.dbColumnName\":\"ASGST2\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASFRTF\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASFRTF\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASMSCF\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASMSCF\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASALWF\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASALWF\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASHSHQ\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASHSHQ\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASLNOG\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASLNOG\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASLUOE\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASLUOE\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASLSOP\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASLSOP\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASMTCH\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASMTCH\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASCAUT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASCAUT\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASTAXD\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASTAXD\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASALLC\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":5,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASALLC\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ASMCHT\",\"type\":[\"string\",\"null\"],\"default\":\"\",\"talend.field.length\":1,\"talend.field.dbType\":12,\"talend.field.dbColumnName\":\"ASMCHT\",\"talend.field.default\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"LOAD_DATE\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"],\"default\":\"\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"talend.field.dbType\":91,\"talend.field.dbColumnName\":\"LOAD_DATE\",\"talend.field.default\":\"\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tDBOutput_7_2_fisrt sst_tDBOutput_7_2_fisrt = new SchemaSettingTool_tDBOutput_7_2_fisrt();
 		                    
 		                    props_tDBOutput_7.table.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_7_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_7.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_7 = props_tDBOutput_7.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_7 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_7 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_7 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_7.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_7);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_7.table.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_7 = props_tDBOutput_7.table.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_7 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_7 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_7 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_7.table.connection.referencedComponent.setReference(referencedComponentProperties_tDBOutput_7);
        }
    }
globalMap.put("tDBOutput_7_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_7);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.20");
java.net.URL mappings_url_tDBOutput_7= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_7_MAPPINGS_URL", mappings_url_tDBOutput_7);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_7 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_7";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_7 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_7 = null;
topology_tDBOutput_7 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_7 = def_tDBOutput_7.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_7, topology_tDBOutput_7);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_7 = def_tDBOutput_7.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_7 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_7.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_7 = componentRuntime_tDBOutput_7.initialize(container_tDBOutput_7, props_tDBOutput_7);

if (initVr_tDBOutput_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_7.getMessage());
}

if(componentRuntime_tDBOutput_7 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_7 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_7;
	compDriverInitialization_tDBOutput_7.runAtDriver(container_tDBOutput_7);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_7 = null;
if(componentRuntime_tDBOutput_7 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_7 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_7;
	if (doesNodeBelongToRequest_tDBOutput_7) {
        org.talend.daikon.properties.ValidationResult vr_tDBOutput_7 = sourceOrSink_tDBOutput_7.validate(container_tDBOutput_7);
        if (vr_tDBOutput_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tDBOutput_7.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_7 = null;
    if (sourceOrSink_tDBOutput_7 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tDBOutput_7 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_7;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_7 = sink_tDBOutput_7.createWriteOperation();
        if (doesNodeBelongToRequest_tDBOutput_7) {
            writeOperation_tDBOutput_7.initialize(container_tDBOutput_7);
        }
        writer_tDBOutput_7 = writeOperation_tDBOutput_7.createWriter(container_tDBOutput_7);
        if (doesNodeBelongToRequest_tDBOutput_7) {
            writer_tDBOutput_7.open("tDBOutput_7");
        }

        resourceMap.put("writer_tDBOutput_7", writer_tDBOutput_7);
    } // end of "sourceOrSink_tDBOutput_7 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tDBOutput_7 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_7.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_7 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_7 = props_tDBOutput_7.getSchema(c_tDBOutput_7, false);
    incomingEnforcer_tDBOutput_7 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_7);

                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_7 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_7 = null;


 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"row10");
			
		int tos_count_tMap_7 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_7 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_7{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_7 = new StringBuilder();
                    log4jParamters_tMap_7.append("Parameters:");
                            log4jParamters_tMap_7.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_7.append(" | ");
                            log4jParamters_tMap_7.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_7.append(" | ");
                            log4jParamters_tMap_7.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_7.append(" | ");
                            log4jParamters_tMap_7.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_7.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_7 - "  + (log4jParamters_tMap_7) );
                    } 
                } 
            new BytesLimit65535_tMap_7().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tMap_7", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_row10_tMap_7 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
	java.util.Date var1;
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_APSUPP_tMap_7 = 0;
				
APSUPPStruct APSUPP_tmp = new APSUPPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";
	
	
		int tos_count_tFileInputDelimited_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileInputDelimited_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileInputDelimited_2 = new StringBuilder();
                    log4jParamters_tFileInputDelimited_2.append("Parameters:");
                            log4jParamters_tFileInputDelimited_2.append("FILENAME" + " = " + "\"/data/talend/data_repository/APSUPP.zip\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("CSV_OPTION" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ROWSEPARATOR" + " = " + "\"\\n\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("HEADER" + " = " + "1");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("LIMIT" + " = " + "");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("REMOVE_EMPTY_ROW" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("UNCOMPRESS" + " = " + "true");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("DIE_ON_ERROR" + " = " + "true");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("TRIMALL" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("TRIMSELECT" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ASNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASNAME")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASADAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALPH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTAT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTYPE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBOYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASAUTO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCLRK")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASDFAC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASVOTH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBUYR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCUST")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCNIN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASDTIN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCNLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASDTLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASAMLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCKLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBAL1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASBAL2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PONOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("RCNOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("RCNOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("RCNOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("BYNOT1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("BYNOT2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("BYNOT3")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASRVFR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLEAD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTPO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTRMS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTIND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASPUSH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTDSC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFPCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFALP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFALN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFOBC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHP1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHP2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHPP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSHPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMINC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMINA")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTRKP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTRKA")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTARP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSKID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASOTHQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASOTHP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASRTCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASVOLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASVOLN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASREBP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASREBN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALLP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALLN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR05")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR06")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR07")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR08")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR09")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR10")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR11")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR12")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPR13")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APMRGP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("AGMROI")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTRNS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APAVOH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPOBO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPOSS")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APPOLT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APLY04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY01")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY02")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY03")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("APTY04")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLST1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLST2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("AS1099")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASPCCD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASOTHN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASRAYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCURC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTAXC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASSTYN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTDC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTPU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTDU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLPC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLDC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLPU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTLDU")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLINM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTNC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTTND")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGSTR")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGSTN")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGST1")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASGST2")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASFRTF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMSCF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALWF")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASHSHQ")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLNOG")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLUOE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASLSOP")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMTCH")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASCAUT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASTAXD")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASALLC")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ASMCHT")+"}]");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("CHECK_FIELDS_NUM" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("CHECK_DATE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("SPLITRECORD" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                            log4jParamters_tFileInputDelimited_2.append("ENABLE_DECODE" + " = " + "false");
                        log4jParamters_tFileInputDelimited_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_2 - "  + (log4jParamters_tFileInputDelimited_2) );
                    } 
                } 
            new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileInputDelimited_2", "tFileInputDelimited_1", "tFileInputDelimited");
				talendJobLogProcess(globalMap);
			}
			
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_2{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,row10Struct row10 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASNUM = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASNUM", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASNUM = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row10.ASNAME = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row10.ASADAD = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row10.ASALPH = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row10.ASSTAT = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row10.ASTYPE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row10.ASBOYN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row10.ASAUTO = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASCNUM = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASCNUM", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASCNUM = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASCLRK = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASCLRK", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASCLRK = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASDFAC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASDFAC", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASDFAC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASSTR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASSTR", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASSTR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASVOTH = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASVOTH", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASVOTH = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
							row10.ASBUYR = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
							row10.ASCUST = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASCNIN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASCNIN", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASCNIN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASDTIN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASDTIN", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASDTIN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASCNLP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASCNLP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASCNLP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASDTLP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASDTLP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASDTLP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASAMLP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASAMLP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASAMLP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASCKLP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASCKLP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASCKLP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASBAL1 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASBAL1", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASBAL1 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 22;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASBAL2 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASBAL2", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASBAL2 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 23;
					
							row10.PONOT1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 24;
					
							row10.PONOT2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 25;
					
							row10.PONOT3 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 26;
					
							row10.RCNOT1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 27;
					
							row10.RCNOT2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 28;
					
							row10.RCNOT3 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 29;
					
							row10.BYNOT1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 30;
					
							row10.BYNOT2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 31;
					
							row10.BYNOT3 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 32;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASRVFR = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASRVFR", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASRVFR = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 33;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASLEAD = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASLEAD", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASLEAD = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 34;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTPO = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTPO", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTPO = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 35;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTLT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTLT", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTLT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 36;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTRMS = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTRMS", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTRMS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 37;
					
							row10.ASTIND = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 38;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASPUSH = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASPUSH", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASPUSH = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 39;
					
							row10.ASTDSC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 40;
					
							row10.ASFPCD = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 41;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASFALP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASFALP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASFALP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 42;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASFALN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASFALN", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASFALN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 43;
					
							row10.ASFOBC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 44;
					
							row10.ASSHP1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 45;
					
							row10.ASSHP2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 46;
					
							row10.ASSHPP = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 47;
					
							row10.ASSHPC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 48;
					
							row10.ASMINC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 49;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASMINA = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASMINA", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASMINA = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 50;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTRKP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTRKP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTRKP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 51;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTRKA = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTRKA", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTRKA = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 52;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTARP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTARP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTARP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 53;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASSTOP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASSTOP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASSTOP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 54;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASSKID = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASSKID", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASSKID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 55;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASOTHQ = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASOTHQ", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASOTHQ = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 56;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASOTHP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASOTHP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASOTHP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 57;
					
							row10.ASRTCD = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 58;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASVOLP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASVOLP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASVOLP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 59;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASVOLN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASVOLN", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASVOLN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 60;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASREBP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASREBP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASREBP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 61;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASREBN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASREBN", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASREBN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 62;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASALLP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASALLP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASALLP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 63;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASALLN = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASALLN", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASALLN = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 64;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR01 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR01", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR01 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 65;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR02 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR02", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR02 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 66;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR03 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR03", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR03 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 67;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR04 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR04", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR04 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 68;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR05 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR05", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR05 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 69;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR06 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR06", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR06 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 70;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR07 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR07", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR07 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 71;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR08 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR08", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR08 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 72;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR09 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR09", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR09 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 73;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR10 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR10", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR10 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 74;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR11 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR11", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR11 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 75;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR12 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR12", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR12 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 76;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPR13 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPR13", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPR13 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 77;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APMRGP = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APMRGP", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APMRGP = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 78;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.AGMROI = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AGMROI", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.AGMROI = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 79;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APTRNS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APTRNS", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APTRNS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 80;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APAVOH = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APAVOH", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APAVOH = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 81;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPOBO = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPOBO", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPOBO = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 82;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPOSS = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPOSS", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPOSS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 83;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APPOLT = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APPOLT", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APPOLT = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 84;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APLY01 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APLY01", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APLY01 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 85;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APLY02 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APLY02", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APLY02 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 86;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APLY03 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APLY03", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APLY03 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 87;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APLY04 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APLY04", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APLY04 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 88;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APTY01 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APTY01", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APTY01 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 89;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APTY02 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APTY02", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APTY02 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 90;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APTY03 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APTY03", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APTY03 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 91;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.APTY04 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"APTY04", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.APTY04 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 92;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASLST1 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASLST1", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASLST1 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 93;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASLST2 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASLST2", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASLST2 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 94;
					
							row10.AS1099 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 95;
					
							row10.ASPCCD = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 96;
					
							row10.ASOTHN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 97;
					
							row10.ASRAYN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 98;
					
							row10.ASCURC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 99;
					
							row10.ASTAXC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,row10Struct row10 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 100;
					
							row10.ASSTYN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 101;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTTPC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTTPC", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTTPC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 102;
					
							row10.ASTTDC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 103;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTTPU = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTTPU", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTTPU = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 104;
					
							row10.ASTTDU = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 105;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTLPC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTLPC", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTLPC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 106;
					
							row10.ASTLDC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 107;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTLPU = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTLPU", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTLPU = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 108;
					
							row10.ASTLDU = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 109;
					
							row10.ASLINM = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 110;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASTTNC = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASTTNC", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASTTNC = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 111;
					
							row10.ASTTND = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 112;
					
							row10.ASGSTR = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 113;
					
							row10.ASGSTN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 114;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASGST1 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASGST1", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASGST1 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 115;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.ASGST2 = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ASGST2", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.ASGST2 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 116;
					
							row10.ASFRTF = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 117;
					
							row10.ASMSCF = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 118;
					
							row10.ASALWF = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 119;
					
							row10.ASHSHQ = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 120;
					
							row10.ASLNOG = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 121;
					
							row10.ASLUOE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 122;
					
							row10.ASLSOP = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 123;
					
							row10.ASMTCH = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 124;
					
							row10.ASCAUT = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 125;
					
							row10.ASTAXD = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 126;
					
							row10.ASALLC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 127;
					
							row10.ASMCHT = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,row10Struct row10 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_2,row10 );
					
						valueToConn_1(fid_tFileInputDelimited_2,row10 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_2 rowHelper_tFileInputDelimited_2  = new RowHelper_tFileInputDelimited_2();
			
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = "/data/talend/data_repository/APSUPP.zip";	
						java.util.zip.ZipInputStream zis_tFileInputDelimited_2 = null;
						try {
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
								zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_2));
							}else{
								zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2))));
							}
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								throw e;
							
						}
						java.util.zip.ZipEntry entry_tFileInputDelimited_2 = null;
		
						while (true) {
							try {
								entry_tFileInputDelimited_2 = zis_tFileInputDelimited_2.getNextEntry();
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
								
									throw e;
								
							}
							if(entry_tFileInputDelimited_2 == null) {
								break;
							}
							if(entry_tFileInputDelimited_2.isDirectory()){ //directory
								continue;
							}
							try {
								fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(zis_tFileInputDelimited_2, "ISO-8859-15","|","\n",false,1,0,
								
									limit_tFileInputDelimited_2
								,-1, false);
							} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
								
									throw e;
								
							}
					
				    
				    	log.info("tFileInputDelimited_2 - Retrieving records from the datasource.");
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row10 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row10 = new row10Struct();
									try {
										
			rowHelper_tFileInputDelimited_2.valueToConn(fid_tFileInputDelimited_2, row10 );
		
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			            					throw(e);
			            				
			    					}
								
			log.debug("tFileInputDelimited_2 - Retrieving the record " + fid_tFileInputDelimited_2.getRowNumber() + ".");
		

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"row10","tFileInputDelimited_2","tFileInputDelimited_1","tFileInputDelimited","tMap_7","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("row10 - " + (row10==null? "": row10.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;
Var.var1 = TalendDate.parseDate("yyyy-MM-dd",TalendDate.getDate("CCYY-MM-DD")) ;// ###############################
        // ###############################
        // # Output tables

APSUPP = null;


// # Output table : 'APSUPP'
count_APSUPP_tMap_7++;

APSUPP_tmp.ASNUM = row10.ASNUM;
APSUPP_tmp.ASNAME = row10.ASNAME;
APSUPP_tmp.ASADAD = row10.ASADAD;
APSUPP_tmp.ASALPH = row10.ASALPH;
APSUPP_tmp.ASSTAT = row10.ASSTAT;
APSUPP_tmp.ASTYPE = row10.ASTYPE;
APSUPP_tmp.ASBOYN = row10.ASBOYN;
APSUPP_tmp.ASAUTO = row10.ASAUTO;
APSUPP_tmp.ASCNUM = row10.ASCNUM;
APSUPP_tmp.ASCLRK = row10.ASCLRK;
APSUPP_tmp.ASDFAC = row10.ASDFAC;
APSUPP_tmp.ASSTR = row10.ASSTR;
APSUPP_tmp.ASVOTH = row10.ASVOTH;
APSUPP_tmp.ASBUYR = row10.ASBUYR;
APSUPP_tmp.ASCUST = row10.ASCUST;
APSUPP_tmp.ASCNIN = row10.ASCNIN;
APSUPP_tmp.ASDTIN = row10.ASDTIN;
APSUPP_tmp.ASCNLP = row10.ASCNLP;
APSUPP_tmp.ASDTLP = row10.ASDTLP;
APSUPP_tmp.ASAMLP = row10.ASAMLP;
APSUPP_tmp.ASCKLP = row10.ASCKLP;
APSUPP_tmp.ASBAL1 = row10.ASBAL1;
APSUPP_tmp.ASBAL2 = row10.ASBAL2;
APSUPP_tmp.PONOT1 = row10.PONOT1;
APSUPP_tmp.PONOT2 = row10.PONOT2;
APSUPP_tmp.PONOT3 = row10.PONOT3;
APSUPP_tmp.RCNOT1 = row10.RCNOT1;
APSUPP_tmp.RCNOT2 = row10.RCNOT2;
APSUPP_tmp.RCNOT3 = row10.RCNOT3;
APSUPP_tmp.BYNOT1 = row10.BYNOT1;
APSUPP_tmp.BYNOT2 = row10.BYNOT2;
APSUPP_tmp.BYNOT3 = row10.BYNOT3;
APSUPP_tmp.ASRVFR = row10.ASRVFR;
APSUPP_tmp.ASLEAD = row10.ASLEAD;
APSUPP_tmp.ASTPO = row10.ASTPO;
APSUPP_tmp.ASTLT = row10.ASTLT;
APSUPP_tmp.ASTRMS = row10.ASTRMS;
APSUPP_tmp.ASTIND = row10.ASTIND;
APSUPP_tmp.ASPUSH = row10.ASPUSH;
APSUPP_tmp.ASTDSC = row10.ASTDSC;
APSUPP_tmp.ASFPCD = row10.ASFPCD;
APSUPP_tmp.ASFALP = row10.ASFALP;
APSUPP_tmp.ASFALN = row10.ASFALN;
APSUPP_tmp.ASFOBC = row10.ASFOBC;
APSUPP_tmp.ASSHP1 = row10.ASSHP1;
APSUPP_tmp.ASSHP2 = row10.ASSHP2;
APSUPP_tmp.ASSHPP = row10.ASSHPP;
APSUPP_tmp.ASSHPC = row10.ASSHPC;
APSUPP_tmp.ASMINC = row10.ASMINC;
APSUPP_tmp.ASMINA = row10.ASMINA;
APSUPP_tmp.ASTRKP = row10.ASTRKP;
APSUPP_tmp.ASTRKA = row10.ASTRKA;
APSUPP_tmp.ASTARP = row10.ASTARP;
APSUPP_tmp.ASSTOP = row10.ASSTOP;
APSUPP_tmp.ASSKID = row10.ASSKID;
APSUPP_tmp.ASOTHQ = row10.ASOTHQ;
APSUPP_tmp.ASOTHP = row10.ASOTHP;
APSUPP_tmp.ASRTCD = row10.ASRTCD;
APSUPP_tmp.ASVOLP = row10.ASVOLP;
APSUPP_tmp.ASVOLN = row10.ASVOLN;
APSUPP_tmp.ASREBP = row10.ASREBP;
APSUPP_tmp.ASREBN = row10.ASREBN;
APSUPP_tmp.ASALLP = row10.ASALLP;
APSUPP_tmp.ASALLN = row10.ASALLN;
APSUPP_tmp.APPR01 = row10.APPR01;
APSUPP_tmp.APPR02 = row10.APPR02;
APSUPP_tmp.APPR03 = row10.APPR03;
APSUPP_tmp.APPR04 = row10.APPR04;
APSUPP_tmp.APPR05 = row10.APPR05;
APSUPP_tmp.APPR06 = row10.APPR06;
APSUPP_tmp.APPR07 = row10.APPR07;
APSUPP_tmp.APPR08 = row10.APPR08;
APSUPP_tmp.APPR09 = row10.APPR09;
APSUPP_tmp.APPR10 = row10.APPR10;
APSUPP_tmp.APPR11 = row10.APPR11;
APSUPP_tmp.APPR12 = row10.APPR12;
APSUPP_tmp.APPR13 = row10.APPR13;
APSUPP_tmp.APMRGP = row10.APMRGP;
APSUPP_tmp.AGMROI = row10.AGMROI;
APSUPP_tmp.APTRNS = row10.APTRNS;
APSUPP_tmp.APAVOH = row10.APAVOH;
APSUPP_tmp.APPOBO = row10.APPOBO;
APSUPP_tmp.APPOSS = row10.APPOSS;
APSUPP_tmp.APPOLT = row10.APPOLT;
APSUPP_tmp.APLY01 = row10.APLY01;
APSUPP_tmp.APLY02 = row10.APLY02;
APSUPP_tmp.APLY03 = row10.APLY03;
APSUPP_tmp.APLY04 = row10.APLY04;
APSUPP_tmp.APTY01 = row10.APTY01;
APSUPP_tmp.APTY02 = row10.APTY02;
APSUPP_tmp.APTY03 = row10.APTY03;
APSUPP_tmp.APTY04 = row10.APTY04;
APSUPP_tmp.ASLST1 = row10.ASLST1;
APSUPP_tmp.ASLST2 = row10.ASLST2;
APSUPP_tmp.AS1099 = row10.AS1099;
APSUPP_tmp.ASPCCD = row10.ASPCCD;
APSUPP_tmp.ASOTHN = row10.ASOTHN;
APSUPP_tmp.ASRAYN = row10.ASRAYN;
APSUPP_tmp.ASCURC = row10.ASCURC;
APSUPP_tmp.ASTAXC = row10.ASTAXC;
APSUPP_tmp.ASSTYN = row10.ASSTYN;
APSUPP_tmp.ASTTPC = row10.ASTTPC;
APSUPP_tmp.ASTTDC = row10.ASTTDC;
APSUPP_tmp.ASTTPU = row10.ASTTPU;
APSUPP_tmp.ASTTDU = row10.ASTTDU;
APSUPP_tmp.ASTLPC = row10.ASTLPC;
APSUPP_tmp.ASTLDC = row10.ASTLDC;
APSUPP_tmp.ASTLPU = row10.ASTLPU;
APSUPP_tmp.ASTLDU = row10.ASTLDU;
APSUPP_tmp.ASLINM = row10.ASLINM;
APSUPP_tmp.ASTTNC = row10.ASTTNC;
APSUPP_tmp.ASTTND = row10.ASTTND;
APSUPP_tmp.ASGSTR = row10.ASGSTR;
APSUPP_tmp.ASGSTN = row10.ASGSTN;
APSUPP_tmp.ASGST1 = row10.ASGST1;
APSUPP_tmp.ASGST2 = row10.ASGST2;
APSUPP_tmp.ASFRTF = row10.ASFRTF;
APSUPP_tmp.ASMSCF = row10.ASMSCF;
APSUPP_tmp.ASALWF = row10.ASALWF;
APSUPP_tmp.ASHSHQ = row10.ASHSHQ;
APSUPP_tmp.ASLNOG = row10.ASLNOG;
APSUPP_tmp.ASLUOE = row10.ASLUOE;
APSUPP_tmp.ASLSOP = row10.ASLSOP;
APSUPP_tmp.ASMTCH = row10.ASMTCH;
APSUPP_tmp.ASCAUT = row10.ASCAUT;
APSUPP_tmp.ASTAXD = row10.ASTAXD;
APSUPP_tmp.ASALLC = row10.ASALLC;
APSUPP_tmp.ASMCHT = row10.ASMCHT;
APSUPP_tmp.LOAD_DATE = Var.var1 ;
APSUPP = APSUPP_tmp;
log.debug("tMap_7 - Outputting the record " + count_APSUPP_tMap_7 + " of the output table 'APSUPP'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "APSUPP"
if(APSUPP != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"APSUPP","tMap_7","tMap_1","tMap","tDBOutput_7","tDBOutput_1","tSnowflakeOutput"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("APSUPP - " + (APSUPP==null? "": APSUPP.toLogString()));
    			}
    		

        if (incomingEnforcer_tDBOutput_7 != null) {
            incomingEnforcer_tDBOutput_7.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASNUM") != null){
                    incomingEnforcer_tDBOutput_7.put("ASNUM", APSUPP.ASNUM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASNAME") != null){
                    incomingEnforcer_tDBOutput_7.put("ASNAME", APSUPP.ASNAME);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASADAD") != null){
                    incomingEnforcer_tDBOutput_7.put("ASADAD", APSUPP.ASADAD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASALPH") != null){
                    incomingEnforcer_tDBOutput_7.put("ASALPH", APSUPP.ASALPH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSTAT") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSTAT", APSUPP.ASSTAT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTYPE") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTYPE", APSUPP.ASTYPE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASBOYN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASBOYN", APSUPP.ASBOYN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASAUTO") != null){
                    incomingEnforcer_tDBOutput_7.put("ASAUTO", APSUPP.ASAUTO);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCNUM") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCNUM", APSUPP.ASCNUM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCLRK") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCLRK", APSUPP.ASCLRK);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASDFAC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASDFAC", APSUPP.ASDFAC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSTR") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSTR", APSUPP.ASSTR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASVOTH") != null){
                    incomingEnforcer_tDBOutput_7.put("ASVOTH", APSUPP.ASVOTH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASBUYR") != null){
                    incomingEnforcer_tDBOutput_7.put("ASBUYR", APSUPP.ASBUYR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCUST") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCUST", APSUPP.ASCUST);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCNIN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCNIN", APSUPP.ASCNIN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASDTIN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASDTIN", APSUPP.ASDTIN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCNLP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCNLP", APSUPP.ASCNLP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASDTLP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASDTLP", APSUPP.ASDTLP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASAMLP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASAMLP", APSUPP.ASAMLP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCKLP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCKLP", APSUPP.ASCKLP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASBAL1") != null){
                    incomingEnforcer_tDBOutput_7.put("ASBAL1", APSUPP.ASBAL1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASBAL2") != null){
                    incomingEnforcer_tDBOutput_7.put("ASBAL2", APSUPP.ASBAL2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("PONOT1") != null){
                    incomingEnforcer_tDBOutput_7.put("PONOT1", APSUPP.PONOT1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("PONOT2") != null){
                    incomingEnforcer_tDBOutput_7.put("PONOT2", APSUPP.PONOT2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("PONOT3") != null){
                    incomingEnforcer_tDBOutput_7.put("PONOT3", APSUPP.PONOT3);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("RCNOT1") != null){
                    incomingEnforcer_tDBOutput_7.put("RCNOT1", APSUPP.RCNOT1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("RCNOT2") != null){
                    incomingEnforcer_tDBOutput_7.put("RCNOT2", APSUPP.RCNOT2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("RCNOT3") != null){
                    incomingEnforcer_tDBOutput_7.put("RCNOT3", APSUPP.RCNOT3);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("BYNOT1") != null){
                    incomingEnforcer_tDBOutput_7.put("BYNOT1", APSUPP.BYNOT1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("BYNOT2") != null){
                    incomingEnforcer_tDBOutput_7.put("BYNOT2", APSUPP.BYNOT2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("BYNOT3") != null){
                    incomingEnforcer_tDBOutput_7.put("BYNOT3", APSUPP.BYNOT3);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASRVFR") != null){
                    incomingEnforcer_tDBOutput_7.put("ASRVFR", APSUPP.ASRVFR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASLEAD") != null){
                    incomingEnforcer_tDBOutput_7.put("ASLEAD", APSUPP.ASLEAD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTPO") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTPO", APSUPP.ASTPO);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTLT") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTLT", APSUPP.ASTLT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTRMS") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTRMS", APSUPP.ASTRMS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTIND") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTIND", APSUPP.ASTIND);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASPUSH") != null){
                    incomingEnforcer_tDBOutput_7.put("ASPUSH", APSUPP.ASPUSH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTDSC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTDSC", APSUPP.ASTDSC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASFPCD") != null){
                    incomingEnforcer_tDBOutput_7.put("ASFPCD", APSUPP.ASFPCD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASFALP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASFALP", APSUPP.ASFALP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASFALN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASFALN", APSUPP.ASFALN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASFOBC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASFOBC", APSUPP.ASFOBC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSHP1") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSHP1", APSUPP.ASSHP1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSHP2") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSHP2", APSUPP.ASSHP2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSHPP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSHPP", APSUPP.ASSHPP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSHPC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSHPC", APSUPP.ASSHPC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASMINC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASMINC", APSUPP.ASMINC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASMINA") != null){
                    incomingEnforcer_tDBOutput_7.put("ASMINA", APSUPP.ASMINA);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTRKP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTRKP", APSUPP.ASTRKP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTRKA") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTRKA", APSUPP.ASTRKA);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTARP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTARP", APSUPP.ASTARP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSTOP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSTOP", APSUPP.ASSTOP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSKID") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSKID", APSUPP.ASSKID);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASOTHQ") != null){
                    incomingEnforcer_tDBOutput_7.put("ASOTHQ", APSUPP.ASOTHQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASOTHP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASOTHP", APSUPP.ASOTHP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASRTCD") != null){
                    incomingEnforcer_tDBOutput_7.put("ASRTCD", APSUPP.ASRTCD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASVOLP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASVOLP", APSUPP.ASVOLP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASVOLN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASVOLN", APSUPP.ASVOLN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASREBP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASREBP", APSUPP.ASREBP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASREBN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASREBN", APSUPP.ASREBN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASALLP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASALLP", APSUPP.ASALLP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASALLN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASALLN", APSUPP.ASALLN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR01") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR01", APSUPP.APPR01);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR02") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR02", APSUPP.APPR02);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR03") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR03", APSUPP.APPR03);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR04") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR04", APSUPP.APPR04);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR05") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR05", APSUPP.APPR05);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR06") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR06", APSUPP.APPR06);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR07") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR07", APSUPP.APPR07);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR08") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR08", APSUPP.APPR08);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR09") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR09", APSUPP.APPR09);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR10") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR10", APSUPP.APPR10);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR11") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR11", APSUPP.APPR11);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR12") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR12", APSUPP.APPR12);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPR13") != null){
                    incomingEnforcer_tDBOutput_7.put("APPR13", APSUPP.APPR13);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APMRGP") != null){
                    incomingEnforcer_tDBOutput_7.put("APMRGP", APSUPP.APMRGP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("AGMROI") != null){
                    incomingEnforcer_tDBOutput_7.put("AGMROI", APSUPP.AGMROI);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APTRNS") != null){
                    incomingEnforcer_tDBOutput_7.put("APTRNS", APSUPP.APTRNS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APAVOH") != null){
                    incomingEnforcer_tDBOutput_7.put("APAVOH", APSUPP.APAVOH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPOBO") != null){
                    incomingEnforcer_tDBOutput_7.put("APPOBO", APSUPP.APPOBO);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPOSS") != null){
                    incomingEnforcer_tDBOutput_7.put("APPOSS", APSUPP.APPOSS);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APPOLT") != null){
                    incomingEnforcer_tDBOutput_7.put("APPOLT", APSUPP.APPOLT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APLY01") != null){
                    incomingEnforcer_tDBOutput_7.put("APLY01", APSUPP.APLY01);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APLY02") != null){
                    incomingEnforcer_tDBOutput_7.put("APLY02", APSUPP.APLY02);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APLY03") != null){
                    incomingEnforcer_tDBOutput_7.put("APLY03", APSUPP.APLY03);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APLY04") != null){
                    incomingEnforcer_tDBOutput_7.put("APLY04", APSUPP.APLY04);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APTY01") != null){
                    incomingEnforcer_tDBOutput_7.put("APTY01", APSUPP.APTY01);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APTY02") != null){
                    incomingEnforcer_tDBOutput_7.put("APTY02", APSUPP.APTY02);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APTY03") != null){
                    incomingEnforcer_tDBOutput_7.put("APTY03", APSUPP.APTY03);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("APTY04") != null){
                    incomingEnforcer_tDBOutput_7.put("APTY04", APSUPP.APTY04);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASLST1") != null){
                    incomingEnforcer_tDBOutput_7.put("ASLST1", APSUPP.ASLST1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASLST2") != null){
                    incomingEnforcer_tDBOutput_7.put("ASLST2", APSUPP.ASLST2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("AS1099") != null){
                    incomingEnforcer_tDBOutput_7.put("AS1099", APSUPP.AS1099);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASPCCD") != null){
                    incomingEnforcer_tDBOutput_7.put("ASPCCD", APSUPP.ASPCCD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASOTHN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASOTHN", APSUPP.ASOTHN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASRAYN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASRAYN", APSUPP.ASRAYN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCURC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCURC", APSUPP.ASCURC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTAXC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTAXC", APSUPP.ASTAXC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASSTYN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASSTYN", APSUPP.ASSTYN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTTPC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTTPC", APSUPP.ASTTPC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTTDC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTTDC", APSUPP.ASTTDC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTTPU") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTTPU", APSUPP.ASTTPU);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTTDU") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTTDU", APSUPP.ASTTDU);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTLPC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTLPC", APSUPP.ASTLPC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTLDC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTLDC", APSUPP.ASTLDC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTLPU") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTLPU", APSUPP.ASTLPU);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTLDU") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTLDU", APSUPP.ASTLDU);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASLINM") != null){
                    incomingEnforcer_tDBOutput_7.put("ASLINM", APSUPP.ASLINM);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTTNC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTTNC", APSUPP.ASTTNC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTTND") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTTND", APSUPP.ASTTND);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASGSTR") != null){
                    incomingEnforcer_tDBOutput_7.put("ASGSTR", APSUPP.ASGSTR);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASGSTN") != null){
                    incomingEnforcer_tDBOutput_7.put("ASGSTN", APSUPP.ASGSTN);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASGST1") != null){
                    incomingEnforcer_tDBOutput_7.put("ASGST1", APSUPP.ASGST1);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASGST2") != null){
                    incomingEnforcer_tDBOutput_7.put("ASGST2", APSUPP.ASGST2);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASFRTF") != null){
                    incomingEnforcer_tDBOutput_7.put("ASFRTF", APSUPP.ASFRTF);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASMSCF") != null){
                    incomingEnforcer_tDBOutput_7.put("ASMSCF", APSUPP.ASMSCF);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASALWF") != null){
                    incomingEnforcer_tDBOutput_7.put("ASALWF", APSUPP.ASALWF);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASHSHQ") != null){
                    incomingEnforcer_tDBOutput_7.put("ASHSHQ", APSUPP.ASHSHQ);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASLNOG") != null){
                    incomingEnforcer_tDBOutput_7.put("ASLNOG", APSUPP.ASLNOG);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASLUOE") != null){
                    incomingEnforcer_tDBOutput_7.put("ASLUOE", APSUPP.ASLUOE);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASLSOP") != null){
                    incomingEnforcer_tDBOutput_7.put("ASLSOP", APSUPP.ASLSOP);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASMTCH") != null){
                    incomingEnforcer_tDBOutput_7.put("ASMTCH", APSUPP.ASMTCH);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASCAUT") != null){
                    incomingEnforcer_tDBOutput_7.put("ASCAUT", APSUPP.ASCAUT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASTAXD") != null){
                    incomingEnforcer_tDBOutput_7.put("ASTAXD", APSUPP.ASTAXD);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASALLC") != null){
                    incomingEnforcer_tDBOutput_7.put("ASALLC", APSUPP.ASALLC);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("ASMCHT") != null){
                    incomingEnforcer_tDBOutput_7.put("ASMCHT", APSUPP.ASMCHT);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tDBOutput_7 != null && incomingEnforcer_tDBOutput_7.getRuntimeSchema().getField("LOAD_DATE") != null){
                    incomingEnforcer_tDBOutput_7.put("LOAD_DATE", APSUPP.LOAD_DATE);
                }
        
        org.apache.avro.generic.IndexedRecord data_tDBOutput_7 = null;
        if (incomingEnforcer_tDBOutput_7 != null) {
            data_tDBOutput_7 = incomingEnforcer_tDBOutput_7.getCurrentRecord();
        }
        
        if (writer_tDBOutput_7 != null && data_tDBOutput_7 != null) {
        	writer_tDBOutput_7.write(data_tDBOutput_7);
        }
        
        nb_line_tDBOutput_7++;

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	


 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	


 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "APSUPP"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	


				
            }
            nb_line_tFileInputDelimited_2+=fid_tFileInputDelimited_2.getRowNumber();
		}
		}finally{
            if(!((Object)("/data/talend/data_repository/APSUPP.zip") instanceof java.io.InputStream)){
            	if(fid_tFileInputDelimited_2!=null){
            		fid_tFileInputDelimited_2.close();
            	}
            }
            if(fid_tFileInputDelimited_2!=null){
            	globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
            }
					
						log.info("tFileInputDelimited_2- Retrieved records count: "+ nb_line_tFileInputDelimited_2 + ".");
					
        }
			  

 
                if(log.isDebugEnabled())
            log.debug("tFileInputDelimited_2 - "  + ("Done.") );

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_7 - Written records count in the table 'APSUPP': " + count_APSUPP_tMap_7 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"row10",2,0,
			 			"tFileInputDelimited_2","tFileInputDelimited_1","tFileInputDelimited","tMap_7","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("tMap_7 - "  + ("Done.") );

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	
// end of generic


resourceMap.put("finish_tDBOutput_7", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tDBOutput_7 = null;
    if (writer_tDBOutput_7 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tDBOutput_7 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_7.close();
        resultMap_tDBOutput_7 = writer_tDBOutput_7.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_7), container_tDBOutput_7);
    }
if(resultMap_tDBOutput_7!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_7 : resultMap_tDBOutput_7.entrySet()) {
		switch(entry_tDBOutput_7.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_7.setComponentData("tDBOutput_7", "ERROR_MESSAGE", entry_tDBOutput_7.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_7.setComponentData("tDBOutput_7", "NB_LINE", entry_tDBOutput_7.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_7.setComponentData("tDBOutput_7", "NB_SUCCESS", entry_tDBOutput_7.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_7.setComponentData("tDBOutput_7", "NB_REJECT", entry_tDBOutput_7.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_7 = new StringBuilder();
            for (int i_tDBOutput_7 = 0; i_tDBOutput_7 < entry_tDBOutput_7.getKey().length(); i_tDBOutput_7++) {
                char ch_tDBOutput_7 = entry_tDBOutput_7.getKey().charAt(i_tDBOutput_7);
                if(Character.isUpperCase(ch_tDBOutput_7) && i_tDBOutput_7> 0) {
                	studio_key_tDBOutput_7.append('_');
                }
                studio_key_tDBOutput_7.append(ch_tDBOutput_7);
            }
			container_tDBOutput_7.setComponentData("tDBOutput_7", studio_key_tDBOutput_7.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_7.getValue());
			break;
		}
	}
}

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"APSUPP",2,0,
			 			"tMap_7","tMap_1","tMap","tDBOutput_7","tDBOutput_1","tSnowflakeOutput","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileDelete_1Process(globalMap);



/**
 * [tDBOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";
	
	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	
// finally of generic


if(resourceMap.get("finish_tDBOutput_7")==null){
    if(resourceMap.get("writer_tDBOutput_7")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_7")).close();
		} catch (java.io.IOException e_tDBOutput_7) {
			String errorMessage_tDBOutput_7 = "failed to release the resource in tDBOutput_7 :" + e_tDBOutput_7.getMessage();
			System.err.println(errorMessage_tDBOutput_7);
		}
	}
}
 



/**
 * [tDBOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "tFileDelete_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
		int tos_count_tFileDelete_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFileDelete_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFileDelete_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFileDelete_1 = new StringBuilder();
                    log4jParamters_tFileDelete_1.append("Parameters:");
                            log4jParamters_tFileDelete_1.append("PATH" + " = " + "\"/data/talend/data_repository/APSUPP.zip\"");
                        log4jParamters_tFileDelete_1.append(" | ");
                            log4jParamters_tFileDelete_1.append("FAILON" + " = " + "true");
                        log4jParamters_tFileDelete_1.append(" | ");
                            log4jParamters_tFileDelete_1.append("FOLDER_FILE" + " = " + "true");
                        log4jParamters_tFileDelete_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFileDelete_1 - "  + (log4jParamters_tFileDelete_1) );
                    } 
                } 
            new BytesLimit65535_tFileDelete_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("tFileDelete_1", "tFileDelete_1", "tFileDelete");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

				final StringBuffer log4jSb_tFileDelete_1 = new StringBuffer();
			
class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_1=new java.io.File("/data/talend/data_repository/APSUPP.zip");
	if(path_tFileDelete_1.exists()){
		if(path_tFileDelete_1.isFile()){
	    	if(path_tFileDelete_1.delete()){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
				log.info("tFileDelete_1 - File : "+ path_tFileDelete_1.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("The file " + path_tFileDelete_1.getAbsolutePath() + " can't be deleted.");
	    	}
		}else if(path_tFileDelete_1.isDirectory()){ 
	    	DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
	    	if(dftFileDelete_1.delete(path_tFileDelete_1)){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path deleted.");
				log.info("tFileDelete_1 - Directory : "+ path_tFileDelete_1.getAbsolutePath() + " is deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No path deleted.");
			throw new RuntimeException("The directory " + path_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File or path does not exist or is invalid.");
    		throw new RuntimeException("File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_1_DELETE_PATH","/data/talend/data_repository/APSUPP.zip");
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 
                if(log.isDebugEnabled())
            log.debug("tFileDelete_1 - "  + ("Done.") );

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	

public void talendJobLogProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendJobLog_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		mdcInfo.forEach(org.slf4j.MDC::put);
		org.slf4j.MDC.put("_subJobName", "talendJobLog");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [talendJobLog begin ] start
	 */

	

	
		
		ok_Hash.put("talendJobLog", false);
		start_Hash.put("talendJobLog", System.currentTimeMillis());
		
	
	currentComponent="talendJobLog";
	
	
		int tos_count_talendJobLog = 0;
		

	for (JobStructureCatcherUtils.JobStructureCatcherMessage jcm : talendJobLog.getMessages()) {
		org.talend.job.audit.JobContextBuilder builder_talendJobLog = org.talend.job.audit.JobContextBuilder.create().jobName(jcm.job_name).jobId(jcm.job_id).jobVersion(jcm.job_version)
			.custom("process_id", jcm.pid).custom("thread_id", jcm.tid).custom("pid", pid).custom("father_pid", fatherPid).custom("root_pid", rootPid);
		org.talend.logging.audit.Context log_context_talendJobLog = null;
		
		
		if(jcm.log_type == JobStructureCatcherUtils.LogType.PERFORMANCE){
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.sourceId(jcm.sourceId).sourceLabel(jcm.sourceLabel).sourceConnectorType(jcm.sourceComponentName)
				.targetId(jcm.targetId).targetLabel(jcm.targetLabel).targetConnectorType(jcm.targetComponentName)
				.connectionName(jcm.current_connector).rows(jcm.row_count).duration(duration).build();
			auditLogger_talendJobLog.flowExecution(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBSTART) {
			log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment).build();
			auditLogger_talendJobLog.jobstart(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBEND) {
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
		
			log_context_talendJobLog = builder_talendJobLog
				.timestamp(jcm.moment).duration(duration).status(jcm.status).build();
			auditLogger_talendJobLog.jobstop(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.RUNCOMPONENT) {
			log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment)
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label).build();
			auditLogger_talendJobLog.runcomponent(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.FLOWINPUT) {//log current component input line
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label)
				.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
				.rows(jcm.total_row_number).duration(duration).build();
			auditLogger_talendJobLog.flowInput(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.FLOWOUTPUT) {//log current component output/reject line
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label)
				.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
				.rows(jcm.total_row_number).duration(duration).build();
			auditLogger_talendJobLog.flowOutput(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBERROR) {
			java.lang.Exception e_talendJobLog = jcm.exception;
			if(e_talendJobLog!=null) {
				try(java.io.StringWriter sw_talendJobLog = new java.io.StringWriter();java.io.PrintWriter pw_talendJobLog = new java.io.PrintWriter(sw_talendJobLog)) {
					e_talendJobLog.printStackTrace(pw_talendJobLog);
					builder_talendJobLog.custom("stacktrace", sw_talendJobLog.getBuffer().substring(0,java.lang.Math.min(sw_talendJobLog.getBuffer().length(), 512)));
				}
			}

			if(jcm.extra_info!=null) {
				builder_talendJobLog.connectorId(jcm.component_id).custom("extra_info", jcm.extra_info);
			}
				
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_id.substring(0, jcm.component_id.lastIndexOf('_')))
				.connectorId(jcm.component_id)
				.connectorLabel(jcm.component_label == null ? jcm.component_id : jcm.component_label).build();

			auditLogger_talendJobLog.exception(log_context_talendJobLog);
		}
		
		
		
	}

 



/**
 * [talendJobLog begin ] stop
 */
	
	/**
	 * [talendJobLog main ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 


	tos_count_talendJobLog++;

/**
 * [talendJobLog main ] stop
 */
	
	/**
	 * [talendJobLog process_data_begin ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog process_data_begin ] stop
 */
	
	/**
	 * [talendJobLog process_data_end ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog process_data_end ] stop
 */
	
	/**
	 * [talendJobLog end ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 

ok_Hash.put("talendJobLog", true);
end_Hash.put("talendJobLog", System.currentTimeMillis());




/**
 * [talendJobLog end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendJobLog finally ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendJobLog_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();

    public static void main(String[] args){
        final TTAALLCL1 TTAALLCL1Class = new TTAALLCL1();

        int exitCode = TTAALLCL1Class.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'TTAALLCL1' - Done.");
	        }

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                log.debug("Read jobInfo.properties file fail: " + e.getMessage());
                
            }
        }
		log.info(String.format("Project name: %s\tJob name: %s\tGIT Commit ID: %s\tTalend Version: %s",
				projectName,jobName,jobInfo.getProperty("gitCommitId"), "8.0.1.20230418_1502-patch"));
		
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
			}

	        getjobInfo();
			log.info("TalendJob: 'TTAALLCL1' - Start.");
		

                java.util.Set<Object> jobInfoKeys = jobInfo.keySet();
                for(Object jobInfoKey: jobInfoKeys) {
                    org.slf4j.MDC.put("_" + jobInfoKey.toString(), jobInfo.get(jobInfoKey).toString());
                }
                org.slf4j.MDC.put("_pid", pid);
                org.slf4j.MDC.put("_rootPid", rootPid);
                org.slf4j.MDC.put("_fatherPid", fatherPid);
                org.slf4j.MDC.put("_projectName", projectName);
                org.slf4j.MDC.put("_startTimestamp",java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC ).format( java.time.format.DateTimeFormatter.ISO_INSTANT ));
                org.slf4j.MDC.put("_jobRepositoryId","_DXnV4De4Eeq6DoZ_tDDDfA");
                org.slf4j.MDC.put("_compiledAtTimestamp","2023-06-29T14:22:16.383899900Z");

                java.lang.management.RuntimeMXBean mx = java.lang.management.ManagementFactory.getRuntimeMXBean();
                String[] mxNameTable = mx.getName().split("@"); //$NON-NLS-1$
                if (mxNameTable.length == 2) {
                    org.slf4j.MDC.put("_systemPid", mxNameTable[0]);
                } else {
                    org.slf4j.MDC.put("_systemPid", String.valueOf(java.lang.Thread.currentThread().getId()));
                }

		
		
			if(enableLogStash) {
				java.util.Properties properties_talendJobLog = new java.util.Properties();
				properties_talendJobLog.setProperty("root.logger", "audit");
				properties_talendJobLog.setProperty("encoding", "UTF-8");
				properties_talendJobLog.setProperty("application.name", "Talend Studio");
				properties_talendJobLog.setProperty("service.name", "Talend Studio Job");
				properties_talendJobLog.setProperty("instance.name", "Talend Studio Job Instance");
				properties_talendJobLog.setProperty("propagate.appender.exceptions", "none");
				properties_talendJobLog.setProperty("log.appender", "file");
				properties_talendJobLog.setProperty("appender.file.path", "audit.json");
				properties_talendJobLog.setProperty("appender.file.maxsize", "52428800");
				properties_talendJobLog.setProperty("appender.file.maxbackup", "20");
				properties_talendJobLog.setProperty("host", "false");

				System.getProperties().stringPropertyNames().stream()
					.filter(it -> it.startsWith("audit.logger."))
					.forEach(key -> properties_talendJobLog.setProperty(key.substring("audit.logger.".length()), System.getProperty(key)));

				
				
				
				org.apache.logging.log4j.core.config.Configurator.setLevel(properties_talendJobLog.getProperty("root.logger"), org.apache.logging.log4j.Level.DEBUG);
				
				auditLogger_talendJobLog = org.talend.job.audit.JobEventAuditLoggerFactory.createJobAuditLogger(properties_talendJobLog);
			}
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

            org.slf4j.MDC.put("_pid", pid);

        if (rootPid==null) {
            rootPid = pid;
        }

            org.slf4j.MDC.put("_rootPid", rootPid);

        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }
            org.slf4j.MDC.put("_fatherPid", fatherPid);

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = TTAALLCL1.class.getClassLoader().getResourceAsStream("at_talend_jobs/ttaallcl1_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = TTAALLCL1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("jda_host_name", "id_String");
                        if(context.getStringValue("jda_host_name") == null) {
                            context.jda_host_name = null;
                        } else {
                            context.jda_host_name=(String) context.getProperty("jda_host_name");
                        }
                        context.setContextType("jda_mm_lib", "id_String");
                        if(context.getStringValue("jda_mm_lib") == null) {
                            context.jda_mm_lib = null;
                        } else {
                            context.jda_mm_lib=(String) context.getProperty("jda_mm_lib");
                        }
                        context.setContextType("jda_user_name", "id_String");
                        if(context.getStringValue("jda_user_name") == null) {
                            context.jda_user_name = null;
                        } else {
                            context.jda_user_name=(String) context.getProperty("jda_user_name");
                        }
                        context.setContextType("jda_password", "id_Password");
                        if(context.getStringValue("jda_password") == null) {
                            context.jda_password = null;
                        } else {
                            String pwd_jda_password_value = context.getProperty("jda_password");
                            context.jda_password = null;
                            if(pwd_jda_password_value!=null) {
                                if(context_param.containsKey("jda_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.jda_password = pwd_jda_password_value;
                                } else if (!pwd_jda_password_value.isEmpty()) {
                                    try {
                                        context.jda_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_jda_password_value);
                                        context.put("jda_password",context.jda_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SF_account", "id_String");
                        if(context.getStringValue("SF_account") == null) {
                            context.SF_account = null;
                        } else {
                            context.SF_account=(String) context.getProperty("SF_account");
                        }
                        context.setContextType("SF_prod_database", "id_String");
                        if(context.getStringValue("SF_prod_database") == null) {
                            context.SF_prod_database = null;
                        } else {
                            context.SF_prod_database=(String) context.getProperty("SF_prod_database");
                        }
                        context.setContextType("SF_password", "id_Password");
                        if(context.getStringValue("SF_password") == null) {
                            context.SF_password = null;
                        } else {
                            String pwd_SF_password_value = context.getProperty("SF_password");
                            context.SF_password = null;
                            if(pwd_SF_password_value!=null) {
                                if(context_param.containsKey("SF_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SF_password = pwd_SF_password_value;
                                } else if (!pwd_SF_password_value.isEmpty()) {
                                    try {
                                        context.SF_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SF_password_value);
                                        context.put("SF_password",context.SF_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SF_fin_schema", "id_String");
                        if(context.getStringValue("SF_fin_schema") == null) {
                            context.SF_fin_schema = null;
                        } else {
                            context.SF_fin_schema=(String) context.getProperty("SF_fin_schema");
                        }
                        context.setContextType("SF_user_id", "id_String");
                        if(context.getStringValue("SF_user_id") == null) {
                            context.SF_user_id = null;
                        } else {
                            context.SF_user_id=(String) context.getProperty("SF_user_id");
                        }
                        context.setContextType("SF_warehouse", "id_String");
                        if(context.getStringValue("SF_warehouse") == null) {
                            context.SF_warehouse = null;
                        } else {
                            context.SF_warehouse=(String) context.getProperty("SF_warehouse");
                        }
                        context.setContextType("sql_server_database", "id_String");
                        if(context.getStringValue("sql_server_database") == null) {
                            context.sql_server_database = null;
                        } else {
                            context.sql_server_database=(String) context.getProperty("sql_server_database");
                        }
                        context.setContextType("sql_server_host", "id_String");
                        if(context.getStringValue("sql_server_host") == null) {
                            context.sql_server_host = null;
                        } else {
                            context.sql_server_host=(String) context.getProperty("sql_server_host");
                        }
                        context.setContextType("sql_server_password", "id_Password");
                        if(context.getStringValue("sql_server_password") == null) {
                            context.sql_server_password = null;
                        } else {
                            String pwd_sql_server_password_value = context.getProperty("sql_server_password");
                            context.sql_server_password = null;
                            if(pwd_sql_server_password_value!=null) {
                                if(context_param.containsKey("sql_server_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.sql_server_password = pwd_sql_server_password_value;
                                } else if (!pwd_sql_server_password_value.isEmpty()) {
                                    try {
                                        context.sql_server_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_sql_server_password_value);
                                        context.put("sql_server_password",context.sql_server_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("sql_server_port", "id_String");
                        if(context.getStringValue("sql_server_port") == null) {
                            context.sql_server_port = null;
                        } else {
                            context.sql_server_port=(String) context.getProperty("sql_server_port");
                        }
                        context.setContextType("sql_server_schema", "id_String");
                        if(context.getStringValue("sql_server_schema") == null) {
                            context.sql_server_schema = null;
                        } else {
                            context.sql_server_schema=(String) context.getProperty("sql_server_schema");
                        }
                        context.setContextType("sql_server_user_id", "id_String");
                        if(context.getStringValue("sql_server_user_id") == null) {
                            context.sql_server_user_id = null;
                        } else {
                            context.sql_server_user_id=(String) context.getProperty("sql_server_user_id");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("jda_host_name")) {
                context.jda_host_name = (String) parentContextMap.get("jda_host_name");
            }if (parentContextMap.containsKey("jda_mm_lib")) {
                context.jda_mm_lib = (String) parentContextMap.get("jda_mm_lib");
            }if (parentContextMap.containsKey("jda_user_name")) {
                context.jda_user_name = (String) parentContextMap.get("jda_user_name");
            }if (parentContextMap.containsKey("jda_password")) {
                context.jda_password = (java.lang.String) parentContextMap.get("jda_password");
            }if (parentContextMap.containsKey("SF_account")) {
                context.SF_account = (String) parentContextMap.get("SF_account");
            }if (parentContextMap.containsKey("SF_prod_database")) {
                context.SF_prod_database = (String) parentContextMap.get("SF_prod_database");
            }if (parentContextMap.containsKey("SF_password")) {
                context.SF_password = (java.lang.String) parentContextMap.get("SF_password");
            }if (parentContextMap.containsKey("SF_fin_schema")) {
                context.SF_fin_schema = (String) parentContextMap.get("SF_fin_schema");
            }if (parentContextMap.containsKey("SF_user_id")) {
                context.SF_user_id = (String) parentContextMap.get("SF_user_id");
            }if (parentContextMap.containsKey("SF_warehouse")) {
                context.SF_warehouse = (String) parentContextMap.get("SF_warehouse");
            }if (parentContextMap.containsKey("sql_server_database")) {
                context.sql_server_database = (String) parentContextMap.get("sql_server_database");
            }if (parentContextMap.containsKey("sql_server_host")) {
                context.sql_server_host = (String) parentContextMap.get("sql_server_host");
            }if (parentContextMap.containsKey("sql_server_password")) {
                context.sql_server_password = (java.lang.String) parentContextMap.get("sql_server_password");
            }if (parentContextMap.containsKey("sql_server_port")) {
                context.sql_server_port = (String) parentContextMap.get("sql_server_port");
            }if (parentContextMap.containsKey("sql_server_schema")) {
                context.sql_server_schema = (String) parentContextMap.get("sql_server_schema");
            }if (parentContextMap.containsKey("sql_server_user_id")) {
                context.sql_server_user_id = (String) parentContextMap.get("sql_server_user_id");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("jda_password");
			parametersToEncrypt.add("SF_password");
			parametersToEncrypt.add("sql_server_password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));

            org.slf4j.MDC.put("_context", contextStr);
            log.info("TalendJob: 'TTAALLCL1' - Started.");
            mdcInfo.putAll(org.slf4j.MDC.getCopyOfContextMap());

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



		if(enableLogStash) {
	        talendJobLog.addJobStartMessage();
	        try {
	            talendJobLogProcess(globalMap);
	        } catch (java.lang.Exception e) {
	            e.printStackTrace();
	        }
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                    mdcInfo.forEach(org.slf4j.MDC::put);

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tParallelize_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tParallelize_1) {
globalMap.put("tParallelize_1_SUBPROCESS_STATE", -1);

e_tParallelize_1.printStackTrace();

}catch (java.lang.Error e_tParallelize_1) {
globalMap.put("tParallelize_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tParallelize_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : TTAALLCL1");
        }
		if(enableLogStash) {
	        talendJobLog.addJobEndMessage(startTime, end, status);
	        try {
	            talendJobLogProcess(globalMap);
	        } catch (java.lang.Exception e) {
	            e.printStackTrace();
	        }
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


        org.slf4j.MDC.remove("_subJobName");
        org.slf4j.MDC.remove("_subJobPid");
        org.slf4j.MDC.remove("_systemPid");
        log.info("TalendJob: 'TTAALLCL1' - Finished - status: " + status + " returnCode: " + returnCode );

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();




            connections.put("tDBConnection_1_connection", globalMap.get("tDBConnection_1_connection"));
            connections.put("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES", globalMap.get("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES"));


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1458771 characters generated by Talend Cloud Data Management Platform 
 *     on the June 29, 2023 at 10:22:16 AM EDT
 ************************************************************************************************/